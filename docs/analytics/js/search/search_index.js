var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AgGridModule.html",[0,2.182,1,2.939]],["body/modules/AgGridModule.html",[1,6.146,2,2.595,3,3.353,4,5.229,5,5.229,6,5.229,7,3.395,8,0.013,9,3.152,10,3.152,11,2.654,12,1.75,13,2.595,14,0.144,15,0.144,16,0.144,17,2.833,18,4.724,19,5.994,20,3.842,21,3.842,22,0.291,23,3.842,24,0.818,25,3.663,26,3.079,27,5.173,28,5.173,29,3.395,30,5.994,31,2.858,32,3.797,33,3.842,34,1.637,35,4.518,36,2.818,37,4.518,38,0.916,39,7.132,40,5.994,41,5.173,42,2.005,43,7.132,44,5.994,45,5.994,46,0.506,47,5.229,48,1.637,49,5.229,50,3.079,51,5.994,52,0.164,53,0.009,54,0.011,55,0.011]],["title/interfaces/AggregationData.html",[56,0.109,57,2.566]],["body/interfaces/AggregationData.html",[8,0.013,14,0.083,15,0.185,16,0.083,22,0.24,38,0.529,46,0.536,52,0.191,53,0.005,54,0.009,55,0.008,56,0.188,57,4.435,58,0.632,59,2.068,60,1.242,61,1.199,62,3.924,63,2.552,64,3.604,65,1.854,66,1.45,67,3.011,68,2.732,69,3.355,70,2.439,71,3.455,72,1.159,73,4.614,74,0.156,75,0.279,76,0.848,77,3.771,78,3.455,79,2.125,80,3.421,81,3.162,82,0.769,83,0.334,84,0.747,85,2.458,86,2.915,87,0.7,88,0.548,89,1.329,90,1.387,91,2.174,92,0.977,93,1.552,94,1.188,95,1.199,96,1.398,97,2.33,98,2.329,99,0.749,100,0.816,101,0.677,102,2.068,103,1.56,104,1.697,105,2.068,106,1.777,107,1.854,108,2.51,109,2.192,110,1.39,111,2.695,112,2.814,113,2.151,114,2.676,115,1.96,116,0.834,117,0.733,118,0.7,119,2.068,120,2.337,121,2.986,122,2.24,123,2.337,124,1.498,125,3.355,126,1.96,127,2.439,128,1.387,129,3.355,130,2.243,131,2.516,132,2.676,133,1.815,134,1.96,135,1.498,136,2.337,137,3.474,138,2.51,139,2.51,140,1.356,141,2.864,142,2.014,143,0.977,144,0.337,145,3.131,146,2.163,147,2.329,148,1.878,149,0.597,150,2.052,151,1.627,152,2.51,153,1.864,154,2.51,155,1.969,156,0.931,157,0.78,158,1.441,159,0.914,160,2.192,161,2.51,162,2.452,163,0.763,164,0.793,165,3.147,166,1.312,167,1.441,168,1.864,169,1.441,170,1.45,171,1.447,172,2.732,173,2.337,174,2.51,175,1.699,176,3.455,177,1.991,178,2.192,179,2.192,180,2.337,181,1.455,182,1.158,183,2.51,184,0.472,185,0.529,186,1.608,187,1.789,188,1.627,189,1.441,190,2.337,191,1.455,192,2.24,193,2.114,194,5.353,195,2.814,196,0.855,197,1.627,198,2.51,199,2.51,200,0.907,201,2.51,202,2.51,203,1.699,204,1.699,205,1.699,206,4.216,207,2.51,208,3.292,209,3.604,210,2.51,211,1.387,212,2.51,213,2.51,214,2.51,215,2.51,216,2.51,217,2.51,218,2.51,219,2.068,220,1.242,221,2.51,222,1.56,223,1.864,224,1.336,225,2.51,226,2.51,227,2.51,228,2.985,229,2.192,230,2.068,231,1.815,232,2.51,233,2.51,234,1.96,235,1.96,236,2.51,237,2.51,238,1.96,239,2.51,240,2.51,241,2.51,242,2.51,243,2.335,244,0.945,245,1.96,246,2.51,247,3.355,248,3.924,249,2.337,250,1.627,251,2.51,252,2.068,253,2.51,254,1.066,255,3.604,256,1.864,257,2.51,258,3.604,259,1.96,260,2.51,261,2.337,262,1.56,263,2.51,264,2.51,265,1.199,266,1.96,267,1.777,268,1.535,269,2.51,270,2.51,271,1.441,272,2.51,273,2.51,274,2.51,275,2.51,276,2.51,277,2.51,278,2.51,279,1.066,280,2.676,281,2.51,282,2.51,283,2.51,284,2.51,285,0.491,286,2.51,287,2.814,288,2.51,289,1.441,290,1.96,291,1.081,292,2.337,293,2.068,294,1.336,295,1.336,296,1.96,297,1.158,298,1.498,299,1.56,300,1.96,301,1.96,302,2.51,303,4.607,304,3.262,305,2.516,306,2.51,307,4.216,308,1.01,309,2.014,310,1.505,311,0.884,312,1.96,313,3.118,314,1.081,315,3.604,316,2.864,317,4.607,318,3.604,319,2.151,320,1.606,321,2.439,322,3.604,323,3.604,324,3.604,325,3.604,326,3.604,327,3.604,328,1.544,329,2.151,330,1.864,331,1.158,332,2.51,333,1.199,334,1.96,335,2.986,336,1.556,337,2.363,338,1.724,339,4.607,340,4.607,341,3.682,342,1.613,343,2.51,344,2.363,345,2.51,346,3.604,347,3.355,348,2.51,349,3.302,350,3.604,351,2.51,352,3.604,353,0.945,354,1.081,355,1.56,356,2.51,357,1.864,358,1.158,359,1.699,360,2.192,361,2.51,362,2.51,363,1.081,364,2.51,365,4.216,366,2.51,367,2.51,368,2.51,369,2.51,370,2.51,371,2.51,372,3.604,373,2.51,374,2.51,375,2.51]],["title/interfaces/AggregationEdge.html",[56,0.109,109,2.566]],["body/interfaces/AggregationEdge.html",[8,0.013,14,0.084,15,0.186,16,0.084,22,0.241,38,0.535,46,0.539,52,0.192,53,0.005,54,0.009,55,0.008,56,0.195,57,4.047,58,0.64,59,2.095,60,1.258,61,1.214,62,3.385,63,1.8,64,2.542,65,1.463,66,1.023,67,2.987,68,2.357,69,2.367,70,1.721,71,3.282,72,1.068,73,4.571,74,0.158,75,0.281,77,3.153,78,2.575,79,1.172,80,1.888,81,2.357,82,0.607,83,0.328,84,0.689,85,2.478,86,3.222,87,0.709,88,0.555,89,1.33,90,1.418,91,2.185,92,0.989,93,1.566,94,1.199,95,1.214,96,1.401,97,2.342,98,2.345,99,0.758,100,0.823,101,0.685,102,2.087,103,1.58,104,1.709,105,2.437,106,2.575,107,1.973,108,3.637,109,3.176,110,1.527,111,2.708,112,2.84,113,2.171,114,2.701,115,1.985,116,0.838,117,0.738,118,0.709,119,2.095,120,2.367,121,3.003,122,2.26,123,2.367,124,1.517,125,3.385,126,1.985,127,2.461,128,1.404,129,3.385,130,2.259,131,2.534,132,2.701,133,1.828,134,1.985,135,1.517,136,2.367,137,3.499,138,2.542,139,2.542,140,1.369,141,2.88,142,2.02,143,0.989,144,0.34,145,3.153,146,2.178,147,2.345,148,1.892,149,0.6,150,2.058,151,1.647,152,2.542,153,1.888,154,2.542,155,1.977,156,0.934,157,0.784,158,1.459,159,0.926,160,2.22,161,2.542,162,2.466,163,0.768,164,0.799,165,3.176,166,1.324,167,1.459,168,1.888,169,1.459,170,1.463,171,1.45,172,2.752,173,2.367,174,2.542,175,1.721,176,3.472,177,2.009,178,2.22,179,2.22,180,2.367,181,1.462,182,1.172,183,2.542,184,0.478,185,0.535,186,1.616,187,1.796,188,1.647,189,1.459,190,2.367,191,1.462,192,2.26,193,2.123,194,5.371,195,2.84,196,0.866,197,1.647,198,2.542,199,2.542,200,0.909,201,2.542,202,2.542,203,1.721,204,1.721,205,1.721,206,4.246,207,2.542,208,3.316,209,3.637,210,2.542,211,1.404,212,2.542,213,2.542,214,2.542,215,2.542,216,2.542,217,2.542,218,2.542,219,2.095,220,1.258,221,2.542,222,1.58,223,1.888,224,1.353,225,2.542,226,2.542,227,2.542,228,3.007,229,2.22,230,2.087,231,1.828,232,2.542,233,2.542,234,1.985,235,1.985,236,2.542,237,2.542,238,1.985,239,2.542,240,2.542,241,2.542,242,2.542,243,2.357,244,0.957,245,1.985,246,2.542,247,3.385,248,3.953,249,2.367,250,1.647,251,2.542,252,2.095,253,2.542,254,1.071,255,3.637,256,1.888,257,2.542,258,3.637,259,1.985,260,2.542,261,2.367,262,1.58,263,2.542,264,2.542,265,1.214,266,1.985,267,1.8,268,1.546,269,2.542,270,2.542,271,1.459,272,2.542,273,2.542,274,2.542,275,2.542,276,2.542,277,2.542,278,2.542,279,1.071,280,2.701,281,2.542,282,2.542,283,2.542,284,2.542,285,0.497,286,2.542,287,2.84,288,2.542,289,1.459,290,1.985,291,1.095,292,2.367,293,2.095,294,1.353,295,1.353,296,1.985,297,1.172,298,1.517,299,1.58,300,1.985,301,1.985,302,2.542,303,4.634,304,3.282,305,2.534,306,2.542,307,4.246,308,1.023,309,2.028,310,1.512,311,0.895,312,1.985,313,3.136,314,1.095,315,3.637,316,2.88,317,4.634,318,3.637,319,2.171,320,1.62,321,2.461,322,3.637,323,3.637,324,3.637,325,3.637,326,3.637,327,3.637,328,1.549,329,2.171,330,1.888,331,1.172,332,2.542,333,1.214,334,1.985,335,3.003,336,1.563,337,2.377,338,1.731,339,4.634,340,4.634,341,3.708,342,1.62,343,2.542,344,2.377,345,2.542,346,3.637,347,3.385,348,2.542,349,3.318,350,3.637,351,2.542,352,3.637,353,0.957,354,1.095,355,1.58,356,2.542,357,1.888,358,1.172,359,1.721,360,2.22,361,2.542,362,2.542,363,1.095,364,2.542,365,4.246,366,2.542,367,2.542,368,2.542,369,2.542,370,2.542,371,2.542,372,3.637,373,2.542,374,2.542,375,2.542]],["title/interfaces/AggregationEdgeType.html",[56,0.109,73,2.421]],["body/interfaces/AggregationEdgeType.html",[8,0.013,14,0.082,15,0.185,16,0.082,22,0.239,38,0.525,46,0.534,52,0.191,53,0.005,54,0.009,55,0.008,56,0.193,57,4.011,58,0.627,59,2.054,60,1.234,61,1.191,62,3.338,63,1.765,64,2.493,65,1.443,66,1.003,67,2.976,68,2.324,69,2.321,70,1.687,71,3.783,72,1.225,73,4.608,74,0.155,75,0.278,76,0.767,77,3.119,78,2.539,79,1.15,80,1.851,81,2.324,82,0.599,83,0.332,84,0.709,85,2.473,86,2.908,87,0.695,88,0.545,89,1.328,90,1.386,91,2.326,92,0.97,93,1.544,94,1.182,95,1.191,96,1.396,97,2.324,98,2.32,99,0.744,100,0.812,101,0.672,102,2.058,103,1.55,104,1.69,105,2.41,106,1.765,107,1.958,108,2.493,109,2.177,110,1.514,111,2.688,112,2.801,113,2.141,114,2.663,115,1.947,116,0.831,117,0.799,118,0.695,119,2.054,120,2.321,121,3.154,122,2.61,123,2.321,124,1.488,125,3.338,126,1.947,127,2.427,128,1.377,129,4.276,130,2.235,131,2.507,132,2.663,133,1.808,134,1.947,135,1.488,136,2.321,137,3.785,138,2.493,139,3.586,140,1.729,141,3.024,142,2.057,143,1.396,144,0.393,145,3.411,146,2.356,147,2.537,148,2.046,149,0.62,150,2.127,151,2.324,152,3.586,153,2.663,154,3.586,155,1.965,156,0.929,157,0.778,158,1.431,159,0.908,160,3.132,161,3.586,162,2.778,163,0.831,164,0.953,165,3.668,166,1.772,167,1.431,168,1.851,169,1.431,170,1.443,171,1.446,172,2.722,173,2.321,174,2.493,175,1.687,176,3.446,177,1.981,178,2.177,179,2.177,180,2.321,181,1.451,182,1.15,183,2.493,184,0.469,185,0.525,186,1.604,187,1.785,188,1.616,189,1.431,190,2.321,191,1.451,192,2.229,193,2.109,194,5.343,195,2.801,196,0.85,197,1.616,198,2.493,199,2.493,200,0.907,201,2.493,202,2.493,203,1.687,204,1.687,205,1.687,206,4.2,207,2.493,208,3.28,209,3.586,210,2.493,211,1.377,212,2.493,213,2.493,214,2.493,215,2.493,216,2.493,217,2.493,218,2.493,219,2.054,220,1.234,221,2.493,222,1.55,223,1.851,224,1.327,225,2.493,226,2.493,227,2.493,228,2.974,229,2.177,230,2.058,231,1.808,232,2.493,233,2.493,234,1.947,235,1.947,236,2.493,237,2.493,238,1.947,239,2.493,240,2.493,241,2.493,242,2.493,243,2.324,244,0.938,245,1.947,246,2.493,247,3.338,248,3.91,249,2.321,250,1.616,251,2.493,252,2.054,253,2.493,254,1.063,255,3.586,256,1.851,257,2.493,258,3.586,259,1.947,260,2.493,261,2.321,262,1.55,263,2.493,264,2.493,265,1.191,266,1.947,267,1.765,268,1.529,269,2.493,270,2.493,271,1.431,272,2.493,273,2.493,274,2.493,275,2.493,276,2.493,277,2.493,278,2.493,279,1.063,280,2.663,281,2.493,282,2.493,283,2.493,284,2.493,285,0.487,286,2.493,287,2.801,288,2.493,289,1.431,290,1.947,291,1.073,292,2.321,293,2.054,294,1.327,295,1.327,296,1.947,297,1.15,298,1.488,299,1.55,300,1.947,301,1.947,302,2.493,303,4.593,304,3.252,305,2.507,306,2.493,307,4.2,308,1.003,309,2.006,310,1.501,311,0.878,312,1.947,313,3.108,314,1.073,315,3.586,316,2.855,317,4.593,318,3.586,319,2.141,320,1.598,321,2.427,322,3.586,323,3.586,324,3.586,325,3.586,326,3.586,327,3.586,328,1.541,329,2.141,330,1.851,331,1.15,332,2.493,333,1.191,334,1.947,335,2.976,336,1.552,337,2.356,338,1.721,339,4.593,340,4.593,341,3.668,342,1.61,343,2.493,344,2.356,345,2.493,346,3.586,347,3.338,348,2.493,349,3.293,350,3.586,351,2.493,352,3.586,353,0.938,354,1.073,355,1.55,356,2.493,357,1.851,358,1.15,359,1.687,360,2.177,361,2.493,362,2.493,363,1.073,364,2.493,365,4.2,366,2.493,367,2.493,368,2.493,369,2.493,370,2.493,371,2.493,372,3.586,373,2.493,374,2.493,375,2.493]],["title/classes/AggregationProvider.html",[53,0.006,178,2.566]],["body/classes/AggregationProvider.html",[8,0.013,12,0.859,14,0.071,15,0.185,16,0.071,22,0.226,38,0.45,46,0.558,52,0.181,53,0.004,54,0.008,55,0.007,56,0.178,57,3.723,59,3.513,60,1.056,61,2.181,62,2.979,63,1.512,64,2.135,65,1.288,66,0.859,67,2.877,68,2.074,69,1.987,70,1.445,71,3.234,72,1.073,73,4.607,74,0.132,75,0.248,76,0.873,77,2.85,78,2.266,79,1.476,80,1.585,81,2.074,82,0.534,83,0.342,84,0.703,85,2.465,86,2.935,87,0.595,88,0.466,89,1.339,90,1.437,91,2.035,92,1.659,93,1.966,94,1.265,95,1.02,96,1.428,97,2.497,98,2.12,99,0.637,100,0.725,101,0.575,102,3.333,103,1.989,104,2.058,105,1.837,106,1.512,107,1.929,108,2.135,109,1.865,110,1.405,111,2.523,112,2.499,113,1.91,114,2.376,115,1.667,116,0.826,117,0.865,118,0.892,119,1.759,120,1.987,121,3.107,122,1.989,123,1.987,124,2.291,125,2.979,126,1.667,127,2.166,128,1.179,129,2.979,130,2.269,131,2.545,132,2.376,133,1.836,134,1.667,135,1.274,136,1.987,137,3.513,138,2.135,139,2.135,140,1.205,141,2.98,142,2.053,143,0.831,144,0.523,145,2.85,146,1.969,147,2.12,148,1.9,149,0.608,150,2.084,151,1.384,152,2.135,153,1.585,154,2.135,155,2.035,156,0.926,157,0.737,158,1.225,159,1.165,160,1.865,161,2.135,162,2.551,163,0.946,164,0.722,165,2.795,166,1.165,167,1.225,168,1.585,169,1.225,170,1.288,171,1.407,172,2.487,173,1.987,174,2.135,175,2.166,176,3.395,177,2.355,178,2.795,179,2.795,180,2.979,181,1.483,182,2.412,183,3.838,184,0.602,185,1.187,186,1.505,187,1.689,188,2.487,189,1.225,190,1.987,191,1.483,192,2.386,193,2.25,194,5.407,195,2.499,196,0.727,197,1.384,198,2.135,199,2.135,200,0.888,201,2.135,202,2.135,203,1.445,204,1.445,205,1.445,206,3.838,207,2.135,208,2.997,209,3.2,210,2.135,211,1.179,212,2.135,213,2.135,214,2.135,215,2.135,216,2.135,217,2.135,218,2.135,219,1.759,220,1.056,221,2.135,222,1.327,223,1.585,224,1.136,225,2.135,226,2.135,227,2.135,228,3.019,229,1.865,230,2.203,231,1.966,232,2.135,233,2.135,234,1.667,235,1.667,236,2.135,237,2.135,238,1.667,239,2.135,240,2.135,241,2.135,242,2.135,243,2.074,244,1.205,245,2.499,246,3.2,247,3.573,248,4.251,249,2.979,250,2.074,251,3.2,252,2.637,253,3.2,254,1.047,255,3.838,256,2.376,257,3.2,258,3.2,259,1.667,260,2.135,261,1.987,262,1.327,263,2.135,264,2.135,265,1.02,266,1.667,267,1.512,268,1.663,269,2.135,270,2.135,271,1.225,272,2.135,273,2.135,274,2.135,275,2.135,276,2.135,277,2.135,278,2.135,279,0.998,280,2.376,281,2.135,282,2.135,283,2.135,284,2.135,285,0.417,286,2.135,287,2.499,288,2.135,289,1.225,290,1.667,291,0.919,292,2.979,293,2.637,294,1.703,295,1.703,296,1.667,297,1.966,298,1.274,299,1.327,300,1.667,301,1.667,302,2.135,303,4.264,304,3.019,305,2.291,306,2.135,307,3.838,308,0.859,309,2.29,310,1.689,311,1.127,312,2.499,313,3.245,314,1.378,315,3.2,316,2.65,317,4.264,318,3.2,319,1.91,320,1.426,321,2.166,322,3.2,323,3.2,324,3.2,325,3.2,326,3.2,327,3.2,328,1.58,329,2.545,330,2.376,331,1.476,332,3.2,333,2.036,334,1.667,335,2.763,336,1.456,337,2.187,338,1.639,339,4.264,340,4.264,341,3.352,342,1.533,343,2.135,344,2.187,345,2.135,346,3.2,347,2.979,348,2.135,349,3.091,350,3.2,351,2.135,352,3.2,353,1.205,354,1.378,355,1.327,356,2.135,357,1.585,358,0.985,359,1.445,360,1.865,361,2.135,362,2.135,363,0.919,364,2.135,365,3.838,366,2.135,367,2.135,368,2.135,369,2.135,370,2.135,371,2.135,372,3.2,373,2.135,374,2.135,375,2.135,376,1.512,377,2.637,378,1.378,379,2.637,380,2.637,381,1.055,382,4.411,383,2.499,384,2.499,385,2.499,386,2.291,387,2.166,388,1.224,389,2.499,390,2.499,391,1.759,392,1.852,393,4.411,394,1.904,395,2.85,396,4.992,397,2.943,398,1.225,399,1.865,400,1.759,401,1.865,402,1.865,403,1.865,404,1.865,405,1.865,406,2.943,407,0.94,408,1.386,409,2.943,410,2.943,411,2.943,412,2.943,413,1.274,414,1.865,415,1.759,416,0.777,417,1.759,418,1.245,419,1.512,420,1.225,421,1.274,422,0.752,423,1.274,424,1.327,425,0.727,426,1.865,427,1.095,428,1.274,429,2.943,430,1.987,431,1.274,432,1.865,433,1.274,434,1.865]],["title/classes/AsyncRecordsProvider.html",[53,0.006,435,3.193]],["body/classes/AsyncRecordsProvider.html",[8,0.013,12,1.334,14,0.11,15,0.11,16,0.11,22,0.23,52,0.125,53,0.007,54,0.009,55,0.009,56,0.123,60,1.64,61,2.573,72,0.834,74,0.205,75,0.338,76,0.967,79,1.529,83,0.343,84,0.691,89,1.302,90,1.407,92,1.899,93,2.32,94,1.093,95,1.583,96,1.407,97,2.915,99,0.989,100,0.751,102,3.476,103,2.06,104,2.086,105,2.505,110,1.439,116,0.79,117,0.848,118,0.924,119,2.732,121,2.828,124,3.095,127,2.954,130,1.764,140,1.643,142,1.776,144,0.558,148,1.944,149,0.597,150,2.082,156,0.848,159,1.207,163,0.938,165,3.811,167,2.976,171,0.834,177,2.411,181,1.302,182,2.551,184,0.821,185,1.279,186,1.776,187,1.826,188,3.36,189,1.903,192,2.713,193,2.302,224,1.764,243,2.148,285,0.648,291,1.427,295,2.322,296,2.589,297,2.391,304,2.347,310,1.662,311,1.168,314,1.427,328,1.259,331,1.529,333,2.33,353,1.248,354,1.427,376,2.347,377,3.596,378,1.879,379,3.596,380,3.596,381,1.439,383,3.408,384,3.408,385,3.408,386,2.912,387,2.954,388,1.556,389,3.408,390,3.408,391,2.732,392,1.941,394,2.108,395,2.462,396,5.289,399,2.895,400,2.732,401,2.895,402,2.895,403,2.895,404,2.895,405,2.895,407,1.024,408,1.573,413,1.979,414,2.895,415,2.732,416,1.207,417,2.732,418,1.698,419,2.347,420,1.903,421,1.979,422,1.168,423,1.979,424,2.713,425,1.13,426,2.895,427,1.7,428,1.979,430,3.086,431,1.979,432,2.895,433,1.979,434,2.895,435,4.742,436,5.867,437,2.933,438,6.016,439,2.713,440,3.09,441,1.879,442,1.495,443,3.033,444,6.016,445,2.936,446,3.095,447,4.528,448,4.57,449,4.57,450,4.57,451,7.148,452,4.049,453,2.505,454,6.016,455,3.986,456,3.241,457,2.411,458,3.811,459,2.239,460,1.392,461,3.602,462,2.148,463,2.895,464,3.811,465,1.816,466,2.895,467,2.828,468,1.529,469,1.7,470,1.7,471,2.895,472,2.347,473,3.086,474,3.086,475,3.086,476,2.148,477,1.764,478,2.462,479,2.239,480,3.086,481,3.086,482,1.831,483,3.602,484,1.979,485,2.589,486,3.986,487,4.57,488,3.315,489,4.57]],["title/classes/BaseProvider.html",[53,0.006,102,1.687]],["body/classes/BaseProvider.html",[8,0.013,12,1.844,14,0.082,15,0.082,16,0.082,22,0.216,38,0.522,46,0.416,52,0.094,53,0.005,54,0.008,55,0.008,56,0.155,60,1.228,61,2,62,3.326,65,1.438,72,0.899,74,0.154,75,0.355,76,0.908,77,3.11,79,2.333,83,0.337,84,0.737,89,1.338,90,1.477,91,1.866,92,1.969,93,2.178,94,1.38,95,1.185,96,1.492,98,2.313,100,0.562,101,0.669,102,2.051,103,3.316,104,2.352,111,1.974,116,0.965,117,0.998,118,1.488,124,2.133,133,1.538,142,1.525,143,2.076,144,0.528,148,1.592,149,0.637,150,1.962,156,0.959,157,0.835,159,1.301,163,1.075,166,2.009,170,1.685,171,1.471,181,1.066,182,2.545,184,0.672,185,1.251,187,1.782,193,1.907,196,0.845,200,0.867,244,1.576,250,2.316,254,1.001,262,1.542,268,1.525,280,3.607,285,0.698,291,2.178,292,2.309,295,1.901,296,3.271,297,2.404,298,1.481,305,2.133,310,1.646,314,1.538,328,1.322,333,2.189,335,2.714,336,1.549,337,2.737,338,1.877,341,4.241,342,1.498,344,1.833,347,4.709,353,0.934,354,1.538,358,2.507,359,2.418,376,1.757,377,3.451,378,1.803,379,3.451,380,3.451,381,1.51,383,2.79,384,2.79,385,2.79,386,2.735,387,2.418,388,1.461,389,2.79,390,2.79,391,2.044,392,1.872,394,1.943,400,3.776,407,0.982,408,1.411,413,2.133,415,4.168,416,1.768,417,3.451,418,2.147,419,2.53,420,2.051,421,2.133,422,1.259,423,2.133,424,2.221,425,1.561,427,2.351,428,2.133,431,2.133,433,2.133,442,1.401,445,2.351,455,2.983,457,1.974,462,2.316,468,1.648,490,7.091,491,5.036,492,4.926,493,3.658,494,1.178,495,4.926,496,3.42,497,3.42,498,3.42,499,3.42,500,3.42,501,3.42,502,3.42,503,3.42,504,3.42,505,3.42,506,3.42,507,3.42,508,3.42,509,3.42,510,3.42,511,0.692,512,4.926,513,4.582,514,4.926,515,4.926,516,3.42,517,2.983,518,2.696,519,4.926,520,4.926,521,3.42,522,1.757,523,3.42,524,3.42,525,2.53,526,2.021,527,1.679,528,3.42,529,3.42,530,3.42,531,3.42,532,3.42,533,3.42,534,3.42,535,3.42,536,3.42,537,2.79,538,3.185,539,6.973,540,4.297,541,1.685,542,4.926,543,1.648,544,4.926,545,2.316,546,3.42,547,1.937,548,3.42,549,3.883,550,3.42,551,3.42,552,3.42,553,3.42,554,3.883,555,2.53,556,4.926,557,3.42,558,4.297,559,5.51,560,1.842,561,3.42,562,1.842,563,2.481,564,3.326,565,3.42,566,3.42,567,3.42,568,3.42,569,4.926,570,3.42,571,3.42,572,3.42,573,3.42,574,2.983,575,3.42,576,1.937,577,3.42,578,3.42,579,2.044,580,1.424,581,3.42,582,1.481,583,4.926,584,3.42,585,3.42,586,3.42,587,3.42,588,4.926,589,3.42,590,3.42,591,3.42,592,3.42,593,3.42,594,3.42,595,3.42,596,4.926,597,3.42,598,3.42,599,3.42,600,5.773,601,3.42,602,4.926,603,4.926,604,4.926,605,3.42,606,3.42,607,3.42,608,3.42,609,3.42,610,4.926,611,3.42,612,4.926,613,3.42,614,3.42,615,3.42,616,4.926,617,3.42,618,3.42,619,3.42]],["title/components/BsEdgeInfoCard.html",[620,0.574,621,1.623]],["body/components/BsEdgeInfoCard.html",[7,1.926,8,0.013,9,1.855,10,1.855,14,0.201,15,0.115,16,0.115,17,1.788,22,0.213,24,0.656,31,1.926,46,0.406,48,2.061,52,0.131,53,0.007,54,0.011,55,0.01,66,1.403,74,0.216,75,0.349,76,0.582,82,0.914,83,0.32,89,1.316,90,1.443,94,1.487,95,1.665,116,0.816,144,0.495,156,0.606,157,0.536,159,1.642,162,1.855,196,1.188,200,0.536,279,1.263,285,0.977,328,1.005,342,1.391,344,2.314,359,3.052,363,1.501,381,1.487,392,1.82,394,1.269,407,0.784,408,0.972,442,1.442,494,1.487,558,6.012,559,6.012,620,0.977,621,2.92,622,2.692,623,1.788,624,2.227,625,1.788,626,2.167,627,6.956,628,3.486,629,1.703,630,1.787,631,1.901,632,5.475,633,2.388,634,5.432,635,2.474,636,2.227,637,2.415,638,5.432,639,5.432,640,5.432,641,6.094,642,2.153,643,4.12,644,5,645,4.654,646,3.904,647,5.432,648,1.588,649,4.901,650,3.904,651,4.654,652,5.423,653,3.034,654,2.588,655,4.806,656,4.901,657,4.806,658,4.192,659,4.806,660,4.806,661,4.192,662,4.806,663,1.391,664,3.788,665,3.788,666,4.806,667,4.806,668,4.806,669,4.806,670,3.486,671,3.788,672,2.001,673,2.167,674,2.359,675,3.245,676,3.788,677,3.788,678,3.788,679,4.901,680,3.486,681,1.926,682,3.788,683,2.722,684,1.725,685,3.788,686,1.075,687,3.486,688,6.357,689,5.784,690,3.522,691,6.217,692,4.806,693,6.217,694,4.806,695,4.806,696,5.423,697,5.423,698,3.522,699,2.803,700,2.08,701,2.314,702,1.855,703,2.712,704,2.259,705,4.806,706,4.806,707,4.806,708,2.923,709,2.923,710,1.788,711,2.259,712,2.001,713,2.923,714,1.608,715,3.426,716,1.855,717,1.855,718,2.001,719,2.001,720,1.788,721,1.788,722,2.259,723,2.259,724,1.855,725,2.314,726,3.426,727,2.259,728,1.926,729,2.081,730,1.855,731,2.259,732,1.926,733,2.588,734,2.259,735,1.926,736,1.926,737,1.788,738,1.926,739,1.926,740,1.926,741,2.259,742,1.788,743,1.926,744,1.926,745,1.855,746,1.312,747,2.001,748,2.001,749,2.259,750,1.855,751,2.259,752,1.855,753,2.167,754,2.259]],["title/components/BsFacetDate.html",[620,0.574,710,1.507]],["body/components/BsFacetDate.html",[7,1.289,8,0.013,9,1.241,10,1.241,14,0.134,15,0.077,16,0.077,17,1.197,22,0.266,24,0.439,29,1.822,31,1.289,38,0.491,42,1.076,46,0.398,48,2.12,52,0.152,53,0.005,54,0.011,55,0.007,56,0.127,65,1.375,66,0.939,74,0.145,75,0.264,76,0.827,82,0.962,83,0.342,84,0.729,85,2.303,86,3.072,87,0.651,88,0.509,89,0.509,90,0.567,96,1.243,97,1.931,98,2.618,99,0.696,100,0.774,101,0.629,107,1.792,110,1.333,116,1.035,117,0.995,118,0.953,126,2.668,144,0.522,149,0.418,155,1.926,156,1.002,157,0.761,163,1.028,164,1.06,166,0.849,184,0.643,185,1.127,186,0.769,187,1.848,196,0.795,200,0.836,203,1.579,204,1.579,205,1.579,224,1.241,254,0.746,268,1.244,279,0.883,285,0.79,289,2.321,328,1.367,331,1.076,336,0.744,338,0.769,342,0.719,378,1.004,381,1.126,388,1.289,392,1.928,394,1.803,407,0.89,408,1.381,416,0.849,422,1.204,425,1.615,460,1.09,470,1.197,494,1.126,511,0.651,541,0.939,580,2.72,620,0.79,621,1.289,622,2.04,623,1.197,624,1.039,625,1.197,626,1.45,629,1.378,630,1.73,631,1.831,633,2.126,635,2.345,636,2.111,648,1.204,653,1.961,654,1.961,663,1.752,686,0.719,689,3.417,699,2.124,700,1.576,701,1.753,702,1.241,703,2.284,704,1.512,708,2.214,709,2.214,710,2.284,711,1.512,712,1.339,713,2.214,714,1.576,715,2.885,716,1.241,717,1.241,718,1.339,719,1.339,720,1.197,721,1.197,722,1.512,723,1.512,724,1.241,725,1.753,726,2.885,727,1.512,728,1.289,729,1.392,730,1.241,731,1.512,732,1.289,733,1.961,734,1.512,735,1.289,736,1.289,737,1.197,738,1.289,739,1.289,740,1.289,741,1.512,742,1.197,743,1.289,744,1.289,745,1.241,746,1.864,747,1.339,748,1.339,749,1.512,750,1.241,751,1.512,752,1.241,753,1.45,754,1.512,755,4.498,756,2.333,757,2.321,758,3.764,759,2.737,760,3.284,761,1.691,762,4.394,763,3.713,764,3.071,765,4.394,766,4.394,767,3.888,768,2.45,769,2.863,770,4.711,771,3.713,772,2.284,773,2.885,774,4.711,775,4.711,776,4.838,777,4.838,778,4.838,779,5.149,780,4.838,781,4.838,782,3.152,783,4.838,784,4.838,785,4.838,786,2.984,787,2.805,788,2.956,789,4.044,790,4.452,791,2.624,792,2.359,793,5.559,794,2.443,795,3.071,796,4.711,797,2.668,798,3.216,799,3.216,800,3.216,801,3.216,802,3.216,803,3.216,804,3.216,805,3.216,806,3.216,807,3.216,808,3.216,809,3.713,810,3.216,811,2.555,812,2.885,813,2.124,814,2.816,815,3.216,816,3.713,817,3.216,818,3.713,819,1.984,820,3.216,821,2.984,822,3.216,823,1.375,824,1.917,825,3.216,826,1.865,827,3.216,828,3.216,829,3.713,830,3.216,831,3.713,832,3.216,833,3.905,834,3.216,835,3.216,836,4.452,837,3.216,838,4.044,839,3.216,840,3.216,841,3.216,842,2.321,843,3.216,844,3.216,845,2.535,846,3.216,847,2.333,848,3.713,849,1.114,850,2.535,851,1.732,852,1.732,853,1.818,854,2.535,855,1.004,856,2.313,857,2.172,858,2.535,859,2.535,860,1.339,861,2.172,862,4.394,863,2.333,864,2.535,865,2.037,866,1.154,867,1.922,868,1.392,869,2.535,870,2.535,871,1.339,872,2.535,873,1.241,874,1.339,875,1.289,876,2.535,877,3.713,878,3.713,879,3.713,880,2.535,881,2.535,882,2.333,883,2.333,884,2.535,885,2.668,886,3.713,887,2.535,888,2.535,889,3.713,890,2.535,891,3.713,892,2.535,893,2.535,894,2.535,895,1.652,896,2.535,897,3.713,898,2.535,899,2.535,900,2.535,901,2.535,902,2.535,903,1.732,904,2.737,905,2.535,906,2.535,907,2.535,908,2.535,909,2.037,910,2.535,911,2.535,912,2.037,913,2.535,914,2.535,915,2.535,916,2.535,917,3.713,918,2.333,919,1.792,920,2.535,921,2.333,922,2.535,923,2.535,924,2.535,925,2.535,926,1.922,927,3.332,928,1.922,929,2.535,930,2.535,931,2.535,932,3.158,933,1.652,934,1.922,935,2.333,936,1.512,937,1.922,938,2.333,939,2.535,940,2.535,941,1.922,942,2.535,943,1.922,944,1.922,945,2.535,946,2.535,947,1.579,948,0.878,949,1.579,950,2.535,951,2.535,952,2.535,953,2.535,954,2.535,955,2.535,956,2.535,957,2.535,958,1.197,959,2.535,960,2.535,961,2.333,962,2.535,963,2.535,964,2.535,965,2.535,966,2.535,967,1.45,968,2.535,969,4.711,970,4.711,971,3.216,972,5.574,973,3.216,974,2.535,975,3.216,976,4.711,977,2.535,978,2.037,979,2.805,980,2.172,981,4.109,982,3.216,983,3.216,984,2.172,985,3.216]],["title/components/BsHeatmapComponent.html",[620,0.574,716,1.564]],["body/components/BsHeatmapComponent.html",[7,1.286,8,0.013,9,1.238,10,1.238,14,0.133,15,0.077,16,0.077,17,1.194,22,0.241,24,0.438,31,1.286,32,2.979,46,0.633,48,1.782,52,0.152,53,0.005,54,0.009,55,0.007,56,0.086,66,0.937,72,0.858,74,0.144,75,0.264,76,0.791,82,0.876,83,0.343,84,0.656,89,0.508,90,0.566,107,1.625,116,0.857,117,1.001,136,2.166,140,1.284,144,0.49,149,0.544,151,2.211,155,1.674,160,2.979,163,1.027,164,1.089,166,1.47,171,1.016,184,0.642,191,0.694,196,0.793,200,0.857,230,1.336,244,0.876,254,0.745,268,1.619,279,0.971,289,1.336,308,0.937,309,2.261,331,1.073,344,2.429,353,0.876,381,1.124,392,1.939,394,1.98,395,1.728,407,0.912,408,1.426,422,1.201,452,1.817,460,0.742,470,1.194,484,1.389,485,2.664,494,1.124,541,1.625,543,1.862,562,1.728,580,2.717,620,0.789,621,1.286,622,2.036,623,2.072,624,1.037,625,1.194,626,1.446,629,1.376,630,1.73,631,1.841,633,2.124,635,1.998,636,1.981,637,1.915,642,1.739,646,1.817,648,1.201,653,2.934,654,1.958,663,1.736,672,1.336,684,1.688,686,1.052,699,2.943,700,1.862,701,1.75,702,1.238,703,2.281,704,1.508,708,2.211,709,2.211,710,1.194,711,1.508,712,1.336,713,2.211,714,1.073,715,2.882,716,2.366,717,1.238,718,1.336,719,2.84,720,1.194,721,1.194,722,1.508,723,1.508,724,1.238,725,1.75,726,2.882,727,1.508,728,1.286,729,1.389,730,1.238,731,1.508,732,1.286,733,1.958,734,1.508,735,1.286,736,1.286,737,1.194,738,1.286,739,1.286,740,1.286,741,1.508,742,1.194,743,1.286,744,1.286,745,1.238,746,0.876,747,1.336,748,1.336,749,1.508,750,1.238,751,1.508,752,1.238,753,1.446,754,1.508,761,1.688,768,1.152,811,2.552,813,3.075,819,1.981,826,1.573,904,2.309,919,0.937,948,1.284,978,4.321,979,2.799,984,3.176,986,2.327,987,3.328,988,4.856,989,4.102,990,4.856,991,3.664,992,3.664,993,4.856,994,3.348,995,3.328,996,4.703,997,4.246,998,3.328,999,4.246,1000,3.328,1001,5.693,1002,5.567,1003,3.901,1004,4.703,1005,4.703,1006,3.759,1007,4.703,1008,4.856,1009,5.348,1010,3.328,1011,4.856,1012,2.51,1013,5.693,1014,5.693,1015,2.318,1016,6.147,1017,3.176,1018,4.856,1019,4.856,1020,3.208,1021,3.259,1022,4.703,1023,2.664,1024,3.208,1025,3.411,1026,3.208,1027,4.832,1028,3.208,1029,5.438,1030,3.208,1031,2.811,1032,3.01,1033,3.208,1034,3.208,1035,2.456,1036,2.211,1037,3.208,1038,3.208,1039,3.208,1040,2.456,1041,1.815,1042,3.208,1043,2.533,1044,3.208,1045,3.208,1046,2.343,1047,3.208,1048,3.208,1049,4.102,1050,3.208,1051,3.154,1052,4.856,1053,3.328,1054,2.552,1055,4.102,1056,5.348,1057,4.102,1058,3.972,1059,2.533,1060,3.572,1061,2.664,1062,4.102,1063,4.102,1064,4.856,1065,3.208,1066,3.208,1067,3.208,1068,3.707,1069,3.208,1070,3.208,1071,2.429,1072,2.811,1073,3.208,1074,3.208,1075,5.348,1076,3.208,1077,4.102,1078,3.527,1079,3.208,1080,4.102,1081,3.176,1082,2.036,1083,4.102,1084,3.208,1085,3.208,1086,3.176,1087,3.208,1088,3.208,1089,3.208,1090,3.208,1091,3.208,1092,3.208,1093,3.208,1094,3.208,1095,3.208,1096,2.032,1097,3.208,1098,4.832,1099,3.208,1100,3.664,1101,3.208,1102,3.208,1103,3.208,1104,1.998,1105,2.211,1106,1.918,1107,2.799,1108,4.388,1109,4.102,1110,2.281,1111,3.707,1112,3.707,1113,3.707,1114,3.707,1115,3.707,1116,2.327,1117,1.648,1118,1.336,1119,2.327,1120,2.799,1121,2.799,1122,1.728,1123,2.799,1124,1.508,1125,2.309,1126,1.575,1127,2.036,1128,1.918,1129,1.918,1130,2.84,1131,2.166,1132,2.529,1133,2.799,1134,4.102,1135,4.102,1136,2.799,1137,2.799,1138,2.799,1139,2.799,1140,2.799,1141,2.799,1142,2.799,1143,2.799,1144,2.799,1145,1.918,1146,2.799,1147,2.811,1148,3.328,1149,1.918,1150,1.918,1151,1.918,1152,2.799,1153,1.918,1154,2.811,1155,1.918,1156,2.799,1157,2.799,1158,2.799,1159,1.575,1160,1.728,1161,1.918,1162,2.799,1163,2.166,1164,1.817,1165,1.817,1166,1.918,1167,1.918,1168,1.918,1169,1.918,1170,1.918,1171,2.799,1172,2.032,1173,1.817,1174,2.799,1175,2.799,1176,2.799,1177,2.799,1178,3.176,1179,2.799,1180,2.799,1181,2.799,1182,2.799,1183,2.799,1184,2.799,1185,2.799,1186,2.416,1187,2.799,1188,2.799,1189,2.166,1190,2.529,1191,2.166,1192,2.799,1193,3.176,1194,2.032,1195,4.102,1196,4.102,1197,2.211,1198,4.102,1199,2.799,1200,2.799,1201,2.799,1202,2.799,1203,1.918,1204,1.286,1205,2.664,1206,1.728,1207,1.817,1208,2.811,1209,2.811,1210,2.811,1211,1.918,1212,1.918,1213,1.918,1214,2.799,1215,1.817,1216,1.918,1217,2.799,1218,2.799,1219,4.856,1220,4.102,1221,4.102,1222,2.799,1223,2.529,1224,2.799,1225,2.799,1226,2.799,1227,2.799,1228,4.703,1229,4.703,1230,4.703,1231,6.13,1232,4.703,1233,4.703,1234,4.703,1235,4.703,1236,4.703,1237,4.703,1238,4.703,1239,2.533,1240,3.208,1241,2.529,1242,2.799,1243,3.208,1244,4.856,1245,4.856,1246,3.208,1247,1.575,1248,3.208,1249,3.208,1250,3.208,1251,3.208,1252,3.208,1253,3.208,1254,4.703,1255,4.856,1256,4.703,1257,3.208,1258,3.208,1259,3.208,1260,3.208,1261,3.208,1262,2.327,1263,4.703,1264,2.036,1265,3.707,1266,3.208,1267,1.918,1268,1.918]],["title/modules/BsHeatmapModule.html",[0,2.182,1269,2.939]],["body/modules/BsHeatmapModule.html",[2,2.626,3,3.376,8,0.013,11,2.672,12,1.77,13,2.626,14,0.145,15,0.145,16,0.145,20,3.869,21,3.869,22,0.288,23,3.869,24,0.828,25,3.689,26,3.115,27,5.21,28,5.21,29,3.436,33,3.869,34,1.656,37,4.55,38,0.926,48,1.656,50,3.689,52,0.166,53,0.009,54,0.012,55,0.011,681,2.43,712,3.532,716,3.275,718,3.532,719,2.525,721,3.046,1117,3.115,1269,6.199,1270,5.29,1271,5.29,1272,5.29,1273,5.29,1274,6.065,1275,4.85,1276,2.341,1277,7.182]],["title/components/BsNodeInfoCard.html",[620,0.574,717,1.564]],["body/components/BsNodeInfoCard.html",[7,1.824,8,0.013,9,1.757,10,1.757,14,0.199,15,0.109,16,0.109,17,1.694,22,0.205,24,0.621,31,1.824,46,0.506,48,2.025,52,0.164,53,0.007,54,0.01,55,0.009,56,0.122,66,1.329,74,0.205,75,0.337,76,0.551,82,0.899,83,0.33,84,0.424,89,1.348,90,1.058,94,1.435,95,1.577,116,0.881,118,0.921,142,1.585,144,0.503,156,0.574,157,0.748,159,1.585,162,1.757,164,0.819,166,2.082,196,1.125,200,0.795,220,1.634,244,1.243,279,1.276,285,0.952,289,1.895,299,2.052,328,0.952,342,1.343,344,2.233,353,1.243,358,1.523,363,1.422,381,1.435,392,1.796,394,1.202,398,1.895,407,0.757,408,0.921,442,1.405,460,1.053,477,1.757,494,1.435,526,1.374,620,0.952,621,1.824,622,2.598,623,1.694,624,2.17,625,1.694,626,2.052,628,3.302,629,1.659,630,1.78,631,1.893,632,5.381,633,2.326,634,5.292,635,2.41,636,2.17,637,2.379,638,5.292,639,5.292,640,5.292,641,6.004,642,2.097,643,4.013,644,4.87,645,4.533,646,3.803,647,5.292,648,1.533,649,4.73,650,3.803,651,4.533,652,5.235,653,2.971,654,2.498,656,4.73,658,3.971,661,3.971,663,1.343,664,3.588,665,3.588,670,3.302,671,3.588,672,1.895,673,2.052,674,2.235,675,3.074,676,3.588,677,3.588,678,3.588,679,4.73,680,3.302,681,1.824,682,3.588,683,2.579,684,1.634,685,3.588,686,1.018,687,3.302,688,5.235,689,5.177,696,5.235,697,5.235,699,2.706,700,2.008,701,2.233,702,1.757,703,2.656,704,2.14,708,2.821,709,2.821,710,1.694,711,2.14,712,1.895,713,2.821,714,1.523,715,3.355,716,1.757,717,2.755,718,1.895,719,1.895,720,1.694,721,1.694,722,2.14,723,2.14,724,1.757,725,2.233,726,3.355,727,2.14,728,1.824,729,1.971,730,1.757,731,2.14,732,1.824,733,2.498,734,2.14,735,1.824,736,1.824,737,1.694,738,1.824,739,1.824,740,1.824,741,2.14,742,1.694,743,1.824,744,1.824,745,1.757,746,1.243,747,1.895,748,1.895,749,2.14,750,1.757,751,2.14,752,1.757,753,2.052,754,2.14,1278,6.213,1279,4.521,1280,5.718,1281,4.552,1282,4.552,1283,4.552,1284,4.552,1285,4.552,1286,3.971,1287,3.971,1288,3.971,1289,3.971,1290,3.971,1291,3.971,1292,3.971,1293,3.616,1294,5.856,1295,3.233,1296,2.452,1297,3.971,1298,3.971,1299,3.302,1300,3.971,1301,3.971,1302,3.971,1303,3.588,1304,3.971,1305,3.971,1306,3.302,1307,3.971,1308,3.971,1309,2.579,1310,3.971,1311,3.971,1312,3.302,1313,3.971,1314,3.971,1315,3.971,1316,3.971,1317,3.971,1318,3.971,1319,6.001,1320,4.552,1321,6.001,1322,6.001,1323,4.552]],["title/modules/BsTimelineModule.html",[0,2.182,1324,2.939]],["body/modules/BsTimelineModule.html",[2,2.541,3,3.311,8,0.013,11,2.621,12,1.713,13,2.541,14,0.141,15,0.141,16,0.141,20,3.794,21,3.794,22,0.292,23,3.794,24,0.801,25,3.618,26,3.015,27,5.109,28,5.109,29,3.325,33,3.794,34,1.603,35,4.462,36,2.759,37,4.462,38,0.897,41,5.109,42,1.964,48,1.923,50,3.618,52,0.161,53,0.009,54,0.011,55,0.011,710,3.145,714,2.827,720,3.145,721,3.024,745,3.262,746,1.603,760,2.444,847,4.258,856,3.458,1117,3.015,1275,4.756,1276,2.266,1324,6.213,1325,5.12,1326,5.12,1327,5.12,1328,5.869,1329,5.869,1330,3.963,1331,7.043,1332,6.144,1333,5.12]],["title/components/BsTooltipComponent.html",[620,0.574,721,1.507]],["body/components/BsTooltipComponent.html",[7,1.991,8,0.013,9,1.918,10,1.918,14,0.168,15,0.119,16,0.119,17,1.849,22,0.24,24,0.678,25,3.263,26,2.552,31,1.991,46,0.419,48,2.082,50,2.552,52,0.136,53,0.008,54,0.011,55,0.01,66,1.45,74,0.332,75,0.357,83,0.289,89,0.787,90,0.876,116,0.652,117,0.627,144,0.475,163,0.652,211,2.806,392,1.62,580,3.247,620,0.993,621,1.991,622,2.75,623,2.838,624,2.263,625,1.849,626,2.24,630,1.791,631,1.927,632,5.079,633,2.426,635,2.513,636,2.263,637,2.187,642,2.187,643,4.944,654,2.645,663,1.566,699,2.864,700,2.125,701,2.364,702,1.918,703,2.746,704,2.336,708,2.986,709,2.986,710,1.849,711,2.336,712,2.069,713,2.986,714,1.662,715,3.469,716,1.918,717,1.918,718,2.069,719,2.069,720,1.849,721,2.746,722,2.336,723,2.336,724,1.918,725,2.364,726,3.469,727,2.336,728,1.991,729,2.152,730,1.918,731,2.336,732,1.991,733,2.645,734,2.336,735,1.991,736,1.991,737,1.849,738,1.991,739,1.991,740,1.991,741,2.336,742,1.849,743,1.991,744,1.991,745,1.918,746,1.357,747,2.069,748,2.069,749,2.336,750,1.918,751,2.336,752,1.918,753,2.24,754,2.336,994,3.437,997,3.966,999,3.966,1015,2.915,1035,2.806,1040,2.806,1041,1.918,1086,3.355,1125,3.437,1130,3.247,1204,2.806,1239,3.772,1334,4.334,1335,6.352,1336,6.352,1337,5.079,1338,7.002,1339,6.148,1340,5.519,1341,7.002,1342,3.966,1343,7.002,1344,5.079,1345,7.002,1346,5.079,1347,7.002,1348,7.002,1349,7.8,1350,8.441,1351,7.8,1352,7.002,1353,7.379,1354,4.969,1355,4.969,1356,4.185,1357,5.007,1358,4.969,1359,4.969,1360,2.97,1361,4.969,1362,4.969]],["title/interfaces/Category.html",[56,0.109,1363,2.939]],["body/interfaces/Category.html",[8,0.013,14,0.08,15,0.08,16,0.08,22,0.259,24,0.454,32,4.198,34,0.909,36,1.566,38,0.509,42,1.114,46,0.646,48,1.704,52,0.156,53,0.005,54,0.01,55,0.007,56,0.09,58,0.608,63,2.922,65,1.411,72,1.038,74,0.15,75,0.271,76,0.938,81,2.674,82,0.947,83,0.308,84,0.769,85,2.173,86,2.968,87,0.674,88,0.528,89,0.528,96,1.257,97,1.154,99,0.721,100,0.794,101,0.651,107,1.411,110,1.36,116,1.005,117,0.954,118,0.978,130,1.286,140,1.32,144,0.328,146,1.798,149,0.554,150,1.32,151,1.566,155,2.151,156,0.899,157,0.854,158,1.387,163,0.437,164,0.851,171,1.139,181,0.721,182,1.903,184,0.659,185,1.089,186,1.156,200,0.863,219,2.889,220,1.735,244,1.32,254,0.766,267,2.483,268,1.276,285,0.98,289,2.012,297,1.114,310,1.273,320,1.076,328,1.446,331,1.114,336,0.77,338,0.796,342,0.745,344,1.239,353,0.909,358,2.59,388,1.118,407,0.787,408,0.674,420,1.387,422,1.235,453,2.012,458,4.198,460,1.316,485,1.887,493,2.11,494,0.796,511,0.674,525,2.483,538,1.442,574,2.906,580,3.224,582,1.442,620,1.055,625,1.239,626,1.502,629,1.195,630,0.697,631,0.745,637,1.04,642,1.04,646,1.887,648,0.851,651,2.249,663,1.813,670,2.416,673,1.502,686,1.273,701,1.798,728,2.279,729,2.093,736,1.335,737,2.117,738,2.857,739,2.857,757,2.012,761,1.196,771,4.483,772,1.239,788,2.463,794,1.971,819,2.017,821,2.11,823,0.972,824,1.509,853,2.196,863,4.126,868,1.442,871,1.387,873,1.286,874,1.387,875,1.335,904,1.635,912,2.11,919,2.236,935,2.416,936,1.566,948,0.909,958,1.798,977,3.809,1015,1.387,1021,2.179,1023,1.887,1035,1.335,1046,2.042,1051,1.887,1054,2.968,1071,1.239,1072,1.991,1082,2.093,1104,2.042,1118,2.759,1124,2.674,1130,1.387,1173,2.738,1186,3.205,1207,1.887,1268,1.991,1276,1.286,1312,2.416,1363,5.878,1364,2.625,1365,2.416,1366,2.249,1367,6.911,1368,6.24,1369,6.24,1370,6.24,1371,3.506,1372,4.833,1373,2.117,1374,6.24,1375,3.603,1376,4.833,1377,2.674,1378,3.809,1379,2.906,1380,2.416,1381,3.403,1382,5.443,1383,4.962,1384,2.906,1385,1.635,1386,2.906,1387,2.906,1388,2.906,1389,2.906,1390,2.249,1391,2.906,1392,2.11,1393,2.416,1394,6.24,1395,6.24,1396,6.24,1397,6.24,1398,6.24,1399,3.331,1400,2.483,1401,4.833,1402,3.331,1403,2.906,1404,6.626,1405,3.331,1406,4.962,1407,3.222,1408,5.688,1409,4.833,1410,2.249,1411,3.331,1412,3.331,1413,3.331,1414,4.126,1415,3.331,1416,3.506,1417,1.594,1418,4.833,1419,2.625,1420,2.625,1421,4.483,1422,2.625,1423,3.331,1424,2.11,1425,2.625,1426,2.625,1427,3.331,1428,6.24,1429,4.216,1430,3.331,1431,3.331,1432,4.919,1433,3.331,1434,2.906,1435,3.331,1436,3.331,1437,1.887,1438,4.216,1439,3.331,1440,3.331,1441,3.506,1442,3.331,1443,4.833,1444,4.833,1445,4.216,1446,2.906,1447,3.331,1448,5.688,1449,2.463,1450,1.006,1451,3.331,1452,3.331,1453,3.331,1454,3.331,1455,3.809,1456,3.331,1457,3.331,1458,2.625,1459,2.625,1460,2.625,1461,1.566,1462,2.11,1463,2.11,1464,3.331,1465,4.833,1466,1.154,1467,1.502,1468,1.566,1469,1.566,1470,2.625,1471,2.11,1472,3.331,1473,3.841,1474,2.625,1475,1.991,1476,2.11,1477,2.625,1478,1.335,1479,2.625,1480,2.625,1481,4.483,1482,2.625,1483,2.625,1484,1.635,1485,2.625,1486,3.331,1487,3.331,1488,2.906,1489,3.331,1490,3.331,1491,3.331,1492,3.331,1493,3.331,1494,3.331,1495,3.331,1496,3.331,1497,3.331,1498,4.126,1499,2.249,1500,3.331,1501,4.833,1502,3.331,1503,5.443,1504,3.331,1505,4.833,1506,2.416,1507,1.991,1508,2.11,1509,3.331,1510,3.331,1511,3.331,1512,3.331,1513,2.249,1514,3.331,1515,3.331,1516,2.625,1517,5.688,1518,3.331,1519,3.331,1520,3.331,1521,3.331,1522,2.11,1523,3.331,1524,3.331,1525,3.506,1526,3.331,1527,1.887,1528,3.331,1529,3.331,1530,3.331,1531,3.331,1532,6.911,1533,2.625,1534,2.625,1535,3.331,1536,3.331,1537,3.331,1538,4.483,1539,3.331,1540,3.331,1541,3.809,1542,4.833,1543,3.331,1544,3.331,1545,3.062,1546,2.906,1547,3.331,1548,3.331,1549,3.331,1550,3.331,1551,3.331,1552,3.331,1553,3.331,1554,3.331,1555,3.331,1556,3.331,1557,3.331,1558,3.331,1559,2.416,1560,3.809,1561,2.416,1562,5.688,1563,3.331,1564,3.331,1565,3.331,1566,2.625,1567,2.625,1568,3.331,1569,2.249,1570,3.331,1571,2.625,1572,4.962,1573,3.331,1574,1.387,1575,3.331,1576,5.688,1577,4.216,1578,5.013,1579,4.833,1580,3.331,1581,3.331,1582,3.331,1583,4.962,1584,4.833,1585,4.833,1586,4.833,1587,4.833,1588,3.331,1589,2.625,1590,2.625,1591,1.991,1592,2.625,1593,2.249,1594,2.625,1595,3.331,1596,1.887,1597,3.331,1598,2.625,1599,2.625,1600,1.991,1601,2.625,1602,2.625,1603,2.625,1604,2.625,1605,2.625,1606,1.991,1607,2.625,1608,1.711]],["title/interfaces/ChartDataPoint.html",[56,0.109,1609,2.421]],["body/interfaces/ChartDataPoint.html",[8,0.013,14,0.134,15,0.134,16,0.134,22,0.275,24,0.76,34,1.521,36,2.618,46,0.47,52,0.202,53,0.009,54,0.01,55,0.01,56,0.183,58,1.017,74,0.25,75,0.383,82,0.675,83,0.326,84,0.775,100,0.915,101,1.089,116,0.895,117,1.025,143,1.572,144,0.522,149,0.494,157,0.879,163,0.895,164,1.006,184,0.76,187,1.423,196,1.377,285,0.967,388,1.578,408,1.127,468,1.864,494,1.332,511,1.127,580,2.841,620,0.967,629,1.686,630,1.165,631,1.246,648,1.423,663,1.65,725,2.745,742,2.073,759,3.35,761,1.999,772,2.073,773,2.618,823,1.626,824,2.131,853,2.634,919,1.992,1010,4.078,1021,3.076,1046,2.648,1054,2.841,1104,1.999,1105,2.618,1124,3.207,1267,3.33,1371,4.949,1373,2.745,1375,4.673,1392,3.529,1393,4.041,1417,1.423,1449,2.412,1462,3.529,1471,3.529,1476,3.529,1498,4.041,1506,4.041,1609,4.595,1610,4.041,1611,5.378,1612,5.814,1613,5.378,1614,3.761,1615,4.078,1616,4.078,1617,4.39,1618,3.761,1619,4.39,1620,4.39,1621,4.39,1622,3.194,1623,2.735,1624,4.39,1625,4.39,1626,4.39,1627,4.39,1628,3.155,1629,4.39,1630,4.39,1631,4.178,1632,4.39,1633,5.378,1634,3.761,1635,4.39,1636,3.761,1637,4.39,1638,4.39,1639,4.39,1640,2.539,1641,4.39,1642,4.39,1643,2.861,1644,3.761,1645,4.39,1646,4.39,1647,4.39,1648,3.33,1649,4.39,1650,4.39,1651,4.39,1652,2.735,1653,4.39,1654,4.39,1655,5.378,1656,4.39,1657,4.39,1658,3.33,1659,4.39]],["title/interfaces/ChartOptions.html",[56,0.109,1616,2.421]],["body/interfaces/ChartOptions.html",[8,0.013,14,0.132,15,0.132,16,0.132,22,0.274,24,0.75,34,1.5,36,2.583,46,0.464,52,0.201,53,0.008,54,0.01,55,0.01,56,0.182,58,1.003,72,1.397,74,0.247,75,0.38,76,0.969,82,0.666,83,0.343,84,0.78,100,0.903,101,1.075,116,0.888,117,0.965,143,1.551,144,0.373,149,0.487,157,0.876,163,0.888,164,0.75,184,0.75,187,1.404,196,1.358,285,0.959,388,1.565,408,1.112,468,1.839,494,1.314,511,1.112,580,2.817,620,0.959,629,1.672,630,1.15,631,1.229,648,1.404,663,1.64,725,2.728,742,2.045,759,3.322,761,1.973,772,2.045,773,2.583,823,1.604,824,2.113,853,2.612,919,1.975,1010,4.697,1021,3.051,1046,2.632,1054,2.817,1104,1.973,1105,2.583,1124,3.181,1267,3.285,1371,4.909,1373,2.728,1375,4.645,1392,3.481,1393,3.986,1417,1.404,1449,2.379,1462,3.481,1471,3.481,1476,3.481,1498,3.986,1506,3.986,1609,4.383,1610,3.986,1611,5.334,1612,5.779,1613,5.334,1614,3.711,1615,4.045,1616,4.383,1617,6.031,1618,5.167,1619,4.332,1620,4.332,1621,4.332,1622,3.175,1623,2.698,1624,4.332,1625,4.332,1626,4.332,1627,4.332,1628,3.113,1629,4.332,1630,4.332,1631,4.153,1632,4.332,1633,5.334,1634,3.711,1635,4.332,1636,3.711,1637,4.332,1638,4.332,1639,4.332,1640,2.518,1641,4.332,1642,4.332,1643,2.823,1644,3.711,1645,4.332,1646,4.332,1647,4.332,1648,3.285,1649,4.332,1650,4.332,1651,4.332,1652,2.698,1653,4.332,1654,4.332,1655,5.334,1656,4.332,1657,4.332,1658,3.285,1659,4.332]],["title/interfaces/Column.html",[56,0.109,1660,2.421]],["body/interfaces/Column.html",[7,1.085,8,0.013,9,1.045,10,1.598,12,0.79,14,0.065,15,0.065,16,0.099,17,2.944,18,2.134,22,0.268,24,0.369,31,3.344,34,0.739,36,1.273,38,0.414,42,0.906,46,0.617,47,2.361,48,1.373,49,2.361,52,0.138,53,0.004,54,0.011,55,0.006,56,0.073,58,0.494,65,1.772,72,1.216,74,0.122,75,0.232,76,0.609,83,0.171,84,0.669,87,0.548,88,0.429,96,1.419,97,2.6,99,0.586,100,0.68,101,0.529,110,0.99,116,1.005,117,0.634,118,1.424,119,2.475,133,0.845,144,0.184,146,1.007,147,1.085,149,0.591,153,1.458,156,0.906,157,0.785,163,0.543,164,0.369,165,1.715,167,2.527,170,1.468,171,1.168,177,1.085,181,0.586,184,0.369,185,1.076,186,0.647,191,1.313,196,1.392,200,0.845,231,2.08,244,1.876,249,1.828,268,0.715,271,2.345,279,0.429,285,0.713,309,2.307,320,0.875,328,1.178,330,1.458,336,1.48,337,2.258,338,1.871,341,4.461,342,1.358,344,2.556,353,1.538,360,1.715,363,0.845,378,1.57,388,0.958,407,0.71,416,0.715,418,1.169,422,0.692,425,1.392,439,1.22,441,1.293,442,0.566,459,1.007,465,1.932,472,2.127,486,2.361,491,2.361,493,3.186,494,0.647,511,0.548,513,3.004,517,2.361,522,2.127,526,1.25,540,3.612,543,0.906,549,4.439,560,1.458,582,1.172,620,0.587,622,1.172,629,1.023,630,0.566,631,0.606,637,1.896,642,1.293,648,0.692,663,1.787,681,1.085,684,0.972,686,1.125,700,0.906,759,2.033,760,1.127,761,0.972,768,2.179,772,1.007,773,1.273,788,2.177,792,1.682,794,1.742,819,2.069,823,0.79,824,1.293,826,1.385,849,0.938,853,1.941,860,1.724,867,1.618,868,1.793,873,2.174,875,2.257,918,1.964,938,1.964,947,2.033,980,1.828,1015,2.773,1035,1.085,1041,1.598,1051,1.533,1068,2.134,1071,2.382,1118,1.127,1130,1.127,1204,1.085,1276,1.045,1312,4.983,1342,2.848,1373,1.871,1375,3.186,1377,2.364,1403,2.361,1417,1.058,1424,1.715,1434,5.294,1437,1.533,1438,2.361,1449,1.172,1450,1.25,1455,5.415,1466,1.742,1467,2.539,1488,2.361,1503,4.386,1507,3.006,1545,1.715,1546,2.361,1583,4.386,1640,2.674,1644,1.828,1652,1.329,1660,4.827,1661,2.361,1662,6.069,1663,5.294,1664,2.361,1665,3.612,1666,2.361,1667,1.715,1668,4.086,1669,5.028,1670,2.361,1671,2.707,1672,4.141,1673,4.141,1674,5.028,1675,4.141,1676,4.141,1677,4.141,1678,4.141,1679,4.141,1680,5.028,1681,5.028,1682,4.141,1683,4.141,1684,4.141,1685,4.141,1686,4.141,1687,2.134,1688,4.141,1689,2.707,1690,2.134,1691,2.707,1692,2.707,1693,1.458,1694,1.867,1695,4.913,1696,5.632,1697,1.329,1698,2.707,1699,2.707,1700,2.707,1701,2.707,1702,2.707,1703,4.141,1704,4.141,1705,4.141,1706,4.141,1707,4.141,1708,5.81,1709,5.028,1710,2.707,1711,3.269,1712,2.707,1713,2.707,1714,1.172,1715,2.707,1716,5.632,1717,2.707,1718,2.707,1719,5.028,1720,2.707,1721,5.028,1722,1.828,1723,1.828,1724,2.707,1725,1.329,1726,4.141,1727,2.707,1728,4.141,1729,3.803,1730,4.141,1731,2.707,1732,2.707,1733,3.004,1734,2.707,1735,2.707,1736,2.707,1737,3.963,1738,5.842,1739,3.19,1740,2.707,1741,2.707,1742,1.618,1743,2.707,1744,4.141,1745,2.707,1746,2.707,1747,2.707,1748,3.004,1749,2.707,1750,4.141,1751,4.141,1752,4.141,1753,4.141,1754,2.134,1755,2.361,1756,2.707,1757,2.707,1758,2.707,1759,2.134,1760,2.707,1761,2.707,1762,2.707,1763,4.141,1764,3.612,1765,2.361,1766,4.141,1767,2.707,1768,1.828,1769,2.707,1770,2.707,1771,2.707,1772,2.707,1773,4.141,1774,2.707,1775,2.707,1776,1.533,1777,2.361,1778,4.141,1779,2.707,1780,5.81,1781,2.707,1782,2.707,1783,2.707,1784,2.707,1785,2.707,1786,2.707,1787,1.715,1788,2.707,1789,4.141,1790,2.623,1791,2.707,1792,4.141,1793,2.707,1794,2.707,1795,2.707,1796,2.707,1797,5.028,1798,2.707,1799,2.707,1800,2.707,1801,2.707,1802,4.141,1803,2.707,1804,5.632,1805,2.707,1806,2.707,1807,6.66,1808,4.141,1809,4.141,1810,2.707,1811,2.707,1812,4.141,1813,2.707,1814,5.028,1815,5.583,1816,5.028,1817,4.141,1818,4.141,1819,4.141,1820,2.707,1821,2.707,1822,2.707,1823,2.707,1824,6.069,1825,4.141,1826,2.707,1827,2.707,1828,2.707,1829,2.707,1830,4.141,1831,2.707,1832,2.707,1833,1.828,1834,2.707,1835,4.141,1836,2.707,1837,2.707,1838,2.707,1839,2.707,1840,2.707,1841,4.386,1842,2.707,1843,2.707,1844,5.028,1845,2.707,1846,2.707,1847,4.141,1848,4.141,1849,2.707,1850,2.707,1851,4.141,1852,4.141,1853,2.707,1854,2.707,1855,2.707,1856,2.707,1857,4.141,1858,2.707,1859,2.707,1860,2.134,1861,2.707,1862,4.141,1863,2.707,1864,2.707,1865,2.093,1866,2.707,1867,2.707,1868,2.707,1869,4.141,1870,2.361,1871,2.707,1872,2.707,1873,2.707,1874,2.707,1875,2.707,1876,2.707,1877,2.707,1878,2.707,1879,2.707,1880,2.707,1881,5.632,1882,2.707,1883,2.707,1884,2.707,1885,2.707,1886,2.707,1887,2.707,1888,2.707,1889,2.707,1890,2.707,1891,2.707,1892,6.4,1893,2.707,1894,6.069,1895,3.612,1896,2.707,1897,2.707,1898,2.707,1899,1.533,1900,2.707,1901,2.707,1902,2.707,1903,2.707,1904,3.612,1905,2.707,1906,2.707,1907,2.707,1908,4.141,1909,2.707,1910,2.707,1911,2.707,1912,2.361,1913,2.707,1914,2.707,1915,2.134,1916,4.913,1917,2.707,1918,2.707,1919,2.707,1920,3.845,1921,2.707,1922,2.361,1923,2.707,1924,2.707,1925,5.028,1926,4.141,1927,2.707,1928,2.707,1929,2.134,1930,2.707,1931,2.707,1932,2.707,1933,2.707,1934,2.707,1935,2.707,1936,2.707,1937,2.707,1938,1.828,1939,2.707,1940,4.141,1941,2.707,1942,2.707,1943,2.707,1944,2.707,1945,2.707,1946,2.707,1947,1.39,1948,2.707,1949,4.141,1950,4.141,1951,2.707,1952,2.707,1953,5.028,1954,2.707,1955,2.707,1956,2.361,1957,2.707,1958,2.707,1959,4.141,1960,3.612,1961,2.707,1962,2.707,1963,2.361,1964,2.707,1965,4.141,1966,2.707,1967,2.707,1968,2.707,1969,2.707,1970,2.707,1971,2.707,1972,2.361,1973,2.707,1974,2.707,1975,2.707,1976,2.707,1977,2.707,1978,2.707,1979,1.715,1980,2.707,1981,2.707,1982,2.707,1983,2.707,1984,2.707,1985,2.707,1986,2.707,1987,2.707,1988,2.707,1989,1.715,1990,2.707,1991,4.141,1992,2.707,1993,2.707,1994,2.707,1995,2.707,1996,2.707,1997,2.707,1998,2.707,1999,2.707,2000,2.707,2001,2.707,2002,2.707,2003,2.707,2004,2.707,2005,2.707,2006,2.707,2007,2.707,2008,2.707,2009,4.141,2010,2.707,2011,2.707,2012,2.707,2013,2.707,2014,2.707,2015,2.707,2016,2.707,2017,1.533,2018,2.707,2019,2.707,2020,2.707,2021,2.707,2022,2.707,2023,3.19,2024,1.533,2025,2.707,2026,2.707,2027,4.141,2028,2.707,2029,2.707,2030,4.141,2031,2.707,2032,3.264,2033,2.707,2034,1.964,2035,2.707,2036,2.707,2037,2.707,2038,2.707,2039,2.707,2040,1.458,2041,2.361,2042,2.707,2043,2.707,2044,2.707,2045,2.707]],["title/interfaces/CustomData.html",[56,0.109,2046,2.566]],["body/interfaces/CustomData.html",[8,0.013,14,0.073,15,0.073,16,0.073,22,0.219,38,0.467,46,0.615,52,0.19,53,0.005,54,0.007,55,0.007,56,0.172,58,0.558,60,1.098,61,1.06,63,2.332,65,1.957,66,2.314,67,1.181,70,2.229,71,3.565,72,1.224,74,0.333,75,0.336,76,0.864,77,3.611,78,3.077,79,2.004,80,3.227,81,3.484,82,0.775,83,0.346,84,0.728,87,0.619,88,0.485,89,1.351,90,1.458,91,1.936,92,1.691,93,0.955,94,1.085,95,1.06,96,1.284,100,0.502,101,0.598,102,1.89,103,1.379,104,2.026,105,1.89,110,1.294,111,2.686,112,2.572,113,2.344,114,2.445,115,1.733,116,1.009,117,0.948,118,0.619,127,2.229,128,1.226,130,2.09,131,2.594,132,2.445,133,1.418,135,1.966,141,1.379,142,2.081,144,0.308,149,0.646,150,2.164,151,1.438,153,1.648,156,0.573,157,0.826,159,1.43,162,1.181,163,0.401,164,0.947,166,1.43,167,3.032,168,3.227,169,1.273,170,0.893,171,1.469,172,2.545,175,2.658,181,1.171,184,0.417,185,0.467,186,1.432,187,1.893,188,1.438,189,1.273,191,1.296,193,2.27,197,1.438,200,0.857,220,1.098,228,2.332,231,1.691,243,2.545,244,1.636,245,3.067,250,1.438,254,1.014,259,1.733,265,2.323,268,1.883,279,1.014,280,2.445,285,1.09,287,3.067,290,1.733,298,1.324,301,1.733,304,2.332,305,1.966,308,0.893,310,1.211,311,1.383,312,1.733,313,1.502,314,0.955,316,2.441,328,1.339,329,1.324,331,1.023,333,1.06,334,1.733,335,2.134,336,1.05,337,1.689,338,1.085,342,1.016,353,1.478,354,0.955,355,1.379,387,1.502,407,0.573,418,1.893,419,1.571,420,1.273,423,1.966,424,1.379,425,1.338,437,2.491,440,1.571,441,0.955,442,0.95,443,1.379,445,2.015,446,3.087,447,1.938,456,1.648,459,1.689,460,0.707,462,1.438,463,1.938,464,3.795,465,2.526,466,1.938,467,3.747,468,1.023,469,1.689,470,1.138,471,1.938,472,1.571,477,2.47,478,1.648,479,1.138,484,1.324,485,1.733,522,2.332,525,1.571,527,3.407,537,1.733,538,2.594,543,1.023,545,1.438,560,1.648,673,1.379,686,1.5,737,1.138,860,1.273,1059,1.648,1071,1.138,1082,2.344,1159,1.502,1172,3.43,1279,2.876,1385,1.502,1417,1.16,1450,1.634,1569,2.065,1600,1.828,1606,1.828,1608,1.571,1640,1.138,1648,1.828,1667,3.795,1693,1.648,1742,1.828,1787,1.938,1790,1.938,1865,1.273,1899,2.572,1938,2.065,2046,4.054,2047,1.828,2048,3.067,2049,3.293,2050,3.293,2051,2.572,2052,1.648,2053,3.913,2054,2.219,2055,2.219,2056,3.293,2057,2.714,2058,2.658,2059,2.219,2060,2.219,2061,1.502,2062,2.219,2063,2.219,2064,2.219,2065,2.219,2066,2.219,2067,1.828,2068,2.714,2069,2.219,2070,1.648,2071,3.066,2072,2.219,2073,3.656,2074,2.219,2075,2.219,2076,3.066,2077,2.065,2078,2.219,2079,2.219,2080,2.065,2081,3.067,2082,1.828,2083,3.066,2084,1.828,2085,1.502,2086,2.219,2087,2.219,2088,2.219,2089,2.219,2090,1.938,2091,2.219,2092,2.219,2093,2.219,2094,3.293,2095,2.219,2096,2.219,2097,1.938,2098,2.219,2099,2.219,2100,1.938,2101,3.066,2102,2.876,2103,2.219,2104,2.219,2105,2.219,2106,3.795,2107,2.219,2108,2.219,2109,2.219,2110,3.927,2111,2.219,2112,2.219,2113,2.219,2114,2.219,2115,3.293,2116,3.293,2117,3.293,2118,2.219,2119,3.293,2120,2.219,2121,1.571,2122,2.219,2123,2.219,2124,3.927,2125,2.219,2126,2.219,2127,3.293,2128,2.219,2129,2.219,2130,1.733,2131,2.219,2132,2.219,2133,2.219,2134,2.219,2135,1.966,2136,2.219,2137,2.219,2138,1.226,2139,2.219,2140,2.219,2141,2.219,2142,2.219,2143,3.293,2144,2.219,2145,2.219,2146,2.219,2147,2.219,2148,2.219,2149,2.219,2150,2.219,2151,2.219,2152,2.219,2153,2.219,2154,2.065,2155,2.219,2156,2.219,2157,3.293,2158,2.219,2159,2.219,2160,2.219,2161,2.219,2162,2.219,2163,1.828,2164,2.219,2165,2.219,2166,2.219,2167,2.219,2168,2.219,2169,2.219,2170,2.219,2171,1.938,2172,2.219,2173,2.219,2174,3.927,2175,2.219,2176,2.219,2177,3.293,2178,2.219,2179,2.219,2180,4.345,2181,2.219,2182,3.5,2183,2.941,2184,4.345,2185,4.345,2186,2.941,2187,2.219,2188,2.219,2189,2.219,2190,4.345,2191,3.407,2192,2.219,2193,1.828,2194,3.927,2195,2.219,2196,3.927,2197,3.293,2198,3.293,2199,3.293,2200,3.293,2201,2.219,2202,2.219,2203,3.927,2204,3.927,2205,2.219,2206,2.229,2207,2.219,2208,2.219,2209,2.219,2210,2.219,2211,2.219,2212,2.219,2213,1.938,2214,2.219,2215,1.828,2216,2.219,2217,2.219]],["title/components/DataModalComponent.html",[9,1.564,620,0.574]],["body/components/DataModalComponent.html",[7,1.972,8,0.013,9,2.838,10,1.9,14,0.167,15,0.118,16,0.118,17,3.057,22,0.271,24,0.671,31,1.972,36,2.313,38,0.752,46,0.689,48,2.076,52,0.135,53,0.008,54,0.011,55,0.01,66,1.437,74,0.221,75,0.354,76,0.596,79,2.112,82,0.596,83,0.327,84,0.649,87,0.995,88,0.78,89,0.78,90,0.868,96,1.34,99,1.065,100,0.808,101,0.962,116,0.829,117,0.621,144,0.499,149,0.437,163,0.646,184,0.861,185,1.236,336,1.138,338,1.177,342,1.101,381,1.509,392,1.872,394,1.3,407,0.796,408,1.277,541,2.035,620,0.988,621,1.972,622,2.734,623,1.831,624,2.253,625,1.831,626,2.219,630,1.79,631,1.904,642,2.177,648,1.613,689,4.58,699,2.846,700,2.112,701,2.349,702,1.9,703,2.736,704,2.313,708,2.968,709,2.968,710,1.831,711,2.313,712,2.049,713,2.968,714,1.646,715,3.457,716,1.9,717,1.9,718,2.049,719,2.049,720,1.831,721,1.831,722,2.313,723,2.313,724,1.9,725,2.349,726,3.457,727,2.313,728,1.972,729,2.131,730,1.9,731,2.313,732,1.972,733,2.628,734,2.313,735,1.972,736,1.972,737,1.831,738,1.972,739,1.972,740,1.972,741,2.313,742,1.831,743,1.972,744,1.972,745,1.9,746,1.344,747,2.049,748,2.049,749,2.313,750,1.9,751,2.313,752,1.9,753,2.219,754,2.313,773,3.457,873,1.9,904,3.099,984,4.707,1086,3.323,1125,3.422,1132,5.494,1204,2.793,1339,5.494,1344,5.056,1375,5.169,1473,3.323,1513,4.965,1660,2.942,1663,6.08,1668,5.919,1670,4.293,1708,6.414,1711,2.651,1738,5.796,1780,4.293,1904,5.507,1912,5.507,1916,4.293,1922,4.293,1972,4.293,2218,6.431,2219,3.879,2220,6.313,2221,6.97,2222,6.313,2223,6.97,2224,4.921,2225,6.633,2226,6.313,2227,4.921,2228,4.921,2229,4.921,2230,4.921,2231,4.921,2232,6.313,2233,4.921,2234,4.921,2235,4.293,2236,5.507,2237,4.921,2238,4.921,2239,4.921,2240,4.921,2241,4.921,2242,4.921,2243,4.921,2244,4.921]],["title/interfaces/DynamicEdge.html",[56,0.109,2245,2.735]],["body/interfaces/DynamicEdge.html",[8,0.013,14,0.098,15,0.199,16,0.098,22,0.253,38,0.627,46,0.604,52,0.187,53,0.006,54,0.012,55,0.009,56,0.199,58,0.749,60,1.473,61,1.422,70,2.014,72,1.022,74,0.184,75,0.358,82,0.497,83,0.313,84,0.521,87,0.83,88,0.65,89,1.349,90,1.435,91,2.315,92,1.58,94,1.338,95,1.422,96,1.303,97,2.784,99,0.888,100,0.674,104,2.091,105,2.849,106,2.108,110,1.636,116,0.539,121,2.631,130,2.641,131,2.758,133,1.281,135,3.101,141,1.85,142,2.062,144,0.278,146,1.527,148,1.809,149,0.565,150,2.26,156,0.863,157,0.624,162,2.459,164,0.764,166,1.478,169,1.708,170,1.198,171,1.406,172,2.995,177,2.553,181,1.55,184,0.56,185,0.627,186,1.523,187,1.995,189,1.708,191,1.666,193,1.923,200,0.798,220,1.473,223,2.21,224,1.584,230,3.288,231,1.99,254,0.65,256,3.015,279,1.009,285,0.582,291,1.748,293,3.346,294,2.161,298,2.424,305,2.758,308,1.198,310,1.723,311,1.43,313,2.014,314,1.281,316,2.872,320,1.326,328,1.333,329,2.424,330,2.21,335,1.929,336,0.949,337,1.527,338,0.981,342,0.918,353,1.12,354,1.281,355,1.85,357,2.21,358,1.373,359,2.014,407,0.804,416,1.084,418,1.58,437,2.287,439,2.524,440,2.108,441,1.748,442,1.171,443,2.872,446,2.424,456,2.21,457,2.243,459,2.546,465,2.442,467,1.929,468,1.373,469,1.527,479,1.527,482,1.644,488,2.976,511,0.83,522,2.108,526,1.239,543,1.373,560,2.21,636,1.326,683,2.324,686,1.252,855,2.137,866,1.473,885,2.324,948,1.868,1071,2.083,1072,3.808,1164,2.324,1247,2.014,1417,1.43,1450,1.69,1640,1.527,1694,1.85,1697,2.748,1748,2.976,1865,1.708,1899,2.324,1989,2.599,2040,2.21,2051,3.609,2052,3.432,2053,2.014,2067,2.453,2068,2.453,2070,2.21,2135,1.777,2138,1.644,2245,4.302,2246,2.453,2247,2.108,2248,4.057,2249,2.324,2250,4.683,2251,2.771,2252,2.771,2253,2.771,2254,2.771,2255,2.771,2256,4.148,2257,2.976,2258,3.234,2259,3.234,2260,3.234,2261,3.234,2262,2.599,2263,1.777,2264,2.771,2265,2.771,2266,4.621,2267,3.78,2268,3.015,2269,2.771,2270,4.302,2271,2.771,2272,4.412,2273,2.771,2274,2.771,2275,3.234,2276,2.771,2277,2.771,2278,2.771,2279,1.929,2280,2.771,2281,5.021,2282,2.771,2283,2.771,2284,2.976,2285,4.302,2286,2.771,2287,2.324,2288,2.771,2289,2.771,2290,3.234,2291,2.771,2292,2.771,2293,2.771,2294,2.771,2295,2.771,2296,2.771,2297,2.771,2298,2.771,2299,2.771,2300,4.412,2301,4.412,2302,2.771,2303,2.771,2304,2.771,2305,2.771,2306,2.771,2307,2.771,2308,4.412,2309,3.234,2310,2.599,2311,4.412,2312,3.234,2313,2.771,2314,2.21,2315,3.234,2316,3.234,2317,3.234,2318,2.771,2319,2.771,2320,2.771,2321,3.78,2322,3.346,2323,3.78,2324,3.78,2325,4.412,2326,4.412,2327,2.771,2328,4.412,2329,4.412,2330,3.78]],["title/classes/DynamicEdgeProvider.html",[53,0.006,2265,2.735]],["body/classes/DynamicEdgeProvider.html",[8,0.013,12,0.995,14,0.082,15,0.199,16,0.082,22,0.238,38,0.52,46,0.588,52,0.172,53,0.005,54,0.011,55,0.008,56,0.18,60,1.223,61,2.316,70,1.673,72,1.052,74,0.153,75,0.323,76,0.89,79,1.14,82,0.698,83,0.34,84,0.648,87,0.689,88,0.54,89,1.352,90,1.456,91,2.32,92,1.887,93,1.799,94,1.175,95,1.18,96,1.42,97,2.719,99,0.737,100,0.56,102,3.353,103,1.536,104,2.218,105,2.625,106,1.75,110,1.508,116,0.645,117,0.727,118,0.689,121,2.708,124,2.127,130,2.688,131,2.731,133,1.064,135,3.016,141,1.536,142,2.032,144,0.528,146,1.268,148,1.862,149,0.559,150,2.26,156,0.879,157,0.547,159,0.9,162,2.581,163,0.828,164,0.67,166,1.298,167,2.045,169,1.418,170,0.995,171,1.341,172,2.708,177,2.527,181,1.446,182,2.33,184,0.67,185,1.216,186,1.378,187,1.913,189,1.418,191,1.59,193,2.167,200,0.745,220,1.763,223,1.835,224,1.315,230,3.238,231,1.799,254,0.54,256,3.104,279,0.913,285,0.483,291,1.97,293,2.937,294,1.896,295,1.315,297,1.927,298,2.127,305,2.495,308,0.995,310,1.769,311,1.708,313,1.673,314,1.534,316,2.598,320,1.101,328,1.205,329,2.495,330,2.646,333,1.996,335,1.602,336,0.788,337,1.268,338,0.815,342,0.762,353,1.341,354,1.534,355,1.536,357,1.835,358,1.14,359,1.673,376,1.75,377,2.937,378,1.534,379,2.937,380,2.937,381,1.175,383,2.783,384,2.783,385,2.783,386,2.495,387,2.412,388,1.333,389,2.783,390,2.783,391,2.037,392,1.871,394,1.941,395,1.835,396,5.102,399,2.158,400,2.037,401,2.158,402,2.158,403,2.158,404,2.158,405,2.158,407,0.998,408,1.409,413,1.475,414,2.158,415,2.037,416,1.298,417,2.037,418,1.626,419,1.75,420,1.418,421,1.475,422,0.87,423,1.475,424,1.536,425,0.842,426,2.158,427,1.268,428,1.475,430,2.301,431,1.475,432,2.158,433,1.475,434,2.158,437,2.264,439,2.598,440,2.523,441,1.799,442,1.028,443,3.014,446,2.731,456,1.835,457,2.527,459,2.347,465,2.218,467,2.309,468,1.644,469,1.268,473,2.301,474,2.301,475,2.301,476,1.602,477,1.315,478,1.835,479,2.144,480,2.301,481,2.301,482,1.969,488,2.471,511,0.689,522,1.75,526,1.029,543,1.644,560,1.835,636,1.588,683,1.93,686,1.289,855,1.97,866,1.223,885,2.783,948,1.722,1071,2.347,1072,3.996,1164,1.93,1247,1.673,1417,1.255,1450,1.483,1640,1.268,1694,1.536,1697,3.096,1748,3.564,1865,1.418,1899,1.93,1989,2.158,2040,2.646,2051,2.783,2052,3.104,2053,1.673,2067,2.037,2068,2.037,2070,1.835,2135,1.475,2138,1.365,2245,3.317,2246,2.937,2247,1.75,2248,3.995,2249,1.93,2250,4.742,2251,2.301,2252,2.301,2253,2.301,2254,2.301,2255,2.301,2256,3.958,2257,2.471,2258,2.685,2259,3.872,2260,3.872,2261,3.872,2262,3.112,2263,2.127,2264,3.317,2265,3.317,2266,4.258,2267,3.317,2268,2.646,2269,2.301,2270,3.89,2271,2.301,2272,4.971,2273,3.89,2274,3.89,2275,2.685,2276,2.301,2277,2.301,2278,2.301,2279,1.602,2280,2.301,2281,4.541,2282,2.301,2283,2.301,2284,2.471,2285,3.89,2286,2.301,2287,1.93,2288,2.301,2289,2.301,2290,2.685,2291,2.301,2292,2.301,2293,2.301,2294,2.301,2295,2.301,2296,2.301,2297,2.301,2298,2.301,2299,2.301,2300,3.872,2301,3.872,2302,2.301,2303,2.301,2304,2.301,2305,2.301,2306,2.301,2307,2.301,2308,3.872,2309,2.685,2310,2.158,2311,3.872,2312,2.685,2313,2.301,2314,1.835,2315,2.685,2316,2.685,2317,2.685,2318,2.301,2319,2.301,2320,2.301,2321,3.317,2322,2.937,2323,3.317,2324,3.317,2325,3.872,2326,3.872,2327,2.301,2328,3.872,2329,3.872,2330,3.317,2331,3.407,2332,3.407,2333,3.407,2334,3.407,2335,2.685]],["title/interfaces/DynamicEdgeType.html",[56,0.109,2250,2.566]],["body/interfaces/DynamicEdgeType.html",[8,0.013,14,0.096,15,0.199,16,0.096,22,0.251,38,0.609,46,0.598,52,0.185,53,0.006,54,0.012,55,0.008,56,0.197,58,0.727,60,1.431,61,1.381,70,2.694,72,1.294,74,0.179,75,0.38,76,0.665,82,0.483,83,0.321,84,0.511,87,0.806,88,0.631,89,1.349,90,1.41,91,2.426,92,1.549,94,1.312,95,1.381,96,1.292,97,2.822,99,0.862,100,0.655,104,2.069,105,2.814,106,2.047,110,1.616,116,0.523,121,2.579,130,2.828,131,3.07,133,1.245,135,3.311,141,2.474,142,2.095,144,0.27,146,2.042,148,1.773,149,0.557,150,2.252,156,0.853,157,0.611,162,2.828,164,0.967,166,1.935,169,1.659,170,1.163,171,1.396,172,2.95,177,2.514,181,1.585,184,0.544,185,0.609,186,1.5,187,1.983,189,1.659,191,1.655,193,1.894,200,0.79,220,1.431,223,2.147,224,1.538,230,3.27,231,1.96,254,0.631,256,2.956,279,0.994,285,0.565,291,1.714,293,3.28,294,2.118,298,2.376,305,2.717,308,1.163,310,1.711,311,1.402,313,1.956,314,1.245,316,2.829,320,1.288,328,1.313,329,2.717,330,2.147,335,1.873,336,0.922,337,1.483,338,0.953,342,0.892,353,1.088,354,1.245,355,1.797,357,2.147,358,1.333,359,1.956,407,0.894,416,1.053,418,1.125,437,2.427,439,2.474,440,2.047,441,1.714,442,1.414,443,2.829,446,2.376,456,2.147,457,2.199,459,2.515,465,2.266,467,1.873,468,1.333,469,1.483,479,1.483,482,1.597,488,2.891,511,0.806,522,2.047,526,1.203,543,1.333,560,2.956,636,1.288,683,3.108,686,1.227,855,2.111,866,1.431,885,2.258,948,1.846,1071,2.042,1072,3.751,1164,2.258,1247,1.956,1417,1.402,1450,1.894,1640,1.483,1694,1.797,1697,2.694,1748,2.891,1865,1.659,1899,2.258,1989,2.525,2040,2.147,2051,3.554,2052,2.956,2053,1.956,2067,3.28,2068,3.28,2070,2.956,2135,1.726,2138,1.597,2245,3.705,2246,2.382,2247,2.047,2248,4.137,2249,3.108,2250,4.756,2251,3.705,2252,3.705,2253,4.565,2254,3.705,2255,3.705,2256,4.18,2257,2.891,2258,3.141,2259,3.141,2260,3.141,2261,3.141,2262,2.525,2263,1.726,2264,2.691,2265,2.691,2266,4.565,2267,3.705,2268,2.956,2269,2.691,2270,4.237,2271,2.691,2272,4.325,2273,2.691,2274,2.691,2275,3.141,2276,2.691,2277,2.691,2278,2.691,2279,1.873,2280,2.691,2281,4.946,2282,2.691,2283,2.691,2284,2.891,2285,4.237,2286,2.691,2287,2.258,2288,2.691,2289,2.691,2290,3.141,2291,2.691,2292,2.691,2293,2.691,2294,2.691,2295,2.691,2296,2.691,2297,2.691,2298,2.691,2299,2.691,2300,4.325,2301,4.325,2302,2.691,2303,2.691,2304,2.691,2305,2.691,2306,2.691,2307,2.691,2308,4.325,2309,3.141,2310,2.525,2311,4.325,2312,3.141,2313,2.691,2314,2.147,2315,3.141,2316,3.141,2317,3.141,2318,2.691,2319,2.691,2320,2.691,2321,3.705,2322,3.28,2323,3.705,2324,3.705,2325,4.325,2326,4.325,2327,2.691,2328,4.325,2329,4.325,2330,3.705]],["title/classes/DynamicNodeProvider.html",[53,0.006,2336,2.939]],["body/classes/DynamicNodeProvider.html",[8,0.013,12,1.014,14,0.083,15,0.185,16,0.083,22,0.247,38,0.531,46,0.537,52,0.136,53,0.005,54,0.009,55,0.008,56,0.157,60,1.247,61,2.334,66,1.455,67,2.706,72,1.162,74,0.156,75,0.327,76,0.895,79,1.163,82,0.706,83,0.33,84,0.653,87,0.703,88,0.551,89,1.358,90,1.326,92,1.902,93,1.819,94,1.191,95,1.204,96,1.408,97,2.644,99,0.752,100,0.818,101,0.679,102,3.362,103,1.567,104,2.156,105,2.425,106,1.785,110,1.393,113,2.158,116,0.456,117,0.85,118,0.703,121,2.739,124,2.158,130,2.456,131,2.755,135,2.755,137,2.077,140,1.361,141,1.567,142,1.539,143,1.902,144,0.53,149,0.564,150,2.253,156,0.85,157,0.555,159,0.918,162,2.6,163,0.835,167,2.075,171,1.348,177,2.334,181,1.377,182,2.346,184,0.68,185,1.22,186,1.611,187,1.95,188,2.991,189,1.447,191,1.651,193,2.18,200,0.751,220,1.789,223,1.872,224,1.341,228,1.785,230,3.217,231,1.819,243,2.342,250,3.473,254,0.923,256,2.684,279,1.067,285,0.493,291,1.988,294,1.341,295,1.341,297,1.949,298,1.505,305,2.522,308,1.014,310,1.728,311,0.888,314,1.556,316,2.626,320,1.123,328,1.219,329,1.505,333,2.018,336,0.804,337,1.293,338,0.831,342,0.777,354,1.556,355,1.567,357,1.872,358,1.163,359,1.706,376,1.785,377,2.979,378,1.556,379,2.979,380,2.979,381,1.191,383,2.823,384,2.823,385,2.823,386,2.522,387,2.446,388,1.347,389,2.823,390,2.823,391,2.077,392,1.876,394,1.951,395,1.872,396,5.115,399,2.201,400,2.077,401,2.201,402,2.201,403,2.201,404,2.201,405,2.201,407,0.985,408,1.418,413,1.505,414,3.157,415,2.077,416,0.918,417,2.077,418,1.407,419,1.785,420,1.447,421,1.505,422,0.888,423,1.505,424,1.567,425,0.859,426,2.201,427,1.293,428,1.505,430,2.346,431,1.505,432,2.201,433,1.505,434,2.201,437,2.592,441,1.988,442,0.727,443,3.037,445,2.687,446,2.755,457,2.55,459,2.368,462,2.342,465,2.23,467,2.342,469,1.293,473,2.346,474,2.346,475,2.346,476,1.634,477,1.341,478,1.872,479,2.168,480,2.346,481,2.346,482,1.997,511,0.703,526,1.049,537,3.972,543,1.667,554,2.739,555,1.785,654,1.447,683,1.968,686,1.303,855,1.988,866,1.247,885,2.823,948,1.361,1072,2.077,1247,1.706,1306,2.521,1450,1.504,1560,2.739,1640,1.293,1694,2.247,1865,1.447,1989,2.201,2052,2.684,2053,3.793,2057,2.077,2070,1.872,2082,2.979,2100,2.201,2106,4.031,2138,1.392,2213,2.201,2246,2.979,2247,1.785,2248,4.045,2249,1.968,2251,2.346,2252,2.346,2253,3.934,2254,2.346,2255,2.346,2256,4.052,2262,3.157,2263,2.158,2264,3.365,2266,3.934,2267,3.365,2268,1.872,2269,2.346,2270,3.934,2271,2.346,2273,3.934,2274,3.934,2276,2.346,2277,2.346,2278,2.346,2279,1.634,2280,2.346,2282,2.346,2283,2.346,2285,3.365,2286,2.346,2287,2.823,2288,2.346,2289,2.346,2291,2.346,2292,2.346,2293,2.346,2294,2.346,2295,2.346,2296,2.346,2297,3.934,2298,2.346,2299,2.346,2302,2.346,2303,2.346,2304,2.346,2305,2.346,2306,2.346,2307,2.346,2313,3.365,2314,1.872,2318,2.346,2319,2.346,2320,2.346,2321,2.346,2322,2.077,2323,2.346,2324,2.346,2327,2.346,2330,3.365,2335,2.739,2336,3.615,2337,5.082,2338,3.365,2339,4.347,2340,2.869,2341,3.804,2342,2.446,2343,3.928,2344,4.347,2345,2.56,2346,4.347,2347,4.347,2348,4.347,2349,4.616,2350,3.475,2351,3.031,2352,3.475,2353,3.031,2354,4.347,2355,4.347,2356,3.031,2357,3.031,2358,3.031,2359,3.031,2360,5.082,2361,3.031,2362,4.347,2363,3.031,2364,3.031,2365,3.031,2366,3.031,2367,3.031,2368,3.031,2369,3.031,2370,2.739,2371,2.739,2372,3.031,2373,4.347,2374,3.031,2375,4.347,2376,3.031,2377,3.031,2378,3.031]],["title/interfaces/DynamicNodeType.html",[56,0.109,2349,2.939]],["body/interfaces/DynamicNodeType.html",[8,0.013,14,0.099,15,0.189,16,0.099,22,0.259,38,0.628,46,0.538,52,0.153,53,0.006,54,0.01,55,0.009,56,0.184,58,0.751,60,1.477,61,1.425,66,1.201,67,2.462,72,1.35,74,0.185,75,0.385,82,0.498,83,0.264,84,0.522,87,0.832,88,0.652,89,1.359,92,1.583,94,1.341,95,1.425,96,1.264,97,2.785,99,0.89,100,0.921,101,0.804,104,2,105,2.656,106,2.113,110,1.525,113,1.781,117,0.519,121,2.636,130,2.767,131,3.104,135,3.278,137,3.351,140,1.123,141,2.528,142,1.481,143,2.024,144,0.279,149,0.566,150,2.253,156,0.805,157,0.625,162,2.855,171,1.406,177,2.247,181,1.551,184,0.561,185,0.628,186,1.714,187,2.019,188,2.636,189,1.713,191,1.71,193,1.926,200,0.799,220,1.477,223,2.216,224,1.588,228,2.113,230,3.253,231,1.992,243,2.636,250,3.22,254,1.011,256,2.216,279,1.136,285,0.583,291,1.751,294,1.588,298,1.781,305,2.762,308,1.201,310,1.604,314,1.285,316,2.876,320,1.329,328,1.335,329,2.428,336,0.951,337,1.531,338,0.984,342,0.92,354,1.285,355,1.855,357,2.216,358,1.376,359,2.019,407,0.864,437,2.655,441,1.992,442,1.173,443,2.876,445,2.817,446,2.428,457,2.247,459,2.549,462,1.934,465,2.326,467,1.934,469,1.531,479,1.531,482,1.648,511,0.832,526,1.242,537,3.613,543,1.376,554,3.242,555,2.113,654,1.713,683,3.176,686,1.254,855,2.14,866,1.477,885,2.33,948,1.531,1072,2.459,1247,2.019,1306,2.984,1450,1.926,1560,3.242,1640,1.531,1694,2.528,1865,1.713,1989,2.606,2052,2.216,2053,3.716,2057,2.459,2070,3.02,2082,2.459,2100,2.606,2106,4.34,2138,1.648,2213,2.606,2246,2.459,2247,2.113,2248,4.013,2249,3.176,2251,3.786,2252,3.786,2253,5.112,2254,3.786,2255,3.786,2256,4.257,2262,2.606,2263,1.781,2264,2.778,2266,4.307,2267,3.786,2268,2.216,2269,2.778,2270,4.307,2271,2.778,2273,2.778,2274,2.778,2276,2.778,2277,2.778,2278,2.778,2279,1.934,2280,2.778,2282,2.778,2283,2.778,2285,3.786,2286,2.778,2287,3.176,2288,2.778,2289,2.778,2291,2.778,2292,2.778,2293,2.778,2294,2.778,2295,2.778,2296,2.778,2297,4.307,2298,2.778,2299,2.778,2302,2.778,2303,2.778,2304,2.778,2305,2.778,2306,2.778,2307,2.778,2313,3.786,2314,2.216,2318,2.778,2319,2.778,2320,2.778,2321,2.778,2322,2.459,2323,2.778,2324,2.778,2327,2.778,2330,3.786,2336,2.984,2337,4.891,2338,2.778,2339,3.588,2340,2.528,2341,3.351,2342,2.019,2343,3.242,2344,3.588,2345,2.113,2346,3.588,2347,3.588,2348,3.588,2349,4.627,2353,3.588,2354,4.891,2355,4.891,2356,3.588,2357,3.588,2358,3.588,2359,3.588,2360,5.564,2361,3.588,2362,4.891,2363,3.588,2364,3.588,2365,3.588,2366,3.588,2367,3.588,2368,3.588,2369,3.588,2370,3.242,2371,3.242,2372,3.588,2373,4.891,2374,3.588,2375,4.891,2376,3.588,2377,3.588,2378,3.588]],["title/interfaces/Edge.html",[56,0.109,90,0.714]],["body/interfaces/Edge.html",[8,0.013,14,0.081,15,0.081,16,0.081,22,0.251,34,0.922,38,0.516,46,0.53,52,0.196,53,0.005,54,0.007,55,0.007,56,0.197,58,0.617,65,1.425,67,1.884,68,1.588,72,1.047,74,0.282,75,0.39,76,0.591,79,2.101,82,0.888,83,0.335,84,0.788,85,0.986,88,0.773,89,1.35,90,1.486,91,2.153,92,1.881,93,2.236,94,1.502,96,1.262,99,0.731,100,0.802,101,0.66,104,2.287,107,0.986,111,1.353,117,0.792,118,1.27,122,2.201,128,2.297,133,1.525,140,1.565,142,2.1,143,2.168,144,0.452,147,1.353,148,2.153,149,0.65,150,2.196,155,0.922,156,0.792,157,0.88,159,0.892,163,0.641,164,0.909,166,2.051,170,1.674,171,0.617,181,1.359,182,1.633,185,1.235,191,1.616,193,2.415,200,0.7,254,0.535,262,1.523,265,1.986,279,0.908,285,0.479,291,2.081,294,1.304,295,1.304,297,2.499,308,1.425,309,2.308,310,1.092,311,1.873,314,1.055,320,1.578,321,2.397,333,1.17,354,1.055,358,2.101,363,1.525,378,1.525,386,1.462,388,0.781,407,0.84,408,0.683,413,1.462,416,1.289,418,1.618,421,2.885,422,0.863,425,1.812,427,2.337,428,1.462,431,1.462,433,1.462,441,1.525,442,0.707,445,2.337,453,2.387,457,1.956,460,1.326,468,1.13,476,2.952,477,1.884,479,2.337,482,2.67,511,0.683,526,2.162,538,3.234,541,1.425,545,2.695,547,2.765,555,2.508,576,1.913,582,3.007,672,2.032,674,1.658,681,1.956,690,2.765,698,1.913,791,2.133,792,1.918,794,1.986,849,1.17,855,1.962,866,1.212,868,1.462,919,2.09,948,1.565,1110,1.257,1126,1.658,1127,2.114,1293,2.63,1295,2.63,1296,1.819,1373,2.133,1407,1.913,1417,0.863,1450,1.896,1466,1.17,1478,1.353,1527,1.913,1574,2.615,1623,1.658,1652,1.658,1694,2.201,1697,1.658,1714,2.114,1776,2.765,2017,1.913,2058,3.271,2061,2.397,2085,1.658,2135,1.462,2138,1.353,2182,1.658,2183,1.658,2186,2.397,2191,1.658,2206,1.658,2279,1.588,2340,2.201,2345,2.508,2379,1.819,2380,1.913,2381,2.918,2382,2.918,2383,2.397,2384,2.938,2385,1.819,2386,1.913,2387,2.201,2388,2.63,2389,2.019,2390,2.918,2391,2.032,2392,2.019,2393,2.019,2394,2.019,2395,2.918,2396,2.019,2397,2.019,2398,2.815,2399,2.918,2400,2.019,2401,2.019,2402,2.019,2403,1.913,2404,2.019,2405,2.019,2406,2.019,2407,2.019,2408,1.913,2409,2.114,2410,2.019,2411,2.019,2412,1.819,2413,2.019,2414,1.913,2415,2.019,2416,2.019,2417,2.019,2418,2.019,2419,2.019,2420,2.019,2421,2.019,2422,2.019,2423,2.019,2424,2.019,2425,2.019,2426,2.019,2427,2.019,2428,2.019,2429,2.019,2430,2.019,2431,2.019,2432,2.019,2433,2.918,2434,2.765,2435,2.019,2436,2.019,2437,2.019,2438,2.019,2439,2.019,2440,2.019,2441,2.019,2442,2.019,2443,2.019,2444,2.918,2445,2.019,2446,2.019,2447,2.019,2448,2.019,2449,2.918,2450,2.019,2451,2.019,2452,2.019,2453,2.019,2454,2.918,2455,2.918,2456,2.019,2457,2.019,2458,2.019,2459,2.019,2460,2.019,2461,2.918,2462,2.019,2463,2.019,2464,2.019,2465,2.019,2466,2.019,2467,3.754,2468,2.019,2469,2.019,2470,2.019,2471,2.019,2472,2.019,2473,2.019,2474,2.019,2475,2.019,2476,2.019,2477,2.019,2478,2.019,2479,2.019,2480,2.918,2481,2.019,2482,2.295,2483,2.019,2484,2.019,2485,2.918,2486,2.114,2487,2.019,2488,2.019,2489,2.019,2490,2.019,2491,2.918,2492,2.019,2493,2.918,2494,2.019,2495,2.918,2496,2.918,2497,2.019,2498,2.019,2499,2.019,2500,2.019,2501,2.019,2502,2.019,2503,2.019,2504,2.918,2505,2.019,2506,2.019,2507,2.918,2508,2.019,2509,2.019,2510,2.019,2511,2.019,2512,2.019,2513,2.019,2514,2.019,2515,2.918,2516,2.019,2517,2.019,2518,2.019,2519,2.019,2520,2.019,2521,2.019,2522,2.019,2523,2.019,2524,2.019,2525,2.019,2526,2.019,2527,2.019,2528,2.019,2529,2.019,2530,2.019,2531,2.019,2532,2.019,2533,2.019,2534,2.019,2535,2.918,2536,2.019,2537,2.019,2538,2.019,2539,2.019,2540,2.019,2541,2.019,2542,2.019,2543,2.019]],["title/interfaces/EdgeType.html",[56,0.109,91,1.309]],["body/interfaces/EdgeType.html",[8,0.013,14,0.082,15,0.082,16,0.082,22,0.252,34,0.929,38,0.52,46,0.532,52,0.196,53,0.005,54,0.008,55,0.008,56,0.197,58,0.621,65,1.433,67,2.223,68,2.308,72,1.051,74,0.283,75,0.391,76,0.595,79,1.139,82,0.843,83,0.321,84,0.783,85,1.433,88,0.778,89,1.353,90,1.486,91,2.037,92,1.887,93,2.087,94,1.507,96,1.265,99,0.737,100,0.806,101,0.666,104,2.218,107,1.433,111,1.364,117,0.795,118,1.275,122,2.214,128,2.308,133,1.533,140,1.721,142,2.103,143,2.195,144,0.454,147,1.364,148,2.16,149,0.652,150,2.187,155,0.929,156,0.795,157,0.887,159,1.297,163,0.644,164,0.786,166,1.896,170,1.681,171,0.621,181,1.364,182,1.643,185,1.236,191,1.619,193,2.418,200,0.702,254,0.539,262,1.535,265,1.995,279,0.912,285,0.483,291,1.799,294,1.314,295,1.314,297,2.329,308,1.433,309,2.315,310,1.098,311,1.877,314,1.063,320,1.587,321,2.41,333,1.179,354,1.063,358,2.236,363,1.533,378,1.533,386,1.474,388,0.787,398,2.044,407,0.843,408,0.689,413,1.474,416,0.899,418,1.386,421,2.729,422,0.87,425,1.878,427,2.346,428,1.474,431,1.474,433,1.474,441,1.533,442,0.712,445,2.591,453,2.398,457,1.967,460,1.332,468,1.643,476,2.963,477,1.895,479,2.346,482,2.678,511,0.689,526,1.903,538,3.015,541,1.433,545,2.963,547,3.262,555,2.522,576,1.928,582,3.015,672,2.398,674,1.671,681,1.967,690,2.781,698,1.928,791,2.143,792,1.927,794,1.995,849,1.179,855,1.969,866,1.222,868,1.474,919,2.095,948,1.572,1110,1.267,1126,1.671,1127,1.474,1293,2.645,1295,2.645,1296,1.834,1373,2.143,1407,1.928,1417,0.87,1450,1.903,1466,1.179,1478,1.364,1527,1.928,1574,2.398,1623,1.671,1652,1.671,1694,2.596,1697,2.41,1714,2.126,1776,2.781,2017,1.928,2058,3.281,2061,2.41,2085,1.671,2135,1.474,2138,1.364,2182,1.671,2183,1.671,2186,2.41,2191,1.671,2206,1.671,2279,1.6,2340,2.214,2345,2.522,2379,1.834,2380,1.928,2381,2.035,2382,2.035,2383,2.41,2384,2.999,2385,1.834,2386,1.928,2387,2.596,2388,3.102,2389,2.035,2390,2.935,2391,2.398,2392,2.935,2393,3.768,2394,2.935,2395,3.995,2396,2.035,2397,2.035,2398,2.827,2399,2.935,2400,2.035,2401,2.035,2402,2.035,2403,1.928,2404,2.035,2405,2.035,2406,2.035,2407,2.035,2408,1.928,2409,2.126,2410,2.035,2411,2.035,2412,1.834,2413,2.035,2414,1.928,2415,2.035,2416,2.035,2417,2.035,2418,2.035,2419,2.035,2420,2.035,2421,2.035,2422,2.035,2423,2.035,2424,2.035,2425,2.035,2426,2.035,2427,2.035,2428,2.035,2429,2.035,2430,2.035,2431,2.035,2432,2.035,2433,2.935,2434,2.781,2435,2.035,2436,2.035,2437,2.035,2438,2.035,2439,2.035,2440,2.035,2441,2.035,2442,2.035,2443,2.035,2444,2.935,2445,2.035,2446,2.035,2447,2.035,2448,2.035,2449,2.935,2450,2.035,2451,2.035,2452,2.035,2453,2.035,2454,2.935,2455,2.935,2456,2.035,2457,2.035,2458,2.035,2459,2.035,2460,2.035,2461,2.935,2462,2.035,2463,2.035,2464,2.035,2465,2.035,2466,2.035,2467,3.768,2468,2.035,2469,2.035,2470,2.035,2471,2.035,2472,2.035,2473,2.035,2474,2.035,2475,2.035,2476,2.035,2477,2.035,2478,2.035,2479,2.035,2480,2.935,2481,2.035,2482,2.308,2483,2.035,2484,2.035,2485,2.935,2486,2.126,2487,2.035,2488,2.035,2489,2.035,2490,2.035,2491,2.935,2492,2.035,2493,2.935,2494,2.035,2495,2.935,2496,2.935,2497,2.035,2498,2.035,2499,2.035,2500,2.035,2501,2.035,2502,2.035,2503,2.035,2504,2.935,2505,2.035,2506,2.035,2507,2.935,2508,2.035,2509,2.035,2510,2.035,2511,2.035,2512,2.035,2513,2.035,2514,2.035,2515,2.935,2516,2.035,2517,2.035,2518,2.035,2519,2.035,2520,2.035,2521,2.035,2522,2.035,2523,2.035,2524,2.035,2525,2.035,2526,2.035,2527,2.035,2528,2.035,2529,2.035,2530,2.035,2531,2.035,2532,2.035,2533,2.035,2534,2.035,2535,2.935,2536,2.035,2537,2.035,2538,2.035,2539,2.035,2540,2.035,2541,2.035,2542,2.035,2543,2.035]],["title/interfaces/FacetChartDataPoint.html",[56,0.109,2544,2.939]],["body/interfaces/FacetChartDataPoint.html",[8,0.013,14,0.104,15,0.104,16,0.104,22,0.273,24,0.59,34,1.181,38,0.66,42,1.447,46,0.59,48,2.05,52,0.159,53,0.007,54,0.012,55,0.009,56,0.116,58,0.789,74,0.294,75,0.326,81,2.033,82,0.793,83,0.24,84,0.749,85,2.129,86,3.192,87,0.875,88,0.685,96,1.418,99,0.936,100,0.953,101,0.845,110,1.565,116,0.957,117,0.983,140,1.181,143,1.637,144,0.394,146,1.609,149,0.62,155,2.248,156,0.825,157,0.918,163,0.567,171,0.789,175,2.123,176,2.221,181,0.936,182,2.189,184,0.791,186,1.387,196,1.069,197,2.033,200,0.855,219,2.585,244,1.583,254,0.919,268,1.142,279,0.919,289,1.8,297,1.447,300,2.449,328,1.571,336,1,338,1.034,342,1.297,344,1.609,349,2.123,353,1.181,378,1.35,381,1.034,388,1.341,407,0.825,422,1.105,425,1.069,442,0.905,453,1.8,494,1.034,511,0.875,518,3.408,580,1.8,620,0.822,624,1.397,629,1.433,630,0.905,631,1.464,648,1.105,654,1.8,663,1.785,686,0.967,703,2.158,724,1.669,725,2.158,757,2.724,759,2.847,768,2.082,772,1.609,773,2.033,788,2.833,794,2.267,821,2.739,823,1.262,824,1.811,826,1.94,853,2.526,868,1.872,871,1.8,873,1.669,874,1.8,875,1.733,903,2.329,904,3.765,912,2.739,919,2.365,936,2.033,947,2.847,958,2.158,974,3.408,1010,3.467,1040,1.733,1041,1.669,1054,2.911,1118,2.724,1124,2.033,1159,2.123,1241,4.571,1264,2.511,1276,1.669,1366,2.92,1373,2.435,1377,3.076,1380,3.137,1392,2.739,1417,1.105,1419,3.408,1420,3.408,1421,3.408,1422,3.408,1425,3.408,1426,3.408,1432,3.408,1458,3.408,1459,3.408,1460,3.408,1461,2.033,1462,2.739,1463,2.739,1466,1.498,1467,1.949,1468,2.033,1469,2.033,1470,3.408,1471,2.739,1474,3.408,1475,2.585,1476,2.739,1477,3.408,1478,1.733,1479,3.408,1480,3.408,1481,4.571,1482,3.408,1483,3.408,1484,2.123,1485,3.408,1516,3.408,1533,3.408,1534,3.408,1538,3.408,1541,3.408,1566,3.408,1567,3.408,1571,3.408,1589,3.408,1590,3.408,1591,2.585,1592,3.408,1593,2.92,1594,3.408,1596,2.449,1598,3.408,1599,3.408,1600,2.585,1601,3.408,1602,3.408,1603,3.408,1604,3.408,1605,3.408,1606,2.585,1607,3.408,1608,2.221,1609,4.359,1615,2.585,1616,3.467,1618,3.916,1634,2.92,1636,2.92,1714,1.872,1739,2.449,1759,4.571,2090,2.739,2544,4.747,2545,3.408,2546,3.137,2547,3.137,2548,5.059,2549,3.772,2550,5.059,2551,3.772,2552,3.772,2553,3.772,2554,3.772,2555,3.772,2556,3.772,2557,3.772,2558,3.772,2559,3.772,2560,3.772,2561,5.059,2562,3.772,2563,3.772,2564,2.739,2565,3.772,2566,5.059,2567,3.772,2568,3.772,2569,3.772,2570,3.772,2571,3.772,2572,5.059,2573,3.916,2574,5.059,2575,3.772,2576,3.772,2577,3.772,2578,3.137,2579,3.772,2580,3.772,2581,3.772,2582,3.772,2583,5.059,2584,3.772,2585,3.772,2586,5.059,2587,3.772,2588,3.772,2589,3.772,2590,3.772,2591,3.772,2592,3.772,2593,3.772,2594,2.92,2595,3.772,2596,3.772,2597,5.059,2598,3.772,2599,3.772,2600,3.772,2601,3.772,2602,3.772,2603,3.772,2604,3.772,2605,5.059,2606,3.772,2607,3.772,2608,3.772,2609,3.772,2610,5.059,2611,3.772,2612,3.772]],["title/interfaces/FacetDateConfig.html",[56,0.109,857,2.735]],["body/interfaces/FacetDateConfig.html",[8,0.013,14,0.102,15,0.102,16,0.102,22,0.279,24,0.581,29,2.412,38,0.651,42,1.425,46,0.359,48,1.897,52,0.178,53,0.007,54,0.011,55,0.009,56,0.154,58,0.777,65,1.676,74,0.191,75,0.322,82,0.953,83,0.287,84,0.74,85,2.375,86,2.893,87,0.861,88,0.675,96,1.318,97,2.25,98,2.907,99,0.921,100,0.943,101,0.833,107,1.676,110,1.553,116,1.044,117,0.537,118,1.161,126,3.252,144,0.289,149,0.509,155,1.773,156,1.032,157,0.833,164,1.042,166,1.125,184,0.581,185,0.992,186,1.018,187,1.984,196,1.053,200,0.886,203,2.091,204,2.091,205,2.091,224,1.644,254,0.909,268,1.516,279,1.029,285,0.814,289,1.773,328,1.359,331,1.425,336,0.985,338,1.018,342,0.953,388,1.328,416,1.125,422,1.467,425,1.053,460,1.328,470,1.585,494,1.018,511,0.861,620,0.814,629,1.419,630,0.891,631,0.953,633,1.989,635,2.061,636,1.855,648,1.088,663,1.83,686,0.953,710,1.585,714,1.425,746,1.897,755,2.294,756,3.089,757,2.39,758,3.876,759,2.818,760,3.276,761,1.529,762,3.357,763,3.357,764,2.002,765,3.357,766,3.357,767,3.637,768,2.494,769,2.188,772,1.585,773,2.002,776,4.525,777,4.525,778,4.525,779,5.118,780,4.525,781,4.525,782,2.949,783,4.525,784,4.525,785,4.525,788,2.812,789,3.089,790,4.164,791,2.416,792,2.172,793,5.118,794,2.25,795,2.698,797,2.412,809,3.357,811,2.39,812,2.698,813,1.92,814,2.546,816,3.357,818,3.357,819,1.376,821,2.698,823,1.243,824,1.793,826,1.92,829,3.357,831,3.357,833,4.154,836,4.71,838,4.164,842,2.39,847,3.089,848,5.118,849,1.475,850,3.357,851,2.294,852,2.294,853,2.216,854,3.357,855,1.33,856,2.818,857,3.876,858,3.357,859,3.357,860,1.773,861,2.876,862,5.118,863,3.089,864,3.357,865,2.698,866,1.529,867,2.546,868,1.844,869,3.357,870,3.357,871,1.773,872,3.357,873,1.644,874,1.773,875,1.706,876,3.357,877,4.525,878,4.525,879,4.525,880,3.357,881,3.357,882,3.089,883,3.089,884,3.357,885,3.252,886,4.525,887,3.357,888,3.357,889,4.525,890,3.357,891,4.525,892,3.357,893,3.357,894,3.357,895,2.188,896,3.357,897,4.525,898,3.357,899,3.357,900,3.357,901,3.357,902,3.357,903,2.294,904,3.188,905,3.357,906,3.357,907,3.357,908,3.357,909,2.698,910,3.357,911,3.357,912,2.698,913,3.357,914,3.357,915,3.357,916,3.357,917,4.525,918,3.089,919,2.029,920,3.357,921,3.089,922,3.357,923,3.357,924,3.357,925,3.357,926,2.546,927,3.881,928,2.546,929,3.357,930,3.357,931,3.357,932,3.678,933,2.188,934,2.546,935,3.089,936,2.002,937,2.546,938,3.089,939,3.357,940,3.357,941,2.546,942,3.357,943,2.546,944,2.546,945,3.357,946,3.357,947,2.091,948,1.163,949,2.091,950,3.357,951,3.357,952,3.357,953,3.357,954,3.357,955,3.357,956,3.357,957,3.357,958,1.585,959,3.357,960,3.357,961,3.089,962,3.357,963,3.357,964,3.357,965,3.357,966,3.357,967,1.92,968,3.357]],["title/interfaces/FacetDateParams.html",[56,0.109,758,2.735]],["body/interfaces/FacetDateParams.html",[8,0.013,14,0.097,15,0.097,16,0.097,22,0.277,24,0.554,29,2.3,38,0.62,42,1.358,46,0.343,48,1.86,52,0.173,53,0.006,54,0.011,55,0.008,56,0.149,58,0.741,65,1.622,74,0.183,75,0.312,76,1.008,82,1.01,83,0.336,84,0.756,85,2.395,86,2.837,87,0.821,88,0.643,96,1.299,97,2.195,98,2.859,99,0.879,100,0.913,101,0.794,107,1.622,110,1.329,116,1.035,117,0.512,118,1.124,126,3.148,144,0.276,149,0.493,155,1.73,156,1.025,157,0.821,164,1.086,166,1.072,184,0.554,185,0.968,186,0.971,187,1.963,196,1.004,200,0.878,203,1.993,204,1.993,205,1.993,224,1.567,254,0.88,268,1.468,279,1.004,285,0.788,289,1.69,328,1.326,331,1.358,336,0.939,338,0.971,342,0.908,388,1.285,398,2.314,416,1.072,422,1.42,425,1.004,460,1.285,470,1.511,494,0.971,511,0.821,620,0.788,629,1.374,630,0.85,631,0.908,633,1.925,635,1.995,636,1.796,648,1.037,663,1.818,686,0.908,710,1.511,714,1.358,746,1.86,755,2.187,756,2.945,757,2.314,758,4.279,759,2.728,760,3.244,761,1.457,762,3.2,763,3.2,764,1.909,765,3.2,766,3.2,767,3.521,768,2.446,769,2.086,772,1.511,773,1.909,776,5.625,777,5.625,778,5.625,779,5.808,780,5.625,781,5.625,782,3.665,783,5.625,784,5.625,785,5.625,788,2.743,789,2.945,790,4.031,791,2.358,792,2.12,793,4.994,794,2.195,795,2.612,797,2.3,809,3.2,811,2.314,812,2.612,813,1.831,814,2.427,816,3.2,818,3.2,819,1.312,821,2.572,823,1.185,824,1.736,826,1.859,829,3.2,831,3.2,833,4.073,836,4.596,838,4.031,842,2.314,847,2.945,848,4.38,849,1.407,850,3.2,851,2.187,852,2.187,853,2.145,854,3.2,855,1.268,856,2.728,857,2.742,858,3.2,859,3.2,860,1.69,861,2.742,862,4.994,863,2.945,864,3.2,865,2.572,866,1.457,867,2.427,868,1.758,869,3.2,870,3.2,871,1.69,872,3.2,873,1.567,874,1.69,875,1.627,876,3.2,877,4.38,878,4.38,879,4.38,880,3.2,881,3.2,882,2.945,883,2.945,884,3.2,885,3.148,886,4.38,887,3.2,888,3.2,889,4.38,890,3.2,891,4.38,892,3.2,893,3.2,894,3.2,895,2.086,896,3.2,897,4.38,898,3.2,899,3.2,900,3.2,901,3.2,902,3.2,903,2.187,904,3.111,905,3.2,906,3.2,907,3.2,908,3.2,909,2.572,910,3.2,911,3.2,912,2.572,913,3.2,914,3.2,915,3.2,916,3.2,917,4.38,918,2.945,919,1.989,920,3.2,921,2.945,922,3.2,923,3.2,924,3.2,925,3.2,926,2.427,927,3.787,928,2.427,929,3.2,930,3.2,931,3.2,932,3.589,933,2.086,934,2.427,935,2.945,936,1.909,937,2.427,938,2.945,939,3.2,940,3.2,941,2.427,942,3.2,943,2.427,944,2.427,945,3.2,946,3.2,947,1.993,948,1.109,949,1.993,950,3.2,951,3.2,952,3.2,953,3.2,954,3.2,955,3.2,956,3.2,957,3.2,958,1.511,959,3.2,960,3.2,961,2.945,962,3.2,963,3.2,964,3.2,965,3.2,966,3.2,967,1.831,968,3.2]],["title/components/FacetNgxChart.html",[620,0.574,724,1.564]],["body/components/FacetNgxChart.html",[7,1.349,8,0.013,9,1.299,10,1.299,14,0.137,15,0.081,16,0.081,17,1.253,22,0.26,24,0.459,31,1.349,34,0.919,38,0.514,42,1.126,46,0.618,48,2.183,52,0.133,53,0.005,54,0.012,55,0.007,56,0.09,66,0.983,74,0.257,75,0.273,76,0.806,81,1.583,82,0.84,83,0.332,84,0.755,85,2.138,86,3.107,87,0.681,88,0.533,89,0.533,90,0.593,96,1.368,99,0.728,100,0.8,101,0.658,110,1.368,116,0.939,117,0.979,140,1.33,143,1.77,144,0.521,146,1.812,149,0.556,155,2.138,156,0.839,157,0.886,163,0.873,171,0.615,175,1.653,176,2.939,181,1.054,182,1.914,184,0.781,186,1.165,196,0.832,197,2.289,200,0.797,219,2.012,244,1.562,254,0.772,268,0.889,279,0.772,289,1.402,297,1.629,300,1.907,328,1.562,336,0.779,338,0.805,342,1.09,344,1.253,349,1.653,353,0.919,378,1.521,381,1.368,388,1.324,392,1.902,394,1.757,407,1.009,408,1.269,422,1.244,425,0.832,442,0.704,453,2.028,494,1.165,511,0.681,518,2.653,580,1.402,620,0.811,621,1.349,622,2.109,623,1.253,624,1.849,625,1.253,626,1.518,629,1.414,630,1.738,631,1.85,648,1.244,653,2.028,654,2.382,663,1.696,686,0.753,699,2.196,700,1.629,701,1.812,702,1.299,703,2.82,704,1.583,708,2.289,709,2.289,710,1.253,711,1.583,712,1.402,713,2.289,714,1.126,715,2.948,716,1.299,717,1.299,718,1.402,719,1.402,720,1.253,721,1.253,722,1.583,723,1.583,724,2.421,725,3.097,726,2.948,727,1.583,728,1.349,729,1.458,730,1.299,731,1.583,732,1.349,733,2.028,734,1.583,735,1.349,736,1.349,737,1.253,738,1.349,739,1.349,740,1.349,741,1.583,742,1.253,743,1.349,744,1.349,745,1.299,746,0.919,747,1.402,748,1.402,749,1.583,750,1.299,751,1.583,752,1.299,753,1.518,754,1.583,757,2.611,759,2.809,768,2.251,771,3.839,772,2.334,773,2.948,786,3.085,787,2.937,788,3.003,794,2.478,821,3.085,823,1.422,824,1.959,826,2.226,845,2.653,853,2.209,868,1.458,871,1.402,873,1.299,874,1.402,875,1.349,903,1.813,904,3.511,912,2.133,919,2.265,936,1.583,947,3.079,958,2.129,974,2.653,1010,3.749,1040,2.293,1041,2.209,1054,2.77,1118,2.611,1124,1.583,1159,1.653,1241,5.467,1264,3.003,1276,1.299,1366,2.273,1373,2.662,1377,3.362,1380,3.533,1392,3.085,1417,0.86,1419,4.511,1420,3.839,1421,2.653,1422,4.511,1425,4.943,1426,2.653,1432,2.653,1449,2.109,1458,2.653,1459,2.653,1460,2.653,1461,1.583,1462,2.133,1463,2.133,1466,1.166,1467,1.518,1468,1.583,1469,1.583,1470,2.653,1471,2.133,1474,2.653,1475,2.012,1476,2.133,1477,2.653,1478,1.952,1479,3.839,1480,4.943,1481,3.839,1482,3.839,1483,2.653,1484,1.653,1485,4.943,1516,2.653,1533,2.653,1534,2.653,1538,2.653,1541,2.653,1566,2.653,1567,2.653,1571,2.653,1589,2.653,1590,2.653,1591,2.012,1592,2.653,1593,2.273,1594,2.653,1596,1.907,1598,2.653,1599,2.653,1600,2.012,1601,2.653,1602,2.653,1603,2.653,1604,2.653,1605,2.653,1606,2.012,1607,2.653,1608,1.729,1609,4.378,1615,2.012,1616,3.421,1618,4.235,1634,2.273,1636,3.864,1658,2.911,1714,1.458,1739,1.907,1759,4.943,2090,2.133,2544,4.151,2545,6.501,2546,5.983,2547,2.442,2548,6.05,2549,4.992,2550,5.47,2551,4.248,2552,2.937,2553,4.248,2554,4.992,2555,2.937,2556,2.937,2557,2.937,2558,2.937,2559,2.937,2560,2.937,2561,4.248,2562,2.937,2563,2.937,2564,2.133,2565,2.937,2566,4.248,2567,2.937,2568,2.937,2569,4.248,2570,2.937,2571,2.937,2572,4.248,2573,3.289,2574,4.248,2575,2.937,2576,2.937,2577,2.937,2578,2.442,2579,2.937,2580,2.937,2581,2.937,2582,2.937,2583,4.248,2584,2.937,2585,2.937,2586,4.248,2587,2.937,2588,2.937,2589,2.937,2590,2.937,2591,2.937,2592,2.937,2593,2.937,2594,3.289,2595,4.248,2596,4.248,2597,4.248,2598,2.937,2599,2.937,2600,2.937,2601,4.248,2602,2.937,2603,2.937,2604,4.248,2605,4.248,2606,2.937,2607,2.937,2608,2.937,2609,2.937,2610,4.248,2611,2.937,2612,2.937,2613,4.87,2614,3.366,2615,3.366,2616,3.366,2617,3.366,2618,3.366,2619,3.366,2620,3.366,2621,3.366,2622,3.366,2623,3.366,2624,3.366,2625,3.366,2626,3.366,2627,3.366,2628,3.366,2629,3.366,2630,3.366,2631,3.366,2632,3.366,2633,3.366,2634,3.366,2635,3.366,2636,3.366]],["title/components/FacetWrapperComponent.html",[10,1.564,620,0.574]],["body/components/FacetWrapperComponent.html",[7,1.794,8,0.013,9,1.728,10,2.737,14,0.16,15,0.107,16,0.107,17,3.109,22,0.265,24,0.611,31,2.668,42,1.498,46,0.378,48,2.293,52,0.122,53,0.007,54,0.012,55,0.009,66,1.307,74,0.201,75,0.333,76,0.807,82,0.937,83,0.325,84,0.706,85,2.213,87,0.906,88,0.709,89,0.709,90,0.789,99,0.969,100,0.975,101,0.875,116,0.779,118,0.906,144,0.54,156,0.749,157,0.886,159,1.759,191,1.72,200,0.742,265,2.056,268,1.873,309,2.056,319,1.939,349,2.914,381,1.419,392,1.92,394,1.759,407,0.931,408,1.347,425,1.823,549,3.529,620,0.944,621,1.794,622,2.57,623,2.209,624,2.152,625,1.666,626,3.488,630,1.778,631,1.908,633,2.307,637,2.08,699,2.676,700,1.986,701,2.209,702,1.728,703,2.638,704,2.105,708,2.79,709,2.79,710,1.666,711,2.105,712,1.864,713,2.79,714,1.498,715,3.333,716,1.728,717,1.728,718,1.864,719,1.864,720,1.666,721,1.666,722,2.105,723,2.105,724,1.728,725,2.209,726,3.333,727,2.105,728,1.794,729,1.939,730,1.728,731,2.105,732,1.794,733,2.471,734,2.105,735,1.794,736,1.794,737,1.666,738,1.794,739,1.794,740,1.794,741,2.105,742,1.666,743,1.794,744,1.794,745,1.728,746,1.223,747,1.864,748,1.864,749,2.105,750,1.728,751,2.105,752,1.728,753,2.019,754,2.105,786,3.76,788,3.194,794,2.556,811,2.772,909,2.837,932,3.772,961,5.144,967,2.676,981,6.614,1242,5.808,1244,5.808,1245,5.808,1429,3.906,1455,5.589,1572,5.808,1623,2.914,1687,3.529,1690,4.679,1695,3.906,1711,2.412,1729,3.023,1738,4.679,1870,5.178,1920,4.803,2637,7.242,2638,3.906,2639,6.659,2640,6.659,2641,4.83,2642,6.659,2643,7.582,2644,5.936,2645,5.936,2646,7.09,2647,7.09,2648,5.936,2649,5.936,2650,7.582,2651,4.477,2652,5.936,2653,7.09,2654,4.477,2655,4.477,2656,4.477,2657,5.936,2658,4.477,2659,4.477,2660,4.477,2661,4.477,2662,4.477,2663,4.477,2664,4.477,2665,4.477,2666,4.477,2667,4.477,2668,3.023,2669,4.477,2670,4.477,2671,4.477,2672,4.477,2673,4.477,2674,4.477,2675,4.477,2676,4.477,2677,4.477,2678,5.936,2679,4.477,2680,4.477,2681,4.477,2682,4.477,2683,4.477,2684,4.477,2685,4.477,2686,4.477,2687,4.477,2688,4.477,2689,4.477,2690,4.477,2691,2.837,2692,4.477,2693,4.477,2694,4.477,2695,4.477]],["title/modules/FinanceModule.html",[0,2.182,2696,2.939]],["body/modules/FinanceModule.html",[2,2.648,3,3.392,8,0.013,11,2.685,12,1.785,13,2.648,14,0.147,15,0.147,16,0.147,20,3.887,21,3.887,22,0.286,23,3.887,24,0.834,25,3.707,26,3.141,33,3.887,34,1.67,35,4.572,36,2.874,37,4.572,38,0.934,50,3.707,52,0.167,53,0.009,54,0.011,55,0.011,721,3.052,732,3.403,733,3.004,735,3.403,856,3.002,1117,3.141,2696,6.16,2697,5.334,2698,5.334,2699,6.114,2700,5.334,2701,6.114,2702,4.82,2703,4.82,2704,6.114]],["title/interfaces/FusionChartInstance.html",[56,0.109,2705,3.193]],["body/interfaces/FusionChartInstance.html",[8,0.012,14,0.158,15,0.158,16,0.158,52,0.181,54,0.012,55,0.012,56,0.177,58,1.205,74,0.297,75,0.424,83,0.273,163,0.867,442,1.658,1054,3.383,2705,6.245,2706,3.947,2707,5.759]],["title/interfaces/FusionChartsEvent.html",[56,0.109,2708,3.193]],["body/interfaces/FusionChartsEvent.html",[8,0.013,14,0.157,15,0.157,16,0.157,52,0.179,54,0.011,55,0.011,56,0.176,58,1.197,74,0.295,75,0.422,83,0.311,163,0.86,442,1.742,2706,3.918,2708,6.227,2709,5.718,2710,8.108,2711,8.108]],["title/modules/FusionChartsModule.html",[0,2.182,2712,2.939]],["body/modules/FusionChartsModule.html",[2,3.463,3,3.307,8,0.013,11,2.617,12,1.71,13,2.536,14,0.14,15,0.14,16,0.14,20,3.789,21,3.789,22,0.285,23,4.061,24,0.799,25,3.613,26,3.008,32,4.456,33,3.789,34,1.599,35,4.456,36,2.753,50,3.008,52,0.16,53,0.009,54,0.011,55,0.011,76,0.71,83,0.242,144,0.397,157,0.653,381,1.4,392,1.355,394,1.547,407,0.739,457,2.347,728,3.385,736,3.385,737,2.179,738,2.818,739,2.818,748,3.517,1054,2.438,1275,4.75,1276,2.261,1365,4.249,1622,3.046,2345,3.008,2547,4.249,2712,6.164,2713,5.109,2714,5.109,2715,5.109,2716,5.857,2717,5.857,2718,7.034,2719,5.857,2720,5.544,2721,7.539,2722,5.857,2723,4.456,2724,4.75,2725,5.857,2726,5.857]],["title/injectables/FusionChartsService.html",[2723,2.566,2727,2.421]],["body/injectables/FusionChartsService.html",[2,3.489,8,0.013,14,0.136,15,0.136,16,0.136,22,0.194,24,0.772,52,0.188,53,0.011,54,0.011,55,0.011,72,1.033,74,0.254,75,0.387,76,0.9,82,0.686,83,0.327,117,0.869,144,0.504,149,0.611,157,0.828,163,0.904,184,0.772,381,1.647,392,1.904,394,1.962,407,0.999,408,1.394,1414,4.105,1622,3.643,1739,3.902,2706,4.956,2720,6.245,2723,4.364,2724,5.599,2727,4.44,2728,4.105,2729,4.46,2730,6.479,2731,6.479,2732,6.742,2733,6.742,2734,6.742,2735,6.889,2736,6.889,2737,6.009,2738,5.658,2739,5.658,2740,5.658,2741,5.658,2742,5.658,2743,6.009,2744,5.658,2745,6.009,2746,5.658,2747,6.911,2748,5.658,2749,5.658,2750,6.479,2751,4.936,2752,4.936,2753,4.936,2754,4.936,2755,4.936,2756,4.936,2757,4.936,2758,6.479,2759,4.936,2760,4.936,2761,4.936,2762,4.936,2763,4.936,2764,4.936,2765,4.936]],["title/injectables/FusionChartsStatic.html",[2724,2.735,2727,2.421]],["body/injectables/FusionChartsStatic.html",[2,3.538,8,0.013,14,0.144,15,0.144,16,0.144,22,0.206,24,0.821,52,0.195,53,0.011,54,0.011,55,0.011,72,1.305,74,0.27,75,0.401,83,0.295,117,0.759,149,0.534,157,0.85,163,0.79,392,1.653,1414,4.364,1622,3.416,1739,3.408,2706,4.558,2720,6.441,2723,3.811,2724,5.44,2727,4.558,2728,4.364,2729,4.742,2730,5.248,2731,5.248,2732,5.248,2733,5.248,2734,5.248,2737,5.248,2743,5.248,2745,5.248,2747,6.882,2750,6.652,2751,5.248,2752,5.248,2753,5.248,2754,5.248,2755,5.248,2756,5.248,2757,5.248,2758,6.652,2759,5.248,2760,5.248,2761,5.248,2762,5.248,2763,5.248,2764,5.248,2765,5.248,2766,6.016,2767,6.016]],["title/interfaces/GeoRecord.html",[56,0.109,2768,2.939]],["body/interfaces/GeoRecord.html",[8,0.013,14,0.145,15,0.11,16,0.11,22,0.282,24,0.978,38,0.702,42,1.538,48,1.255,52,0.165,53,0.007,54,0.012,55,0.009,56,0.124,58,0.839,74,0.207,75,0.339,83,0.279,87,0.93,88,0.728,96,1.409,98,1.842,110,1.099,118,0.93,140,1.255,143,2.156,144,0.486,149,0.636,156,0.762,157,0.673,163,0.603,164,0.824,184,0.627,185,1.094,186,1.099,191,1.307,200,0.798,229,2.913,254,0.728,308,1.342,310,1.029,328,1.499,336,1.397,337,1.711,338,1.444,342,1.509,353,1.255,388,1.397,408,0.93,416,1.214,422,1.175,425,1.493,437,2.168,442,0.962,465,2.514,472,2.362,494,1.099,511,0.93,513,3.335,541,1.342,620,0.856,624,1.952,629,1.493,630,0.962,631,1.029,637,1.887,642,1.887,646,2.605,648,1.175,663,1.804,675,3.105,703,1.711,730,1.775,757,2.515,768,2.422,772,1.711,788,2.921,792,2.257,814,2.748,819,2.18,823,1.342,824,1.887,849,1.593,853,2.332,855,2.538,871,1.914,873,1.775,874,1.914,875,1.842,909,3.827,958,1.711,967,2.073,978,2.913,1040,2.421,1041,2.604,1043,2.477,1046,2.168,1061,2.605,1071,1.711,1104,2.168,1105,2.161,1118,2.515,1126,2.257,1191,3.105,1204,1.842,1239,4.115,1247,2.257,1276,1.775,1346,4.894,1356,3.611,1357,3.624,1360,2.748,1377,3.171,1450,1.388,1461,2.161,1466,1.593,1467,2.073,1468,2.161,1469,2.161,1484,2.257,1593,3.105,1742,2.748,1860,3.624,1865,1.914,1947,3.103,2097,2.913,2102,2.913,2171,2.913,2322,2.748,2578,3.335,2768,5.198,2769,3.624,2770,6.25,2771,5.648,2772,5.269,2773,5.269,2774,3.335,2775,3.335,2776,4.382,2777,4.079,2778,4.011,2779,4.011,2780,4.011,2781,4.011,2782,4.011,2783,4.011,2784,5.269,2785,3.105,2786,4.011,2787,5.269,2788,5.269,2789,3.827,2790,5.269,2791,5.269,2792,5.269,2793,4.762,2794,5.269,2795,4.011,2796,4.762,2797,4.011,2798,3.105,2799,4.011,2800,4.011,2801,4.011,2802,4.011,2803,5.885,2804,3.624,2805,4.011,2806,4.011,2807,4.011,2808,4.011,2809,4.011,2810,4.011,2811,3.611,2812,4.011,2813,4.011,2814,4.011,2815,4.011,2816,3.254,2817,4.011,2818,4.011,2819,5.269,2820,4.762,2821,4.011,2822,4.011,2823,4.011,2824,4.011,2825,4.011,2826,2.605,2827,4.011,2828,4.011,2829,4.011,2830,5.885,2831,4.011,2832,4.011,2833,4.011,2834,5.269,2835,4.011,2836,4.011,2837,4.011,2838,4.011,2839,4.011,2840,4.011,2841,5.269,2842,4.011,2843,4.011,2844,2.913,2845,4.011,2846,4.011,2847,4.011,2848,4.011,2849,4.011,2850,4.011,2851,4.011,2852,4.011,2853,4.011,2854,4.011,2855,3.624,2856,4.011,2857,4.011,2858,5.269,2859,6.25,2860,4.011,2861,3.624,2862,4.011,2863,4.011,2864,4.011,2865,4.011,2866,3.105,2867,4.011,2868,5.269,2869,5.269,2870,4.011,2871,4.011,2872,4.011]],["title/modules/GoogleMapsModule.html",[0,2.182,2873,2.939]],["body/modules/GoogleMapsModule.html",[2,2.7,3,3.432,8,0.013,11,2.716,12,1.82,13,2.7,14,0.149,15,0.149,16,0.149,20,3.932,21,3.932,22,0.287,23,3.932,24,0.851,25,3.75,26,3.203,33,3.932,34,1.703,37,4.625,38,0.953,41,5.296,42,2.086,50,3.203,52,0.171,53,0.01,54,0.011,55,0.011,730,3.285,1275,4.93,1276,2.407,2774,4.523,2775,4.523,2873,6.073,2874,5.439,2875,5.439,2876,5.439,2877,6.235,2878,7.3,2879,6.235]],["title/injectables/GoogleMapsService.html",[2727,2.421,2777,2.735]],["body/injectables/GoogleMapsService.html",[8,0.013,14,0.135,15,0.135,16,0.135,22,0.276,24,1.013,52,0.188,53,0.009,54,0.011,55,0.011,74,0.254,75,0.386,76,0.959,83,0.327,84,0.772,99,1.223,100,0.928,116,0.742,117,0.936,144,0.504,149,0.685,156,0.936,157,0.63,163,0.974,164,1.081,184,0.939,185,1.134,200,0.898,381,1.646,392,1.886,394,1.96,407,0.868,511,1.143,680,4.993,791,3.085,1446,6.475,1577,4.929,1737,4.454,2235,4.929,2727,3.378,2728,4.099,2771,4.454,2777,4.648,2793,5.851,2796,5.851,2820,4.454,2855,5.851,2880,4.454,2881,7.423,2882,7.423,2883,6.883,2884,5.651,2885,7.919,2886,6.883,2887,6.883,2888,5.651,2889,5.651,2890,6.883,2891,6.883,2892,6.883,2893,5.651,2894,5.651,2895,6.883,2896,6.883,2897,6.883,2898,5.651,2899,5.651,2900,6.883,2901,5.651,2902,5.651,2903,6.739,2904,4.929,2905,4.929,2906,4.454,2907,4.929,2908,5.651,2909,5.651,2910,5.651,2911,5.651,2912,6.883,2913,5.651,2914,5.651,2915,5.651,2916,6.883,2917,5.651,2918,5.651,2919,5.651,2920,5.651,2921,6.883,2922,5.651]],["title/interfaces/HeatmapItem.html",[56,0.109,1029,2.939]],["body/interfaces/HeatmapItem.html",[8,0.013,14,0.107,15,0.107,16,0.107,22,0.264,24,0.607,32,2.817,46,0.621,52,0.181,53,0.007,54,0.009,55,0.009,56,0.119,58,0.812,72,0.812,74,0.2,75,0.332,76,0.716,82,0.892,83,0.313,84,0.758,107,1.725,116,0.871,117,0.892,140,1.214,149,0.589,151,2.09,155,1.214,160,2.817,164,1.033,166,1.867,171,1.211,184,0.607,196,1.099,200,0.907,230,1.851,244,1.214,254,0.704,268,1.944,279,0.936,289,1.851,308,1.298,309,2.047,331,1.487,344,2.469,353,1.214,394,1.867,422,1.136,452,2.518,460,1.028,470,1.654,484,1.925,494,1.063,541,1.298,543,1.977,562,2.395,580,2.762,620,0.838,623,1.654,629,1.46,630,0.93,631,0.995,633,2.047,635,1.596,636,1.909,637,1.389,642,1.389,648,1.136,653,2.762,663,1.831,672,1.851,684,1.596,686,0.995,700,1.487,716,1.716,719,2.46,761,1.596,768,1.596,811,1.851,813,2.992,819,1.909,826,1.487,904,2.9,919,1.298,948,1.613,986,3.225,987,3.532,988,3.878,989,3.878,990,3.878,991,3.532,992,3.532,993,3.878,994,3.257,995,2.658,997,4.497,998,2.658,999,4.497,1000,2.658,1001,5.154,1003,3.532,1008,3.878,1009,5.154,1010,2.658,1011,3.878,1012,2.004,1013,5.154,1014,5.154,1015,1.851,1016,6.168,1018,3.878,1019,3.878,1021,3.188,1023,2.518,1025,3.225,1027,5.23,1029,5.339,1031,2.658,1032,2.9,1035,2.367,1036,2.09,1040,2.367,1041,1.716,1043,2.395,1046,2.382,1049,3.878,1051,3.347,1052,3.878,1053,3.532,1054,2.46,1055,3.878,1056,5.154,1057,3.878,1058,3.809,1059,2.395,1060,3.732,1061,2.518,1062,3.878,1063,3.878,1064,5.154,1068,3.504,1071,2.198,1075,3.878,1077,3.878,1078,2.817,1080,3.878,1081,3.002,1082,1.925,1083,3.878,1098,4.657,1100,3.532,1104,2.382,1105,2.777,1106,2.658,1107,3.878,1108,5.23,1109,5.154,1110,2.631,1111,4.657,1112,4.657,1113,4.657,1114,4.657,1115,4.657,1116,3.225,1117,2.284,1118,2.944,1119,3.225,1120,3.878,1121,3.878,1122,2.395,1123,3.878,1124,2.09,1125,2.9,1126,2.183,1127,2.558,1128,2.658,1129,2.658,1130,2.762,1131,3.002,1132,3.504,1133,3.878,1134,5.154,1135,5.154,1136,3.878,1137,3.878,1138,3.878,1139,3.878,1140,3.878,1141,3.878,1142,3.878,1143,3.878,1144,3.878,1145,2.658,1146,3.878,1147,3.532,1148,3.966,1149,2.658,1150,2.658,1151,2.658,1152,3.878,1153,2.658,1154,3.532,1155,2.658,1156,3.878,1157,3.878,1158,3.878,1159,2.183,1160,2.395,1161,2.658,1162,3.878,1163,3.002,1164,2.518,1165,2.518,1166,2.658,1167,2.658,1168,2.658,1169,2.658,1170,2.658,1171,3.878,1172,2.817,1173,2.518,1174,3.878,1175,3.878,1176,3.878,1177,3.878,1178,3.989,1179,3.878,1180,3.878,1181,3.878,1182,3.878,1183,3.878,1184,3.878,1185,3.878,1186,3.035,1187,3.878,1188,3.878,1189,3.002,1190,3.504,1191,3.002,1192,3.878,1193,3.002,1194,2.817,1195,5.154,1196,5.154,1197,2.777,1198,5.154,1199,3.878,1200,3.878,1201,3.878,1202,3.878,1203,2.658,1204,1.781,1205,3.347,1206,2.395,1207,2.518,1208,3.532,1209,3.532,1210,3.532,1211,2.658,1212,2.658,1213,2.658,1214,3.878,1215,2.518,1216,2.658,1217,3.878,1218,3.878,1219,5.788,1220,5.154,1221,5.154,1222,3.878,1223,3.504,1224,3.878,1225,3.878,1226,3.878,1227,3.878]],["title/components/MapComponent.html",[620,0.574,730,1.564]],["body/components/MapComponent.html",[7,1.397,8,0.013,9,1.345,10,1.345,14,0.153,15,0.084,16,0.084,17,1.297,22,0.27,24,0.87,31,1.397,38,0.532,42,1.166,46,0.294,48,1.973,52,0.137,53,0.005,54,0.012,55,0.008,56,0.094,66,1.017,74,0.157,75,0.28,76,0.925,83,0.346,84,0.593,87,0.705,88,0.552,89,0.552,90,0.614,96,1.363,98,1.397,110,1.194,117,0.949,118,0.705,140,1.363,143,1.904,144,0.551,149,0.565,156,0.736,157,0.556,163,1.015,164,0.986,184,0.681,185,1.193,186,0.833,191,1.379,200,0.71,229,3.163,254,0.552,308,1.017,310,1.117,328,1.468,336,1.155,337,1.297,338,1.194,342,1.305,353,1.363,381,1.194,388,1.35,392,1.946,394,1.854,407,0.933,408,1.495,416,0.921,422,1.276,425,1.575,437,2.287,442,1.045,465,2.46,472,1.79,494,1.194,511,0.705,513,2.528,541,1.458,620,0.827,621,1.397,622,2.162,623,1.297,624,1.614,625,1.297,626,1.571,629,1.442,630,1.743,631,1.847,637,2.107,642,2.107,646,2.829,648,1.276,653,2.079,654,2.079,663,1.709,675,2.353,699,2.251,700,1.671,701,1.858,702,1.345,703,2.51,704,1.638,708,2.347,709,2.347,710,1.297,711,1.638,712,1.451,713,2.347,714,1.166,715,2.996,716,1.345,717,1.345,718,1.451,719,1.451,720,1.297,721,1.297,722,1.638,723,1.638,724,1.345,725,1.858,726,2.996,727,1.638,728,1.397,729,1.509,730,2.46,731,1.638,732,1.397,733,2.079,734,1.638,735,1.397,736,1.397,737,1.297,738,1.397,739,1.397,740,1.397,741,1.638,742,1.297,743,1.397,744,1.397,745,1.345,746,0.952,747,1.451,748,1.451,749,1.638,750,1.345,751,1.638,752,1.345,753,1.571,754,1.638,757,2.429,768,2.095,772,2.371,786,3.163,788,3.307,792,2.518,814,2.985,819,2.468,823,1.458,824,1.99,826,1.166,845,2.747,849,1.207,853,2.252,855,2.563,871,1.451,873,1.345,874,1.451,875,1.397,909,3.163,958,1.297,967,1.571,978,2.208,1017,3.372,1040,2.553,1041,2.46,1043,2.69,1046,2.095,1061,2.829,1071,1.858,1086,3.372,1104,1.792,1105,1.638,1118,2.079,1126,1.711,1191,3.372,1204,2.001,1239,3.433,1247,1.711,1276,1.345,1346,5.091,1356,3.488,1357,3.936,1360,2.083,1377,3.59,1450,1.052,1461,2.743,1466,1.207,1467,1.571,1468,1.638,1469,1.638,1484,1.711,1593,2.353,1742,2.083,1860,2.747,1865,1.451,1947,2.565,2097,2.208,2102,3.163,2171,2.208,2322,2.083,2578,2.528,2768,5.091,2769,2.747,2770,5.09,2771,4.599,2772,5.09,2773,5.559,2774,2.528,2775,2.528,2776,3.622,2777,4.555,2778,3.04,2779,4.356,2780,4.356,2781,4.356,2782,5.09,2783,5.09,2784,5.884,2785,3.372,2786,4.356,2787,5.559,2788,5.559,2789,4.037,2790,5.09,2791,5.09,2792,5.559,2793,5.023,2794,5.559,2795,5.09,2796,5.023,2797,5.09,2798,3.372,2799,4.356,2800,5.09,2801,4.356,2802,4.356,2803,6.122,2804,4.599,2805,4.356,2806,4.356,2807,4.356,2808,5.09,2809,5.09,2810,3.04,2811,2.985,2812,3.04,2813,5.09,2814,5.09,2815,5.884,2816,2.69,2817,3.04,2818,3.04,2819,4.356,2820,3.936,2821,3.04,2822,3.04,2823,3.04,2824,3.04,2825,3.04,2826,1.974,2827,3.04,2828,3.04,2829,3.04,2830,5.09,2831,3.04,2832,3.04,2833,3.04,2834,4.356,2835,3.04,2836,3.04,2837,3.04,2838,3.04,2839,3.04,2840,3.04,2841,4.356,2842,4.356,2843,5.559,2844,2.208,2845,3.04,2846,3.04,2847,3.04,2848,3.04,2849,3.04,2850,3.04,2851,4.356,2852,3.04,2853,5.559,2854,3.04,2855,2.747,2856,3.04,2857,3.04,2858,4.356,2859,5.559,2860,3.04,2861,2.747,2862,3.04,2863,4.356,2864,3.04,2865,4.356,2866,2.353,2867,3.04,2868,4.356,2869,4.356,2870,3.04,2871,3.04,2872,3.04,2923,4.993,2924,3.936,2925,4.993,2926,4.993,2927,3.485,2928,4.993,2929,3.485,2930,3.485,2931,3.485,2932,3.485,2933,3.485,2934,3.485,2935,3.485,2936,3.485,2937,3.485,2938,3.485,2939,3.485,2940,3.485,2941,3.485,2942,3.485,2943,3.485,2944,3.485,2945,3.485,2946,3.485,2947,3.485,2948,3.485,2949,3.485,2950,3.485,2951,3.485,2952,3.485,2953,3.485,2954,3.485,2955,3.485,2956,3.485,2957,3.485,2958,3.485,2959,3.485,2960,4.993]],["title/interfaces/MoneyCloudDatum.html",[56,0.109,2961,3.193]],["body/interfaces/MoneyCloudDatum.html",[8,0.013,14,0.095,15,0.095,16,0.095,22,0.277,24,0.54,38,0.605,42,1.325,46,0.461,52,0.149,53,0.006,54,0.011,55,0.008,56,0.106,58,0.723,71,2.034,72,0.723,74,0.178,75,0.307,82,0.48,83,0.302,84,0.744,85,1.595,86,2.274,87,0.801,88,0.627,96,1.289,98,1.587,99,0.857,100,0.897,101,0.774,107,1.156,110,0.947,116,0.821,117,0.999,144,0.269,149,0.598,155,1.081,156,0.5,157,0.788,164,1.09,166,1.781,179,2.509,184,0.54,185,1.08,186,0.947,187,1.723,196,0.979,200,0.922,211,1.587,222,1.786,254,0.866,267,2.034,271,1.649,279,0.991,300,3.819,319,1.715,328,1.308,336,0.916,338,0.947,342,0.886,407,0.5,460,0.916,484,1.715,494,0.947,527,1.944,541,1.156,562,2.133,580,1.649,620,0.774,625,2.033,629,0.979,630,0.829,631,0.886,633,1.893,635,1.422,636,1.766,637,1.237,642,1.237,644,2.873,648,1.012,663,1.772,686,1.399,700,1.325,732,1.587,733,3.179,757,2.274,761,1.422,764,1.862,767,2.509,768,1.422,791,2.327,792,2.092,795,2.568,811,1.649,812,2.568,814,2.367,823,1.156,824,1.706,849,1.372,855,1.706,861,2.674,871,1.649,873,1.529,874,1.649,875,1.587,904,2.682,919,1.156,936,1.862,947,1.944,948,1.492,958,1.474,967,1.786,987,2.367,991,2.367,992,2.367,994,3.07,995,2.367,997,4.142,998,3.265,999,4.007,1000,3.265,1003,3.265,1012,1.786,1015,1.649,1021,3.189,1023,2.243,1032,1.944,1036,1.862,1040,2.189,1041,1.529,1053,3.265,1058,3.939,1060,3.325,1082,1.715,1096,2.509,1098,3.122,1100,3.265,1105,1.862,1106,2.367,1108,4.306,1110,2.509,1116,2.873,1117,2.034,1127,2.708,1128,2.367,1129,2.367,1130,2.604,1145,2.367,1147,3.265,1148,3.738,1149,2.367,1150,2.367,1151,2.367,1153,2.367,1154,3.265,1155,2.367,1161,3.738,1166,2.367,1167,2.367,1168,2.367,1169,2.367,1170,2.367,1186,3.212,1197,2.568,1203,2.367,1204,1.587,1205,3.095,1206,2.133,1207,2.243,1208,3.265,1209,3.265,1210,3.265,1211,2.367,1212,2.367,1213,2.367,1215,2.243,1216,2.367,1262,2.873,1264,1.715,1276,1.529,1299,2.873,1309,2.243,1363,5.131,1377,2.94,1385,1.944,1400,2.034,1417,1.396,1461,1.862,1466,1.372,1467,1.786,1468,1.862,1469,1.862,1473,2.674,1478,1.587,1484,1.944,1507,3.265,1513,2.674,1522,2.509,1608,2.806,1628,3.095,1631,3.095,1660,3.738,1668,4.537,1725,1.944,1929,3.122,1947,2.806,1956,3.455,1979,2.509,2023,2.243,2121,2.034,2236,4.765,2263,2.365,2310,2.509,2341,3.265,2342,1.944,2409,1.715,2482,1.862,2691,2.509,2703,3.122,2816,2.133,2826,2.243,2961,5.764,2962,3.122,2963,3.455,2964,6.379,2965,6.17,2966,5.455,2967,4.765,2968,3.963,2969,3.455,2970,2.674,2971,2.674,2972,5.463,2973,3.96,2974,3.96,2975,3.455,2976,3.96,2977,3.96,2978,3.455,2979,3.96,2980,3.96,2981,3.455,2982,3.455,2983,3.96,2984,3.96,2985,3.96,2986,3.689,2987,6.254,2988,2.873,2989,4.765,2990,2.674,2991,2.674,2992,3.461,2993,3.455,2994,3.455,2995,3.689,2996,3.455,2997,3.455,2998,3.455,2999,3.96,3000,5.463,3001,2.509,3002,2.674,3003,2.674,3004,2.674,3005,4.223,3006,5.463,3007,2.674,3008,3.455,3009,3.455,3010,3.455,3011,3.455,3012,2.674,3013,2.674,3014,3.689,3015,2.674,3016,2.674,3017,3.689,3018,3.455,3019,3.455,3020,2.674,3021,3.96,3022,2.674,3023,2.674,3024,2.674,3025,2.674,3026,2.674,3027,2.674,3028,2.674,3029,2.674,3030,2.873,3031,3.455,3032,2.674,3033,3.455,3034,3.455,3035,3.455,3036,3.455,3037,4.765,3038,3.96,3039,3.455,3040,3.455,3041,3.96,3042,5.463,3043,3.96,3044,3.96,3045,3.455,3046,3.455,3047,3.455,3048,3.455,3049,3.96,3050,3.96,3051,3.96,3052,3.96,3053,3.96,3054,3.96,3055,3.455,3056,3.96,3057,2.674,3058,3.455,3059,3.455,3060,3.455,3061,3.96,3062,3.455,3063,3.455,3064,3.455,3065,3.96,3066,3.96,3067,3.96,3068,3.96,3069,3.455,3070,3.455,3071,3.455,3072,3.96,3073,3.96,3074,2.873,3075,3.96,3076,3.96,3077,3.96,3078,3.96,3079,3.96,3080,2.674,3081,3.689,3082,2.674,3083,3.455,3084,3.455,3085,2.674,3086,2.674,3087,2.674,3088,3.455,3089,2.674,3090,2.674,3091,2.674,3092,2.674,3093,2.674,3094,2.674,3095,2.674,3096,2.674,3097,2.674,3098,2.674,3099,2.674,3100,3.96,3101,2.674,3102,3.455,3103,2.674,3104,2.674,3105,2.674,3106,2.674,3107,2.674,3108,3.96,3109,3.455,3110,3.455,3111,3.96,3112,3.455,3113,3.455,3114,3.96,3115,3.96,3116,3.455,3117,3.455,3118,3.96,3119,3.96,3120,3.455,3121,3.455]],["title/interfaces/MoneyDatum.html",[56,0.109,3122,3.193]],["body/interfaces/MoneyDatum.html",[8,0.013,14,0.092,15,0.092,16,0.092,22,0.277,24,0.522,38,0.584,42,1.279,46,0.589,52,0.146,53,0.006,54,0.011,55,0.008,56,0.103,58,0.698,71,1.964,72,0.698,74,0.172,75,0.299,78,1.964,82,0.463,83,0.299,84,0.691,85,1.556,87,0.773,88,0.606,96,1.275,98,1.532,99,1.154,100,1.008,101,0.748,107,1.116,110,0.914,116,0.806,117,0.881,118,0.773,144,0.259,148,1.236,149,0.619,156,0.774,157,0.806,164,1.063,166,1.845,171,1.121,179,2.422,184,0.522,185,0.938,186,0.914,187,1.697,195,2.166,196,0.945,200,0.911,211,1.532,222,1.724,254,0.606,268,1.01,271,1.592,279,0.845,289,1.592,300,2.166,310,1.193,319,1.656,328,1.284,336,0.884,338,0.914,342,0.855,353,1.044,407,0.482,416,1.01,460,0.884,465,2.398,484,1.656,494,0.914,541,1.116,562,2.06,620,0.87,625,1.984,629,0.945,630,0.8,631,0.855,633,1.847,635,1.372,636,1.723,637,1.194,642,1.194,648,0.977,663,1.777,686,1.486,700,1.279,703,1.423,733,3.306,735,1.532,746,1.456,757,2.22,760,3.202,761,1.372,764,1.797,767,2.422,768,1.372,791,2.284,792,2.054,795,2.506,811,1.592,812,2.506,814,2.286,819,1.236,823,1.116,824,1.665,849,1.325,851,2.06,852,2.06,855,1.194,861,2.582,871,1.592,873,1.476,874,1.592,875,1.532,904,2.617,919,1.556,936,1.797,947,1.877,948,1.676,958,1.984,967,1.724,987,2.286,991,2.286,992,2.286,994,3.013,995,2.286,997,3.956,998,3.187,999,3.956,1000,3.187,1003,3.187,1006,2.582,1012,1.724,1015,1.592,1021,3.149,1023,2.166,1031,2.286,1032,1.877,1036,1.797,1040,2.136,1041,1.476,1043,2.06,1046,1.914,1053,3.187,1054,1.592,1058,3.896,1060,3.283,1078,2.422,1082,1.656,1096,2.422,1100,3.187,1104,1.914,1105,1.797,1106,2.286,1110,2.471,1116,2.774,1117,1.964,1127,2.658,1128,2.286,1129,2.286,1130,3.011,1145,2.286,1147,2.286,1148,3.669,1149,2.286,1150,2.286,1151,2.286,1153,2.286,1154,3.187,1155,2.286,1161,3.669,1165,3.02,1166,2.286,1167,2.286,1168,2.286,1169,2.286,1170,2.286,1186,3.411,1197,2.886,1203,2.286,1204,1.532,1205,3.02,1206,2.06,1207,2.166,1208,3.187,1209,3.187,1210,3.187,1211,2.286,1212,2.286,1213,2.286,1215,2.166,1216,2.286,1239,2.06,1264,1.656,1299,2.774,1309,2.166,1381,1.964,1385,1.877,1400,1.964,1406,3.335,1461,1.797,1466,1.325,1467,1.724,1468,1.797,1469,1.797,1473,2.582,1478,1.532,1484,1.877,1499,2.582,1507,3.187,1513,2.582,1522,2.422,1596,2.166,1608,2.739,1628,3.02,1631,3.02,1660,3.669,1668,4.453,1725,1.877,1929,3.014,1947,2.739,1979,2.422,2023,2.166,2032,3.014,2121,1.964,2263,2.308,2310,2.422,2341,3.187,2342,2.617,2370,3.014,2409,1.656,2482,1.797,2691,2.422,2702,3.014,2804,3.014,2816,2.06,2826,2.166,2962,3.014,2964,6.092,2965,6.092,2966,5.355,2967,4.651,2969,3.335,2970,2.582,2971,2.582,2975,3.335,2978,3.335,2981,3.335,2982,3.335,2986,2.582,2989,4.651,2990,2.582,2991,2.582,2992,3.378,2993,3.335,2994,3.335,2995,3.6,2996,3.335,2997,3.335,2998,3.335,3001,2.422,3002,2.582,3003,2.582,3004,2.582,3005,3.6,3007,2.582,3008,3.335,3009,3.335,3010,3.335,3011,3.335,3012,2.582,3013,2.582,3014,3.6,3015,2.582,3016,2.582,3017,3.6,3018,3.335,3019,3.335,3020,2.582,3022,2.582,3023,2.582,3024,2.582,3025,2.582,3026,2.582,3027,2.582,3028,2.582,3029,2.582,3031,3.335,3032,2.582,3033,3.335,3034,3.335,3035,3.335,3036,3.335,3037,6.092,3039,3.335,3040,3.335,3045,3.335,3046,3.335,3047,3.335,3048,4.651,3055,3.335,3057,2.582,3058,3.335,3059,4.651,3060,3.335,3062,3.335,3063,3.335,3064,3.335,3069,3.335,3070,3.335,3071,3.335,3080,2.582,3081,3.6,3082,2.582,3083,3.335,3084,3.335,3085,2.582,3086,2.582,3087,2.582,3088,3.335,3089,2.582,3090,2.582,3091,2.582,3092,2.582,3093,2.582,3094,2.582,3095,2.582,3096,2.582,3097,2.582,3098,2.582,3099,2.582,3101,2.582,3102,3.335,3103,2.582,3104,2.582,3105,2.582,3106,2.582,3107,3.6,3109,3.335,3110,3.335,3112,3.335,3113,3.335,3116,3.335,3117,3.335,3120,3.335,3121,3.335,3122,5.85,3123,2.286,3124,3.867,3125,2.166,3126,2.166,3127,5.331,3128,3.823,3129,3.335,3130,2.774,3131,2.774,3132,2.166,3133,2.774,3134,2.774,3135,2.774,3136,3.823,3137,2.774,3138,2.774,3139,3.823,3140,3.823,3141,3.823,3142,3.823,3143,3.823,3144,3.823,3145,3.823,3146,3.823,3147,3.823,3148,3.823,3149,3.823,3150,2.774,3151,3.823,3152,2.774,3153,2.774,3154,3.823,3155,3.823,3156,3.823,3157,3.823,3158,2.774,3159,2.774,3160,3.867,3161,3.823,3162,2.774,3163,2.774,3164,2.774,3165,2.774,3166,2.774,3167,3.823,3168,2.774,3169,2.774,3170,2.774,3171,2.774,3172,2.774,3173,3.823,3174,3.823,3175,3.823,3176,3.823,3177,3.823,3178,3.823,3179,3.823,3180,3.823,3181,3.823]],["title/interfaces/NetworkContext.html",[56,0.109,93,1.265]],["body/interfaces/NetworkContext.html",[8,0.013,14,0.081,15,0.081,16,0.081,22,0.251,34,0.917,38,0.513,46,0.561,52,0.195,53,0.005,54,0.007,55,0.007,56,0.197,58,0.613,65,1.419,67,1.877,68,1.579,72,1.043,74,0.282,75,0.389,76,0.407,79,1.123,82,0.84,83,0.328,84,0.782,85,0.98,88,0.905,89,1.353,90,1.487,91,1.847,92,1.877,93,2.164,94,1.589,96,1.26,99,0.727,100,0.799,101,0.657,104,2.211,107,0.98,111,1.346,117,0.721,118,1.156,122,2.192,128,2.29,133,1.518,140,1.56,142,2.133,143,2.166,144,0.514,147,1.346,148,2.024,149,0.649,150,2.215,155,0.917,156,0.79,157,0.879,159,0.887,163,0.638,164,0.78,166,1.888,170,1.668,171,0.613,181,1.355,182,1.626,185,1.234,191,1.614,193,2.458,196,1.202,200,0.698,254,0.532,262,1.514,265,1.98,279,0.905,285,0.476,291,1.785,294,1.296,295,1.296,297,2.319,308,1.419,309,2.303,310,1.088,311,1.87,314,1.049,320,1.571,321,2.387,333,1.163,354,1.049,358,2.096,363,1.518,378,1.518,381,1.162,386,1.454,388,0.777,392,0.777,394,0.887,395,2.619,407,0.874,408,0.983,413,1.454,416,0.887,418,1.372,421,2.712,422,0.858,425,1.713,427,2.331,428,1.454,431,1.454,433,1.454,441,1.518,442,0.703,445,2.331,453,2.379,457,1.948,460,1.449,468,1.123,476,2.945,477,1.877,479,2.331,482,2.664,511,0.679,526,1.891,538,3.001,541,1.419,545,2.686,547,2.754,555,2.497,576,1.902,582,3.001,672,2.024,674,3.075,681,1.948,690,2.754,698,1.902,791,2.724,792,2.449,794,2.536,849,1.163,855,1.956,866,1.205,868,1.454,919,2.086,948,1.56,1110,1.25,1126,2.387,1127,1.454,1293,2.619,1295,2.619,1296,1.809,1373,2.724,1407,1.902,1417,0.858,1450,1.891,1466,1.163,1478,1.948,1527,1.902,1574,2.379,1623,1.649,1652,1.649,1694,2.192,1697,1.649,1714,2.105,1776,2.754,2017,2.754,2058,3.263,2061,2.387,2085,1.649,2135,1.454,2138,1.346,2182,1.649,2183,1.649,2186,2.387,2191,1.649,2206,1.649,2279,1.579,2340,2.192,2345,2.497,2379,2.619,2380,1.902,2381,2.007,2382,2.007,2383,3.075,2384,2.933,2385,1.809,2386,1.902,2387,2.192,2388,2.619,2389,2.007,2390,2.906,2391,2.024,2392,2.007,2393,2.007,2394,2.007,2395,2.906,2396,2.007,2397,2.007,2398,2.805,2399,2.906,2400,2.007,2401,2.007,2402,2.007,2403,1.902,2404,2.007,2405,2.007,2406,2.007,2407,2.007,2408,1.902,2409,2.105,2410,2.007,2411,2.007,2412,2.619,2413,2.906,2414,2.754,2415,2.007,2416,2.007,2417,2.007,2418,2.007,2419,2.007,2420,2.007,2421,2.007,2422,2.007,2423,2.007,2424,2.007,2425,2.007,2426,2.007,2427,2.007,2428,2.007,2429,2.007,2430,2.007,2431,2.007,2432,2.007,2433,2.906,2434,2.754,2435,2.007,2436,2.007,2437,2.007,2438,2.007,2439,2.007,2440,2.007,2441,2.007,2442,2.007,2443,2.007,2444,2.906,2445,2.007,2446,2.007,2447,2.007,2448,2.007,2449,2.906,2450,2.007,2451,2.007,2452,2.007,2453,2.007,2454,2.906,2455,2.906,2456,2.007,2457,2.007,2458,2.007,2459,2.007,2460,2.007,2461,2.906,2462,2.007,2463,2.007,2464,2.007,2465,2.007,2466,2.007,2467,3.744,2468,2.007,2469,2.007,2470,2.007,2471,2.007,2472,2.007,2473,2.007,2474,2.007,2475,2.007,2476,2.007,2477,2.007,2478,2.007,2479,2.007,2480,2.906,2481,2.007,2482,2.285,2483,2.007,2484,2.007,2485,2.906,2486,2.105,2487,2.007,2488,2.007,2489,2.007,2490,2.007,2491,2.906,2492,2.007,2493,2.906,2494,2.007,2495,2.906,2496,2.906,2497,2.007,2498,2.007,2499,2.007,2500,2.007,2501,2.007,2502,2.007,2503,2.007,2504,2.906,2505,2.007,2506,2.007,2507,2.906,2508,2.007,2509,2.007,2510,2.007,2511,2.007,2512,2.007,2513,2.007,2514,2.007,2515,2.906,2516,2.007,2517,2.007,2518,2.007,2519,2.007,2520,2.007,2521,2.007,2522,2.007,2523,2.007,2524,2.007,2525,2.007,2526,2.007,2527,2.007,2528,2.007,2529,2.007,2530,2.007,2531,2.007,2532,2.007,2533,2.007,2534,2.007,2535,2.906,2536,2.007,2537,2.007,2538,2.007,2539,2.007,2540,2.007,2541,2.007,2542,2.007,2543,2.007,3182,3.358]],["title/classes/NetworkDataset.html",[53,0.006,92,1.144]],["body/classes/NetworkDataset.html",[8,0.013,14,0.071,15,0.071,16,0.071,22,0.242,34,0.806,38,0.451,46,0.497,52,0.188,53,0.005,54,0.007,55,0.007,56,0.19,65,1.291,67,1.706,68,1.388,72,0.968,74,0.265,75,0.372,76,0.915,79,0.987,82,0.89,83,0.328,84,0.789,85,0.862,88,0.7,89,1.353,90,1.485,91,1.713,92,2.037,93,1.969,94,1.407,96,1.209,99,0.639,100,0.726,101,0.577,104,2.145,107,0.862,111,1.183,117,0.669,118,1.072,122,2.39,128,2.359,133,1.838,140,1.447,142,2.166,143,2.106,144,0.535,147,1.183,148,1.902,149,0.626,150,2.233,155,1.207,156,0.835,157,0.859,159,0.78,163,0.696,164,0.723,166,1.863,170,1.84,171,0.539,181,1.432,182,1.479,185,1.297,191,1.682,193,2.447,200,0.656,254,0.468,262,1.331,265,1.836,279,0.84,285,0.627,291,1.655,294,1.139,295,1.139,297,2.214,308,1.291,309,2.184,310,0.989,311,1.93,314,0.922,320,1.429,321,2.602,333,1.023,354,0.922,358,1.969,363,1.838,376,1.516,378,1.381,381,1.057,386,1.278,388,0.683,392,1.844,394,1.995,395,1.59,407,1.037,408,1.388,413,1.278,416,0.78,418,1.248,421,2.865,422,0.754,425,1.635,427,2.19,428,1.278,431,1.278,433,1.278,441,1.655,442,0.618,445,2.19,453,2.207,457,1.772,460,1.226,468,0.987,476,2.767,477,2.046,479,2.553,482,2.651,511,0.597,526,2.218,538,3.124,541,1.291,545,2.492,547,2.504,555,2.271,576,1.672,582,2.865,672,1.841,674,1.449,681,1.772,690,2.504,698,1.672,791,1.972,792,1.773,794,1.836,849,1.023,855,1.838,866,1.06,868,1.278,919,2.003,948,1.721,1110,1.098,1126,1.449,1127,1.278,1293,2.381,1295,2.381,1296,1.59,1373,1.972,1407,1.672,1417,0.754,1450,2.071,1466,2.039,1478,1.183,1527,1.672,1574,2.207,1623,1.449,1652,1.449,1694,1.993,1697,1.449,1714,2.295,1776,3.334,2017,1.672,2058,3.095,2061,2.17,2085,2.17,2135,1.278,2138,1.183,2182,1.449,2183,1.449,2186,2.17,2191,1.449,2206,1.449,2279,1.388,2340,1.993,2345,2.271,2379,4.314,2380,1.672,2381,1.764,2382,1.764,2383,2.17,2384,2.891,2385,1.59,2386,1.672,2387,1.993,2388,2.381,2389,1.764,2390,3.168,2391,1.841,2392,1.764,2393,1.764,2394,1.764,2395,3.168,2396,1.764,2397,1.764,2398,2.89,2399,2.643,2400,1.764,2401,1.764,2402,1.764,2403,1.672,2404,1.764,2405,1.764,2406,1.764,2407,1.764,2408,1.672,2409,1.914,2410,1.764,2411,1.764,2412,1.59,2413,1.764,2414,1.672,2415,1.764,2416,1.764,2417,2.643,2418,1.764,2419,2.643,2420,1.764,2421,2.643,2422,1.764,2423,2.643,2424,1.764,2425,3.518,2426,1.764,2427,3.518,2428,1.764,2429,3.518,2430,1.764,2431,1.764,2432,3.518,2433,2.643,2434,3.571,2435,3.518,2436,1.764,2437,3.518,2438,1.764,2439,1.764,2440,1.764,2441,2.643,2442,1.764,2443,1.764,2444,2.643,2445,1.764,2446,2.643,2447,1.764,2448,1.764,2449,2.643,2450,1.764,2451,1.764,2452,3.168,2453,1.764,2454,2.643,2455,2.643,2456,1.764,2457,1.764,2458,2.643,2459,1.764,2460,1.764,2461,3.768,2462,2.643,2463,2.643,2464,2.643,2465,1.764,2466,1.764,2467,4.101,2468,1.764,2469,1.764,2470,1.764,2471,1.764,2472,1.764,2473,2.643,2474,2.643,2475,2.643,2476,2.643,2477,1.764,2478,1.764,2479,2.643,2480,3.168,2481,2.643,2482,2.767,2483,2.643,2484,2.643,2485,2.643,2486,1.914,2487,1.764,2488,1.764,2489,1.764,2490,1.764,2491,2.643,2492,1.764,2493,2.643,2494,1.764,2495,2.643,2496,2.643,2497,1.764,2498,1.764,2499,1.764,2500,1.764,2501,1.764,2502,1.764,2503,1.764,2504,2.643,2505,1.764,2506,1.764,2507,2.643,2508,1.764,2509,1.764,2510,1.764,2511,1.764,2512,1.764,2513,1.764,2514,1.764,2515,2.643,2516,1.764,2517,1.764,2518,1.764,2519,1.764,2520,1.764,2521,1.764,2522,2.643,2523,2.643,2524,1.764,2525,1.764,2526,1.764,2527,1.764,2528,1.764,2529,1.764,2530,1.764,2531,1.764,2532,1.764,2533,1.764,2534,1.764,2535,2.643,2536,1.764,2537,1.764,2538,1.764,2539,1.764,2540,1.764,2541,1.764,2542,1.764,2543,1.764,3183,4.421,3184,4.421,3185,4.421,3186,4.421,3187,4.421,3188,4.421,3189,4.421,3190,4.421,3191,4.421,3192,4.421,3193,2.952,3194,2.952,3195,2.952,3196,2.952,3197,2.952,3198,2.952,3199,2.952,3200,2.952,3201,2.952,3202,2.952,3203,2.952,3204,2.952,3205,2.952,3206,2.952,3207,2.952,3208,2.952,3209,2.952,3210,2.952,3211,2.952]],["title/modules/NetworkModule.html",[0,2.182,3212,2.939]],["body/modules/NetworkModule.html",[2,2.554,3,3.321,8,0.013,11,2.629,12,1.722,13,2.554,14,0.181,15,0.141,16,0.141,20,3.805,21,3.805,22,0.29,23,3.805,24,0.805,25,3.629,26,3.03,27,5.124,28,5.124,29,3.342,33,3.805,34,1.611,35,4.475,36,2.773,37,4.475,38,0.901,41,5.124,42,1.974,50,3.03,52,0.161,53,0.009,54,0.011,55,0.011,89,0.935,90,1.04,621,3.388,717,3.264,740,3.388,750,3.264,1332,6.162,1333,5.146,2384,2.364,3212,6.195,3213,5.146,3214,5.146,3215,5.146,3216,5.899,3217,5.899,3218,7.064,3219,5.899]],["title/interfaces/NetworkProvider.html",[56,0.109,291,1.265]],["body/interfaces/NetworkProvider.html",[8,0.013,14,0.075,15,0.075,16,0.075,22,0.246,34,0.859,38,0.481,46,0.572,52,0.192,53,0.005,54,0.007,55,0.007,56,0.193,58,0.574,65,1.353,67,1.79,68,1.479,72,1.005,74,0.273,75,0.38,76,0.849,79,1.053,82,0.871,83,0.329,84,0.778,85,0.919,88,0.872,89,1.353,90,1.487,91,1.779,92,2.071,93,2.292,94,1.675,96,1.363,99,0.681,100,0.761,101,0.615,104,2.336,107,0.919,111,1.261,117,0.694,118,1.113,122,2.09,124,2.007,128,2.206,133,1.448,140,1.503,142,2.09,143,2.136,144,0.537,147,1.261,148,2.093,149,0.638,150,2.185,155,0.859,156,0.907,157,0.869,159,0.831,163,0.608,164,0.751,166,1.85,170,1.773,171,0.574,181,1.466,182,1.551,185,1.223,191,1.657,193,2.465,200,0.677,254,0.499,262,1.419,265,1.907,279,0.872,285,0.446,291,1.897,294,1.79,295,1.79,297,2.531,308,1.353,309,2.585,310,1.359,311,1.836,314,1.448,320,1.498,321,2.276,333,2.104,354,1.448,358,2.032,363,1.448,378,2.116,381,1.109,383,2.626,384,2.626,385,2.626,386,2.63,387,2.276,388,1.405,389,2.626,390,2.626,392,1.726,394,1.85,407,0.998,408,0.637,413,2.007,416,0.831,418,1.309,421,2.63,422,1.185,425,1.674,427,2.606,428,2.007,431,2.007,433,2.007,441,1.719,442,0.658,445,2.26,453,2.82,457,2.434,460,1.405,468,1.053,476,2.855,477,1.79,479,2.26,482,2.807,511,0.637,526,1.834,538,2.933,541,1.353,545,2.855,547,2.626,555,2.381,576,1.782,582,2.933,672,1.93,674,1.545,681,2.434,690,2.626,698,1.782,791,2.048,792,1.842,794,1.907,849,1.09,855,1.897,866,1.13,868,2.007,919,2.045,948,1.503,1110,1.171,1126,1.545,1127,1.362,1293,2.497,1295,2.497,1296,1.695,1373,2.048,1407,1.782,1417,0.804,1450,1.834,1466,1.09,1478,1.261,1527,2.626,1574,2.292,1623,2.276,1652,2.276,1694,2.09,1697,1.545,1714,2.383,1776,2.626,2017,1.782,2058,3.179,2061,2.276,2085,1.545,2135,1.362,2138,1.261,2182,1.545,2183,1.545,2186,2.276,2191,1.545,2206,1.545,2279,1.479,2340,2.09,2345,3.12,2379,4.076,2380,1.782,2381,1.881,2382,1.881,2383,2.276,2384,2.94,2385,1.695,2386,1.782,2387,2.09,2388,2.497,2389,1.881,2390,2.771,2391,1.93,2392,1.881,2393,1.881,2394,1.881,2395,2.771,2396,1.881,2397,1.881,2398,2.702,2399,2.771,2400,1.881,2401,2.771,2402,2.771,2403,2.626,2404,2.771,2405,1.881,2406,1.881,2407,1.881,2408,2.626,2409,2.63,2410,2.771,2411,2.771,2412,1.695,2413,1.881,2414,1.782,2415,1.881,2416,1.881,2417,1.881,2418,1.881,2419,1.881,2420,1.881,2421,1.881,2422,1.881,2423,1.881,2424,1.881,2425,1.881,2426,1.881,2427,1.881,2428,1.881,2429,1.881,2430,1.881,2431,1.881,2432,1.881,2433,2.771,2434,2.626,2435,1.881,2436,1.881,2437,1.881,2438,1.881,2439,1.881,2440,1.881,2441,1.881,2442,1.881,2443,1.881,2444,2.771,2445,1.881,2446,1.881,2447,1.881,2448,1.881,2449,2.771,2450,1.881,2451,1.881,2452,1.881,2453,1.881,2454,2.771,2455,2.771,2456,1.881,2457,1.881,2458,1.881,2459,1.881,2460,1.881,2461,2.771,2462,1.881,2463,1.881,2464,1.881,2465,1.881,2466,1.881,2467,3.63,2468,1.881,2469,1.881,2470,1.881,2471,1.881,2472,1.881,2473,1.881,2474,1.881,2475,1.881,2476,1.881,2477,1.881,2478,1.881,2479,1.881,2480,2.771,2481,1.881,2482,2.179,2483,1.881,2484,1.881,2485,2.771,2486,2.007,2487,1.881,2488,1.881,2489,1.881,2490,1.881,2491,2.771,2492,1.881,2493,2.771,2494,1.881,2495,2.771,2496,2.771,2497,1.881,2498,1.881,2499,1.881,2500,1.881,2501,1.881,2502,1.881,2503,1.881,2504,2.771,2505,1.881,2506,1.881,2507,2.771,2508,1.881,2509,1.881,2510,1.881,2511,1.881,2512,1.881,2513,1.881,2514,1.881,2515,2.771,2516,1.881,2517,1.881,2518,1.881,2519,1.881,2520,1.881,2521,1.881,2522,1.881,2523,1.881,2524,1.881,2525,1.881,2526,1.881,2527,1.881,2528,1.881,2529,1.881,2530,1.881,2531,1.881,2532,1.881,2533,1.881,2534,1.881,2535,2.771,2536,1.881,2537,1.881,2538,1.881,2539,1.881,2540,1.881,2541,1.881,2542,1.881,2543,1.881,3220,3.147,3221,3.147,3222,3.147,3223,3.147,3224,3.147,3225,3.147,3226,3.147,3227,3.147,3228,3.147,3229,3.147]],["title/components/NgxChart.html",[620,0.574,742,1.507]],["body/components/NgxChart.html",[7,1.781,8,0.013,9,1.715,10,1.715,14,0.159,15,0.107,16,0.107,17,1.653,22,0.259,24,0.606,31,1.781,34,1.213,36,2.089,46,0.597,48,2.009,52,0.181,53,0.007,54,0.01,55,0.009,56,0.159,66,1.297,74,0.2,75,0.332,76,0.804,82,0.715,83,0.342,84,0.746,89,0.704,90,0.783,100,0.73,101,0.869,116,0.871,117,0.928,143,1.873,144,0.524,149,0.394,155,1.613,157,0.82,163,0.871,164,0.606,167,2.459,184,0.806,187,1.135,196,1.64,285,1.002,381,1.412,388,1.534,392,1.931,394,1.752,407,0.954,408,1.53,468,2.365,494,1.412,511,0.899,538,1.924,580,2.459,620,0.94,621,1.781,622,2.557,623,1.653,624,1.436,625,1.653,626,2.003,629,1.64,630,1.777,631,1.895,637,1.388,642,1.388,648,1.509,653,2.459,654,2.459,663,1.484,699,2.663,700,1.976,701,2.198,702,1.715,703,2.63,704,2.089,708,2.776,709,2.776,710,1.653,711,2.089,712,1.85,713,2.776,714,1.487,715,3.323,716,1.715,717,1.715,718,1.85,719,1.85,720,1.653,721,1.653,722,2.089,723,2.089,724,1.715,725,3.147,726,3.323,727,2.089,728,1.781,729,1.924,730,1.715,731,2.089,732,1.781,733,2.459,734,2.089,735,1.781,736,1.781,737,1.653,738,1.781,739,1.781,740,1.781,741,2.089,742,2.63,743,1.781,744,1.781,745,1.715,746,1.213,747,1.85,748,1.85,749,2.089,750,1.715,751,2.089,752,1.715,753,2.003,754,2.089,759,3.257,761,2.12,772,2.63,773,3.323,786,3.741,823,1.724,824,2.208,826,1.487,853,2.561,919,1.724,1010,4.226,1017,3.988,1021,2.991,1035,1.781,1046,2.537,1054,3.15,1086,4.479,1104,1.595,1105,2.089,1124,2.776,1267,2.656,1339,3.502,1340,4.655,1371,4.812,1373,2.815,1375,4.891,1392,3.741,1393,4.812,1417,1.135,1449,2.872,1462,4.202,1471,2.815,1476,2.815,1498,3.223,1506,5.128,1609,4.226,1610,3.223,1611,5.229,1612,5.229,1613,4.655,1614,3.001,1615,3.53,1616,3.965,1617,3.502,1618,3.001,1619,3.502,1620,3.502,1621,3.502,1622,3.276,1623,3.47,1624,3.502,1625,5.229,1626,3.502,1627,3.502,1628,4.004,1629,3.502,1630,3.502,1631,3.758,1632,3.502,1633,4.655,1634,3.001,1635,3.502,1636,4.479,1637,3.502,1638,3.502,1639,3.502,1640,2.198,1641,3.502,1642,3.502,1643,2.282,1644,3.001,1645,3.502,1646,3.502,1647,3.502,1648,2.656,1649,3.502,1650,3.502,1651,3.502,1652,2.181,1653,3.502,1654,3.502,1655,4.655,1656,3.502,1657,3.502,1658,2.656,1659,3.502,3230,5.906,3231,4.443,3232,5.906,3233,4.443,3234,4.443,3235,4.443,3236,4.443,3237,4.443,3238,4.443,3239,4.443,3240,4.443,3241,4.443,3242,4.443,3243,4.443,3244,4.443,3245,4.443,3246,4.443,3247,4.443,3248,4.443,3249,4.443,3250,4.443,3251,4.443,3252,4.443,3253,4.443,3254,4.443,3255,5.906,3256,5.906,3257,5.906,3258,4.443]],["title/modules/NgxChartsModule.html",[0,2.182,3259,2.939]],["body/modules/NgxChartsModule.html",[2,3.117,3,3.383,8,0.013,11,2.678,12,1.777,13,2.636,14,0.146,15,0.146,16,0.146,20,3.877,21,3.877,22,0.286,23,3.877,24,0.831,25,3.697,26,3.127,33,3.877,34,1.662,35,4.56,36,2.862,48,1.662,50,3.127,52,0.166,53,0.009,54,0.011,55,0.011,724,3.276,725,2.678,742,3.158,1054,2.534,1275,4.86,1276,2.35,1614,4.111,1615,4.302,2546,4.416,2547,4.416,3259,6.113,3260,5.31,3261,5.31,3262,5.31,3263,6.087,3264,6.087,3265,7.197,3266,7.197,3267,7.197,3268,7.197,3269,7.197,3270,7.197]],["title/interfaces/Node.html",[56,0.109,89,0.642]],["body/interfaces/Node.html",[8,0.013,14,0.081,15,0.081,16,0.081,22,0.251,34,0.92,38,0.515,46,0.53,52,0.196,53,0.005,54,0.007,55,0.007,56,0.197,58,0.615,65,1.423,67,1.882,68,1.584,72,1.145,74,0.282,75,0.39,76,0.591,79,1.128,82,0.888,83,0.332,84,0.784,85,0.984,88,0.772,89,1.354,90,1.48,91,1.851,92,1.879,93,2.235,94,1.5,96,1.261,99,0.729,100,0.801,101,0.659,104,2.286,107,0.984,111,1.351,117,0.722,118,1.158,122,2.198,128,2.295,133,1.522,140,1.713,142,2.112,143,2.167,144,0.452,147,1.351,148,2.028,149,0.65,150,2.184,155,0.92,156,0.792,157,0.88,159,0.89,163,0.64,164,0.976,166,2.028,170,1.672,171,0.615,181,1.358,182,1.631,185,1.234,191,1.615,193,2.428,200,0.699,254,0.534,262,2.198,265,1.984,279,0.907,285,0.478,291,2.079,294,1.301,295,1.301,297,2.498,308,1.423,309,2.306,310,1.091,311,1.872,314,1.053,320,1.575,321,2.393,333,1.168,354,1.053,358,2.394,363,1.522,378,1.522,386,1.459,388,0.78,407,0.84,408,0.682,413,1.459,416,0.89,418,1.617,421,2.882,422,0.861,425,1.715,427,2.335,428,1.459,431,1.459,433,1.459,441,1.522,442,1.02,445,2.582,453,2.384,457,1.953,460,1.324,468,1.128,476,2.95,477,1.882,479,2.335,482,2.668,511,0.682,526,2.16,538,3.233,541,1.832,545,2.692,547,2.761,555,2.504,576,1.909,582,3.005,672,2.029,674,1.655,681,1.953,690,2.761,698,1.909,791,2.131,792,1.916,794,1.984,849,1.168,855,1.96,866,1.21,868,1.459,919,2.089,948,1.564,1110,1.814,1126,1.655,1127,1.459,1293,2.626,1295,2.626,1296,1.816,1373,2.131,1407,1.909,1417,0.861,1450,1.894,1466,1.168,1478,1.351,1527,1.909,1574,2.384,1623,1.655,1652,1.655,1694,2.198,1697,1.655,1714,2.111,1776,2.761,2017,1.909,2058,3.722,2061,2.393,2085,1.655,2135,1.459,2138,1.351,2182,1.655,2183,1.655,2186,2.393,2191,1.655,2206,1.655,2279,1.584,2340,2.198,2345,2.504,2379,1.816,2380,1.909,2381,2.015,2382,2.015,2383,2.393,2384,2.936,2385,1.816,2386,1.909,2387,2.198,2388,2.626,2389,2.015,2390,2.914,2391,2.029,2392,2.015,2393,2.015,2394,2.015,2395,2.914,2396,2.914,2397,2.914,2398,3.268,2399,3.423,2400,2.914,2401,2.015,2402,2.015,2403,1.909,2404,2.015,2405,2.015,2406,2.015,2407,2.015,2408,1.909,2409,2.111,2410,2.015,2411,2.015,2412,1.816,2413,2.015,2414,1.909,2415,2.015,2416,2.015,2417,2.015,2418,2.015,2419,2.015,2420,2.015,2421,2.015,2422,2.015,2423,2.015,2424,2.015,2425,2.015,2426,2.015,2427,2.015,2428,2.015,2429,2.015,2430,2.015,2431,2.015,2432,2.015,2433,2.914,2434,2.761,2435,2.015,2436,2.015,2437,2.015,2438,2.015,2439,2.015,2440,2.015,2441,2.015,2442,2.015,2443,2.015,2444,2.914,2445,2.015,2446,2.015,2447,2.015,2448,2.015,2449,2.914,2450,2.015,2451,2.015,2452,2.015,2453,2.015,2454,2.914,2455,2.914,2456,2.015,2457,2.015,2458,2.015,2459,2.015,2460,2.015,2461,2.914,2462,2.015,2463,2.015,2464,2.015,2465,2.015,2466,2.015,2467,3.751,2468,2.015,2469,2.015,2470,2.015,2471,2.015,2472,2.015,2473,2.015,2474,2.015,2475,2.015,2476,2.015,2477,2.015,2478,2.015,2479,2.015,2480,2.914,2481,2.015,2482,2.292,2483,2.015,2484,2.015,2485,2.914,2486,2.111,2487,2.015,2488,2.015,2489,2.015,2490,2.015,2491,2.914,2492,2.015,2493,2.914,2494,2.015,2495,2.914,2496,2.914,2497,2.015,2498,2.015,2499,2.015,2500,2.015,2501,2.015,2502,2.015,2503,2.015,2504,2.914,2505,2.015,2506,2.015,2507,2.914,2508,2.015,2509,2.015,2510,2.015,2511,2.015,2512,2.015,2513,2.015,2514,2.015,2515,2.914,2516,2.015,2517,2.015,2518,2.015,2519,2.015,2520,2.015,2521,2.015,2522,2.015,2523,2.015,2524,2.015,2525,2.015,2526,2.015,2527,2.015,2528,2.015,2529,2.015,2530,2.015,2531,2.015,2532,2.015,2533,2.015,2534,2.015,2535,2.914,2536,2.015,2537,2.015,2538,2.015,2539,2.015,2540,2.015,2541,2.015,2542,2.015,2543,2.015]],["title/interfaces/NodeData.html",[56,0.109,1280,2.939]],["body/interfaces/NodeData.html",[8,0.013,14,0.188,15,0.131,16,0.131,22,0.231,24,0.747,46,0.462,52,0.185,53,0.008,54,0.01,55,0.01,56,0.147,58,0.999,74,0.246,75,0.379,76,0.818,82,0.818,83,0.316,84,0.51,89,1.359,90,0.965,94,1.614,95,1.896,116,0.961,118,1.107,142,1.783,144,0.371,156,0.69,157,0.816,162,2.113,164,1.043,166,2.203,196,1.353,200,0.851,220,1.965,244,1.494,279,1.211,285,1.038,289,2.279,299,2.468,328,1.145,353,1.494,358,1.831,363,1.709,442,1.145,460,1.266,477,2.113,494,1.309,526,1.652,620,0.957,624,1.769,628,3.97,629,1.668,630,1.145,631,1.224,632,4.896,633,1.896,634,4.314,635,1.965,636,1.769,637,2.108,638,4.314,639,4.314,640,4.314,641,5.32,642,1.709,643,3.272,644,3.97,645,3.696,646,3.101,647,4.314,648,1.398,649,4.314,650,3.101,651,3.696,653,2.279,656,4.314,663,1.51,664,4.314,665,4.314,670,3.97,671,4.314,672,2.279,673,2.468,674,2.687,675,3.696,676,4.314,677,4.314,678,4.314,679,5.32,680,3.97,681,2.193,682,4.314,683,3.101,684,1.965,685,4.314,686,1.224,687,3.97,717,2.113,1278,4.314,1279,4.276,1280,5.798,1286,4.774,1287,4.774,1288,4.774,1289,4.774,1290,4.774,1291,4.774,1292,4.774,1293,3.943,1294,6.384,1295,3.636,1296,2.948,1297,4.774,1298,4.774,1299,3.97,1300,4.774,1301,4.774,1302,4.774,1303,4.314,1304,4.774,1305,4.774,1306,3.97,1307,4.774,1308,4.774,1309,3.101,1310,4.774,1311,4.774,1312,3.97,1313,4.774,1314,4.774,1315,4.774,1316,4.774,1317,4.774,1318,4.774]],["title/interfaces/NodeType.html",[56,0.109,445,1.507]],["body/interfaces/NodeType.html",[8,0.013,14,0.082,15,0.082,16,0.082,22,0.252,34,0.934,38,0.523,46,0.533,52,0.197,53,0.005,54,0.008,55,0.008,56,0.198,58,0.625,65,1.438,67,1.902,68,1.608,72,1.054,74,0.284,75,0.392,76,0.597,79,1.145,82,0.845,83,0.318,84,0.785,85,0.999,88,0.781,89,1.354,90,1.481,91,1.866,92,1.89,93,2.091,94,1.511,96,1.267,99,0.74,100,0.809,101,0.669,104,2.22,107,0.999,111,1.371,117,0.797,118,1.278,122,2.222,128,2.314,133,1.539,140,1.725,142,2.104,143,2.197,144,0.499,147,1.371,148,2.164,149,0.653,150,2.188,155,0.934,156,0.797,157,0.882,159,0.904,163,0.647,164,0.788,166,1.898,170,1.686,171,0.625,181,1.367,182,1.648,185,1.237,191,1.621,193,2.42,200,0.704,254,0.542,262,1.542,265,2.001,279,0.915,285,0.485,291,1.804,294,1.321,295,1.321,297,2.333,308,1.438,309,2.32,310,1.102,311,1.88,314,1.069,320,1.593,321,2.419,333,1.185,354,1.069,358,2.24,363,1.539,378,1.539,386,1.481,388,0.791,398,2.051,407,0.845,408,0.692,413,1.481,416,0.904,418,1.391,421,2.736,422,0.874,425,1.88,427,2.351,428,1.481,431,1.481,433,1.481,441,1.539,442,0.716,445,2.492,453,2.404,457,1.974,460,1.336,468,1.145,476,2.97,477,1.902,479,2.351,482,2.683,511,0.692,526,1.908,538,3.02,541,1.438,545,2.97,547,3.271,555,2.531,576,1.938,582,3.02,672,2.404,674,1.68,681,1.974,690,2.791,698,1.938,791,2.149,792,1.932,794,2.001,849,1.185,855,1.973,866,1.228,868,1.481,919,2.098,948,1.577,1110,1.273,1126,1.68,1127,1.481,1293,2.654,1295,2.654,1296,1.843,1373,2.149,1407,1.938,1417,0.874,1450,1.908,1466,1.185,1478,1.371,1527,1.938,1574,2.404,1623,1.68,1652,1.68,1694,2.604,1697,1.68,1714,2.134,1776,2.791,2017,1.938,2058,3.287,2061,2.419,2085,1.68,2135,1.481,2138,1.371,2182,1.68,2183,1.68,2186,2.419,2191,1.68,2206,1.68,2279,1.608,2340,2.222,2345,2.531,2379,1.843,2380,1.938,2381,2.045,2382,2.045,2383,2.419,2384,3.003,2385,1.843,2386,1.938,2387,2.604,2388,3.111,2389,2.945,2390,4.003,2391,2.404,2392,2.045,2393,2.045,2394,2.045,2395,2.945,2396,2.045,2397,2.045,2398,2.835,2399,2.945,2400,2.045,2401,2.045,2402,2.045,2403,1.938,2404,2.045,2405,2.045,2406,2.045,2407,2.045,2408,1.938,2409,2.134,2410,2.045,2411,2.045,2412,1.843,2413,2.045,2414,1.938,2415,2.045,2416,2.045,2417,2.045,2418,2.045,2419,2.045,2420,2.045,2421,2.045,2422,2.045,2423,2.045,2424,2.045,2425,2.045,2426,2.045,2427,2.045,2428,2.045,2429,2.045,2430,2.045,2431,2.045,2432,2.045,2433,2.945,2434,2.791,2435,2.045,2436,2.045,2437,2.045,2438,2.045,2439,2.045,2440,2.045,2441,2.045,2442,2.045,2443,2.045,2444,2.945,2445,2.045,2446,2.045,2447,2.045,2448,2.045,2449,2.945,2450,2.045,2451,2.045,2452,2.045,2453,2.045,2454,2.945,2455,2.945,2456,2.045,2457,2.045,2458,2.045,2459,2.045,2460,2.045,2461,2.945,2462,2.045,2463,2.045,2464,2.045,2465,2.045,2466,2.045,2467,3.777,2468,2.045,2469,2.045,2470,2.045,2471,2.045,2472,2.045,2473,2.045,2474,2.045,2475,2.045,2476,2.045,2477,2.045,2478,2.045,2479,2.045,2480,2.945,2481,2.045,2482,2.316,2483,2.045,2484,2.045,2485,2.945,2486,2.134,2487,2.045,2488,2.045,2489,2.045,2490,2.045,2491,2.945,2492,2.045,2493,2.945,2494,2.045,2495,2.945,2496,2.945,2497,2.045,2498,2.045,2499,2.045,2500,2.045,2501,2.045,2502,2.045,2503,2.045,2504,2.945,2505,2.045,2506,2.045,2507,2.945,2508,2.045,2509,2.045,2510,2.045,2511,2.045,2512,2.045,2513,2.045,2514,2.045,2515,2.945,2516,2.045,2517,2.045,2518,2.045,2519,2.045,2520,2.045,2521,2.045,2522,2.045,2523,2.045,2524,2.045,2525,2.045,2526,2.045,2527,2.045,2528,2.045,2529,2.045,2530,2.045,2531,2.045,2532,2.045,2533,2.045,2534,2.045,2535,2.945,2536,2.045,2537,2.045,2538,2.045,2539,2.045,2540,2.045,2541,2.045,2542,2.045,2543,2.045]],["title/interfaces/RecordNode.html",[56,0.109,2053,1.989]],["body/interfaces/RecordNode.html",[8,0.013,14,0.074,15,0.074,16,0.074,22,0.221,38,0.475,46,0.604,52,0.191,53,0.005,54,0.007,55,0.007,56,0.181,58,0.567,60,1.115,61,1.077,63,1.596,65,1.968,66,2.32,67,1.199,70,1.525,71,3.464,72,1.176,74,0.334,75,0.339,76,0.376,77,2.943,78,1.596,79,1.04,80,1.674,81,3.17,82,0.662,83,0.344,84,0.649,87,0.629,88,0.492,89,1.354,90,1.457,91,1.951,92,1.704,93,0.97,94,1.098,95,1.077,96,1.289,100,0.51,101,0.608,102,1.912,103,1.401,104,2.036,105,2.275,110,1.443,111,2.702,112,2.602,113,2.366,114,2.474,115,1.76,116,1.013,117,0.952,118,0.629,127,2.255,128,1.245,130,2.109,131,2.614,132,2.474,133,1.435,135,1.989,141,1.401,142,2.072,144,0.312,149,0.649,150,2.157,151,1.461,153,1.674,156,0.579,157,0.829,159,1.443,162,1.199,163,0.408,164,0.952,166,1.443,167,3.045,168,3.252,169,1.294,170,0.907,171,1.472,172,2.569,175,2.683,181,1.182,184,0.424,185,0.475,186,1.443,187,1.901,188,1.461,189,1.294,191,1.306,193,2.278,197,1.461,200,0.86,220,1.115,228,2.359,231,1.707,243,2.569,244,1.648,245,3.095,250,1.461,254,1.021,259,1.76,265,2.336,268,1.892,279,1.021,280,2.474,285,1.094,287,3.095,290,1.76,298,1.345,301,1.76,304,2.359,305,1.989,308,0.907,310,1.222,311,1.174,312,1.76,313,1.525,314,0.97,316,2.464,328,1.348,329,1.345,331,1.04,333,1.077,334,1.76,335,2.159,336,1.062,337,1.709,338,1.098,342,1.028,353,1.492,354,0.97,355,1.401,387,1.525,407,0.579,418,1.818,419,1.596,420,1.294,423,1.989,424,1.401,425,1.351,437,2.504,440,1.596,441,0.97,442,1.143,443,1.401,445,2.033,446,3.101,447,1.968,456,1.674,459,1.709,460,0.719,462,1.461,463,1.968,464,3.824,465,2.547,466,1.968,467,3.735,468,1.04,469,1.709,470,1.156,471,1.968,472,1.596,477,2.486,478,1.674,479,1.156,484,1.345,485,1.76,522,2.359,525,1.596,527,3.425,537,1.76,538,2.614,543,1.04,545,1.461,560,1.674,673,1.401,686,1.509,737,1.156,860,1.294,1059,1.674,1071,1.156,1082,2.366,1159,1.525,1172,3.462,1279,2.91,1385,1.525,1417,1.174,1450,1.387,1569,2.098,1600,1.857,1606,1.857,1608,1.596,1640,1.156,1648,1.857,1667,3.824,1693,1.674,1742,1.857,1787,1.968,1790,1.968,1865,1.294,1899,2.602,1938,2.098,2046,3.824,2047,1.857,2048,2.602,2049,2.254,2050,2.254,2051,3.095,2052,2.474,2053,3.941,2054,2.254,2055,2.254,2056,3.332,2057,2.746,2058,2.683,2059,2.254,2060,2.254,2061,1.525,2062,2.254,2063,2.254,2064,2.254,2065,2.254,2066,2.254,2067,1.857,2068,2.746,2069,2.254,2070,1.674,2071,3.102,2072,2.254,2073,3.69,2074,2.254,2075,2.254,2076,3.102,2077,2.098,2078,2.254,2079,2.254,2080,2.098,2081,3.095,2082,1.857,2083,3.102,2084,1.857,2085,1.525,2086,2.254,2087,2.254,2088,2.254,2089,2.254,2090,1.968,2091,2.254,2092,2.254,2093,2.254,2094,3.332,2095,2.254,2096,2.254,2097,1.968,2098,2.254,2099,2.254,2100,1.968,2101,3.102,2102,2.91,2103,2.254,2104,2.254,2105,2.254,2106,3.824,2107,2.254,2108,2.254,2109,2.254,2110,3.964,2111,2.254,2112,2.254,2113,2.254,2114,2.254,2115,3.332,2116,3.332,2117,3.332,2118,2.254,2119,3.332,2120,2.254,2121,1.596,2122,2.254,2123,2.254,2124,3.964,2125,2.254,2126,2.254,2127,3.332,2128,2.254,2129,2.254,2130,1.76,2131,2.254,2132,2.254,2133,2.254,2134,2.254,2135,1.989,2136,2.254,2137,2.254,2138,1.245,2139,2.254,2140,2.254,2141,2.254,2142,2.254,2143,3.332,2144,2.254,2145,2.254,2146,2.254,2147,2.254,2148,2.254,2149,2.254,2150,2.254,2151,2.254,2152,2.254,2153,2.254,2154,2.098,2155,2.254,2156,2.254,2157,3.332,2158,2.254,2159,2.254,2160,2.254,2161,2.254,2162,2.254,2163,1.857,2164,2.254,2165,2.254,2166,2.254,2167,2.254,2168,2.254,2169,2.254,2170,2.254,2171,1.968,2172,2.254,2173,2.254,2174,3.964,2175,2.254,2176,2.254,2177,3.332,2178,2.254,2179,2.254,2180,4.379,2181,2.254,2182,3.516,2183,2.964,2184,4.379,2185,4.379,2186,2.964,2187,2.254,2188,2.254,2189,2.254,2190,4.379,2191,3.425,2192,2.254,2193,1.857,2194,3.964,2195,2.254,2196,3.964,2197,3.332,2198,3.332,2199,3.332,2200,3.332,2201,2.254,2202,2.254,2203,3.964,2204,3.964,2205,2.254,2206,2.255,2207,2.254,2208,2.254,2209,2.254,2210,2.254,2211,2.254,2212,2.254,2213,1.968,2214,2.254,2215,1.857,2216,2.254,2217,2.254]],["title/classes/RecordsProvider.html",[53,0.006,443,1.826]],["body/classes/RecordsProvider.html",[8,0.013,12,0.79,14,0.065,15,0.065,16,0.065,22,0.208,38,0.414,46,0.58,52,0.182,53,0.004,54,0.006,55,0.006,56,0.163,60,0.972,61,1.951,63,1.39,65,1.868,66,2.269,67,1.045,70,1.329,71,3.288,72,1.168,74,0.323,75,0.316,76,0.853,77,2.709,78,1.39,79,1.385,80,1.458,81,3.009,82,0.609,83,0.346,84,0.68,87,0.548,88,0.429,89,1.352,90,1.463,91,1.82,92,1.88,93,1.759,94,1.202,95,0.938,96,1.379,100,0.445,101,0.529,102,3.294,103,1.867,104,2.164,105,1.724,110,1.347,111,2.669,112,2.346,113,2.439,114,2.23,115,1.533,116,0.995,117,0.965,118,0.838,124,1.793,127,2.765,128,1.085,130,2.174,131,2.439,132,2.23,133,1.293,135,1.793,141,1.867,142,2.1,144,0.509,149,0.637,150,2.189,151,1.273,153,1.458,156,0.71,157,0.801,159,1.488,162,1.045,163,0.84,164,0.909,166,1.328,167,3.124,168,3.034,169,1.127,170,0.79,171,1.444,172,2.364,175,2.469,181,1.088,182,2.141,184,0.565,185,1.169,186,1.347,187,1.836,188,2.364,189,1.127,191,1.219,193,2.311,197,1.946,200,0.836,220,0.972,228,2.127,231,1.57,243,2.364,244,1.538,245,2.848,250,1.946,254,0.962,259,1.533,265,2.218,268,1.814,279,0.962,280,2.23,285,1.064,287,2.848,290,1.533,295,1.045,297,1.682,298,1.172,301,1.533,304,2.583,305,1.793,308,0.79,310,1.537,311,1.285,312,1.533,313,1.329,314,1.293,316,2.267,328,1.394,329,1.172,331,1.385,333,1.951,334,1.533,335,1.946,336,0.958,337,1.541,338,0.99,342,0.926,353,1.538,354,1.293,355,1.22,376,1.39,377,2.475,378,1.293,379,2.475,380,2.475,381,0.99,383,2.346,384,2.346,385,2.346,386,2.177,387,2.469,388,1.163,389,2.346,390,2.346,391,1.618,392,1.81,394,1.814,395,1.458,396,4.924,399,1.715,400,1.618,401,1.715,402,1.715,403,1.715,404,1.715,405,1.715,407,0.935,408,1.295,413,1.172,414,1.715,415,1.618,416,0.715,417,1.618,418,1.88,419,2.127,420,1.724,421,1.172,422,0.692,423,2.177,424,2.267,425,1.392,426,1.715,427,1.007,428,1.172,430,1.828,431,1.172,432,1.715,433,1.172,434,1.715,437,2.579,440,1.39,441,0.845,442,0.866,443,1.867,445,2.478,446,3.111,447,3.186,456,1.458,459,1.541,460,0.626,461,2.134,462,1.946,463,2.623,464,4.055,465,2.525,466,2.623,467,3.737,468,1.385,469,1.871,470,1.541,471,2.623,472,2.127,473,1.828,474,1.828,475,1.828,476,1.273,477,2.471,478,2.23,479,1.871,480,1.828,481,1.828,482,1.085,483,2.134,484,1.793,485,2.346,522,2.127,525,1.39,527,3.372,537,2.346,538,2.439,543,0.906,545,1.273,560,1.458,673,1.22,686,1.432,737,1.007,860,1.127,1059,1.458,1071,1.007,1082,2.177,1159,1.329,1172,3.186,1279,2.623,1385,1.329,1417,1.058,1450,1.25,1569,1.828,1600,1.618,1606,1.618,1608,1.39,1640,1.007,1648,1.618,1667,3.568,1693,1.458,1742,1.618,1787,1.715,1790,1.715,1865,1.127,1899,2.346,1938,1.828,2046,3.568,2047,2.475,2048,2.848,2049,1.964,2050,1.964,2051,2.346,2052,1.458,2053,3.841,2054,1.964,2055,1.964,2056,3.004,2057,2.475,2058,2.469,2059,1.964,2060,1.964,2061,1.329,2062,1.964,2063,1.964,2064,1.964,2065,1.964,2066,1.964,2067,1.618,2068,2.475,2069,1.964,2070,1.458,2071,2.796,2072,1.964,2073,3.395,2074,1.964,2075,1.964,2076,2.796,2077,1.828,2078,1.964,2079,3.004,2080,2.796,2081,3.438,2082,2.475,2083,3.803,2084,2.475,2085,1.329,2086,1.964,2087,1.964,2088,1.964,2089,1.964,2090,1.715,2091,1.964,2092,1.964,2093,1.964,2094,3.004,2095,1.964,2096,1.964,2097,1.715,2098,1.964,2099,1.964,2100,1.715,2101,2.796,2102,2.623,2103,1.964,2104,1.964,2105,1.964,2106,3.568,2107,1.964,2108,1.964,2109,1.964,2110,3.648,2111,1.964,2112,1.964,2113,1.964,2114,1.964,2115,3.004,2116,3.004,2117,3.004,2118,1.964,2119,3.004,2120,1.964,2121,1.39,2122,1.964,2123,1.964,2124,3.648,2125,1.964,2126,1.964,2127,3.004,2128,1.964,2129,1.964,2130,1.533,2131,1.964,2132,1.964,2133,1.964,2134,1.964,2135,1.793,2136,1.964,2137,1.964,2138,1.085,2139,1.964,2140,1.964,2141,1.964,2142,1.964,2143,3.004,2144,1.964,2145,1.964,2146,1.964,2147,1.964,2148,1.964,2149,1.964,2150,1.964,2151,1.964,2152,1.964,2153,1.964,2154,1.828,2155,1.964,2156,1.964,2157,3.004,2158,1.964,2159,1.964,2160,1.964,2161,1.964,2162,1.964,2163,1.618,2164,1.964,2165,1.964,2166,1.964,2167,1.964,2168,1.964,2169,1.964,2170,1.964,2171,1.715,2172,1.964,2173,1.964,2174,3.648,2175,1.964,2176,1.964,2177,3.004,2178,1.964,2179,1.964,2180,4.086,2181,1.964,2182,3.372,2183,2.765,2184,4.086,2185,4.086,2186,2.765,2187,1.964,2188,1.964,2189,1.964,2190,4.086,2191,3.27,2192,1.964,2193,1.618,2194,3.648,2195,1.964,2196,3.648,2197,3.004,2198,3.004,2199,3.004,2200,3.004,2201,1.964,2202,1.964,2203,3.648,2204,3.648,2205,1.964,2206,2.033,2207,1.964,2208,1.964,2209,1.964,2210,1.964,2211,1.964,2212,1.964,2213,1.715,2214,1.964,2215,1.618,2216,1.964,2217,1.964,2335,2.134,3271,2.707,3272,2.707]],["title/components/ResultTimeline.html",[620,0.574,743,1.623]],["body/components/ResultTimeline.html",[7,1.703,8,0.013,9,1.64,10,1.64,14,0.155,15,0.102,16,0.102,17,1.581,22,0.248,24,0.58,31,1.703,46,0.359,48,1.979,52,0.157,53,0.006,54,0.01,55,0.009,66,1.241,74,0.191,75,0.364,76,0.694,83,0.336,84,0.604,87,0.86,88,0.673,89,0.673,90,0.749,107,2.027,116,0.558,117,0.979,143,1.831,144,0.527,155,1.16,156,0.876,163,1.019,164,1.059,184,0.58,185,0.876,200,0.916,254,1.149,271,1.769,279,0.908,285,0.813,381,1.371,392,1.908,394,1.514,407,0.818,408,1.312,465,2.255,494,1.371,526,2.189,579,3.427,620,0.92,621,1.703,622,2.482,623,1.581,625,1.581,626,1.916,629,1.603,630,1.772,631,1.882,648,1.465,653,2.387,654,2.387,663,1.779,684,2.492,699,2.584,700,1.918,701,2.133,702,1.64,703,2.841,704,1.998,708,2.695,709,2.695,710,1.581,711,1.998,712,1.769,713,2.695,714,1.422,715,3.264,716,1.64,717,1.64,718,1.769,719,1.769,720,1.581,721,1.581,722,1.998,723,1.998,724,1.64,725,2.133,726,3.264,727,1.998,728,1.703,729,1.84,730,1.64,731,1.998,732,1.703,733,2.387,734,1.998,735,1.703,736,1.703,737,1.581,738,1.703,739,1.703,740,1.703,741,1.998,742,1.581,743,2.782,744,2.905,745,1.64,746,2.039,747,1.769,748,1.769,749,1.998,750,1.64,751,1.998,752,1.64,753,1.916,754,1.998,760,3.275,797,3.674,823,1.241,824,2.026,826,1.422,851,2.289,852,2.289,921,3.083,949,3.409,1012,1.916,1035,2.297,1058,2.289,1194,3.632,1303,3.35,1342,3.247,2384,3.356,3273,6.191,3274,3.35,3275,5.732,3276,6.486,3277,6.201,3278,6.943,3279,6.943,3280,6.486,3281,6.486,3282,6.486,3283,6.486,3284,4.25,3285,5.732,3286,7.249,3287,4.25,3288,4.25,3289,4.25,3290,5.732,3291,4.25,3292,4.25,3293,4.25,3294,4.25,3295,5.473,3296,4.705,3297,4.25,3298,4.25,3299,4.25,3300,4.25,3301,4.25,3302,4.25,3303,6.486,3304,4.25,3305,3.707,3306,3.707,3307,3.707,3308,3.707,3309,3.707,3310,3.707,3311,3.35,3312,4.25,3313,4.25,3314,4.25,3315,4.25,3316,4.25,3317,5.732,3318,4.25,3319,2.87,3320,4.25,3321,4.25,3322,4.25,3323,5.732,3324,4.25,3325,4.25,3326,4.25,3327,4.25,3328,4.25,3329,4.25,3330,5.732,3331,4.25,3332,4.25,3333,4.38,3334,5.732,3335,4.25,3336,4.25,3337,4.25,3338,4.25,3339,5.732,3340,5.732,3341,5.732,3342,5.732,3343,5.732,3344,4.25,3345,4.25,3346,5.732,3347,4.25,3348,4.25,3349,4.25,3350,4.25,3351,4.25,3352,4.25,3353,4.25,3354,4.25,3355,5.732,3356,4.25,3357,5.732,3358,4.25,3359,4.25,3360,4.25,3361,4.25,3362,4.25,3363,4.25,3364,4.25,3365,4.25,3366,4.25,3367,4.25,3368,4.25,3369,4.25,3370,4.25,3371,4.25,3372,4.25,3373,4.25,3374,4.25,3375,4.25,3376,4.25,3377,4.25,3378,4.25,3379,4.25,3380,4.25,3381,4.25,3382,4.25,3383,4.25]],["title/classes/SelectedRecordsProvider.html",[53,0.006,3384,3.193]],["body/classes/SelectedRecordsProvider.html",[8,0.013,12,1.333,14,0.109,15,0.109,16,0.109,22,0.254,52,0.125,53,0.007,54,0.009,55,0.009,56,0.123,60,1.639,61,2.476,72,0.834,74,0.205,75,0.338,76,0.956,79,1.528,83,0.343,84,0.665,87,0.924,88,0.724,89,1.313,90,1.407,92,1.898,93,2.319,94,1.092,95,1.582,96,1.407,102,3.475,103,2.059,104,2.086,105,2.504,106,3.089,110,1.438,116,0.599,117,0.901,118,0.924,124,2.604,127,2.953,130,1.763,142,1.776,144,0.555,146,2.238,148,1.944,149,0.405,150,2.082,156,0.759,159,1.206,163,0.975,167,2.975,182,2.551,184,0.821,185,1.266,186,1.823,187,1.826,188,3.359,189,1.901,191,0.988,193,2.157,197,2.827,200,0.509,243,2.827,285,0.648,291,1.426,295,2.321,296,2.587,297,2.391,304,2.346,310,1.661,311,1.167,314,1.426,328,1.258,330,2.46,331,1.528,333,2.33,353,1.247,354,1.426,376,2.346,377,3.595,378,1.878,379,3.595,380,3.595,381,1.438,383,3.407,384,3.407,385,3.407,386,2.912,387,2.953,388,1.653,389,3.407,390,3.407,391,2.73,392,1.941,394,2.083,395,2.46,396,5.288,399,2.893,400,2.73,401,2.893,402,2.893,403,2.893,404,2.893,405,2.893,407,1.016,408,1.542,413,1.978,414,2.893,415,2.73,416,1.206,417,2.73,418,1.698,419,2.346,420,1.901,421,1.978,422,1.167,423,1.978,424,2.712,425,1.129,426,2.893,427,1.7,428,1.978,431,1.978,432,2.893,433,1.978,434,2.893,437,2.933,439,2.712,440,3.671,443,3.348,445,2.935,446,3.094,447,4.527,461,3.6,462,2.147,463,2.893,464,3.81,465,2.302,466,2.893,467,2.827,468,1.528,469,1.7,470,2.502,471,2.893,472,2.346,473,3.084,474,3.084,475,3.084,476,2.147,477,1.763,478,2.46,479,2.238,480,3.084,481,3.084,482,1.83,483,3.6,484,1.978,485,2.587,511,0.924,543,2.012,853,2.758,1118,2.975,1276,1.763,1377,3.841,1664,3.984,1764,3.984,1765,3.984,2351,3.984,2387,2.712,2434,3.407,3384,4.741,3385,5.866,3386,4.363,3387,5.246,3388,5.246,3389,6.014,3390,6.014,3391,6.014,3392,6.724,3393,6.014,3394,4.567,3395,4.567,3396,2.46,3397,6.014,3398,4.567,3399,4.567,3400,4.567,3401,4.567,3402,4.567,3403,4.567]],["title/interfaces/StructuralEdgeType.html",[56,0.109,446,1.754]],["body/interfaces/StructuralEdgeType.html",[8,0.013,14,0.071,15,0.071,16,0.071,22,0.216,38,0.453,46,0.596,52,0.188,53,0.005,54,0.007,55,0.007,56,0.178,58,0.541,60,1.063,61,1.026,63,1.522,65,2.005,66,2.328,67,1.143,70,1.454,71,3.777,72,1.289,74,0.331,75,0.354,76,0.765,77,2.861,78,1.522,79,0.991,80,1.596,81,3.395,82,0.644,83,0.344,84,0.672,87,0.599,88,0.469,89,1.35,90,1.456,91,2.141,92,1.665,93,0.925,94,1.06,95,1.026,96,1.316,100,0.487,101,0.579,102,1.846,103,1.336,104,2.062,105,2.212,110,1.41,111,2.655,112,2.511,113,2.3,114,2.388,115,1.678,116,1.003,117,0.954,118,0.599,127,2.176,128,1.776,130,2.05,131,2.974,132,2.388,133,1.385,135,1.919,141,1.336,142,2.083,144,0.36,149,0.641,150,2.166,151,1.393,153,1.596,156,0.559,157,0.819,159,1.403,162,2.276,163,0.389,164,1.003,166,1.814,167,3.108,168,3.401,169,1.233,170,0.865,171,1.463,172,2.497,175,2.608,181,1.149,184,0.404,185,0.453,186,1.41,187,1.879,188,1.393,189,1.233,191,1.276,193,2.308,197,1.393,200,0.852,220,1.063,228,2.277,231,1.842,243,2.497,244,1.61,245,3.34,250,1.393,254,1,259,1.678,265,2.296,268,2.038,279,1.05,280,2.388,285,1.111,287,3.009,290,1.678,298,1.283,301,1.678,304,2.277,305,1.919,308,0.865,310,1.188,311,1.133,312,2.511,313,1.454,314,0.925,316,2.395,328,1.321,329,1.919,331,0.991,333,1.026,334,1.678,335,2.084,336,1.025,337,1.65,338,1.06,342,0.992,353,1.724,354,0.925,355,1.336,387,2.176,407,0.559,418,1.782,419,1.522,420,1.233,423,1.919,424,1.336,425,1.746,437,2.465,440,1.522,441,0.925,442,0.927,443,1.336,445,1.977,446,3.127,447,1.877,456,1.596,459,1.65,460,1.025,462,1.393,463,1.877,464,3.736,465,2.533,466,1.877,467,3.73,468,0.991,469,1.65,470,1.102,471,1.877,472,1.522,477,2.437,478,2.388,479,1.102,484,1.283,485,1.678,522,2.277,525,1.522,527,3.467,537,1.678,538,2.553,543,0.991,545,1.393,560,2.388,673,1.336,686,1.482,737,1.102,860,1.846,1059,2.388,1071,1.65,1082,2.869,1159,2.176,1172,3.365,1279,2.808,1385,1.454,1417,1.507,1450,1.338,1569,2.993,1600,1.771,1606,1.771,1608,1.522,1640,1.102,1648,2.65,1667,4.474,1693,1.596,1742,1.771,1787,1.877,1790,1.877,1865,1.233,1899,2.511,1938,2,2046,3.736,2047,1.771,2048,2.511,2049,2.149,2050,2.149,2051,3.009,2052,1.596,2053,3.895,2054,3.216,2055,3.216,2056,4.277,2057,3.525,2058,3.253,2059,3.216,2060,3.216,2061,2.176,2062,3.216,2063,3.216,2064,3.216,2065,3.216,2066,3.216,2067,2.65,2068,3.525,2069,3.216,2070,2.388,2071,3.982,2072,3.216,2073,3.982,2074,3.216,2075,3.216,2076,3.982,2077,2,2078,2.149,2079,2.149,2080,2,2081,3.009,2082,1.771,2083,2.993,2084,1.771,2085,1.454,2086,2.149,2087,2.149,2088,2.149,2089,2.149,2090,1.877,2091,2.149,2092,2.149,2093,2.149,2094,3.216,2095,2.149,2096,2.149,2097,1.877,2098,2.149,2099,2.149,2100,1.877,2101,2.993,2102,2.808,2103,2.149,2104,2.149,2105,2.149,2106,3.736,2107,2.149,2108,2.149,2109,2.149,2110,3.853,2111,2.149,2112,2.149,2113,2.149,2114,2.149,2115,3.216,2116,3.216,2117,3.216,2118,2.149,2119,3.216,2120,2.149,2121,1.522,2122,2.149,2123,2.149,2124,3.853,2125,2.149,2126,2.149,2127,3.216,2128,2.149,2129,2.149,2130,1.678,2131,2.149,2132,2.149,2133,2.149,2134,2.149,2135,1.919,2136,2.149,2137,2.149,2138,1.187,2139,2.149,2140,2.149,2141,2.149,2142,2.149,2143,3.216,2144,2.149,2145,2.149,2146,2.149,2147,2.149,2148,2.149,2149,2.149,2150,2.149,2151,2.149,2152,2.149,2153,2.149,2154,2,2155,2.149,2156,2.149,2157,3.216,2158,2.149,2159,2.149,2160,2.149,2161,2.149,2162,2.149,2163,1.771,2164,2.149,2165,2.149,2166,2.149,2167,2.149,2168,2.149,2169,2.149,2170,2.149,2171,1.877,2172,2.149,2173,2.149,2174,3.853,2175,2.149,2176,2.149,2177,3.216,2178,2.149,2179,2.149,2180,4.277,2181,2.149,2182,3.467,2183,2.895,2184,4.277,2185,4.277,2186,2.895,2187,2.149,2188,2.149,2189,2.149,2190,4.277,2191,3.372,2192,2.149,2193,1.771,2194,3.853,2195,2.149,2196,3.853,2197,3.216,2198,3.216,2199,3.216,2200,3.216,2201,2.149,2202,2.149,2203,3.853,2204,3.853,2205,2.149,2206,2.176,2207,2.149,2208,2.149,2209,2.149,2210,2.149,2211,2.149,2212,2.149,2213,1.877,2214,2.149,2215,1.771,2216,2.149,2217,2.149]],["title/interfaces/TimelineAggregation.html",[56,0.109,782,2.081]],["body/interfaces/TimelineAggregation.html",[8,0.013,11,1.836,12,0.766,13,1.751,14,0.063,15,0.063,16,0.063,22,0.258,24,0.358,38,0.401,42,0.878,46,0.534,48,1.513,52,0.18,53,0.004,54,0.01,55,0.006,56,0.149,58,0.479,65,1.181,72,1.012,74,0.118,75,0.227,76,0.824,82,0.845,83,0.308,84,0.743,85,2.416,86,2.633,87,0.531,88,0.416,96,1.199,97,1.401,98,1.977,99,0.568,100,0.664,101,0.513,107,1.618,110,0.628,113,1.137,116,0.647,118,0.531,144,0.429,145,1.414,146,1.505,147,2.64,148,0.849,149,0.584,155,1.799,156,0.999,157,0.905,158,1.093,163,0.727,164,0.928,171,1.482,176,2.847,177,1.621,181,1.199,184,0.358,185,1.006,186,0.628,191,1.472,192,1.824,196,1.37,200,0.886,203,1.289,204,1.289,205,1.289,208,1.487,211,1.052,222,1.184,224,1.013,231,1.541,234,1.487,235,1.487,238,1.487,244,1.347,254,0.878,265,1.401,266,1.487,267,3.248,268,1.303,271,1.093,279,1.149,285,0.573,299,1.824,310,0.587,311,1.033,319,1.137,320,0.849,328,1.16,336,0.607,338,0.628,342,0.587,349,2.422,363,1.731,378,1.263,381,0.967,398,2.308,407,0.51,408,0.531,416,1.068,418,0.741,420,1.093,422,0.671,423,1.137,425,1.219,427,2.062,437,1.771,439,1.184,441,1.731,442,0.549,453,1.093,458,3.125,459,1.505,460,0.935,465,2.054,469,0.977,470,2.227,494,0.628,511,0.531,525,1.349,526,1.221,527,1.986,541,1.747,543,0.878,564,3.331,582,2.853,620,0.699,624,1.935,629,1,630,0.549,631,0.587,633,0.91,635,0.942,636,0.849,637,1.541,642,1.263,648,0.671,650,1.487,663,1.8,684,2.505,686,1.474,714,0.878,746,2.035,755,1.414,757,1.684,760,3.479,761,0.942,764,1.234,768,2.642,769,3.384,782,3.585,788,2.136,791,1.836,792,1.651,794,1.709,795,1.901,797,2.795,811,1.093,812,2.319,813,1.184,819,1.935,823,0.766,824,1.263,826,1.353,833,4.854,842,2.308,849,0.91,851,1.414,852,1.414,855,0.82,856,1.289,860,1.093,866,0.942,871,1.093,873,1.013,874,1.093,875,1.052,895,3.075,903,1.414,926,1.569,927,4.754,928,1.569,932,2.291,933,3.075,934,1.569,936,1.901,937,1.569,941,1.569,943,1.569,944,1.569,948,1.104,949,1.986,958,2.652,967,1.184,1012,1.184,1015,1.093,1031,1.569,1032,1.289,1035,1.621,1036,1.234,1040,1.621,1041,1.013,1046,1.452,1060,1.901,1061,1.487,1071,2.062,1082,1.137,1104,1.452,1110,2.353,1118,2.633,1122,2.179,1124,1.234,1125,1.986,1130,1.093,1160,1.414,1173,1.487,1197,2.319,1204,1.052,1264,1.137,1276,1.013,1330,1.773,1342,1.487,1377,2.319,1381,1.349,1400,1.349,1410,1.773,1417,1.416,1424,1.663,1449,1.751,1450,0.793,1461,1.234,1466,0.91,1467,1.184,1468,1.234,1469,1.234,1475,1.569,1484,1.289,1508,1.663,1545,2.562,1574,1.684,1591,1.569,1596,1.487,1622,2.853,1640,2.597,1643,1.349,1711,1.414,1722,1.773,1723,1.773,1725,1.289,1768,1.773,1833,2.731,1920,1.663,1947,2.078,2024,1.487,2081,1.487,2247,1.349,2248,1.349,2256,1.414,2263,1.137,2268,1.414,2314,1.414,2342,1.289,2391,1.684,2398,1.289,2486,1.137,2564,1.663,2668,2.731,2789,1.663,2816,2.658,2826,1.487,2844,1.663,2992,1.663,3001,1.663,3123,1.569,3125,1.487,3126,1.487,3132,1.487,3319,1.773,3333,1.773,3396,1.414,3404,3.313,3405,3.313,3406,3.313,3407,4.934,3408,4.021,3409,2.934,3410,1.905,3411,2.658,3412,3.384,3413,2.291,3414,1.905,3415,2.934,3416,3.579,3417,1.905,3418,2.934,3419,2.934,3420,1.905,3421,1.905,3422,3.578,3423,4.021,3424,1.569,3425,2.934,3426,1.905,3427,3.78,3428,3.313,3429,1.905,3430,1.905,3431,2.731,3432,2.731,3433,1.569,3434,1.569,3435,1.569,3436,1.569,3437,1.905,3438,2.949,3439,1.905,3440,2.731,3441,1.905,3442,1.905,3443,1.569,3444,1.569,3445,1.569,3446,1.569,3447,1.569,3448,2.418,3449,1.569,3450,1.487,3451,1.905,3452,1.663,3453,1.414,3454,1.905,3455,1.905,3456,1.905,3457,1.663,3458,1.905,3459,1.905,3460,4.021,3461,2.418,3462,1.905,3463,1.905,3464,1.905,3465,1.905,3466,1.905,3467,2.934,3468,1.905,3469,1.905,3470,1.905,3471,1.569,3472,1.905,3473,1.905,3474,2.934,3475,1.905,3476,1.905,3477,4.342,3478,1.905,3479,1.569,3480,1.905,3481,2.934,3482,1.569,3483,1.905,3484,1.905,3485,1.905,3486,1.905,3487,1.905,3488,1.905,3489,2.934,3490,1.905,3491,1.905,3492,1.905,3493,1.905,3494,1.905,3495,1.905,3496,1.905,3497,1.905,3498,2.934,3499,2.418,3500,1.905,3501,1.905,3502,1.569,3503,1.905,3504,1.905,3505,1.905,3506,1.905,3507,1.905,3508,1.905,3509,1.905,3510,2.934,3511,1.905,3512,1.905,3513,1.905,3514,1.905,3515,1.905,3516,1.905,3517,1.905,3518,1.905,3519,1.905,3520,1.905,3521,1.569,3522,2.934,3523,1.905,3524,3.579,3525,2.934,3526,4.342,3527,1.905,3528,2.934,3529,5.52,3530,1.905,3531,1.905,3532,1.905,3533,2.934,3534,4.021,3535,1.905,3536,2.934,3537,2.934,3538,1.905,3539,2.934,3540,1.905,3541,3.579,3542,3.579,3543,2.934,3544,1.569,3545,1.905,3546,1.905,3547,1.905,3548,1.905,3549,1.905,3550,1.905,3551,1.905,3552,1.905,3553,1.905,3554,1.905,3555,2.934,3556,2.934,3557,1.905,3558,2.934,3559,2.934,3560,1.905,3561,1.905,3562,1.905,3563,1.905,3564,1.905,3565,1.905,3566,1.905,3567,1.905,3568,4.587,3569,2.795,3570,4.021,3571,1.905,3572,2.934,3573,4.587,3574,1.905,3575,1.905,3576,1.905,3577,1.905,3578,1.905,3579,1.905,3580,1.905,3581,2.934,3582,1.905,3583,1.905,3584,1.905,3585,1.905,3586,1.905,3587,1.905,3588,1.905,3589,1.905,3590,1.905,3591,1.569,3592,1.905,3593,1.905,3594,3.579,3595,1.905,3596,1.905,3597,1.905,3598,1.905,3599,1.905,3600,1.905,3601,1.905,3602,1.905,3603,2.934,3604,1.905,3605,1.905,3606,1.905,3607,1.905,3608,1.905,3609,1.905,3610,1.569,3611,1.905,3612,1.905,3613,1.905,3614,1.905,3615,1.905,3616,1.905,3617,1.905,3618,1.905,3619,1.905,3620,2.934,3621,1.905,3622,1.905,3623,1.905,3624,1.905,3625,1.905,3626,1.905,3627,1.905,3628,1.905,3629,1.905,3630,1.905,3631,1.905,3632,1.905,3633,1.905,3634,1.905,3635,1.905,3636,1.905,3637,1.905,3638,1.905,3639,3.579,3640,1.905,3641,1.905,3642,1.905,3643,3.224,3644,1.905,3645,1.905,3646,1.905,3647,1.905,3648,1.905,3649,1.905,3650,1.905,3651,1.905,3652,1.905,3653,1.905,3654,1.905,3655,1.569,3656,1.905,3657,1.905,3658,1.569,3659,1.905,3660,4.342,3661,1.905,3662,1.905,3663,1.569,3664,1.905,3665,1.905,3666,1.905,3667,1.905,3668,1.905,3669,1.905,3670,1.905,3671,1.905,3672,1.905,3673,1.905,3674,1.905,3675,1.905,3676,1.905,3677,1.905,3678,1.905,3679,1.905,3680,1.905,3681,1.905,3682,2.934,3683,4.934,3684,4.021,3685,2.934,3686,2.934,3687,2.934,3688,2.934,3689,1.905,3690,1.905,3691,1.905,3692,1.905,3693,1.905,3694,1.905,3695,1.905,3696,2.934,3697,1.905,3698,2.562,3699,1.905]],["title/interfaces/TimelineCombinedAggregations.html",[56,0.109,3422,2.421]],["body/interfaces/TimelineCombinedAggregations.html",[8,0.013,11,1.845,12,0.772,13,1.762,14,0.063,15,0.063,16,0.063,22,0.258,24,0.361,38,0.404,42,0.885,46,0.535,48,1.52,52,0.181,53,0.004,54,0.01,55,0.006,56,0.15,58,0.483,65,1.188,72,1.016,74,0.119,75,0.228,76,0.493,82,0.728,83,0.273,84,0.73,85,2.405,86,2.641,87,0.535,88,0.419,96,1.202,97,1.41,98,1.986,99,0.572,100,0.668,101,0.517,107,1.625,110,0.633,113,1.146,116,0.651,118,0.535,144,0.336,145,1.425,146,1.514,147,2.647,148,0.855,149,0.586,155,1.804,156,1,157,0.906,158,1.102,163,0.867,164,0.974,171,1.484,176,3.394,177,1.63,181,1.204,184,0.361,185,1.009,186,0.633,191,1.475,192,1.834,196,1.376,200,0.887,203,1.299,204,1.299,205,1.299,208,1.499,211,1.06,222,1.193,224,1.021,231,1.548,234,1.499,235,1.499,238,1.499,244,1.354,254,0.882,265,1.41,266,1.499,267,3.258,268,1.309,271,1.102,279,1.151,285,0.577,299,1.834,310,0.592,311,1.04,319,1.146,320,0.855,328,1.164,336,0.612,338,0.633,342,0.592,349,2.434,363,1.738,378,1.271,381,0.973,407,0.513,408,0.535,416,1.075,418,0.747,420,1.102,422,0.676,423,1.146,425,1.225,427,2.071,437,1.779,439,1.193,441,1.738,442,0.554,453,1.102,458,3.141,459,1.514,460,0.941,465,2.059,469,0.985,470,2.235,494,0.633,511,0.535,525,1.359,526,1.228,527,1.997,541,1.754,543,0.885,564,3.348,582,2.861,620,0.703,624,1.941,629,1.006,630,0.554,631,0.592,633,0.917,635,0.95,636,0.855,637,1.548,642,1.271,648,0.676,650,1.499,663,1.802,684,2.511,686,1.478,714,0.885,746,2.039,755,1.425,757,1.694,760,3.481,761,0.95,764,1.244,768,2.647,769,3.394,782,3.877,788,2.147,791,1.845,792,1.659,794,1.718,795,1.913,797,2.808,811,1.102,812,2.33,813,1.193,819,1.941,823,0.772,824,1.271,826,1.361,833,4.858,842,2.317,849,0.917,851,1.425,852,1.425,855,0.826,856,1.299,860,1.102,866,0.95,871,1.102,873,1.021,874,1.102,875,1.06,895,3.086,903,1.425,926,1.582,927,4.759,928,1.582,932,2.305,933,2.09,934,1.582,936,1.913,937,1.582,941,1.582,943,1.582,944,1.582,948,1.111,949,1.997,958,2.778,967,1.193,1012,1.193,1015,1.102,1031,1.582,1032,1.299,1035,1.63,1036,1.244,1040,1.63,1041,1.021,1046,1.46,1060,1.913,1061,1.499,1071,2.071,1082,1.146,1104,1.46,1110,2.36,1118,2.641,1122,2.192,1124,1.244,1125,1.997,1130,1.102,1160,1.425,1173,1.499,1197,2.33,1204,1.06,1264,1.146,1276,1.021,1330,1.787,1342,1.499,1377,2.33,1381,1.359,1400,1.359,1410,1.787,1417,1.422,1424,1.676,1449,1.762,1450,0.799,1461,1.244,1466,0.917,1467,1.193,1468,1.244,1469,1.244,1475,1.582,1484,1.299,1508,1.676,1545,2.578,1574,1.694,1591,1.582,1596,1.499,1622,2.861,1640,2.603,1643,1.359,1711,1.425,1722,1.787,1723,1.787,1725,1.299,1768,1.787,1833,2.747,1920,1.676,1947,2.09,2024,1.499,2081,1.499,2247,1.359,2248,1.359,2256,1.425,2263,1.146,2268,1.425,2314,1.425,2342,1.299,2391,1.694,2398,1.299,2486,1.146,2564,1.676,2668,2.747,2789,1.676,2816,2.67,2826,1.499,2844,1.676,2992,1.676,3001,1.676,3123,1.582,3125,1.499,3126,1.499,3132,1.499,3319,1.787,3333,1.787,3396,1.425,3404,1.582,3405,1.582,3406,1.582,3407,4.947,3408,4.037,3409,2.951,3410,1.919,3411,2.67,3412,3.394,3413,2.305,3414,1.919,3415,2.951,3416,3.596,3417,1.919,3418,2.951,3419,2.951,3420,1.919,3421,1.919,3422,3.791,3423,4.793,3424,1.582,3425,2.951,3426,1.919,3427,3.791,3428,3.327,3429,1.919,3430,1.919,3431,2.747,3432,2.747,3433,1.582,3434,1.582,3435,1.582,3436,1.582,3437,1.919,3438,2.963,3439,1.919,3440,2.747,3441,1.919,3442,1.919,3443,1.582,3444,1.582,3445,1.582,3446,1.582,3447,1.582,3448,2.432,3449,1.582,3450,1.499,3451,1.919,3452,1.676,3453,1.425,3454,1.919,3455,1.919,3456,1.919,3457,1.676,3458,1.919,3459,1.919,3460,4.037,3461,2.432,3462,1.919,3463,1.919,3464,1.919,3465,1.919,3466,1.919,3467,2.951,3468,1.919,3469,1.919,3470,1.919,3471,1.582,3472,1.919,3473,1.919,3474,2.951,3475,1.919,3476,1.919,3477,4.358,3478,1.919,3479,1.582,3480,1.919,3481,2.951,3482,1.582,3483,1.919,3484,1.919,3485,1.919,3486,1.919,3487,1.919,3488,1.919,3489,2.951,3490,1.919,3491,1.919,3492,1.919,3493,1.919,3494,1.919,3495,1.919,3496,1.919,3497,1.919,3498,2.951,3499,2.432,3500,1.919,3501,1.919,3502,1.582,3503,1.919,3504,1.919,3505,1.919,3506,1.919,3507,1.919,3508,1.919,3509,1.919,3510,2.951,3511,1.919,3512,1.919,3513,1.919,3514,1.919,3515,1.919,3516,1.919,3517,1.919,3518,1.919,3519,1.919,3520,1.919,3521,1.582,3522,2.951,3523,1.919,3524,3.596,3525,2.951,3526,4.358,3527,1.919,3528,2.951,3529,5.528,3530,1.919,3531,1.919,3532,1.919,3533,2.951,3534,4.037,3535,1.919,3536,2.951,3537,2.951,3538,1.919,3539,2.951,3540,1.919,3541,3.596,3542,3.596,3543,2.951,3544,1.582,3545,1.919,3546,1.919,3547,1.919,3548,1.919,3549,1.919,3550,1.919,3551,1.919,3552,1.919,3553,1.919,3554,1.919,3555,2.951,3556,2.951,3557,1.919,3558,2.951,3559,2.951,3560,1.919,3561,1.919,3562,1.919,3563,1.919,3564,1.919,3565,1.919,3566,1.919,3567,1.919,3568,4.601,3569,2.808,3570,4.037,3571,1.919,3572,2.951,3573,4.601,3574,1.919,3575,1.919,3576,1.919,3577,1.919,3578,1.919,3579,1.919,3580,1.919,3581,2.951,3582,1.919,3583,1.919,3584,1.919,3585,1.919,3586,1.919,3587,1.919,3588,1.919,3589,1.919,3590,1.919,3591,1.582,3592,1.919,3593,1.919,3594,3.596,3595,1.919,3596,1.919,3597,1.919,3598,1.919,3599,1.919,3600,1.919,3601,1.919,3602,1.919,3603,2.951,3604,1.919,3605,1.919,3606,1.919,3607,1.919,3608,1.919,3609,1.919,3610,1.582,3611,1.919,3612,1.919,3613,1.919,3614,1.919,3615,1.919,3616,1.919,3617,1.919,3618,1.919,3619,1.919,3620,2.951,3621,1.919,3622,1.919,3623,1.919,3624,1.919,3625,1.919,3626,1.919,3627,1.919,3628,1.919,3629,1.919,3630,1.919,3631,1.919,3632,1.919,3633,1.919,3634,1.919,3635,1.919,3636,1.919,3637,1.919,3638,1.919,3639,3.596,3640,1.919,3641,1.919,3642,1.919,3643,3.236,3644,1.919,3645,1.919,3646,1.919,3647,1.919,3648,1.919,3649,1.919,3650,1.919,3651,1.919,3652,1.919,3653,1.919,3654,1.919,3655,1.582,3656,1.919,3657,1.919,3658,1.582,3659,1.919,3660,4.358,3661,1.919,3662,1.919,3663,1.582,3664,1.919,3665,1.919,3666,1.919,3667,1.919,3668,1.919,3669,1.919,3670,1.919,3671,1.919,3672,1.919,3673,1.919,3674,1.919,3675,1.919,3676,1.919,3677,1.919,3678,1.919,3679,1.919,3680,1.919,3681,1.919,3682,2.951,3683,4.947,3684,4.037,3685,2.951,3686,2.951,3687,2.951,3688,2.951,3689,1.919,3690,1.919,3691,1.919,3692,1.919,3693,1.919,3694,1.919,3695,1.919,3696,2.951,3697,1.919,3698,2.578,3699,1.919]],["title/interfaces/TimelineDate.html",[56,0.109,3411,2.182]],["body/interfaces/TimelineDate.html",[8,0.013,11,2.6,12,0.714,14,0.059,15,0.059,16,0.059,22,0.251,24,0.334,34,0.668,46,0.619,52,0.158,53,0.004,54,0.006,55,0.006,56,0.127,58,0.447,74,0.172,75,0.215,82,0.778,83,0.195,84,0.539,87,0.495,88,0.388,116,0.872,117,0.673,133,0.764,134,1.386,140,0.668,144,0.166,149,0.569,156,0.838,157,0.868,159,1.755,164,1.079,169,1.019,170,0.714,171,1.213,181,0.529,184,0.334,187,1.917,191,1.021,192,2.406,195,1.386,196,0.605,200,0.931,211,0.98,220,0.878,222,1.103,230,1.019,231,1.196,244,1.046,252,1.463,254,0.918,268,1.246,271,1.964,279,1.176,285,0.757,299,1.103,309,1.327,311,1.205,319,2.043,331,0.819,344,1.755,363,1.196,388,0.886,392,0.566,407,0.483,424,1.103,439,1.103,452,1.386,459,1.425,460,0.566,465,1.424,469,0.91,484,1.059,493,1.55,494,0.585,511,0.495,526,0.739,541,1.874,543,1.785,562,1.318,563,2.778,579,2.289,620,0.543,623,0.91,624,0.791,625,1.755,629,0.946,630,0.512,631,0.547,633,1.634,635,1.374,636,1.238,637,0.764,642,0.764,643,1.463,648,0.625,653,1.019,663,1.732,672,1.019,673,1.103,681,0.98,684,2.598,686,1.593,700,0.819,701,1.425,703,0.91,720,0.91,744,0.98,746,0.668,760,3.124,761,0.878,764,1.15,768,2.741,769,1.967,772,0.91,795,1.8,811,1.019,812,1.8,813,1.103,819,2.258,823,0.714,824,1.196,826,1.938,842,2.412,853,1.478,865,1.55,867,1.463,895,1.257,919,0.714,933,1.967,947,1.201,948,1.288,949,1.88,958,1.755,980,1.652,987,2.289,991,2.289,992,2.289,994,2.316,995,2.289,997,4.358,998,1.463,999,3.764,1000,2.289,1003,3.19,1006,1.652,1012,1.103,1015,1.019,1021,2.612,1023,1.386,1032,1.201,1035,1.89,1036,1.8,1040,1.534,1041,0.944,1043,1.318,1046,1.916,1051,1.386,1053,3.19,1054,1.019,1058,3.68,1059,1.318,1060,3.124,1078,1.55,1081,1.652,1096,1.55,1100,3.19,1104,1.916,1105,1.8,1106,1.463,1110,2.693,1117,1.257,1122,1.318,1125,2.316,1127,2.66,1128,1.463,1129,1.463,1130,2.558,1131,1.652,1145,3.19,1147,1.463,1148,2.82,1149,2.289,1150,1.463,1151,1.463,1153,1.463,1154,2.289,1155,1.463,1159,1.201,1160,1.318,1161,3.19,1163,1.652,1164,1.386,1165,2.672,1166,1.463,1167,1.463,1168,1.463,1169,1.463,1170,1.463,1178,1.652,1186,3.298,1189,1.652,1193,1.652,1194,1.55,1197,3.018,1203,1.463,1204,0.98,1205,2.169,1206,1.318,1207,1.386,1208,2.289,1209,2.289,1210,2.289,1211,1.463,1212,1.463,1213,1.463,1215,1.386,1216,1.463,1239,1.318,1247,1.201,1264,1.059,1267,2.289,1268,2.82,1309,1.386,1337,3.871,1356,2.289,1360,1.463,1373,1.755,1381,1.967,1385,1.201,1390,2.586,1400,1.257,1416,1.775,1417,0.625,1437,1.386,1441,1.775,1449,1.059,1463,1.55,1478,0.98,1499,1.652,1507,2.289,1522,1.55,1525,2.778,1559,1.775,1561,1.775,1574,1.019,1578,3.422,1622,2.043,1628,2.672,1631,2.169,1643,1.257,1658,1.463,1693,1.318,1714,1.059,1725,1.201,1729,1.652,1733,1.775,1739,4.25,1865,1.019,1979,1.55,2023,2.169,2024,1.386,2034,2.778,2040,1.318,2048,1.386,2084,1.463,2121,1.257,2130,1.386,2163,1.463,2215,2.289,2249,1.386,2263,1.658,2287,1.386,2338,2.586,2340,1.103,2341,1.463,2342,1.88,2387,1.103,2391,1.019,2409,1.059,2482,1.15,2486,1.059,2573,1.652,2594,1.652,2641,2.778,2691,2.426,2798,3.186,2811,2.82,2866,1.652,2968,2.778,2970,1.652,2971,1.652,2986,3.186,2988,1.775,2990,3.604,2991,2.586,2995,3.186,3002,1.652,3003,1.652,3004,1.652,3005,4.148,3007,1.652,3012,1.652,3013,1.652,3014,2.586,3015,1.652,3016,1.652,3017,3.604,3020,1.652,3022,1.652,3023,1.652,3024,1.652,3025,1.652,3026,1.652,3027,1.652,3028,1.652,3029,1.652,3030,1.775,3032,1.652,3057,1.652,3074,1.775,3080,1.652,3081,2.586,3082,1.652,3085,1.652,3086,1.652,3087,1.652,3089,1.652,3090,1.652,3091,3.604,3092,1.652,3093,1.652,3094,1.652,3095,1.652,3096,1.652,3097,1.652,3098,1.652,3099,1.652,3101,1.652,3103,1.652,3104,1.652,3105,1.652,3106,3.186,3107,2.586,3124,3.871,3125,1.386,3126,1.386,3130,2.778,3131,1.775,3132,2.169,3133,1.775,3134,1.775,3135,1.775,3137,1.775,3138,3.871,3150,2.778,3152,1.775,3153,2.778,3158,1.775,3159,2.778,3160,4.202,3162,1.775,3163,1.775,3164,1.775,3165,1.775,3166,1.775,3168,1.775,3169,1.775,3170,1.775,3171,1.775,3172,1.775,3386,1.775,3396,1.318,3404,1.463,3405,1.463,3406,1.463,3411,2.541,3412,3.413,3424,2.289,3433,1.463,3434,1.463,3435,1.463,3436,1.463,3438,1.463,3443,1.463,3444,1.463,3445,1.463,3446,1.463,3447,1.463,3448,1.463,3449,1.463,3450,2.672,3453,2.541,3461,1.463,3471,3.19,3479,1.463,3482,1.463,3499,1.463,3502,1.463,3521,2.289,3544,1.463,3569,1.386,3591,1.463,3610,1.463,3643,1.318,3655,1.463,3658,1.463,3663,2.82,3700,1.652,3701,2.586,3702,1.929,3703,2.778,3704,2.778,3705,2.778,3706,2.778,3707,2.778,3708,2.778,3709,2.778,3710,2.778,3711,2.778,3712,2.778,3713,2.778,3714,2.778,3715,1.929,3716,3.018,3717,3.018,3718,5.704,3719,3.018,3720,1.929,3721,1.929,3722,1.652,3723,3.719,3724,1.929,3725,1.929,3726,1.929,3727,1.929,3728,1.929,3729,1.929,3730,1.929,3731,3.018,3732,1.929,3733,1.929,3734,3.018,3735,1.929,3736,1.929,3737,1.929,3738,1.929,3739,3.719,3740,1.929,3741,1.929,3742,4.207,3743,1.929,3744,1.929,3745,1.929,3746,1.929,3747,1.929,3748,1.929,3749,1.929,3750,1.929,3751,1.929,3752,1.929,3753,1.929,3754,1.929,3755,1.929,3756,4.207,3757,1.929,3758,3.018,3759,3.018,3760,3.018,3761,1.929,3762,1.929,3763,3.018,3764,1.929,3765,1.929,3766,1.929,3767,3.018,3768,5.061,3769,1.929,3770,3.018,3771,1.929,3772,3.018,3773,1.929,3774,1.929,3775,1.929,3776,3.018,3777,3.018,3778,3.018,3779,3.719,3780,1.929,3781,1.929,3782,1.929,3783,1.929,3784,4.719,3785,3.018,3786,3.018,3787,1.929,3788,1.929,3789,1.929,3790,1.929,3791,1.929,3792,3.018,3793,1.929,3794,1.929,3795,3.018,3796,1.929,3797,3.719,3798,1.929,3799,1.929,3800,1.929,3801,1.929,3802,3.018,3803,1.929,3804,1.929,3805,4.207,3806,1.929,3807,3.018,3808,3.018,3809,3.018,3810,1.929,3811,1.929,3812,1.929,3813,1.929,3814,3.719,3815,1.929,3816,1.929,3817,1.929,3818,1.929,3819,1.929,3820,1.929,3821,1.929,3822,1.929,3823,1.929,3824,1.929,3825,3.018,3826,1.929,3827,1.929,3828,1.929,3829,1.929,3830,1.929,3831,1.929,3832,1.929,3833,1.929,3834,3.018,3835,1.929,3836,1.929,3837,1.929,3838,1.929,3839,1.929,3840,1.929,3841,1.929,3842,4.207,3843,1.929,3844,1.929,3845,1.929,3846,1.929,3847,1.929,3848,1.929,3849,1.929,3850,1.929,3851,1.929,3852,1.929,3853,1.929,3854,1.929,3855,1.929,3856,3.719,3857,1.929,3858,1.929,3859,1.929,3860,1.929,3861,1.929,3862,1.929,3863,1.929,3864,1.929,3865,1.929,3866,1.929,3867,3.018,3868,1.929,3869,1.929,3870,1.929,3871,1.929,3872,1.929,3873,1.929,3874,1.929,3875,1.929,3876,1.929,3877,1.929,3878,1.929,3879,1.929,3880,1.929,3881,1.929,3882,1.929,3883,1.929,3884,5.061,3885,5.061,3886,3.018,3887,3.018,3888,1.929,3889,1.929,3890,3.018,3891,3.018,3892,3.018,3893,3.018,3894,3.018,3895,3.018,3896,3.018,3897,3.018,3898,3.018,3899,1.929,3900,1.929,3901,3.719,3902,1.929,3903,1.929,3904,1.929,3905,1.929,3906,1.929,3907,1.929,3908,3.018,3909,1.929,3910,1.929,3911,1.929,3912,1.929,3913,1.929,3914,1.929,3915,1.929,3916,1.929,3917,1.929,3918,4.566,3919,1.929,3920,1.929,3921,3.018,3922,1.929,3923,1.929,3924,3.018,3925,1.929,3926,1.929,3927,1.929,3928,3.719,3929,1.929,3930,1.929,3931,1.929,3932,1.929,3933,1.929,3934,1.929,3935,1.929,3936,3.018,3937,1.929,3938,1.929,3939,1.929,3940,1.929,3941,1.929,3942,1.929,3943,1.929,3944,1.929,3945,1.929,3946,1.929,3947,1.929,3948,1.929,3949,1.929,3950,1.929,3951,1.929,3952,3.018,3953,3.018,3954,3.719,3955,1.929,3956,3.018,3957,1.929,3958,1.929,3959,1.929,3960,1.929,3961,3.719,3962,1.929,3963,1.929,3964,1.929,3965,1.929,3966,1.929,3967,1.929,3968,1.929,3969,1.929,3970,1.929,3971,3.018,3972,1.929,3973,1.929,3974,1.929,3975,1.929,3976,1.929,3977,1.929,3978,1.929,3979,1.929,3980,1.929,3981,3.018,3982,1.929,3983,1.929,3984,3.018,3985,1.929,3986,1.929,3987,1.929,3988,1.929,3989,1.929,3990,1.929,3991,1.929,3992,1.929,3993,1.929,3994,1.929,3995,3.018,3996,1.929,3997,1.929,3998,3.018,3999,1.929,4000,1.929,4001,1.929,4002,1.929,4003,1.929,4004,1.929,4005,3.719,4006,1.929,4007,3.719,4008,1.929,4009,3.018,4010,3.018,4011,1.929,4012,1.775,4013,1.929,4014,1.929,4015,1.775,4016,1.929,4017,1.929,4018,1.929,4019,1.929,4020,1.929,4021,1.929,4022,3.018,4023,5.061,4024,1.929,4025,1.929,4026,1.929,4027,1.775,4028,4.842,4029,5.061,4030,1.929,4031,1.929,4032,1.929,4033,3.018,4034,1.929,4035,1.929,4036,1.929,4037,1.929,4038,1.929,4039,3.018,4040,1.929]],["title/interfaces/TimelineEvent.html",[56,0.109,3412,2.081]],["body/interfaces/TimelineEvent.html",[8,0.013,11,2.59,12,0.705,14,0.058,15,0.058,16,0.058,22,0.25,24,0.329,34,0.659,46,0.617,52,0.157,53,0.004,54,0.006,55,0.006,56,0.126,58,0.441,74,0.17,75,0.213,76,0.801,82,0.774,83,0.288,84,0.633,87,0.488,88,0.383,116,0.868,117,0.305,133,0.754,134,1.368,140,0.659,144,0.164,149,0.567,156,0.834,157,0.866,159,1.747,164,1.086,169,1.005,170,0.705,171,1.207,181,0.522,184,0.329,187,1.912,191,1.012,192,2.389,195,1.368,196,0.597,200,0.93,211,0.967,220,0.867,222,1.088,230,1.005,231,1.183,244,1.035,252,1.443,254,0.912,268,1.613,271,1.947,279,1.173,285,0.751,299,1.088,309,1.313,311,1.195,319,2.025,331,0.808,344,1.74,363,1.183,388,0.876,392,0.558,398,1.578,407,0.478,424,1.088,439,1.088,452,1.368,459,1.41,460,0.558,465,1.997,469,0.898,484,1.045,493,1.529,494,0.577,511,0.488,526,1.6,541,2.032,543,1.772,562,1.3,563,2.749,579,2.265,620,0.537,623,0.898,624,1.712,625,1.74,629,0.937,630,0.505,631,0.54,633,1.62,635,1.36,636,1.225,637,0.754,642,0.754,643,1.443,648,0.617,653,1.005,663,1.729,672,1.005,673,1.088,681,0.967,684,2.589,686,1.587,700,0.808,701,1.41,703,0.898,720,0.898,744,0.967,746,0.659,760,3.115,761,0.867,764,1.135,768,2.734,769,1.946,772,0.898,795,1.781,811,1.005,812,1.781,813,1.088,819,2.25,823,0.705,824,1.183,826,1.926,842,2.397,853,1.463,865,1.529,867,1.443,895,1.24,919,0.705,933,1.946,947,1.185,948,1.277,949,1.86,958,1.74,980,1.63,987,2.265,991,2.265,992,2.265,994,2.296,995,2.265,997,4.347,998,1.443,999,3.747,1000,2.265,1003,3.167,1006,1.63,1012,1.088,1015,1.005,1021,2.595,1023,1.368,1032,1.185,1035,1.874,1036,1.781,1040,1.518,1041,0.932,1043,1.3,1046,1.902,1051,1.368,1053,3.167,1054,1.005,1058,3.664,1059,1.3,1060,3.11,1078,1.529,1081,1.63,1096,1.529,1100,3.167,1104,1.902,1105,1.781,1106,1.443,1110,2.684,1117,1.24,1122,1.3,1125,2.296,1127,2.645,1128,1.443,1129,1.443,1130,2.543,1131,1.63,1145,3.167,1147,1.443,1148,2.796,1149,2.265,1150,1.443,1151,1.443,1153,1.443,1154,2.265,1155,1.443,1159,1.185,1160,1.3,1161,3.167,1163,1.63,1164,1.368,1165,2.65,1166,1.443,1167,1.443,1168,1.443,1169,1.443,1170,1.443,1178,1.63,1186,3.281,1189,1.63,1193,1.63,1194,1.529,1197,3.003,1203,1.443,1204,0.967,1205,2.147,1206,1.3,1207,1.368,1208,2.265,1209,2.265,1210,2.265,1211,1.443,1212,1.443,1213,1.443,1215,1.368,1216,1.443,1239,1.3,1247,1.185,1264,1.045,1267,2.265,1268,2.796,1309,1.368,1337,3.843,1356,2.265,1360,1.443,1373,1.74,1381,1.946,1385,1.185,1390,2.559,1400,1.24,1416,1.751,1417,0.617,1437,1.368,1441,1.751,1449,1.045,1463,1.529,1478,0.967,1499,1.63,1507,2.265,1522,1.529,1525,2.749,1559,1.751,1561,1.751,1574,1.005,1578,3.393,1622,2.025,1628,2.65,1631,2.147,1643,1.24,1658,1.443,1693,1.3,1714,1.045,1725,1.185,1729,1.63,1733,1.751,1739,4.239,1865,1.005,1979,1.529,2023,2.147,2024,1.368,2034,2.749,2040,1.3,2048,1.368,2084,1.443,2121,1.24,2130,1.368,2163,1.443,2215,2.265,2249,1.368,2263,1.641,2287,1.368,2338,2.559,2340,1.088,2341,1.443,2342,1.86,2387,1.088,2391,1.005,2409,1.045,2482,1.135,2486,1.045,2573,1.63,2594,1.63,2641,2.749,2691,2.401,2798,3.158,2811,2.796,2866,1.63,2968,2.749,2970,1.63,2971,1.63,2986,3.158,2988,1.751,2990,3.578,2991,2.559,2995,3.158,3002,1.63,3003,1.63,3004,1.63,3005,4.125,3007,1.63,3012,1.63,3013,1.63,3014,2.559,3015,1.63,3016,1.63,3017,3.578,3020,1.63,3022,1.63,3023,1.63,3024,1.63,3025,1.63,3026,1.63,3027,1.63,3028,1.63,3029,1.63,3030,1.751,3032,1.63,3057,1.63,3074,1.751,3080,1.63,3081,2.559,3082,1.63,3085,1.63,3086,1.63,3087,1.63,3089,1.63,3090,1.63,3091,3.578,3092,1.63,3093,1.63,3094,1.63,3095,1.63,3096,1.63,3097,1.63,3098,1.63,3099,1.63,3101,1.63,3103,1.63,3104,1.63,3105,1.63,3106,3.158,3107,2.559,3124,3.843,3125,1.368,3126,1.368,3130,2.749,3131,1.751,3132,2.147,3133,1.751,3134,1.751,3135,1.751,3137,1.751,3138,3.843,3150,2.749,3152,1.751,3153,2.749,3158,1.751,3159,2.749,3160,4.176,3162,1.751,3163,1.751,3164,1.751,3165,1.751,3166,1.751,3168,1.751,3169,1.751,3170,1.751,3171,1.751,3172,1.751,3386,1.751,3396,1.3,3404,1.443,3405,1.443,3406,1.443,3411,2.041,3412,3.494,3424,2.265,3433,1.443,3434,1.443,3435,1.443,3436,1.443,3438,1.443,3443,1.443,3444,1.443,3445,1.443,3446,1.443,3447,1.443,3448,1.443,3449,1.443,3450,2.65,3453,2.52,3461,1.443,3471,3.167,3479,1.443,3482,1.443,3499,1.443,3502,1.443,3521,2.265,3544,1.443,3569,1.368,3591,1.443,3610,1.443,3643,1.3,3655,1.443,3658,1.443,3663,2.796,3700,1.63,3701,2.559,3702,1.903,3703,2.749,3704,2.749,3705,2.749,3706,2.749,3707,2.749,3708,2.749,3709,2.749,3710,2.749,3711,2.749,3712,2.749,3713,2.749,3714,2.749,3715,1.903,3716,2.987,3717,2.987,3718,5.685,3719,2.987,3720,1.903,3721,4.176,3722,1.63,3723,3.687,3724,1.903,3725,1.903,3726,1.903,3727,1.903,3728,1.903,3729,1.903,3730,1.903,3731,2.987,3732,1.903,3733,1.903,3734,2.987,3735,1.903,3736,1.903,3737,1.903,3738,1.903,3739,3.687,3740,1.903,3741,1.903,3742,4.176,3743,1.903,3744,1.903,3745,1.903,3746,1.903,3747,1.903,3748,1.903,3749,1.903,3750,1.903,3751,1.903,3752,1.903,3753,1.903,3754,1.903,3755,1.903,3756,4.176,3757,1.903,3758,2.987,3759,2.987,3760,2.987,3761,1.903,3762,1.903,3763,2.987,3764,1.903,3765,1.903,3766,1.903,3767,2.987,3768,5.035,3769,1.903,3770,2.987,3771,1.903,3772,2.987,3773,1.903,3774,1.903,3775,1.903,3776,2.987,3777,2.987,3778,2.987,3779,3.687,3780,1.903,3781,1.903,3782,1.903,3783,1.903,3784,4.7,3785,2.987,3786,2.987,3787,1.903,3788,1.903,3789,1.903,3790,1.903,3791,1.903,3792,2.987,3793,1.903,3794,1.903,3795,2.987,3796,1.903,3797,3.687,3798,1.903,3799,1.903,3800,1.903,3801,1.903,3802,2.987,3803,1.903,3804,1.903,3805,4.176,3806,1.903,3807,2.987,3808,2.987,3809,2.987,3810,1.903,3811,1.903,3812,1.903,3813,1.903,3814,3.687,3815,1.903,3816,1.903,3817,1.903,3818,1.903,3819,1.903,3820,1.903,3821,1.903,3822,1.903,3823,1.903,3824,1.903,3825,2.987,3826,1.903,3827,1.903,3828,1.903,3829,1.903,3830,1.903,3831,1.903,3832,1.903,3833,1.903,3834,2.987,3835,1.903,3836,1.903,3837,1.903,3838,1.903,3839,1.903,3840,1.903,3841,1.903,3842,4.176,3843,1.903,3844,1.903,3845,1.903,3846,1.903,3847,1.903,3848,1.903,3849,1.903,3850,1.903,3851,1.903,3852,1.903,3853,1.903,3854,1.903,3855,1.903,3856,3.687,3857,1.903,3858,1.903,3859,1.903,3860,1.903,3861,1.903,3862,1.903,3863,1.903,3864,1.903,3865,1.903,3866,1.903,3867,2.987,3868,1.903,3869,1.903,3870,1.903,3871,1.903,3872,1.903,3873,1.903,3874,1.903,3875,1.903,3876,1.903,3877,1.903,3878,1.903,3879,1.903,3880,1.903,3881,1.903,3882,1.903,3883,1.903,3884,5.035,3885,5.035,3886,2.987,3887,2.987,3888,1.903,3889,1.903,3890,2.987,3891,2.987,3892,2.987,3893,2.987,3894,2.987,3895,2.987,3896,2.987,3897,2.987,3898,2.987,3899,1.903,3900,1.903,3901,3.687,3902,1.903,3903,1.903,3904,1.903,3905,1.903,3906,1.903,3907,1.903,3908,2.987,3909,1.903,3910,1.903,3911,1.903,3912,1.903,3913,1.903,3914,1.903,3915,1.903,3916,1.903,3917,1.903,3918,4.537,3919,1.903,3920,1.903,3921,2.987,3922,1.903,3923,1.903,3924,2.987,3925,1.903,3926,1.903,3927,1.903,3928,3.687,3929,1.903,3930,1.903,3931,1.903,3932,1.903,3933,1.903,3934,1.903,3935,1.903,3936,2.987,3937,1.903,3938,1.903,3939,1.903,3940,1.903,3941,1.903,3942,1.903,3943,1.903,3944,1.903,3945,1.903,3946,1.903,3947,1.903,3948,1.903,3949,1.903,3950,1.903,3951,1.903,3952,2.987,3953,2.987,3954,3.687,3955,1.903,3956,2.987,3957,1.903,3958,1.903,3959,1.903,3960,1.903,3961,3.687,3962,1.903,3963,1.903,3964,1.903,3965,1.903,3966,1.903,3967,1.903,3968,1.903,3969,1.903,3970,1.903,3971,2.987,3972,1.903,3973,1.903,3974,1.903,3975,1.903,3976,1.903,3977,1.903,3978,1.903,3979,1.903,3980,1.903,3981,2.987,3982,1.903,3983,1.903,3984,2.987,3985,1.903,3986,1.903,3987,1.903,3988,1.903,3989,1.903,3990,1.903,3991,1.903,3992,1.903,3993,1.903,3994,1.903,3995,2.987,3996,1.903,3997,1.903,3998,2.987,3999,1.903,4000,1.903,4001,1.903,4002,1.903,4003,1.903,4004,1.903,4005,3.687,4006,1.903,4007,3.687,4008,1.903,4009,2.987,4010,2.987,4011,1.903,4012,1.751,4013,1.903,4014,1.903,4015,1.751,4016,1.903,4017,1.903,4018,1.903,4019,1.903,4020,1.903,4021,1.903,4022,2.987,4023,5.035,4024,1.903,4025,1.903,4026,1.903,4027,1.751,4028,4.815,4029,5.035,4030,1.903,4031,1.903,4032,1.903,4033,2.987,4034,1.903,4035,1.903,4036,1.903,4037,1.903,4038,1.903,4039,2.987,4040,1.903]],["title/interfaces/TimelineEventAggregation.html",[56,0.109,3428,2.421]],["body/interfaces/TimelineEventAggregation.html",[8,0.013,11,1.842,12,0.771,13,1.759,14,0.063,15,0.063,16,0.063,22,0.258,24,0.36,38,0.403,42,0.883,46,0.535,48,1.518,52,0.181,53,0.004,54,0.01,55,0.006,56,0.149,58,0.482,65,1.186,72,1.015,74,0.119,75,0.228,76,0.673,82,0.727,83,0.282,84,0.737,85,2.417,86,2.638,87,0.534,88,0.418,96,1.201,97,1.407,98,1.984,99,0.571,100,0.667,101,0.516,107,1.623,110,0.631,113,1.143,116,0.65,118,0.534,144,0.336,145,1.422,146,1.511,147,2.645,148,0.853,149,0.586,155,1.802,156,0.999,157,0.905,158,1.099,163,0.73,164,0.974,171,1.483,176,2.855,177,1.628,181,1.203,184,0.36,185,1.008,186,0.631,191,1.474,192,1.831,196,1.374,200,0.887,203,1.296,204,1.296,205,1.296,208,1.495,211,1.058,222,1.19,224,1.019,231,1.546,234,1.495,235,1.495,238,1.495,244,1.352,254,0.881,265,1.407,266,1.495,267,3.255,268,1.307,271,1.099,279,1.151,285,0.576,299,1.831,310,0.591,311,1.038,319,1.143,320,0.853,328,1.163,336,0.611,338,0.631,342,0.591,349,2.43,363,1.736,378,1.269,381,0.971,398,1.691,407,0.512,408,0.534,416,1.073,418,0.745,420,1.099,422,0.674,423,1.143,425,1.224,427,2.068,437,1.777,439,1.19,441,1.736,442,0.552,453,1.099,458,3.136,459,1.511,460,0.939,465,2.057,469,0.982,470,2.233,494,0.631,511,0.534,525,1.356,526,1.226,527,1.994,541,1.989,543,0.883,564,3.343,582,2.858,620,0.702,624,2.202,629,1.004,630,0.552,631,0.591,633,0.915,635,0.948,636,0.853,637,1.546,642,1.269,648,0.674,650,1.495,663,1.801,684,2.509,686,1.477,714,0.883,746,2.038,755,1.422,757,1.691,760,3.48,761,0.948,764,1.241,768,2.645,769,3.391,782,3.5,788,2.143,791,1.842,792,1.656,794,1.715,795,1.909,797,2.804,811,1.099,812,2.327,813,1.19,819,1.939,823,0.771,824,1.269,826,1.359,833,4.857,842,2.314,849,0.915,851,1.422,852,1.422,855,0.824,856,1.296,860,1.099,866,0.948,871,1.099,873,1.019,874,1.099,875,1.058,895,3.082,903,1.422,926,1.578,927,4.757,928,1.578,932,2.301,933,2.086,934,1.578,936,1.909,937,1.578,941,1.578,943,1.578,944,1.578,948,1.109,949,1.994,958,2.656,967,1.19,1012,1.19,1015,1.099,1031,1.578,1032,1.296,1035,1.628,1036,1.241,1040,1.628,1041,1.019,1046,1.458,1060,1.909,1061,1.495,1071,2.068,1082,1.143,1104,1.458,1110,2.358,1118,2.638,1122,2.188,1124,1.241,1125,1.994,1130,1.099,1160,1.422,1173,1.495,1197,2.327,1204,1.058,1264,1.143,1276,1.019,1330,1.783,1342,1.495,1377,2.327,1381,1.356,1400,1.356,1410,1.783,1417,1.42,1424,1.672,1449,1.759,1450,0.797,1461,1.241,1466,0.915,1467,1.19,1468,1.241,1469,1.241,1475,1.578,1484,1.296,1508,1.672,1545,2.573,1574,1.691,1591,1.578,1596,1.495,1622,2.858,1640,2.601,1643,1.356,1711,1.422,1722,1.783,1723,1.783,1725,1.296,1768,1.783,1833,2.743,1920,1.672,1947,2.086,2024,1.495,2081,1.495,2247,1.356,2248,1.356,2256,1.422,2263,1.143,2268,1.422,2314,1.422,2342,1.296,2391,1.691,2398,1.296,2486,1.143,2564,1.672,2668,2.743,2789,1.672,2816,2.667,2826,1.495,2844,1.672,2992,1.672,3001,1.672,3123,1.578,3125,1.495,3126,1.495,3132,1.495,3319,1.783,3333,1.783,3396,1.422,3404,1.578,3405,1.578,3406,1.578,3407,4.943,3408,4.032,3409,2.946,3410,1.915,3411,2.667,3412,3.391,3413,2.301,3414,1.915,3415,2.946,3416,3.591,3417,1.915,3418,2.946,3419,2.946,3420,1.915,3421,1.915,3422,3.587,3423,4.032,3424,1.578,3425,2.946,3426,1.915,3427,3.788,3428,3.587,3429,4.032,3430,4.032,3431,2.743,3432,2.743,3433,1.578,3434,1.578,3435,1.578,3436,1.578,3437,1.915,3438,2.959,3439,1.915,3440,2.743,3441,1.915,3442,1.915,3443,1.578,3444,1.578,3445,1.578,3446,1.578,3447,1.578,3448,2.428,3449,1.578,3450,1.495,3451,1.915,3452,1.672,3453,1.422,3454,1.915,3455,1.915,3456,1.915,3457,1.672,3458,1.915,3459,1.915,3460,4.032,3461,2.428,3462,1.915,3463,1.915,3464,1.915,3465,1.915,3466,1.915,3467,2.946,3468,1.915,3469,1.915,3470,1.915,3471,1.578,3472,1.915,3473,1.915,3474,2.946,3475,1.915,3476,1.915,3477,4.353,3478,1.915,3479,1.578,3480,1.915,3481,2.946,3482,1.578,3483,1.915,3484,1.915,3485,1.915,3486,1.915,3487,1.915,3488,1.915,3489,2.946,3490,1.915,3491,1.915,3492,1.915,3493,1.915,3494,1.915,3495,1.915,3496,1.915,3497,1.915,3498,2.946,3499,2.428,3500,1.915,3501,1.915,3502,1.578,3503,1.915,3504,1.915,3505,1.915,3506,1.915,3507,1.915,3508,1.915,3509,1.915,3510,2.946,3511,1.915,3512,1.915,3513,1.915,3514,1.915,3515,1.915,3516,1.915,3517,1.915,3518,1.915,3519,1.915,3520,1.915,3521,1.578,3522,2.946,3523,1.915,3524,3.591,3525,2.946,3526,4.353,3527,1.915,3528,2.946,3529,5.526,3530,1.915,3531,1.915,3532,1.915,3533,2.946,3534,4.032,3535,1.915,3536,2.946,3537,2.946,3538,1.915,3539,2.946,3540,1.915,3541,3.591,3542,3.591,3543,2.946,3544,1.578,3545,1.915,3546,1.915,3547,1.915,3548,1.915,3549,1.915,3550,1.915,3551,1.915,3552,1.915,3553,1.915,3554,1.915,3555,2.946,3556,2.946,3557,1.915,3558,2.946,3559,2.946,3560,1.915,3561,1.915,3562,1.915,3563,1.915,3564,1.915,3565,1.915,3566,1.915,3567,1.915,3568,4.597,3569,2.804,3570,4.032,3571,1.915,3572,2.946,3573,4.597,3574,1.915,3575,1.915,3576,1.915,3577,1.915,3578,1.915,3579,1.915,3580,1.915,3581,2.946,3582,1.915,3583,1.915,3584,1.915,3585,1.915,3586,1.915,3587,1.915,3588,1.915,3589,1.915,3590,1.915,3591,1.578,3592,1.915,3593,1.915,3594,3.591,3595,1.915,3596,1.915,3597,1.915,3598,1.915,3599,1.915,3600,1.915,3601,1.915,3602,1.915,3603,2.946,3604,1.915,3605,1.915,3606,1.915,3607,1.915,3608,1.915,3609,1.915,3610,1.578,3611,1.915,3612,1.915,3613,1.915,3614,1.915,3615,1.915,3616,1.915,3617,1.915,3618,1.915,3619,1.915,3620,2.946,3621,1.915,3622,1.915,3623,1.915,3624,1.915,3625,1.915,3626,1.915,3627,1.915,3628,1.915,3629,1.915,3630,1.915,3631,1.915,3632,1.915,3633,1.915,3634,1.915,3635,1.915,3636,1.915,3637,1.915,3638,1.915,3639,3.591,3640,1.915,3641,1.915,3642,1.915,3643,3.233,3644,1.915,3645,1.915,3646,1.915,3647,1.915,3648,1.915,3649,1.915,3650,1.915,3651,1.915,3652,1.915,3653,1.915,3654,1.915,3655,1.578,3656,1.915,3657,1.915,3658,1.578,3659,1.915,3660,4.353,3661,1.915,3662,1.915,3663,1.578,3664,1.915,3665,1.915,3666,1.915,3667,1.915,3668,1.915,3669,1.915,3670,1.915,3671,1.915,3672,1.915,3673,1.915,3674,1.915,3675,1.915,3676,1.915,3677,1.915,3678,1.915,3679,1.915,3680,1.915,3681,1.915,3682,2.946,3683,4.943,3684,4.032,3685,2.946,3686,2.946,3687,2.946,3688,2.946,3689,1.915,3690,1.915,3691,1.915,3692,1.915,3693,1.915,3694,1.915,3695,1.915,3696,2.946,3697,1.915,3698,2.573,3699,1.915]],["title/interfaces/TimelineEventType.html",[56,0.109,3413,2.295]],["body/interfaces/TimelineEventType.html",[8,0.013,14,0.147,15,0.147,16,0.147,22,0.247,24,0.834,46,0.516,52,0.197,53,0.009,54,0.011,55,0.011,56,0.164,58,1.116,74,0.275,75,0.405,76,0.874,83,0.328,84,0.715,144,0.549,158,2.546,159,1.615,164,0.834,398,3.004,541,1.785,580,2.546,620,1.023,623,2.275,624,2.615,630,1.279,631,1.368,637,1.91,663,1.835,684,2.195,699,2.757,745,2.36,746,1.67,819,1.976,842,3.004,856,3.002,978,3.874,984,4.129,1186,3.141,1262,4.436,1264,3.324,1265,4.82,1268,3.655,1344,4.436,1711,3.294,2811,3.655,3413,4.349,3452,3.874,3453,3.887,3457,3.874,3643,3.887,3698,4.572,4041,4.82,4042,4.82,4043,5.334,4044,5.334,4045,5.334,4046,5.334,4047,5.334,4048,5.334,4049,5.334,4050,4.82,4051,5.334]],["title/components/TimelineLegendComponent.html",[620,0.574,745,1.564]],["body/components/TimelineLegendComponent.html",[7,2.042,8,0.013,9,1.967,10,1.967,14,0.17,15,0.122,16,0.122,17,1.896,22,0.221,24,0.695,31,2.042,46,0.629,48,2.098,52,0.177,53,0.008,54,0.011,55,0.01,56,0.137,66,1.487,74,0.229,83,0.325,84,0.474,89,0.807,90,0.898,117,0.814,144,0.541,158,2.687,159,1.871,163,0.847,164,0.881,392,1.777,398,2.121,541,2.068,580,2.95,620,1.004,621,2.042,622,2.795,623,2.402,624,2.407,625,1.896,626,2.297,630,1.793,631,1.909,637,2.213,654,2.687,663,1.756,684,2.543,699,3.358,700,2.159,701,2.402,702,1.967,703,2.772,704,2.395,708,3.034,709,3.034,710,1.896,711,2.395,712,2.121,713,3.034,714,1.705,715,3.501,716,1.967,717,1.967,718,2.121,719,2.121,720,1.896,721,1.896,722,2.395,723,2.395,724,1.967,725,2.402,726,3.501,727,2.395,728,2.042,729,2.206,730,1.967,731,2.395,732,2.042,733,2.687,734,2.395,735,2.042,736,2.042,737,1.896,738,2.042,739,2.042,740,2.042,741,2.395,742,1.896,743,2.042,744,2.042,745,2.875,746,1.934,747,2.121,748,2.121,749,2.395,750,1.967,751,2.395,752,1.967,753,2.297,754,2.395,819,2.29,842,2.95,856,2.502,978,4.488,984,4.784,1186,3.639,1262,5.139,1264,3.527,1265,5.584,1268,4.235,1344,5.139,1660,3.046,1711,3.816,2811,4.235,3413,4.013,3452,4.488,3453,3.477,3457,3.228,3643,4.229,3698,4.974,4041,6.188,4042,4.016,4043,6.18,4044,6.18,4045,6.18,4046,6.18,4047,6.18,4048,6.18,4049,6.18,4050,5.584,4051,6.18,4052,5.095,4053,5.095,4054,5.095,4055,5.095,4056,5.095]],["title/interfaces/TimelineRecords.html",[56,0.109,3427,2.421]],["body/interfaces/TimelineRecords.html",[8,0.013,11,1.841,12,0.77,13,1.757,14,0.063,15,0.063,16,0.063,22,0.258,24,0.36,38,0.403,42,0.882,46,0.535,48,1.517,52,0.18,53,0.004,54,0.01,55,0.006,56,0.149,58,0.481,65,1.185,72,1.156,74,0.119,75,0.228,76,0.767,82,0.727,83,0.289,84,0.737,85,2.404,86,2.637,87,0.533,88,0.418,96,1.201,97,1.406,98,1.982,99,0.571,100,0.667,101,0.516,107,1.622,110,0.631,113,1.142,116,0.649,118,0.533,144,0.336,145,1.421,146,1.51,147,2.644,148,0.852,149,0.585,155,1.802,156,0.999,157,0.905,158,1.098,163,0.729,164,0.974,171,1.483,176,2.854,177,1.626,181,1.202,184,0.36,185,1.008,186,0.631,191,1.474,192,1.83,196,1.373,200,0.887,203,1.295,204,1.295,205,1.295,208,1.494,211,1.057,222,1.189,224,1.018,231,1.545,234,1.494,235,1.494,238,1.494,244,1.351,254,0.88,265,1.406,266,1.494,267,3.254,268,1.673,271,1.098,279,1.15,285,0.575,299,1.83,310,0.59,311,1.037,319,1.142,320,0.852,328,1.162,336,0.61,338,0.631,342,0.59,349,2.429,363,1.735,378,1.268,381,0.97,398,1.69,407,0.512,408,0.533,416,1.072,418,0.744,420,1.098,422,0.674,423,1.142,425,1.566,427,2.067,437,1.776,439,1.189,441,1.735,442,0.552,453,1.098,458,3.134,459,1.51,460,0.939,465,2.057,469,0.981,470,2.232,494,0.631,511,0.533,525,1.355,526,1.225,527,1.992,541,1.989,543,0.882,564,3.341,582,2.857,620,0.701,624,2.202,629,1.003,630,0.552,631,0.59,633,0.914,635,0.947,636,0.852,637,1.545,642,1.268,648,0.674,650,1.494,663,1.801,684,2.508,686,1.476,714,0.882,746,2.037,755,1.421,757,1.69,760,3.48,761,0.947,764,1.24,768,2.645,769,3.39,782,3.499,788,2.142,791,1.841,792,1.655,794,1.714,795,1.908,797,2.803,811,1.098,812,2.326,813,1.189,819,1.939,823,0.77,824,1.268,826,1.358,833,4.856,842,2.313,849,0.914,851,1.421,852,1.421,855,0.824,856,1.295,860,1.098,866,0.947,871,1.098,873,1.018,874,1.098,875,1.057,895,3.081,903,1.421,926,1.576,927,4.757,928,1.576,932,2.299,933,2.085,934,1.576,936,1.908,937,1.576,941,1.576,943,1.576,944,1.576,948,1.108,949,1.992,958,2.655,967,1.189,1012,1.189,1015,1.098,1031,1.576,1032,1.295,1035,1.626,1036,1.24,1040,1.626,1041,1.018,1046,1.457,1060,1.908,1061,1.494,1071,2.067,1082,1.142,1104,1.457,1110,2.357,1118,2.637,1122,2.186,1124,1.24,1125,1.992,1130,1.098,1160,1.421,1173,1.494,1197,2.326,1204,1.057,1264,1.142,1276,1.018,1330,1.781,1342,1.494,1377,2.326,1381,1.355,1400,1.355,1410,1.781,1417,1.419,1424,1.671,1449,1.757,1450,0.796,1461,1.24,1466,0.914,1467,1.189,1468,1.24,1469,1.24,1475,1.576,1484,1.295,1508,1.671,1545,2.571,1574,1.69,1591,1.576,1596,1.494,1622,2.857,1640,2.6,1643,1.355,1711,1.421,1722,1.781,1723,1.781,1725,1.295,1768,1.781,1833,2.741,1920,1.671,1947,2.085,2024,1.494,2081,1.494,2247,1.355,2248,1.355,2256,1.421,2263,1.142,2268,1.421,2314,1.421,2342,1.295,2391,1.69,2398,1.295,2486,1.142,2564,1.671,2668,2.741,2789,1.671,2816,2.665,2826,1.494,2844,1.671,2992,1.671,3001,1.671,3123,1.576,3125,1.494,3126,1.494,3132,1.494,3319,1.781,3333,1.781,3396,1.421,3404,1.576,3405,1.576,3406,1.576,3407,4.942,3408,4.03,3409,2.944,3410,1.913,3411,2.665,3412,3.39,3413,2.299,3414,1.913,3415,2.944,3416,3.589,3417,1.913,3418,2.944,3419,2.944,3420,1.913,3421,1.913,3422,3.585,3423,4.03,3424,1.576,3425,2.944,3426,1.913,3427,3.945,3428,3.321,3429,1.913,3430,1.913,3431,2.741,3432,2.741,3433,1.576,3434,1.576,3435,1.576,3436,1.576,3437,1.913,3438,2.957,3439,1.913,3440,2.741,3441,1.913,3442,1.913,3443,1.576,3444,1.576,3445,1.576,3446,1.576,3447,1.576,3448,2.426,3449,1.576,3450,1.494,3451,1.913,3452,1.671,3453,1.421,3454,1.913,3455,1.913,3456,1.913,3457,1.671,3458,1.913,3459,1.913,3460,4.03,3461,2.426,3462,1.913,3463,1.913,3464,1.913,3465,1.913,3466,1.913,3467,2.944,3468,1.913,3469,1.913,3470,1.913,3471,1.576,3472,1.913,3473,1.913,3474,2.944,3475,1.913,3476,1.913,3477,4.351,3478,1.913,3479,1.576,3480,1.913,3481,2.944,3482,1.576,3483,1.913,3484,1.913,3485,1.913,3486,1.913,3487,1.913,3488,1.913,3489,2.944,3490,1.913,3491,1.913,3492,1.913,3493,1.913,3494,1.913,3495,1.913,3496,1.913,3497,1.913,3498,2.944,3499,2.426,3500,1.913,3501,1.913,3502,1.576,3503,1.913,3504,1.913,3505,1.913,3506,1.913,3507,1.913,3508,1.913,3509,1.913,3510,2.944,3511,1.913,3512,1.913,3513,1.913,3514,1.913,3515,1.913,3516,1.913,3517,1.913,3518,1.913,3519,1.913,3520,1.913,3521,1.576,3522,2.944,3523,1.913,3524,3.589,3525,2.944,3526,4.351,3527,1.913,3528,2.944,3529,5.525,3530,1.913,3531,1.913,3532,1.913,3533,2.944,3534,4.03,3535,1.913,3536,2.944,3537,2.944,3538,1.913,3539,2.944,3540,1.913,3541,3.589,3542,3.589,3543,2.944,3544,1.576,3545,1.913,3546,1.913,3547,1.913,3548,1.913,3549,1.913,3550,1.913,3551,1.913,3552,1.913,3553,1.913,3554,1.913,3555,2.944,3556,2.944,3557,1.913,3558,2.944,3559,2.944,3560,1.913,3561,1.913,3562,1.913,3563,1.913,3564,1.913,3565,1.913,3566,1.913,3567,1.913,3568,4.595,3569,2.803,3570,4.03,3571,1.913,3572,2.944,3573,4.595,3574,1.913,3575,1.913,3576,1.913,3577,1.913,3578,1.913,3579,1.913,3580,1.913,3581,2.944,3582,1.913,3583,1.913,3584,1.913,3585,1.913,3586,1.913,3587,1.913,3588,1.913,3589,1.913,3590,1.913,3591,1.576,3592,1.913,3593,1.913,3594,3.589,3595,1.913,3596,1.913,3597,1.913,3598,1.913,3599,1.913,3600,1.913,3601,1.913,3602,1.913,3603,2.944,3604,1.913,3605,1.913,3606,1.913,3607,1.913,3608,1.913,3609,1.913,3610,1.576,3611,1.913,3612,1.913,3613,1.913,3614,1.913,3615,1.913,3616,1.913,3617,1.913,3618,1.913,3619,1.913,3620,2.944,3621,1.913,3622,1.913,3623,1.913,3624,1.913,3625,1.913,3626,1.913,3627,1.913,3628,1.913,3629,1.913,3630,1.913,3631,1.913,3632,1.913,3633,1.913,3634,1.913,3635,1.913,3636,1.913,3637,1.913,3638,1.913,3639,3.589,3640,1.913,3641,1.913,3642,1.913,3643,3.231,3644,1.913,3645,1.913,3646,1.913,3647,1.913,3648,1.913,3649,1.913,3650,1.913,3651,1.913,3652,1.913,3653,1.913,3654,1.913,3655,1.576,3656,1.913,3657,1.913,3658,1.576,3659,1.913,3660,4.351,3661,1.913,3662,1.913,3663,1.576,3664,1.913,3665,1.913,3666,1.913,3667,1.913,3668,1.913,3669,1.913,3670,1.913,3671,1.913,3672,1.913,3673,1.913,3674,1.913,3675,1.913,3676,1.913,3677,1.913,3678,1.913,3679,1.913,3680,1.913,3681,1.913,3682,2.944,3683,4.942,3684,4.03,3685,2.944,3686,2.944,3687,2.944,3688,2.944,3689,1.913,3690,1.913,3691,1.913,3692,1.913,3693,1.913,3694,1.913,3695,1.913,3696,2.944,3697,1.913,3698,2.571,3699,1.913]],["title/interfaces/TimelineSeries.html",[56,0.109,842,1.687]],["body/interfaces/TimelineSeries.html",[8,0.013,11,2.592,12,0.706,14,0.058,15,0.058,16,0.058,22,0.251,24,0.33,34,0.661,46,0.618,52,0.158,53,0.004,54,0.006,55,0.006,56,0.126,58,0.442,74,0.171,75,0.213,76,0.741,82,0.86,83,0.293,84,0.595,87,0.489,88,0.383,116,0.869,117,0.305,133,0.756,134,1.37,140,0.661,144,0.36,149,0.567,156,0.835,157,0.867,159,1.748,164,1.067,169,1.007,170,0.706,171,1.208,181,0.523,184,0.33,187,1.913,191,1.013,192,2.391,195,1.37,196,0.598,200,0.93,211,0.969,220,0.868,222,1.091,230,1.007,231,1.185,244,1.036,252,1.446,254,0.913,268,1.237,271,1.95,279,1.174,285,0.752,299,1.091,309,1.315,311,1.197,319,2.028,331,0.809,344,1.743,363,1.185,388,0.878,392,0.56,398,2.208,407,0.479,424,1.091,439,1.091,452,1.37,459,1.412,460,0.56,465,1.414,469,0.9,484,1.048,493,1.533,494,0.578,511,0.489,526,0.73,541,1.866,543,1.774,562,1.303,563,2.753,579,2.269,620,0.538,623,0.9,624,0.782,625,1.743,629,0.938,630,0.506,631,0.541,633,1.623,635,1.362,636,1.227,637,0.756,642,0.756,643,1.446,648,0.618,653,1.007,663,1.729,672,1.007,673,1.091,681,0.969,684,2.59,686,1.588,700,0.809,701,1.412,703,0.9,720,0.9,744,0.969,746,0.661,760,2.9,761,0.868,764,1.137,768,2.735,769,1.95,772,0.9,795,1.784,811,1.007,812,1.784,813,1.091,819,2.251,823,0.706,824,1.185,826,1.928,842,2.545,853,1.465,865,1.533,867,1.446,895,1.243,919,0.706,933,2.96,947,1.188,948,1.279,949,2.829,958,1.743,980,1.634,987,2.269,991,2.269,992,2.269,994,2.299,995,2.269,997,4.349,998,1.446,999,3.75,1000,2.269,1003,3.17,1006,1.634,1012,1.091,1015,1.007,1021,2.598,1023,1.37,1032,1.188,1035,1.877,1036,1.784,1040,1.521,1041,0.934,1043,1.303,1046,1.904,1051,1.37,1053,3.17,1054,1.007,1058,3.667,1059,1.303,1060,3.112,1078,1.533,1081,1.634,1096,1.533,1100,3.17,1104,1.904,1105,1.784,1106,1.446,1110,2.685,1117,1.243,1122,1.303,1125,2.299,1127,2.647,1128,1.446,1129,1.446,1130,2.545,1131,1.634,1145,3.17,1147,1.446,1148,2.8,1149,2.269,1150,1.446,1151,1.446,1153,1.446,1154,2.269,1155,1.446,1159,1.188,1160,1.303,1161,3.17,1163,1.634,1164,1.37,1165,2.653,1166,1.446,1167,1.446,1168,1.446,1169,1.446,1170,1.446,1178,1.634,1186,3.284,1189,1.634,1193,1.634,1194,1.533,1197,3.005,1203,1.446,1204,0.969,1205,2.15,1206,1.303,1207,1.37,1208,2.269,1209,2.269,1210,2.269,1211,1.446,1212,1.446,1213,1.446,1215,1.37,1216,1.446,1239,1.303,1247,1.188,1264,1.048,1267,2.269,1268,2.8,1309,1.37,1337,3.848,1356,2.269,1360,1.446,1373,1.743,1381,1.95,1385,1.188,1390,2.563,1400,1.243,1416,1.755,1417,0.618,1437,1.37,1441,1.755,1449,1.048,1463,1.533,1478,0.969,1499,1.634,1507,2.269,1522,1.533,1525,2.753,1559,1.755,1561,1.755,1574,1.007,1578,3.397,1622,2.028,1628,2.653,1631,2.15,1643,1.243,1658,1.446,1693,1.303,1714,1.048,1725,1.188,1729,1.634,1733,1.755,1739,4.241,1865,1.007,1979,1.533,2023,2.15,2024,1.37,2034,2.753,2040,1.303,2048,1.37,2084,1.446,2121,1.243,2130,1.37,2163,1.446,2215,2.269,2249,1.37,2263,1.643,2287,1.37,2338,2.563,2340,1.091,2341,1.446,2342,1.863,2387,1.091,2391,1.007,2409,1.048,2482,1.137,2486,1.048,2573,1.634,2594,1.634,2641,2.753,2691,2.404,2798,3.163,2811,2.8,2866,1.634,2968,2.753,2970,1.634,2971,1.634,2986,3.163,2988,1.755,2990,3.582,2991,2.563,2995,3.163,3002,1.634,3003,1.634,3004,1.634,3005,4.129,3007,1.634,3012,1.634,3013,1.634,3014,2.563,3015,1.634,3016,1.634,3017,3.582,3020,1.634,3022,1.634,3023,1.634,3024,1.634,3025,1.634,3026,1.634,3027,1.634,3028,1.634,3029,1.634,3030,1.755,3032,1.634,3057,1.634,3074,1.755,3080,1.634,3081,2.563,3082,1.634,3085,1.634,3086,1.634,3087,1.634,3089,1.634,3090,1.634,3091,3.582,3092,1.634,3093,1.634,3094,1.634,3095,1.634,3096,1.634,3097,1.634,3098,1.634,3099,1.634,3101,1.634,3103,1.634,3104,1.634,3105,1.634,3106,3.163,3107,2.563,3124,3.848,3125,1.37,3126,1.37,3130,2.753,3131,1.755,3132,2.15,3133,1.755,3134,1.755,3135,1.755,3137,1.755,3138,3.848,3150,2.753,3152,1.755,3153,2.753,3158,1.755,3159,2.753,3160,4.18,3162,1.755,3163,1.755,3164,1.755,3165,1.755,3166,1.755,3168,1.755,3169,1.755,3170,1.755,3171,1.755,3172,1.755,3386,1.755,3396,1.303,3404,3.17,3405,3.17,3406,3.17,3411,2.857,3412,3.4,3424,2.269,3433,1.446,3434,1.446,3435,1.446,3436,1.446,3438,1.446,3443,1.446,3444,1.446,3445,1.446,3446,1.446,3447,1.446,3448,1.446,3449,1.446,3450,2.653,3453,2.523,3461,1.446,3471,3.17,3479,1.446,3482,1.446,3499,1.446,3502,1.446,3521,2.269,3544,1.446,3569,1.37,3591,1.446,3610,1.446,3643,1.303,3655,1.446,3658,1.446,3663,2.8,3700,1.634,3701,2.563,3702,1.907,3703,2.753,3704,2.753,3705,2.753,3706,2.753,3707,2.753,3708,2.753,3709,2.753,3710,2.753,3711,2.753,3712,2.753,3713,2.753,3714,2.753,3715,1.907,3716,2.992,3717,2.992,3718,5.688,3719,2.992,3720,1.907,3721,1.907,3722,1.634,3723,3.692,3724,1.907,3725,1.907,3726,1.907,3727,1.907,3728,1.907,3729,1.907,3730,1.907,3731,2.992,3732,1.907,3733,1.907,3734,2.992,3735,1.907,3736,1.907,3737,1.907,3738,1.907,3739,3.692,3740,1.907,3741,1.907,3742,4.181,3743,1.907,3744,1.907,3745,1.907,3746,1.907,3747,1.907,3748,1.907,3749,1.907,3750,1.907,3751,1.907,3752,1.907,3753,1.907,3754,1.907,3755,1.907,3756,4.181,3757,1.907,3758,2.992,3759,2.992,3760,2.992,3761,1.907,3762,1.907,3763,2.992,3764,1.907,3765,1.907,3766,1.907,3767,2.992,3768,5.039,3769,1.907,3770,2.992,3771,1.907,3772,2.992,3773,1.907,3774,1.907,3775,1.907,3776,2.992,3777,2.992,3778,2.992,3779,3.692,3780,1.907,3781,1.907,3782,1.907,3783,1.907,3784,4.703,3785,2.992,3786,2.992,3787,1.907,3788,1.907,3789,1.907,3790,1.907,3791,1.907,3792,2.992,3793,1.907,3794,1.907,3795,2.992,3796,1.907,3797,3.692,3798,1.907,3799,1.907,3800,1.907,3801,1.907,3802,2.992,3803,1.907,3804,1.907,3805,4.181,3806,1.907,3807,2.992,3808,2.992,3809,2.992,3810,1.907,3811,1.907,3812,1.907,3813,1.907,3814,3.692,3815,1.907,3816,1.907,3817,1.907,3818,1.907,3819,1.907,3820,1.907,3821,1.907,3822,1.907,3823,1.907,3824,1.907,3825,2.992,3826,1.907,3827,1.907,3828,1.907,3829,1.907,3830,1.907,3831,1.907,3832,1.907,3833,1.907,3834,2.992,3835,1.907,3836,1.907,3837,1.907,3838,1.907,3839,1.907,3840,1.907,3841,1.907,3842,4.181,3843,1.907,3844,1.907,3845,1.907,3846,1.907,3847,1.907,3848,1.907,3849,1.907,3850,1.907,3851,1.907,3852,1.907,3853,1.907,3854,1.907,3855,1.907,3856,3.692,3857,1.907,3858,1.907,3859,1.907,3860,1.907,3861,1.907,3862,1.907,3863,1.907,3864,1.907,3865,1.907,3866,1.907,3867,2.992,3868,1.907,3869,1.907,3870,1.907,3871,1.907,3872,1.907,3873,1.907,3874,1.907,3875,1.907,3876,1.907,3877,1.907,3878,1.907,3879,1.907,3880,1.907,3881,1.907,3882,1.907,3883,1.907,3884,5.039,3885,5.039,3886,2.992,3887,2.992,3888,1.907,3889,1.907,3890,2.992,3891,2.992,3892,2.992,3893,2.992,3894,2.992,3895,2.992,3896,2.992,3897,2.992,3898,2.992,3899,1.907,3900,1.907,3901,3.692,3902,1.907,3903,1.907,3904,1.907,3905,1.907,3906,1.907,3907,1.907,3908,2.992,3909,1.907,3910,1.907,3911,1.907,3912,1.907,3913,1.907,3914,1.907,3915,1.907,3916,1.907,3917,1.907,3918,4.542,3919,1.907,3920,1.907,3921,2.992,3922,1.907,3923,1.907,3924,2.992,3925,1.907,3926,1.907,3927,1.907,3928,3.692,3929,1.907,3930,1.907,3931,1.907,3932,1.907,3933,1.907,3934,1.907,3935,1.907,3936,2.992,3937,1.907,3938,1.907,3939,1.907,3940,1.907,3941,1.907,3942,1.907,3943,1.907,3944,1.907,3945,1.907,3946,1.907,3947,1.907,3948,1.907,3949,1.907,3950,1.907,3951,1.907,3952,2.992,3953,2.992,3954,3.692,3955,1.907,3956,2.992,3957,1.907,3958,1.907,3959,1.907,3960,1.907,3961,3.692,3962,1.907,3963,1.907,3964,1.907,3965,1.907,3966,1.907,3967,1.907,3968,1.907,3969,1.907,3970,1.907,3971,2.992,3972,1.907,3973,1.907,3974,1.907,3975,1.907,3976,1.907,3977,1.907,3978,1.907,3979,1.907,3980,1.907,3981,2.992,3982,1.907,3983,1.907,3984,2.992,3985,1.907,3986,1.907,3987,1.907,3988,1.907,3989,1.907,3990,1.907,3991,1.907,3992,1.907,3993,1.907,3994,1.907,3995,2.992,3996,1.907,3997,1.907,3998,2.992,3999,1.907,4000,1.907,4001,1.907,4002,1.907,4003,1.907,4004,1.907,4005,3.692,4006,1.907,4007,3.692,4008,1.907,4009,2.992,4010,2.992,4011,1.907,4012,1.755,4013,1.907,4014,1.907,4015,1.755,4016,1.907,4017,1.907,4018,1.907,4019,1.907,4020,1.907,4021,1.907,4022,2.992,4023,5.039,4024,1.907,4025,1.907,4026,1.907,4027,1.755,4028,4.819,4029,5.039,4030,1.907,4031,1.907,4032,1.907,4033,2.992,4034,1.907,4035,1.907,4036,1.907,4037,1.907,4038,1.907,4039,2.992,4040,1.907]],["title/classes/TooltipManager.html",[53,0.006,994,1.989]],["body/classes/TooltipManager.html",[8,0.013,14,0.135,15,0.135,16,0.135,22,0.193,46,0.651,52,0.154,53,0.009,54,0.01,55,0.01,74,0.253,75,0.385,76,0.831,82,0.681,83,0.284,117,0.709,124,2.435,144,0.466,149,0.609,156,0.934,157,0.86,163,0.738,164,1.137,184,0.936,187,1.892,200,0.627,376,2.889,381,1.641,392,1.902,394,1.813,407,0.973,408,1.56,511,1.138,562,3.697,633,2.822,635,2.463,636,2.394,786,4.348,860,2.857,994,3.369,1130,3.293,1173,4.369,1215,3.888,1346,4.979,1725,2.761,1815,6.728,2905,4.906,4050,6.234,4057,7.225,4058,4.906,4059,7.713,4060,7.713,4061,7.407,4062,5.623,4063,5.623,4064,5.987,4065,6.863,4066,5.623,4067,5.623,4068,5.623,4069,5.623,4070,6.863,4071,8.145,4072,5.623,4073,5.623,4074,5.623,4075,5.623,4076,5.623,4077,5.623,4078,6.863,4079,6.863,4080,5.623,4081,5.623,4082,5.623,4083,7.713,4084,5.623,4085,5.623,4086,5.623,4087,5.623,4088,5.623,4089,5.623,4090,5.623,4091,5.623,4092,6.863,4093,6.863,4094,5.987,4095,5.623]],["title/interfaces/VisEvent.html",[56,0.109,4096,3.193]],["body/interfaces/VisEvent.html",[8,0.013,11,1.304,14,0.12,15,0.084,16,0.084,22,0.274,24,0.478,29,1.985,34,0.957,38,0.535,42,1.172,46,0.593,48,1.369,52,0.16,53,0.005,54,0.011,55,0.008,56,0.135,58,0.64,61,1.214,63,2.575,74,0.158,75,0.329,81,2.752,82,0.607,83,0.279,84,0.655,87,0.709,88,0.555,89,1.267,90,1.39,92,1.803,93,1.566,94,1.886,95,1.214,96,1.378,99,0.758,100,0.823,101,0.685,104,1.463,107,1.865,110,0.838,116,1.004,117,0.442,124,1.517,132,1.888,140,1.369,142,1.912,143,2.128,144,0.397,145,1.888,146,1.866,149,0.717,150,2.058,157,0.807,158,1.459,162,2.466,163,0.768,164,0.922,167,1.459,170,1.023,171,1.068,175,1.721,180,2.367,182,1.172,184,0.478,185,1.106,186,1.199,187,1.632,192,2.26,193,2.041,196,0.866,200,0.862,211,1.404,230,1.459,231,1.828,244,0.957,254,0.794,279,0.555,285,0.711,291,1.566,296,1.985,297,1.677,308,1.463,309,2.028,310,1.309,311,0.895,328,1.6,329,1.517,336,1.354,337,1.866,338,1.4,342,1.429,344,1.304,353,1.369,360,3.176,363,2.111,378,1.095,388,1.16,452,1.985,456,1.888,457,3.02,460,0.811,472,2.575,478,1.888,482,2.009,484,1.517,494,0.838,511,0.709,522,1.8,620,0.83,623,1.304,629,1.239,630,0.733,631,0.784,642,1.095,645,2.367,646,2.84,648,0.895,650,2.84,663,1.573,674,3.136,681,1.404,684,2.293,686,1.62,687,2.542,725,1.304,740,1.404,757,2.437,760,1.459,767,3.708,772,1.304,789,2.542,790,3.637,791,2.515,792,2.261,794,2.342,819,2.34,823,1.023,824,1.566,836,2.542,838,3.637,849,1.214,853,1.935,871,1.459,873,1.353,874,1.459,875,1.404,882,2.542,883,2.542,958,1.304,967,2.639,1035,2.345,1043,1.888,1046,2.101,1071,2.515,1104,2.101,1118,2.087,1197,1.647,1239,1.888,1255,5.573,1342,1.985,1356,3.499,1360,2.095,1373,2.515,1437,1.985,1445,3.057,1449,2.171,1461,1.647,1466,1.737,1467,2.26,1468,1.647,1469,1.647,1473,3.953,1478,1.404,1513,2.367,1622,2.171,1644,2.367,1665,4.373,1666,3.057,1667,4.775,1714,1.517,1755,3.057,1777,5.106,1841,3.057,1895,3.057,1947,1.8,1960,4.373,1963,4.373,2032,5.036,2040,2.701,2057,2.095,2121,1.8,2130,1.985,2154,2.367,2193,2.095,2247,2.575,2262,2.22,2284,2.542,2310,2.22,2371,3.952,2383,2.461,2384,2.817,2385,1.888,2386,1.985,2387,1.58,2388,2.701,2403,1.985,2408,1.985,2412,3.153,2414,1.985,2816,1.888,2861,4.614,3296,3.637,3396,3.153,4012,2.542,4015,4.246,4027,2.542,4064,3.057,4096,4.614,4097,2.762,4098,5.013,4099,3.057,4100,4.373,4101,3.057,4102,3.505,4103,3.505,4104,3.505,4105,3.505,4106,3.505,4107,5.013,4108,5.013,4109,3.505,4110,5.013,4111,5.013,4112,3.505,4113,3.505,4114,3.505,4115,3.505,4116,3.505,4117,3.505,4118,3.505,4119,3.505,4120,7.239,4121,3.505,4122,3.505,4123,3.505,4124,3.505,4125,3.505,4126,6.759,4127,3.505,4128,3.505,4129,3.505,4130,3.505,4131,5.853,4132,6.388,4133,5.853,4134,3.505,4135,3.505,4136,3.505,4137,3.505,4138,5.013,4139,5.013,4140,3.505,4141,5.013,4142,3.505,4143,3.505,4144,3.505,4145,3.505,4146,3.505,4147,3.505,4148,3.505,4149,3.505,4150,3.505,4151,3.505,4152,3.505,4153,3.505,4154,3.505,4155,5.013,4156,5.013,4157,3.505,4158,6.388,4159,3.505,4160,3.505,4161,3.057,4162,3.505,4163,3.505,4164,3.505,4165,3.505,4166,3.505,4167,3.505,4168,5.013,4169,5.013,4170,3.505,4171,3.505,4172,3.505,4173,3.505,4174,3.505,4175,5.013,4176,3.505,4177,3.505,4178,3.505,4179,3.505,4180,3.505,4181,3.505,4182,3.505,4183,3.505,4184,3.505,4185,3.505,4186,2.762,4187,3.505,4188,3.505,4189,3.505,4190,5.013,4191,5.853,4192,3.505,4193,3.505,4194,3.505,4195,3.505,4196,3.505,4197,3.505,4198,3.505,4199,3.505,4200,3.505,4201,3.505,4202,3.505,4203,3.505,4204,3.505,4205,3.505,4206,3.505,4207,3.505,4208,3.505,4209,3.505,4210,3.505,4211,3.505,4212,3.505,4213,3.505,4214,3.505,4215,3.505,4216,3.505,4217,3.505,4218,3.505,4219,3.505,4220,3.505,4221,3.505,4222,3.505,4223,3.505,4224,3.505,4225,3.505,4226,3.505,4227,3.505,4228,3.505,4229,3.505,4230,3.505,4231,3.505,4232,5.013,4233,3.505,4234,5.013,4235,3.505,4236,5.013,4237,3.505,4238,5.013,4239,3.505,4240,5.013,4241,3.505,4242,3.505,4243,3.505,4244,6.388,4245,6.388,4246,6.388,4247,3.505,4248,6.759,4249,7.031,4250,3.505,4251,5.013,4252,3.505,4253,3.505,4254,3.505,4255,3.505,4256,3.505,4257,3.505,4258,3.505,4259,2.762,4260,3.505,4261,3.505,4262,3.505,4263,6.759,4264,3.505,4265,3.505,4266,3.505,4267,3.505,4268,3.505,4269,6.759,4270,3.505,4271,3.505,4272,3.505,4273,3.505,4274,3.505]],["title/directives/VisNetworkDirective.html",[702,1.564,750,1.564]],["body/directives/VisNetworkDirective.html",[8,0.013,14,0.108,15,0.108,16,0.108,22,0.229,24,0.616,46,0.688,52,0.163,53,0.009,54,0.009,55,0.009,61,2.068,66,1.319,72,1.09,74,0.203,75,0.427,76,0.723,82,0.547,83,0.339,84,0.722,94,2.025,116,0.593,140,2.075,142,1.577,143,2.248,144,0.516,149,0.401,150,1.63,171,1.221,184,0.616,185,1.274,200,0.665,244,1.943,285,0.846,331,1.997,381,1.428,388,1.646,392,1.874,394,1.577,398,2.486,407,0.844,408,1.568,418,2.009,442,1.489,452,4.031,460,1.381,462,2.807,470,2.222,494,1.769,629,1.759,630,1.249,653,2.486,654,2.486,663,1.496,673,3.625,684,2.143,686,1.336,700,2.237,701,2.489,702,2.746,747,1.881,750,3.167,759,3.493,772,2.648,773,3.345,819,2.3,823,1.743,826,2.789,860,2.486,919,2.077,1017,4.032,1021,3.654,1046,2.656,1104,2.143,1165,3.382,1206,3.216,1437,4.191,1754,4.706,2023,3.382,2193,3.569,2383,4.028,2384,2.392,2385,2.433,2785,4.032,2924,4.706,3311,3.56,3701,4.516,3784,3.05,4099,3.94,4186,4.706,4259,4.706,4275,7.013,4276,3.94,4277,5.208,4278,6.762,4279,6.207,4280,7.115,4281,3.94,4282,4.517,4283,6.947,4284,4.517,4285,5.208,4286,4.517,4287,5.97,4288,6.207,4289,7.115,4290,5.208,4291,4.517,4292,5.97,4293,5.208,4294,4.517,4295,5.208,4296,5.208,4297,5.208,4298,4.517,4299,7.115,4300,6.688,4301,4.517,4302,4.517,4303,4.517,4304,6.865,4305,4.517,4306,4.517,4307,3.94,4308,5.97,4309,3.94,4310,6.207,4311,5.97,4312,6.688,4313,5.97,4314,5.208,4315,5.834,4316,3.94,4317,3.94,4318,3.94,4319,4.517,4320,5.208,4321,4.517,4322,4.517,4323,4.517,4324,4.517,4325,4.517,4326,4.517]],["title/directives/VisTimelineDirective.html",[702,1.564,752,1.564]],["body/directives/VisTimelineDirective.html",[8,0.013,14,0.105,15,0.105,16,0.105,22,0.226,24,0.599,46,0.66,52,0.16,53,0.009,54,0.009,55,0.009,61,2.029,66,1.28,72,1.069,74,0.197,75,0.395,76,0.709,82,0.531,83,0.341,84,0.716,116,0.576,140,2.135,143,1.985,144,0.512,149,0.389,171,1.203,184,0.599,185,1.273,200,0.652,244,2.058,285,0.83,309,2.612,331,1.959,381,1.4,388,1.627,392,1.878,394,1.546,398,2.438,407,0.831,408,1.557,418,1.653,460,1.354,462,2.752,470,2.179,494,1.752,629,1.738,630,1.225,653,2.438,654,2.438,663,1.573,673,3.606,684,2.102,686,1.31,700,2.205,701,2.453,702,2.715,746,2.314,747,1.826,752,3.17,753,3.304,759,3.453,772,2.617,773,3.306,819,2.273,823,1.709,826,2.78,860,2.438,919,2.053,1017,3.954,1021,3.636,1046,2.63,1104,2.102,1165,3.317,1206,3.154,1437,4.151,1754,4.615,2023,3.317,2193,3.5,2383,2.874,2384,3.274,2785,3.954,2924,4.615,3277,6.357,3295,5.195,3305,3.826,3306,3.826,3311,3.457,3701,4.451,3784,2.962,4186,4.615,4259,4.615,4277,5.108,4278,5.108,4279,5.108,4281,3.826,4283,7.035,4285,5.108,4288,6.575,4290,5.108,4293,5.108,4295,5.108,4296,5.108,4297,5.108,4304,6.906,4307,3.826,4309,3.826,4310,6.135,4314,5.108,4315,6.135,4316,3.826,4317,3.826,4318,3.826,4320,5.749,4327,6.357,4328,3.826,4329,7.696,4330,7.696,4331,7.696,4332,4.386,4333,4.386,4334,6.591,4335,4.386,4336,7.033,4337,5.855,4338,6.591,4339,4.386,4340,4.386,4341,4.386,4342,5.855,4343,4.386,4344,4.386,4345,4.386,4346,4.386,4347,4.386,4348,4.386,4349,6.591,4350,6.591,4351,7.033,4352,5.855,4353,4.386,4354,4.386,4355,4.386,4356,4.386,4357,4.386,4358,5.855,4359,4.386,4360,5.855,4361,4.386,4362,4.386]],["title/modules/VisTimelineModule.html",[0,2.182,4363,2.939]],["body/modules/VisTimelineModule.html",[2,2.712,3,3.441,8,0.013,11,2.724,12,1.829,13,2.712,14,0.15,15,0.15,16,0.15,20,3.943,21,3.943,22,0.279,23,3.943,24,0.855,25,3.76,26,3.218,33,3.943,34,1.71,50,3.218,52,0.171,53,0.01,54,0.011,55,0.011,743,3.412,744,2.51,746,1.999,752,3.287,2384,2.933,3273,4.544,4327,4.938,4363,6.137,4364,5.464,4365,5.464,4366,5.464,4367,6.264,4368,6.264]],["title/coverage.html",[4369,4.84]],["body/coverage.html",[7,1.569,8,0.013,9,1.512,10,1.512,14,0.149,16,0.094,17,2.834,18,4.273,31,2.172,53,0.012,54,0.008,55,0.008,56,0.229,57,2.481,59,4.211,60,2.965,72,1.503,73,2.341,83,0.162,89,0.985,90,1.242,91,1.266,92,1.106,93,1.223,102,1.631,109,2.481,149,0.347,178,2.481,185,0.598,279,1.365,291,1.223,435,3.087,436,3.417,437,1.946,443,1.766,445,1.457,446,1.696,490,3.417,620,1.181,621,1.569,627,3.417,628,4.51,645,4.198,702,2.4,710,1.457,712,1.631,714,1.31,716,1.512,717,1.512,718,1.631,719,1.631,720,1.457,721,1.457,724,1.512,725,2.622,728,1.569,730,1.512,732,1.569,735,1.569,736,1.569,738,2.92,739,2.92,740,1.569,742,1.457,743,1.569,745,1.512,748,1.631,750,1.512,752,1.512,755,4.102,756,4.51,758,2.645,782,2.012,813,1.766,842,1.631,857,2.645,986,4.51,994,1.923,1025,2.841,1029,2.841,1035,3.36,1036,1.841,1119,2.841,1191,2.645,1223,3.087,1278,4.273,1280,2.841,1334,3.417,1363,2.841,1364,4.901,1365,4.51,1366,4.757,1378,3.087,1609,2.341,1610,4.51,1616,2.341,1660,2.341,1661,4.729,1690,3.087,2041,3.417,2046,2.481,2047,4.211,2053,1.923,2218,3.087,2219,3.087,2245,2.645,2246,4.356,2250,2.481,2265,2.645,2336,2.841,2349,2.841,2379,4.476,2380,4.232,2383,1.923,2384,2.689,2544,2.841,2545,4.273,2546,3.933,2637,3.417,2638,3.417,2702,4.273,2703,4.273,2705,3.087,2706,4.466,2707,3.417,2708,3.087,2709,3.417,2723,2.481,2724,2.645,2727,4.356,2729,4.273,2768,2.841,2769,4.273,2776,2.841,2777,2.645,2785,2.645,2880,4.273,2906,3.087,2961,3.087,2962,5.289,2963,4.729,3122,3.087,3123,4.466,3273,4.868,3274,4.273,3277,3.087,3296,3.933,3384,3.087,3385,3.417,3411,2.11,3412,2.012,3413,2.219,3422,2.341,3427,2.341,3428,2.341,3700,4.757,3722,2.645,4041,4.273,4042,4.273,4057,3.417,4058,3.417,4094,3.417,4096,3.087,4097,4.901,4161,7.267,4275,4.729,4276,3.417,4327,4.273,4328,3.417,4369,3.417,4370,3.917,4371,3.917,4372,3.917,4373,3.917,4374,7.471,4375,3.917,4376,3.417,4377,3.917,4378,3.917,4379,3.917,4380,5.424,4381,3.417,4382,8.33,4383,3.417,4384,3.417,4385,5.424,4386,3.417,4387,3.417,4388,3.417,4389,3.917,4390,7.288,4391,5.421,4392,3.917,4393,3.417,4394,3.417,4395,3.417,4396,3.417,4397,3.917,4398,3.917,4399,5.421,4400,6.217,4401,4.729,4402,5.421,4403,3.917,4404,3.417,4405,3.917,4406,3.917,4407,3.417,4408,3.417,4409,6.71,4410,5.421,4411,3.917,4412,5.421,4413,5.424,4414,3.417,4415,3.417,4416,3.417,4417,3.917,4418,3.917,4419,3.917,4420,4.729,4421,3.917,4422,3.917,4423,3.917,4424,3.917,4425,3.917,4426,5.424,4427,3.417,4428,3.417,4429,3.417,4430,3.917,4431,3.917,4432,3.917,4433,3.917,4434,3.917,4435,3.917,4436,3.917,4437,3.917,4438,3.917,4439,3.917,4440,7.051,4441,7.051,4442,3.417,4443,8.232,4444,3.417,4445,3.417,4446,3.417,4447,3.417,4448,3.417,4449,3.417,4450,3.417,4451,3.417,4452,3.417,4453,3.417,4454,3.417,4455,3.417,4456,3.417,4457,3.917,4458,6.217,4459,6.217,4460,3.917,4461,3.917,4462,3.917,4463,3.917,4464,3.417,4465,3.917,4466,3.917,4467,3.917,4468,6.217,4469,6.217,4470,5.421,4471,3.917,4472,3.417,4473,3.917,4474,3.917,4475,3.917,4476,3.417,4477,3.917,4478,3.917,4479,3.417,4480,3.917,4481,3.917,4482,3.917,4483,3.917,4484,5.421,4485,6.217,4486,3.917,4487,3.917,4488,3.417,4489,3.417,4490,3.917,4491,3.917,4492,3.917,4493,3.917,4494,5.421,4495,3.917,4496,3.917,4497,3.917,4498,3.917,4499,3.917,4500,3.917,4501,3.917]],["title/dependencies.html",[3,2.293,4502,2.943]],["body/dependencies.html",[3,3.473,8,0.013,17,2.75,31,2.961,32,4.033,46,0.537,54,0.011,55,0.011,94,1.522,746,1.738,1060,2.993,1414,4.618,1614,4.299,1615,3.806,1687,5.018,1737,5.018,2384,3.219,2774,4.618,2775,4.618,2903,5.554,2904,5.554,4503,6.366,4504,5.554,4505,6.366,4506,6.366,4507,6.366,4508,6.366,4509,6.366,4510,6.366,4511,6.366,4512,6.366,4513,6.366,4514,6.366,4515,6.366,4516,6.366,4517,6.366,4518,6.366,4519,6.366,4520,6.366,4521,6.366,4522,6.366,4523,6.366,4524,6.366,4525,6.366,4526,6.366,4527,6.366,4528,6.366,4529,6.366,4530,7.389]],["title/miscellaneous/functions.html",[1915,3.845,4531,2.137]],["body/miscellaneous/functions.html",[8,0.013,54,0.009,55,0.009,59,2.458,60,2.655,61,2.858,66,1.862,68,3.477,69,5.465,73,3.35,74,0.185,76,1.003,78,2.879,80,3.019,83,0.348,85,1.862,89,1.01,90,1.393,91,2.446,94,1.965,97,2.373,104,2.376,114,2.215,121,3.22,122,1.854,137,2.458,142,1.893,144,0.562,146,2.667,149,0.497,150,2.285,158,2.333,163,0.54,169,2.655,170,1.862,172,2.998,173,2.776,177,2.555,181,1.38,190,2.776,191,1.667,197,2.998,231,1.751,247,5.111,248,4.306,250,2.998,261,4.306,262,2.527,268,1.999,291,2.542,294,1.587,310,0.92,336,1.475,344,1.53,353,1.87,358,1.875,394,2.186,407,1.044,416,1.893,437,2.961,440,2.879,441,1.751,442,1.173,446,1.78,462,3.826,465,2.427,467,2.998,468,2.133,470,1.53,527,3.946,537,2.329,579,3.35,651,2.776,792,2.786,826,1.875,1051,2.329,1118,3.079,1340,3.241,1508,2.605,1608,2.879,1640,2.373,1693,2.215,1787,2.605,1915,3.241,2040,3.019,2047,2.458,2048,3.175,2051,2.329,2077,2.776,2080,5.111,2082,4.605,2083,2.776,2101,4.625,2246,2.458,2248,3.518,2250,3.551,2257,2.982,2340,2.527,2343,4.418,2379,2.215,2391,1.712,2409,1.78,2706,2.458,2723,2.605,3129,3.586,3387,3.586,3388,3.586,4395,3.586,4396,4.889,4440,7.136,4441,7.136,4442,4.889,4444,4.889,4445,4.889,4446,4.889,4447,4.889,4448,4.889,4449,4.889,4450,4.889,4451,4.889,4452,4.889,4453,4.889,4454,4.889,4455,4.889,4456,4.889,4464,4.889,4472,4.889,4476,7.476,4479,4.889,4531,2.605,4532,8.139,4533,4.111,4534,3.586,4535,4.111,4536,3.586,4537,4.111,4538,6.377,4539,4.111,4540,6.849,4541,6.377,4542,8.139,4543,4.111,4544,8.328,4545,8.038,4546,4.111,4547,4.111,4548,4.111,4549,5.605,4550,4.111,4551,4.111,4552,6.849,4553,4.111,4554,4.111,4555,5.605,4556,4.111,4557,4.111,4558,4.111,4559,5.605,4560,5.605,4561,6.377,4562,5.605,4563,4.111,4564,4.111,4565,4.111,4566,4.111,4567,4.111,4568,4.111,4569,4.111,4570,5.605,4571,5.605,4572,5.605,4573,4.111,4574,4.111,4575,4.111,4576,4.111,4577,4.111,4578,4.111,4579,4.111,4580,4.111,4581,4.111,4582,4.111,4583,4.111,4584,6.377,4585,4.111,4586,4.111,4587,4.111,4588,5.605]],["title/index.html",[74,0.182,4589,3.534]],["body/index.html",[1,5.932,2,2.258,3,3.079,4,4.55,5,4.55,6,4.55,7,3.212,8,0.013,9,2.764,10,2.764,11,2.437,12,1.522,13,2.258,54,0.01,55,0.01,58,0.952,158,2.171,211,2.09,376,2.679,621,3.212,622,2.258,710,2.983,712,3.337,714,2.682,716,3.094,717,3.094,718,3.337,720,2.983,721,2.88,724,3.094,728,3.212,730,3.094,732,3.212,735,3.212,736,3.212,740,3.212,742,2.983,743,3.212,745,3.094,747,2.171,748,3.337,750,3.094,752,3.094,1025,3.783,1269,6.065,1270,4.55,1271,4.55,1272,4.55,1273,4.55,1324,6.123,1325,4.55,1326,4.55,1327,4.55,2696,5.975,2697,4.55,2698,4.55,2700,4.55,2712,6.01,2713,4.55,2714,4.55,2715,4.55,2728,3.783,2873,5.614,2874,4.55,2875,4.55,2876,4.55,3212,6.087,3213,4.55,3214,4.55,3215,4.55,3259,5.88,3260,4.55,3261,4.55,3262,4.55,3569,2.954,4363,5.88,4364,4.55,4365,4.55,4366,4.55,4420,4.55,4589,4.55,4590,5.215]],["title/modules.html",[2,2.403]],["body/modules.html",[1,4.71,2,2.811,8,0.011,54,0.011,55,0.011,134,4.797,1205,4.797,1269,4.71,1324,4.71,2696,4.71,2712,4.71,2873,4.71,3212,4.71,3259,4.71,4363,4.71,4591,8.468,4592,8.468]],["title/properties.html",[75,0.274,4502,2.943]],["body/properties.html",[8,0.012,54,0.012,55,0.012,75,0.376,1790,4.244,4504,5.844,4593,6.699,4594,6.699]],["title/miscellaneous/typealiases.html",[4531,2.137,4595,4.877]],["body/miscellaneous/typealiases.html",[8,0.013,15,0.176,17,2.978,54,0.011,55,0.011,59,3.759,60,2.926,74,0.283,83,0.321,89,1.162,118,1.484,119,3.759,120,4.246,121,2.956,122,2.835,123,4.246,124,2.723,125,4.246,126,3.562,127,3.087,128,2.52,129,4.954,130,2.832,131,3.176,135,2.723,168,3.387,398,3.054,755,3.387,782,3.23,842,2.618,2047,3.759,2071,4.954,2073,4.246,2076,4.954,2218,4.957,2219,5.782,2225,6.399,3123,4.643,3412,3.23,3422,3.759,3427,3.759,3428,3.759,3431,4.954,3432,4.954,4376,5.485,4531,3.984,4534,5.485,4536,6.399,4596,6.288,4597,6.288,4598,6.288,4599,7.336]],["title/miscellaneous/variables.html",[4531,2.137,4600,4.255]],["body/miscellaneous/variables.html",[8,0.013,17,2.539,54,0.009,55,0.009,74,0.183,83,0.318,94,0.974,116,0.731,117,1.055,143,1.573,149,0.361,151,1.915,155,1.112,156,0.514,158,1.696,163,1.1,185,0.851,254,0.646,285,0.578,442,1.428,579,3.33,580,3.508,642,1.273,729,2.412,738,2.543,739,2.863,977,4.391,986,2.956,1012,1.837,1015,2.319,1027,3.212,1058,2.195,1082,2.412,1111,3.212,1112,3.212,1113,3.212,1114,3.212,1115,3.212,1119,4.041,1190,3.212,1309,2.308,1364,3.212,1365,2.956,1366,3.762,1378,4.391,1379,3.554,1380,2.956,1381,2.861,1382,5.952,1383,4.859,1384,3.554,1385,2,1386,3.554,1387,3.554,1388,3.554,1389,3.554,1390,2.751,1391,3.554,2384,2.232,2387,1.837,2388,2.195,2409,1.764,2412,2.195,2706,2.436,2776,4.041,2880,3.212,2906,4.391,2907,3.554,3273,4.041,3274,4.391,3295,3.212,3296,4.95,3307,3.554,3308,3.554,3309,3.554,3310,3.554,3440,2.751,3450,2.308,3700,2.751,3703,2.956,3704,2.956,3705,2.956,3706,2.956,3707,2.956,3708,2.956,3709,2.956,3710,2.956,3711,2.956,3712,2.956,3713,2.956,3714,2.956,3722,3.762,4097,3.212,4100,3.554,4101,3.554,4380,3.554,4381,4.859,4383,4.859,4384,4.859,4385,3.554,4386,4.859,4387,4.859,4388,4.859,4393,3.554,4394,4.859,4401,3.554,4404,4.859,4407,3.554,4408,4.859,4413,3.554,4414,4.859,4415,4.859,4416,4.859,4426,3.554,4427,4.859,4428,4.859,4429,4.859,4488,4.859,4489,4.859,4531,2.581,4600,3.554,4601,4.074,4602,4.074,4603,4.074,4604,4.074,4605,4.074,4606,4.074,4607,4.074,4608,6.347,4609,6.347,4610,6.347,4611,6.347,4612,4.074,4613,4.074,4614,4.074,4615,8.427,4616,7.551,4617,8.427,4618,6.823,4619,7.688,4620,4.074,4621,7.144,4622,4.074,4623,8.38,4624,4.074,4625,6.823,4626,5.57,4627,4.074,4628,4.074,4629,4.074,4630,4.074,4631,4.074,4632,4.074,4633,6.347,4634,6.347,4635,5.57,4636,4.074,4637,5.57,4638,5.57,4639,4.074,4640,6.347,4641,4.074,4642,5.57,4643,6.823,4644,4.074,4645,4.074,4646,4.074,4647,5.57,4648,4.074,4649,4.074,4650,4.074,4651,5.57,4652,4.074,4653,4.074,4654,4.074,4655,4.074,4656,8.027,4657,4.074,4658,5.57,4659,4.074,4660,5.57,4661,4.074,4662,5.57,4663,4.074,4664,4.074,4665,4.074,4666,4.074,4667,4.074,4668,4.074,4669,4.074,4670,4.074,4671,4.074,4672,4.074,4673,4.074,4674,4.074,4675,4.074,4676,4.074,4677,4.074,4678,4.074,4679,4.074,4680,4.074,4681,4.074,4682,4.074,4683,4.074,4684,4.074,4685,4.074,4686,4.074,4687,4.074,4688,4.074,4689,4.074,4690,4.074,4691,4.074,4692,4.074,4693,4.074,4694,4.074,4695,4.074,4696,4.074,4697,4.074,4698,4.074,4699,4.074,4700,4.074,4701,4.074,4702,4.074,4703,4.074,4704,4.074,4705,4.074,4706,4.074,4707,4.074,4708,4.074,4709,4.074,4710,4.074,4711,4.074,4712,4.074,4713,4.074,4714,4.074,4715,4.074,4716,4.074,4717,4.074,4718,4.074,4719,4.074,4720,4.074,4721,4.074,4722,4.074,4723,4.074,4724,4.074,4725,4.074,4726,4.074,4727,4.074,4728,4.074,4729,4.074,4730,4.074,4731,4.074,4732,4.074,4733,4.074,4734,4.074,4735,4.074,4736,4.074,4737,4.074,4738,4.074,4739,4.074,4740,4.074,4741,4.074,4742,4.074,4743,4.074,4744,4.074,4745,4.074,4746,4.074,4747,4.074,4748,4.074,4749,4.074,4750,4.074,4751,4.074,4752,4.074,4753,4.074,4754,4.074,4755,4.074,4756,4.074,4757,4.074,4758,4.074,4759,4.074,4760,4.074,4761,4.074,4762,4.074,4763,4.074,4764,4.074,4765,4.074,4766,4.074,4767,4.074,4768,4.074,4769,4.074,4770,4.074,4771,4.074,4772,4.074,4773,4.074,4774,4.074,4775,4.074,4776,4.074,4777,4.074,4778,4.074,4779,4.074,4780,4.074,4781,4.074,4782,4.074,4783,4.074,4784,4.074,4785,4.074,4786,4.074,4787,4.074,4788,4.074,4789,4.074,4790,4.074,4791,4.074,4792,4.074,4793,4.074,4794,4.074,4795,4.074,4796,4.074,4797,4.074,4798,4.074,4799,4.074,4800,4.074,4801,4.074,4802,4.074,4803,4.074,4804,4.074,4805,4.074,4806,4.074,4807,4.074]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":279,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["0(n",{"_index":2475,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["0.0.1",{"_index":4504,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.25rem!important",{"_index":2643,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["0.2s",{"_index":1258,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.3",{"_index":573,"title":{},"body":{"classes/BaseProvider.html":{}}}],["0.3*this.innerheight",{"_index":3968,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["0.3.0",{"_index":4526,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":4519,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1262,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["0.5*this.y.bandwidth",{"_index":1214,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["0.65",{"_index":2852,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["0.8",{"_index":979,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{}}}],["0.9",{"_index":1256,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0/1",{"_index":4382,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":4375,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":4379,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":4491,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":4484,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":4400,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":4374,"title":{},"body":{"coverage.html":{}}}],["0/30",{"_index":4490,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":4412,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":4485,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":4494,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":4390,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":4409,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":4399,"title":{},"body":{"coverage.html":{}}}],["023e58",{"_index":4633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0f5132",{"_index":975,"title":{},"body":{"components/BsFacetDate.html":{}}}],["0s",{"_index":1260,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1",{"_index":254,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["1).split",{"_index":3327,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1.0",{"_index":1229,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1.0.0",{"_index":4528,"title":{},"body":{"dependencies.html":{}}}],["1.14.3",{"_index":4507,"title":{},"body":{"dependencies.html":{}}}],["1.5em",{"_index":641,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["1/1",{"_index":4443,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":4470,"title":{},"body":{"coverage.html":{}}}],["1/204",{"_index":4398,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":4462,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":4459,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":211,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{}}}],["10/10",{"_index":4481,"title":{},"body":{"coverage.html":{}}}],["10/21",{"_index":4461,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1035,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["1000",{"_index":1043,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["10000",{"_index":3290,"title":{},"body":{"components/ResultTimeline.html":{}}}],["10px",{"_index":1263,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["11",{"_index":4495,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":4497,"title":{},"body":{"coverage.html":{}}}],["11/26",{"_index":4378,"title":{},"body":{"coverage.html":{}}}],["11/33",{"_index":4411,"title":{},"body":{"coverage.html":{}}}],["11/60",{"_index":4425,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":3687,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["12/45",{"_index":4406,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":1344,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["13/41",{"_index":4392,"title":{},"body":{"coverage.html":{}}}],["13/56",{"_index":4419,"title":{},"body":{"coverage.html":{}}}],["14.0.6",{"_index":4506,"title":{},"body":{"dependencies.html":{}}}],["14/15",{"_index":4437,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":812,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["15/60",{"_index":4493,"title":{},"body":{"coverage.html":{}}}],["150",{"_index":809,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["150px",{"_index":3308,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":4458,"title":{},"body":{"coverage.html":{}}}],["16rem",{"_index":3258,"title":{},"body":{"components/NgxChart.html":{}}}],["17",{"_index":4486,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1349,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["18",{"_index":4424,"title":{},"body":{"coverage.html":{}}}],["180.0",{"_index":2895,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["187",{"_index":4047,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["19/20",{"_index":4431,"title":{},"body":{"coverage.html":{}}}],["1950",{"_index":3338,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1].date",{"_index":3673,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["1a3646",{"_index":4622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d2c4d",{"_index":4618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":159,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["2).split",{"_index":3051,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["2*size",{"_index":4040,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2.0.1",{"_index":4522,"title":{},"body":{"dependencies.html":{}}}],["2.0.17",{"_index":4517,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":4432,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":4439,"title":{},"body":{"coverage.html":{}}}],["2/9",{"_index":4438,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":813,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["20.1.0",{"_index":4508,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1725,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{}}}],["2000",{"_index":4273,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["200px",{"_index":2639,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["2020",{"_index":3678,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["206",{"_index":4048,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["21",{"_index":4094,"title":{},"body":{"classes/TooltipManager.html":{},"coverage.html":{}}}],["22",{"_index":4420,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["222222",{"_index":4652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["23",{"_index":4402,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":3852,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["25",{"_index":4492,"title":{},"body":{"coverage.html":{}}}],["25.2.0",{"_index":4530,"title":{},"body":{"dependencies.html":{}}}],["250",{"_index":816,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["255763",{"_index":4645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26",{"_index":4405,"title":{},"body":{"coverage.html":{}}}],["283d6a",{"_index":4635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c6675",{"_index":4644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2px",{"_index":3699,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3",{"_index":158,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Category.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["3*24",{"_index":3690,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3*size/2",{"_index":4039,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["3.15.1",{"_index":4509,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":4473,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":4434,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":814,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["30/33",{"_index":4477,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":2788,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["304a7d",{"_index":4641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["31",{"_index":4391,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":4410,"title":{},"body":{"coverage.html":{}}}],["334e87",{"_index":4631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["35",{"_index":1191,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"coverage.html":{}}}],["350",{"_index":1399,"title":{},"body":{"interfaces/Category.html":{}}}],["350px",{"_index":3310,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["36",{"_index":4468,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":3447,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["38",{"_index":4590,"title":{},"body":{"index.html":{}}}],["3a4762",{"_index":4650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c7680",{"_index":4639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":4027,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["4/10",{"_index":4435,"title":{},"body":{"coverage.html":{}}}],["4/23",{"_index":4487,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":4471,"title":{},"body":{"coverage.html":{}}}],["4/41",{"_index":4389,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1036,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["42",{"_index":4377,"title":{},"body":{"coverage.html":{}}}],["44/45",{"_index":4500,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":4465,"title":{},"body":{"coverage.html":{}}}],["45/61",{"_index":4373,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":4460,"title":{},"body":{"coverage.html":{}}}],["4b6878",{"_index":4626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e6d70",{"_index":4653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4px",{"_index":982,"title":{},"body":{"components/BsFacetDate.html":{}}}],["5",{"_index":579,"title":{},"body":{"classes/BaseProvider.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["5.0.3",{"_index":4515,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":4463,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":645,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["500px",{"_index":4101,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["50vh",{"_index":2221,"title":{},"body":{"components/DataModalComponent.html":{}}}],["5px",{"_index":634,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["6",{"_index":3569,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"index.html":{}}}],["6)*2",{"_index":4035,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["6/19",{"_index":4467,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":4478,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1390,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["600",{"_index":1032,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["600px",{"_index":1700,"title":{},"body":{"interfaces/Column.html":{}}}],["600x400",{"_index":1653,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["6366198.0",{"_index":2897,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["64779e",{"_index":4628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["69420",{"_index":2978,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["6f9ba5",{"_index":4636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6px",{"_index":983,"title":{},"body":{"components/BsFacetDate.html":{}}}],["7",{"_index":4092,"title":{},"body":{"classes/TooltipManager.html":{}}}],["7.1.4",{"_index":4513,"title":{},"body":{"dependencies.html":{}}}],["7.6.1",{"_index":4529,"title":{},"body":{"dependencies.html":{}}}],["7.7.0",{"_index":4512,"title":{},"body":{"dependencies.html":{}}}],["7/19",{"_index":4469,"title":{},"body":{"coverage.html":{}}}],["7/20",{"_index":4480,"title":{},"body":{"coverage.html":{}}}],["7/61",{"_index":4496,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":4372,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":4433,"title":{},"body":{"coverage.html":{}}}],["77/77",{"_index":4483,"title":{},"body":{"coverage.html":{}}}],["7aa3e5",{"_index":2551,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7acce5",{"_index":2553,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7c7c7c",{"_index":4049,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["7rem",{"_index":985,"title":{},"body":{"components/BsFacetDate.html":{}}}],["8",{"_index":4026,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8.3.2",{"_index":4524,"title":{},"body":{"dependencies.html":{}}}],["8/36",{"_index":4421,"title":{},"body":{"coverage.html":{}}}],["8/38",{"_index":4457,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":638,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["808080",{"_index":581,"title":{},"body":{"classes/BaseProvider.html":{}}}],["8186d4",{"_index":1423,"title":{},"body":{"interfaces/Category.html":{}}}],["84",{"_index":3689,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["86400000",{"_index":3870,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8ec3b9",{"_index":4620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8px",{"_index":1345,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["9",{"_index":1025,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{},"index.html":{}}}],["9.1.2",{"_index":4511,"title":{},"body":{"dependencies.html":{}}}],["9/20",{"_index":4466,"title":{},"body":{"coverage.html":{}}}],["9/38",{"_index":4403,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1223,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["90px",{"_index":1097,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["93",{"_index":4436,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":4430,"title":{},"body":{"coverage.html":{}}}],["97",{"_index":4499,"title":{},"body":{"coverage.html":{}}}],["98a5be",{"_index":4642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_action",{"_index":4160,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_actions",{"_index":4112,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_data",{"_index":1456,"title":{},"body":{"interfaces/Category.html":{}}}],["_datapoint",{"_index":2605,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.$item",{"_index":2610,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.name",{"_index":2607,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.value",{"_index":2608,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_definance",{"_index":4657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degooglemaps",{"_index":4663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degrid",{"_index":4666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_deheatmap",{"_index":4669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_elem",{"_index":1585,"title":{},"body":{"interfaces/Category.html":{}}}],["_element",{"_index":1579,"title":{},"body":{"interfaces/Category.html":{}}}],["_element.$path",{"_index":1582,"title":{},"body":{"interfaces/Category.html":{}}}],["_element.category",{"_index":1584,"title":{},"body":{"interfaces/Category.html":{}}}],["_element.label",{"_index":1581,"title":{},"body":{"interfaces/Category.html":{}}}],["_element.originallabel",{"_index":1580,"title":{},"body":{"interfaces/Category.html":{}}}],["_enfinance",{"_index":4659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engooglemaps",{"_index":4664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engrid",{"_index":4667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enheatmap",{"_index":4672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_fcroot",{"_index":2730,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["_field",{"_index":859,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["_filterinput",{"_index":1744,"title":{},"body":{"interfaces/Column.html":{}}}],["_frfinance",{"_index":4661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgooglemaps",{"_index":4665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgrid",{"_index":4668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frheatmap",{"_index":4675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_fusionchartsstatice",{"_index":2731,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["_getitem(label",{"_index":1576,"title":{},"body":{"interfaces/Category.html":{}}}],["_items",{"_index":3665,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["_networkinitialized",{"_index":4109,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_queries",{"_index":2302,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["_selectededge",{"_index":4111,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_selectednode",{"_index":4110,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["a.count",{"_index":1318,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["a.date.gettime",{"_index":3991,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["a.name",{"_index":1956,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["above",{"_index":1701,"title":{},"body":{"interfaces/Column.html":{}}}],["absolute",{"_index":1343,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["absolutely",{"_index":1240,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["abstract",{"_index":2611,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["abstractfacet",{"_index":757,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["abstractions",{"_index":1063,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["access",{"_index":672,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessible",{"_index":3818,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessor",{"_index":4266,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["accessors",{"_index":786,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"classes/TooltipManager.html":{}}}],["accordingly",{"_index":2264,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["account",{"_index":2509,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["accumulates",{"_index":544,"title":{},"body":{"classes/BaseProvider.html":{}}}],["act",{"_index":466,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["action",{"_index":96,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["action.children",{"_index":2560,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.icon",{"_index":517,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["action.selected",{"_index":1844,"title":{},"body":{"interfaces/Column.html":{}}}],["action.text",{"_index":518,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions",{"_index":328,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actions.length",{"_index":910,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["actions.push(new",{"_index":335,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["actions.push(this.clearfilters",{"_index":1484,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["actions.push(this.clearfiltersaction",{"_index":911,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["actions.push(this.createexpandaction(types[0",{"_index":356,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["actions.push(this.filterarea",{"_index":2835,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["actions.push(this.selectfield",{"_index":2568,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions.unshift(new",{"_index":2376,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["activateaction",{"_index":377,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["activated",{"_index":2075,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["active",{"_index":378,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actual",{"_index":1733,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["actual_component",{"_index":754,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["actually",{"_index":1051,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["actualwidth",{"_index":1210,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["adapted",{"_index":3533,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["add",{"_index":133,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["add/replace",{"_index":3614,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["addaggregationnodes",{"_index":382,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["addaggregationnodes(item",{"_index":257,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["addcustomedge(recordnode",{"_index":2155,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adddynamicedges(sourcenodes",{"_index":2312,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["added",{"_index":122,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["addedge(edge",{"_index":2533,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addedges",{"_index":3183,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addedges(edges",{"_index":2446,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addition",{"_index":2162,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["additional",{"_index":137,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["additionally",{"_index":2080,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["addnode(node",{"_index":2530,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addnodes",{"_index":3184,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addnodes(nodes",{"_index":2441,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addrecordnodes(records",{"_index":2091,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adds",{"_index":245,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledge(dataset",{"_index":2133,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledges(node",{"_index":2104,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adjacent",{"_index":421,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["adjust",{"_index":484,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["adjusts",{"_index":475,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["administrative.country",{"_index":4624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.land_parcel",{"_index":4627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.province",{"_index":4629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advancedservice",{"_index":793,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["afterviewinit",{"_index":987,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ag",{"_index":17,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["agdatecolumnfilter",{"_index":1830,"title":{},"body":{"interfaces/Column.html":{}}}],["agg",{"_index":349,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggrdata",{"_index":1454,"title":{},"body":{"interfaces/Category.html":{}}}],["aggregate",{"_index":204,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation",{"_index":85,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["aggregation.items",{"_index":235,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.items.foreach(item",{"_index":241,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.length",{"_index":240,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.map(item",{"_index":3649,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.name",{"_index":238,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationdata",{"_index":57,"title":{"interfaces/AggregationData.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedge",{"_index":109,"title":{"interfaces/AggregationEdge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedgetype",{"_index":73,"title":{"interfaces/AggregationEdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["aggregationedgetype).aggregation",{"_index":174,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationitem",{"_index":86,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationname",{"_index":932,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationprovider",{"_index":178,"title":{"classes/AggregationProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregations",{"_index":176,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregations.foreach(aggregation",{"_index":233,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationtriggertype",{"_index":129,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["aggridmodule",{"_index":1,"title":{"modules/AgGridModule.html":{}},"body":{"modules/AgGridModule.html":{},"index.html":{},"modules.html":{}}}],["aggridviewcomponent",{"_index":7,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["aginit",{"_index":2644,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aginit(params",{"_index":2649,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["agmodule",{"_index":30,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agmodule.withcomponents([facetwrappercomponent",{"_index":51,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agnumbercolumnfilter",{"_index":1825,"title":{},"body":{"interfaces/Column.html":{}}}],["alertcomplete",{"_index":4787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["algorithm",{"_index":3978,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["alias",{"_index":2678,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aliases",{"_index":4596,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1215,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{}}}],["all_dates",{"_index":3321,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.indexof(dateobj.display",{"_index":3352,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.push(cooc[1",{"_index":3345,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids",{"_index":3320,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.indexof(id",{"_index":3342,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.push(id",{"_index":3346,"title":{},"body":{"components/ResultTimeline.html":{}}}],["allcolumns",{"_index":1967,"title":{},"body":{"interfaces/Column.html":{}}}],["allen",{"_index":4583,"title":{},"body":{"miscellaneous/functions.html":{}}}],["allow",{"_index":126,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"miscellaneous/typealiases.html":{}}}],["allowcustomrange",{"_index":776,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allowed",{"_index":864,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allowing",{"_index":330,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["allowpredefinedrange",{"_index":777,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allows",{"_index":560,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["allprimarydates",{"_index":3829,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["allprimarydates.length",{"_index":3839,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["along",{"_index":1410,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alpine",{"_index":1721,"title":{},"body":{"interfaces/Column.html":{}}}],["already",{"_index":320,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alt",{"_index":522,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["alternative",{"_index":1249,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["alternatively",{"_index":419,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["always",{"_index":1159,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["amount",{"_index":3048,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["amount.split",{"_index":3053,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["anchor",{"_index":1193,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["and/or",{"_index":463,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["angular",{"_index":32,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"dependencies.html":{}}}],["angular/common",{"_index":26,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{}}}],["angular/forms",{"_index":29,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"modules/NetworkModule.html":{},"interfaces/VisEvent.html":{}}}],["angular/google",{"_index":2774,"title":{},"body":{"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"dependencies.html":{}}}],["angular/modules/components/selection.html#selection",{"_index":3391,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["animation",{"_index":679,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["another",{"_index":2479,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["any).getmodelfromui",{"_index":2029,"title":{},"body":{"interfaces/Column.html":{}}}],["anymore",{"_index":2295,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["api",{"_index":1737,"title":{},"body":{"interfaces/Column.html":{},"injectables/GoogleMapsService.html":{},"dependencies.html":{}}}],["api.ts",{"_index":4488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apikey",{"_index":2885,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["app",{"_index":4103,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appear",{"_index":1416,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["append(\"g",{"_index":3806,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["apple/steve",{"_index":272,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["application",{"_index":4285,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["apply",{"_index":493,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["applycolumnstateparams",{"_index":1688,"title":{},"body":{"interfaces/Column.html":{}}}],["applyorder",{"_index":1962,"title":{},"body":{"interfaces/Column.html":{}}}],["appropriate",{"_index":4192,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appservice",{"_index":794,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["april",{"_index":3679,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["area",{"_index":2811,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["areachartmodule",{"_index":3265,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["areastyles",{"_index":3404,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["array",{"_index":1309,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["array.from(new",{"_index":1134,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["array.from(this.edgeidx.keys",{"_index":2438,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.edgeidx.values",{"_index":2428,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.keys",{"_index":2436,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.values",{"_index":2426,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(edges",{"_index":2447,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(ids",{"_index":2454,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(nodes",{"_index":2442,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["arrow",{"_index":562,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{}}}],["arrows",{"_index":1899,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["articles",{"_index":4575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asks",{"_index":4566,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associate",{"_index":2786,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["assume",{"_index":253,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assumed",{"_index":246,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assuming",{"_index":270,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["async",{"_index":4012,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["asynchronous",{"_index":451,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["asynchronously",{"_index":294,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsprovider",{"_index":435,"title":{"classes/AsyncRecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["asyncrecordsproviderdemo",{"_index":4442,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsproviderdemo(providerfactory",{"_index":4537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attach",{"_index":256,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["attached",{"_index":468,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["attr(\"class",{"_index":3807,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"d",{"_index":3811,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"display",{"_index":3809,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"text",{"_index":3813,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"transform",{"_index":1189,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"x",{"_index":3815,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"y",{"_index":3816,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attributes",{"_index":1523,"title":{},"body":{"interfaces/Category.html":{}}}],["audit",{"_index":3472,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditeventtype",{"_index":3410,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditwebservice",{"_index":3409,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["author",{"_index":4594,"title":{},"body":{"properties.html":{}}}],["auto",{"_index":1204,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["autohide",{"_index":1412,"title":{},"body":{"interfaces/Category.html":{}}}],["automatically",{"_index":151,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/variables.html":{}}}],["autoresize",{"_index":1980,"title":{},"body":{"interfaces/Column.html":{}}}],["autosize",{"_index":1705,"title":{},"body":{"interfaces/Column.html":{}}}],["available",{"_index":1989,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["avoid",{"_index":308,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["avoiding",{"_index":1649,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["axes",{"_index":1053,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axis",{"_index":1058,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["axis.clickable",{"_index":1250,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["axis/scales",{"_index":1123,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisbottom",{"_index":2970,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axisbottom(this.x",{"_index":3083,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["axisclickable",{"_index":1008,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclicked",{"_index":1018,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisleft",{"_index":1106,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axisleft(this.y",{"_index":3099,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axistop",{"_index":1107,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["b",{"_index":3930,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b.count",{"_index":1317,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["b.date.gettime",{"_index":3992,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b0d5ce",{"_index":4646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["background",{"_index":972,"title":{},"body":{"components/BsFacetDate.html":{}}}],["backgroundloaded",{"_index":4715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backgroundloaderror",{"_index":4716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["balham",{"_index":1719,"title":{},"body":{"interfaces/Column.html":{}}}],["ballmer",{"_index":4581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bar",{"_index":2552,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["barack",{"_index":4567,"title":{},"body":{"miscellaneous/functions.html":{}}}],["barchartmodule",{"_index":3266,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["barhorizontalcomponent",{"_index":1613,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["barverticalcomponent",{"_index":1612,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["base",{"_index":103,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["basechartcomponent",{"_index":1611,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["based",{"_index":1574,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["baseprovider",{"_index":102,"title":{"classes/BaseProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["baseprovider:13",{"_index":449,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:15",{"_index":403,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:151",{"_index":426,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:159",{"_index":429,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:16",{"_index":401,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:163",{"_index":434,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:171",{"_index":432,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:18",{"_index":404,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:190",{"_index":2334,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:195",{"_index":409,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:199",{"_index":2352,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["baseprovider:202",{"_index":2333,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:21",{"_index":399,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:211",{"_index":414,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:219",{"_index":412,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:22",{"_index":3394,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:23",{"_index":405,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:241",{"_index":411,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:245",{"_index":430,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:25",{"_index":402,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:265",{"_index":2335,"title":{},"body":{"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:278",{"_index":474,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:279",{"_index":410,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:305",{"_index":483,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:328",{"_index":473,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:340",{"_index":461,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:38",{"_index":450,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:42",{"_index":2351,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:48",{"_index":3395,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:61",{"_index":2332,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:68",{"_index":397,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:77",{"_index":3272,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["become",{"_index":4571,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":1160,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["beforedatasubmit",{"_index":4743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforedataupdate",{"_index":4690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforedispose",{"_index":4798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforedrilldown",{"_index":4802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforedrillup",{"_index":4804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforeexport",{"_index":4725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforelinkeditemclose",{"_index":4680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforelinkeditemopen",{"_index":4678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforeprint",{"_index":4728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforerender",{"_index":4793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforeresize",{"_index":4795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behavior",{"_index":1525,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["behaviors",{"_index":3734,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["behaviorsubject",{"_index":2905,"title":{},"body":{"injectables/GoogleMapsService.html":{},"classes/TooltipManager.html":{}}}],["behaviorsubject(false",{"_index":2900,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["behaviorsubject(undefined",{"_index":4065,"title":{},"body":{"classes/TooltipManager.html":{}}}],["bellow",{"_index":3783,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["belong",{"_index":219,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["below",{"_index":3659,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["benefit",{"_index":1062,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bestaggregation",{"_index":3606,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["better",{"_index":1248,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["between",{"_index":527,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["bill",{"_index":250,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["bin",{"_index":3971,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bisectdate",{"_index":3745,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bisector",{"_index":3702,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bisector(d",{"_index":3746,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["black",{"_index":974,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["block",{"_index":1242,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["body",{"_index":1338,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"injectables/FusionChartsService.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["border",{"_index":643,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["both",{"_index":424,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bottom",{"_index":811,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["bounds",{"_index":2820,"title":{},"body":{"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{}}}],["bounds.extend(record.position",{"_index":2856,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["bounds.extend(this.gmaps.move(center",{"_index":2858,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["bounds.getcenter",{"_index":2857,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["bounds.getnortheast().lat",{"_index":2915,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["bounds.getnortheast().lng",{"_index":2919,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["bounds.getsouthwest().lat",{"_index":2913,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["bounds.getsouthwest().lng",{"_index":2917,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["bracket",{"_index":3677,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["breadcrumb",{"_index":951,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["break",{"_index":1583,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{}}}],["breaking",{"_index":1524,"title":{},"body":{"interfaces/Category.html":{}}}],["briefly",{"_index":1650,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["browse",{"_index":4592,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4591,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":3718,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brush's",{"_index":3914,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushbehavior",{"_index":3735,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushing",{"_index":3749,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushselection",{"_index":3717,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushselection(this.gbrush.nativeelement",{"_index":3925,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushx",{"_index":3716,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bs",{"_index":2548,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["bsactionmodule",{"_index":37,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsadvancedmodule",{"_index":1331,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["bsedgeinfocard",{"_index":621,"title":{"components/BsEdgeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetcard",{"_index":1376,"title":{},"body":{"interfaces/Category.html":{}}}],["bsfacetdate",{"_index":710,"title":{"components/BsFacetDate.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetheatmapcomponent",{"_index":712,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetmodule",{"_index":41,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsfacettimelinecomponent",{"_index":714,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"index.html":{}}}],["bsfacettimelinecomponent.createaggregationevents(config",{"_index":3562,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.createtimeseries",{"_index":931,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["bsfacettimelinecomponent.createtimeseries(config",{"_index":3557,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.defaultrecordstyle(r.$selected",{"_index":3574,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsheatmapcomponent",{"_index":716,"title":{"components/BsHeatmapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsheatmapmodule",{"_index":1269,"title":{"modules/BsHeatmapModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"index.html":{},"modules.html":{}}}],["bsmodalmodule",{"_index":39,"title":{},"body":{"modules/AgGridModule.html":{}}}],["bsnodeinfocard",{"_index":717,"title":{"components/BsNodeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsresultsheatmapview",{"_index":718,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsselectionmodule",{"_index":1275,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NgxChartsModule.html":{}}}],["bstimelinecomponent",{"_index":720,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"index.html":{}}}],["bstimelinecomponent.counter",{"_index":3755,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bstimelinemodule",{"_index":1324,"title":{"modules/BsTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["bstooltipcomponent",{"_index":721,"title":{"components/BsTooltipComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["buckets",{"_index":1009,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bugs",{"_index":1445,"title":{},"body":{"interfaces/Category.html":{},"interfaces/VisEvent.html":{}}}],["build",{"_index":1056,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart",{"_index":1001,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart(update",{"_index":1049,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["builds",{"_index":1052,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["built",{"_index":1460,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["button",{"_index":1748,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["buttons",{"_index":1746,"title":{},"body":{"interfaces/Column.html":{}}}],["c",{"_index":2993,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["c.field",{"_index":1953,"title":{},"body":{"interfaces/Column.html":{}}}],["c.hide",{"_index":1959,"title":{},"body":{"interfaces/Column.html":{}}}],["c3e6cb",{"_index":1420,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["cache",{"_index":2270,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["call",{"_index":452,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{}}}],["call(axisleft(this.y).ticksize(0",{"_index":1181,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(axistop(this.x).ticksize(0",{"_index":1177,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(this.brushbehavior",{"_index":3799,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["call(this.zoombehavior",{"_index":3877,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["callback",{"_index":1434,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{}}}],["callbacks",{"_index":3610,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["called",{"_index":309,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisTimelineDirective.html":{}}}],["calling",{"_index":3025,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["calls",{"_index":4259,"title":{},"body":{"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["cancel",{"_index":2411,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["cancelhide",{"_index":4059,"title":{},"body":{"classes/TooltipManager.html":{}}}],["capture",{"_index":2018,"title":{},"body":{"interfaces/Column.html":{}}}],["card",{"_index":632,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/NodeData.html":{}}}],["card'},{'name",{"_index":709,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["card.component",{"_index":3218,"title":{},"body":{"modules/NetworkModule.html":{}}}],["card.component.html",{"_index":649,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card.component.ts",{"_index":628,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["card.component.ts:24",{"_index":655,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:26",{"_index":659,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:27",{"_index":660,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:29",{"_index":661,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:30",{"_index":662,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:31",{"_index":1283,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:32",{"_index":658,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:34",{"_index":1285,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:36",{"_index":1284,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:38",{"_index":1282,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:40",{"_index":657,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:70",{"_index":1281,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["cardcomponent",{"_index":1464,"title":{},"body":{"interfaces/Category.html":{}}}],["cards",{"_index":687,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["case",{"_index":1640,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["catch",{"_index":3360,"title":{},"body":{"components/ResultTimeline.html":{}}}],["categories",{"_index":2984,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["category",{"_index":1363,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["categoryclick",{"_index":4769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categoryrollout",{"_index":4771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categoryrollover",{"_index":4770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cause",{"_index":4011,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["caused",{"_index":3024,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["causes",{"_index":1443,"title":{},"body":{"interfaces/Category.html":{}}}],["cc",{"_index":369,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["cc?.column.split",{"_index":371,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["ccaggregation",{"_index":927,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ccaggregation?.mask",{"_index":3647,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cccolumn",{"_index":1663,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cdref",{"_index":764,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["cell",{"_index":1916,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cell's",{"_index":1926,"title":{},"body":{"interfaces/Column.html":{}}}],["celldoubleclickedevent",{"_index":1678,"title":{},"body":{"interfaces/Column.html":{}}}],["cellrenderer",{"_index":1788,"title":{},"body":{"interfaces/Column.html":{}}}],["center",{"_index":2789,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["centerlabelchanged",{"_index":4710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centerlabelclick",{"_index":4709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centerlabelrollout",{"_index":4708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centerlabelrollover",{"_index":4707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change",{"_index":3784,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["change.currentvalue",{"_index":4008,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.isfirstchange",{"_index":4318,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["change.previousvalue",{"_index":4006,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changed",{"_index":2023,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["changedetection",{"_index":1335,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["changedetectionstrategy",{"_index":1359,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":1336,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["changedetectorref",{"_index":795,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["changes",{"_index":826,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["changes.defaultcolor",{"_index":1489,"title":{},"body":{"interfaces/Category.html":{}}}],["changes.events",{"_index":3486,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.filteredcolor",{"_index":1490,"title":{},"body":{"interfaces/Category.html":{}}}],["changes.hasownproperty(propertyname",{"_index":4316,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["changes.plottooltext",{"_index":1495,"title":{},"body":{"interfaces/Category.html":{}}}],["changes.results",{"_index":903,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.selectedcolor",{"_index":1491,"title":{},"body":{"interfaces/Category.html":{}}}],["changes.showpercentvalues",{"_index":1497,"title":{},"body":{"interfaces/Category.html":{}}}],["changes.showtooltip",{"_index":1494,"title":{},"body":{"interfaces/Category.html":{}}}],["changes.showvalues",{"_index":1496,"title":{},"body":{"interfaces/Category.html":{}}}],["changes.toolbaractions",{"_index":1775,"title":{},"body":{"interfaces/Column.html":{}}}],["changes[\"data",{"_index":3790,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"events",{"_index":3515,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"results",{"_index":3018,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["changes[\"selection",{"_index":3786,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"timeseries",{"_index":3508,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"width",{"_index":3794,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes['dates",{"_index":3314,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['events",{"_index":3315,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['providers",{"_index":4129,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["changes['results",{"_index":2836,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["changes['style",{"_index":2839,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["changes[propertyname",{"_index":4317,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["changes[propertyname].currentvalue",{"_index":4320,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["chart",{"_index":1054,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/FusionChartInstance.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["chart's",{"_index":1406,"title":{},"body":{"interfaces/Category.html":{},"interfaces/MoneyDatum.html":{}}}],["chart'},{'name",{"_index":726,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["chart.html",{"_index":1392,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["chart.scss",{"_index":1393,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chart.ts",{"_index":1366,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["chart.ts:106",{"_index":2636,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:120",{"_index":2626,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:197",{"_index":2635,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:212",{"_index":2631,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:223",{"_index":2629,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:238",{"_index":2630,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:243",{"_index":2623,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:259",{"_index":2627,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:263",{"_index":2624,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:272",{"_index":2628,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:29",{"_index":2621,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:30",{"_index":2615,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:31",{"_index":2616,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:32",{"_index":2617,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:33",{"_index":2619,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:34",{"_index":2618,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:35",{"_index":2620,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:36",{"_index":2622,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:39",{"_index":2632,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:42",{"_index":2633,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:43",{"_index":2634,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:54",{"_index":2614,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:99",{"_index":2625,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart/chart",{"_index":2547,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/NgxChartsModule.html":{}}}],["chart/facet",{"_index":2546,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/NgxChartsModule.html":{},"coverage.html":{}}}],["chart/multi",{"_index":1365,"title":{},"body":{"interfaces/Category.html":{},"modules/FusionChartsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["chartcleared",{"_index":4692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chartclick",{"_index":4711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chartcomponent",{"_index":3230,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type",{"_index":3236,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type:string",{"_index":1638,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chartconfig",{"_index":4588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chartdatapoint",{"_index":1609,"title":{"interfaces/ChartDataPoint.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["chartmousemove",{"_index":4712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chartobj",{"_index":1453,"title":{},"body":{"interfaces/Category.html":{}}}],["chartoptions",{"_index":1616,"title":{"interfaces/ChartOptions.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["chartrollout",{"_index":4714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chartrollover",{"_index":4713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charts",{"_index":1615,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["charts.module.ts",{"_index":3264,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charts/chart/chart.ts",{"_index":1610,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts/chart/chart.ts:28",{"_index":3234,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:29",{"_index":3233,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:30",{"_index":3235,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:31",{"_index":3250,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:32",{"_index":3248,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:33",{"_index":3244,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:34",{"_index":3245,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:35",{"_index":3232,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:43",{"_index":3242,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:49",{"_index":3241,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:57",{"_index":3240,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:62",{"_index":3252,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:66",{"_index":3237,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:75",{"_index":3254,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:79",{"_index":3239,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:83",{"_index":3238,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:92",{"_index":3246,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/facet",{"_index":2545,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["charts/ngx",{"_index":3263,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charttype",{"_index":1636,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["charttypechanged",{"_index":4775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chartupdated",{"_index":4747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":1507,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["checkbox",{"_index":1835,"title":{},"body":{"interfaces/Column.html":{}}}],["checkboxes",{"_index":1715,"title":{},"body":{"interfaces/Column.html":{}}}],["checkdatachanges(change",{"_index":4004,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["child",{"_index":1383,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["children",{"_index":360,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["choice",{"_index":1718,"title":{},"body":{"interfaces/Column.html":{}}}],["chromatic",{"_index":1116,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["circle",{"_index":340,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["circular",{"_index":639,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["class",{"_index":53,"title":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"classes/TooltipManager.html":{}},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["class=\"me",{"_index":696,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["classes",{"_index":376,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"classes/TooltipManager.html":{},"index.html":{}}}],["clause",{"_index":1878,"title":{},"body":{"interfaces/Column.html":{}}}],["clean",{"_index":1753,"title":{},"body":{"interfaces/Column.html":{}}}],["cleanremovenode",{"_index":2452,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["cleanremovenode(nodeid",{"_index":2464,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["clear",{"_index":1466,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfilters",{"_index":1461,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfiltersaction",{"_index":765,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["clearing",{"_index":2812,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["clearly",{"_index":4017,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["clears",{"_index":2085,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["cleartimeout(this.hidetooltiptimeout",{"_index":4087,"title":{},"body":{"classes/TooltipManager.html":{}}}],["click",{"_index":1449,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["click(datapoint",{"_index":2601,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["clicked",{"_index":310,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["clickeditem",{"_index":1564,"title":{},"body":{"interfaces/Category.html":{}}}],["clickedrecord",{"_index":2809,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["clicks",{"_index":1072,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["clientside",{"_index":1751,"title":{},"body":{"interfaces/Column.html":{}}}],["clipboard",{"_index":1972,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["close",{"_index":2215,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closed",{"_index":650,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["closeness",{"_index":3973,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closetooltip",{"_index":3639,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cloud",{"_index":2972,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud'},{'name",{"_index":734,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["cloud.component",{"_index":2704,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cloud.component.html",{"_index":2973,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.scss",{"_index":2974,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.ts",{"_index":2963,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["cloud/money",{"_index":2703,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["clunky",{"_index":1647,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["cluster_aggridmodule",{"_index":4,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_declarations",{"_index":6,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_exports",{"_index":5,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule",{"_index":1270,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_declarations",{"_index":1273,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_exports",{"_index":1271,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_imports",{"_index":1272,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule",{"_index":1325,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_declarations",{"_index":1326,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_exports",{"_index":1327,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_imports",{"_index":1328,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["cluster_financemodule",{"_index":2697,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_declarations",{"_index":2700,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_exports",{"_index":2698,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_imports",{"_index":2699,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cluster_fusionchartsmodule",{"_index":2713,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_declarations",{"_index":2714,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_exports",{"_index":2715,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule",{"_index":2874,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_declarations",{"_index":2876,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_exports",{"_index":2875,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_networkmodule",{"_index":3213,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_declarations",{"_index":3214,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_exports",{"_index":3215,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule",{"_index":3260,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_declarations",{"_index":3261,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_exports",{"_index":3262,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule",{"_index":4364,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_declarations",{"_index":4365,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_exports",{"_index":4366,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["clustering",{"_index":3980,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["col",{"_index":549,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["col.$column",{"_index":1800,"title":{},"body":{"interfaces/Column.html":{}}}],["col.$column?.label",{"_index":1805,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrenderer",{"_index":1809,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrendererframework",{"_index":1810,"title":{},"body":{"interfaces/Column.html":{}}}],["col.checkboxselection",{"_index":1838,"title":{},"body":{"interfaces/Column.html":{}}}],["col.field",{"_index":1807,"title":{},"body":{"interfaces/Column.html":{}}}],["col.filter",{"_index":1824,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headername",{"_index":1804,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headertooltip",{"_index":1808,"title":{},"body":{"interfaces/Column.html":{}}}],["col.hide",{"_index":1816,"title":{},"body":{"interfaces/Column.html":{}}}],["col.sortable",{"_index":1812,"title":{},"body":{"interfaces/Column.html":{}}}],["col.tooltipvaluegetter",{"_index":1802,"title":{},"body":{"interfaces/Column.html":{}}}],["col.width",{"_index":1817,"title":{},"body":{"interfaces/Column.html":{}}}],["coldef",{"_index":1662,"title":{},"body":{"interfaces/Column.html":{}}}],["coldefs",{"_index":1736,"title":{},"body":{"interfaces/Column.html":{}}}],["colid",{"_index":1881,"title":{},"body":{"interfaces/Column.html":{}}}],["collapsed",{"_index":480,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["collapsemodule",{"_index":1332,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["collapsing",{"_index":464,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["color",{"_index":580,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["coloring",{"_index":1515,"title":{},"body":{"interfaces/Category.html":{}}}],["colors",{"_index":2550,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["colorscheme",{"_index":1010,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{}}}],["colorschemes",{"_index":1119,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":1660,"title":{"interfaces/Column.html":{}},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["column's",{"_index":1749,"title":{},"body":{"interfaces/Column.html":{}}}],["column).$column",{"_index":2000,"title":{},"body":{"interfaces/Column.html":{}}}],["columnapi",{"_index":1675,"title":{},"body":{"interfaces/Column.html":{}}}],["columns",{"_index":1696,"title":{},"body":{"interfaces/Column.html":{}}}],["columnsaction",{"_index":1750,"title":{},"body":{"interfaces/Column.html":{}}}],["columnvisibility",{"_index":1703,"title":{},"body":{"interfaces/Column.html":{}}}],["combination",{"_index":3462,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combined",{"_index":3438,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["combinelastest",{"_index":3463,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest",{"_index":2247,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["combinelatest(sourceproviders.map(p",{"_index":2276,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["combinelatest(this.events$).pipe",{"_index":3518,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest(this.timeseries",{"_index":3512,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["come",{"_index":2262,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["comes",{"_index":252,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["commonmodule",{"_index":25,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["community",{"_index":1687,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"dependencies.html":{}}}],["community/dist/lib/columncontroller/columnapi",{"_index":1689,"title":{},"body":{"interfaces/Column.html":{}}}],["companies",{"_index":4560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["company",{"_index":4545,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compare",{"_index":4021,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["compares",{"_index":3636,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["compatible",{"_index":2056,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["completed",{"_index":3656,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["complexity",{"_index":138,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["component",{"_index":620,"title":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["component_template",{"_index":704,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["components",{"_index":622,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"index.html":{}}}],["compress",{"_index":2210,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["compute",{"_index":195,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["computed",{"_index":2981,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["computes",{"_index":2370,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyDatum.html":{}}}],["concretely",{"_index":2259,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["config",{"_index":3529,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.aggregations.length",{"_index":3598,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.current",{"_index":3534,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.default",{"_index":3535,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display",{"_index":3576,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display(r",{"_index":3577,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item",{"_index":3651,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item).toutcstring()+\"|\"+config.getdisplay(item",{"_index":3650,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdisplay(item",{"_index":3654,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.foreach((maxnmonths",{"_index":3604,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.length",{"_index":3597,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.name",{"_index":3645,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size",{"_index":3568,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(item",{"_index":3652,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(r",{"_index":3571,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles",{"_index":3573,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(item",{"_index":3653,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(r",{"_index":3575,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configs.ts",{"_index":4441,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":147,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configure",{"_index":1403,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{}}}],["configured",{"_index":3389,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["conflicting",{"_index":1397,"title":{},"body":{"interfaces/Category.html":{}}}],["conflicts",{"_index":2160,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["connected",{"_index":321,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["connectednodes",{"_index":322,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["connectednodes.length",{"_index":327,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["connectoradded",{"_index":4751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectorclick",{"_index":4700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectordeleted",{"_index":4753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectorrollout",{"_index":4699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectorrollover",{"_index":4698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectorupdated",{"_index":4752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error('invalid",{"_index":3840,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["console.error(config",{"_index":3599,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["console.log",{"_index":3337,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"aginit",{"_index":2693,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["console.log(\"cooc1:\",data_date[i+2",{"_index":3329,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"date:\",data_date[i+1",{"_index":3349,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"no",{"_index":3379,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('event",{"_index":3367,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('selected",{"_index":3365,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(cooc",{"_index":3332,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(data",{"_index":3358,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(properties",{"_index":3369,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(regdate.test(date",{"_index":3336,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(this.items.get(properties.items[0",{"_index":3372,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(year",{"_index":3335,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.warn(`aggregation",{"_index":221,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["const",{"_index":200,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["constant",{"_index":4251,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constant',true",{"_index":4264,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constructed",{"_index":108,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["constructor",{"_index":184,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"injectables/FusionChartsService.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["constructor(delay",{"_index":4062,"title":{},"body":{"classes/TooltipManager.html":{}}}],["constructor(el",{"_index":1020,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["constructor(elementref",{"_index":4281,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["constructor(exprbuilder",{"_index":2884,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["constructor(facetservice",{"_index":787,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{}}}],["constructor(fcstatic",{"_index":2737,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["constructor(intlservice",{"_index":3231,"title":{},"body":{"components/NgxChart.html":{}}}],["constructor(model",{"_index":2224,"title":{},"body":{"components/DataModalComponent.html":{}}}],["constructor(name",{"_index":391,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["constructor(public",{"_index":3311,"title":{},"body":{"components/ResultTimeline.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["constructor(searchservice",{"_index":2927,"title":{},"body":{"components/MapComponent.html":{}}}],["constructor(vistimelineservice",{"_index":3284,"title":{},"body":{"components/ResultTimeline.html":{}}}],["contain",{"_index":1787,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["contained",{"_index":2101,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":1206,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["containing",{"_index":1693,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":2048,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1342,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["contentchild",{"_index":1360,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["contentchild(\"edgetpl",{"_index":4116,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"nodetpl",{"_index":4114,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"tooltiptpl",{"_index":3726,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["contentchild(templateref",{"_index":1357,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["context",{"_index":297,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Category.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["context(.dark",{"_index":2549,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["convenience",{"_index":62,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["convert",{"_index":1207,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["convertaggregationitems(item",{"_index":1537,"title":{},"body":{"interfaces/Category.html":{}}}],["converted",{"_index":152,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["cooc",{"_index":3325,"title":{},"body":{"components/ResultTimeline.html":{}}}],["cooc[0",{"_index":3344,"title":{},"body":{"components/ResultTimeline.html":{}}}],["coocaggregationdemo",{"_index":4444,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocaggregationdemo(providerfactory",{"_index":4543,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cooccurrence",{"_index":68,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo",{"_index":4445,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo(providerfactory",{"_index":4546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cool",{"_index":1646,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["coordinate",{"_index":1208,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["coordinates",{"_index":4036,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["copy",{"_index":1904,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["copyaction",{"_index":2223,"title":{},"body":{"components/DataModalComponent.html":{}}}],["copyselection",{"_index":1706,"title":{},"body":{"interfaces/Column.html":{}}}],["copytoclipboard",{"_index":1973,"title":{},"body":{"interfaces/Column.html":{}}}],["core",{"_index":2720,"title":{},"body":{"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["core.adddep(fusionchartsmodules",{"_index":2764,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["core?.id",{"_index":2757,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["corresponding",{"_index":228,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["couldn't",{"_index":1520,"title":{},"body":{"interfaces/Category.html":{}}}],["count",{"_index":166,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["counter",{"_index":980,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["counts",{"_index":300,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["counts.get(d.category",{"_index":3043,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["counts.get(money.value",{"_index":3144,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["counts.set(item.value.tostring",{"_index":3140,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["cover",{"_index":647,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["coverage",{"_index":4369,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":244,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["createactions",{"_index":1887,"title":{},"body":{"interfaces/Column.html":{}}}],["createaggregationevents(config",{"_index":3648,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createchartoptions",{"_index":2577,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["createcolumns",{"_index":1796,"title":{},"body":{"interfaces/Column.html":{}}}],["created",{"_index":420,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createdatapoints(items",{"_index":3661,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createedge(type",{"_index":565,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createexpandaction(type",{"_index":366,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["createnetwork",{"_index":4323,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["createnode(type",{"_index":546,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createrows",{"_index":1849,"title":{},"body":{"interfaces/Column.html":{}}}],["creates",{"_index":462,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["createtimeline",{"_index":4357,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["createtimeseries(config",{"_index":3644,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["creating",{"_index":1440,"title":{},"body":{"interfaces/Category.html":{}}}],["cross",{"_index":247,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo",{"_index":4446,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo(providerfactory",{"_index":4550,"title":{},"body":{"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo",{"_index":4447,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo(providerfactory",{"_index":4551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["csv",{"_index":1965,"title":{},"body":{"interfaces/Column.html":{}}}],["csvexportparams",{"_index":1681,"title":{},"body":{"interfaces/Column.html":{}}}],["cur",{"_index":4149,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["currency",{"_index":2964,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["current",{"_index":958,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["currently",{"_index":1247,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentrange",{"_index":3467,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["currentselection",{"_index":3739,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue",{"_index":4007,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue.length",{"_index":4020,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cursor",{"_index":1254,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["curve(curvetypes[this.curvetype",{"_index":3758,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["curvebasis",{"_index":3703,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvebasisclosed",{"_index":3704,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvebasisopen",{"_index":3705,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvebumpx",{"_index":3706,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvebumpy",{"_index":3707,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvelinear",{"_index":3708,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvelinearclosed",{"_index":3709,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvemonotonex",{"_index":3450,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvemonotoney",{"_index":3710,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvenatural",{"_index":3711,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvestep",{"_index":3712,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvestepafter",{"_index":3713,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvestepbefore",{"_index":3714,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["curvetype",{"_index":3449,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["curvetypes",{"_index":3722,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["customdata",{"_index":2046,"title":{"interfaces/CustomData.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["customprops",{"_index":539,"title":{},"body":{"classes/BaseProvider.html":{}}}],["d",{"_index":1197,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["d.aggregation",{"_index":3558,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.category",{"_index":3066,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.ccaggregation",{"_index":3559,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.count",{"_index":3060,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d.currency",{"_index":3072,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.date",{"_index":3150,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.i",{"_index":3042,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.record.id",{"_index":3156,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d.type",{"_index":3814,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.value",{"_index":3057,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d0",{"_index":3952,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d0.date.gettime",{"_index":3957,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1",{"_index":3954,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1.date.gettime",{"_index":3958,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1e7dd",{"_index":976,"title":{},"body":{"components/BsFacetDate.html":{}}}],["d3",{"_index":1060,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"dependencies.html":{}}}],["d3.area",{"_index":3732,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushbehavior",{"_index":3736,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.countabletimeinterval",{"_index":3694,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.line",{"_index":3733,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse",{"_index":3165,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scaleband",{"_index":1098,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["d3.scalelinear",{"_index":2988,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scalelogarithmic",{"_index":2989,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scaleordinal",{"_index":2994,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalequantile",{"_index":1083,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.scaletime",{"_index":3130,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.selection",{"_index":1100,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.transition",{"_index":1175,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.zoombehavior",{"_index":3738,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["damping",{"_index":4244,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol",{"_index":4236,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol.value",{"_index":4253,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingpref",{"_index":4271,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dark",{"_index":1041,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["darkgrey",{"_index":1265,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["darkstyle",{"_index":2776,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"dependencies.html":{}}}],["data([{type",{"_index":3804,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.addedges(this.createedge(type",{"_index":286,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["data.addnodes(node",{"_index":2122,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.count",{"_index":1238,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.directed",{"_index":2166,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed[i",{"_index":2167,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.display",{"_index":1235,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.fieldvalue",{"_index":2169,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.filter(s",{"_index":3826,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.length",{"_index":1234,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.relations",{"_index":2164,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.relations[i",{"_index":2165,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.value",{"_index":1236,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.values.length",{"_index":2157,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data/esnext",{"_index":2386,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["data[0",{"_index":3828,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data_date",{"_index":3323,"title":{},"body":{"components/ResultTimeline.html":{}}}],["data_date.substring(1,data_date.length",{"_index":3326,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datafiltered",{"_index":990,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["datafiltered.length",{"_index":1232,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["datagroupcollectiontype",{"_index":4334,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["datainvalid",{"_index":4780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataitem",{"_index":3303,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dataitemcollectiontype",{"_index":4338,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["datalabelclick",{"_index":4731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datalabelrollout",{"_index":4733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datalabelrollover",{"_index":4732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataloadcancelled",{"_index":4685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataloaded",{"_index":4782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataloaderror",{"_index":4684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataloadrequestcancelled",{"_index":4686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataloadrequestcompleted",{"_index":4683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataloadrequested",{"_index":4689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datamodalcomponent",{"_index":9,"title":{"components/DataModalComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["datamodel",{"_index":2225,"title":{},"body":{"components/DataModalComponent.html":{},"miscellaneous/typealiases.html":{}}}],["dataobj",{"_index":2710,"title":{},"body":{"interfaces/FusionChartsEvent.html":{}}}],["dataplotclick",{"_index":4791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataplotclick($event",{"_index":1552,"title":{},"body":{"interfaces/Category.html":{}}}],["dataplotdragend",{"_index":4765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataplotdragstart",{"_index":4764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataplotrollout",{"_index":4790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataplotrollover",{"_index":4789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datapoint",{"_index":1658,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datapoint.name",{"_index":2586,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoint.value",{"_index":2609,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoints",{"_index":2554,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datarestored",{"_index":4742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataset",{"_index":193,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["dataset.addedges(edge",{"_index":2153,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addedges(this.createedge(type",{"_index":2168,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(node",{"_index":2149,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(recordnode",{"_index":2161,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.foreach(dataset",{"_index":2278,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["dataset.getadjacentedges(neighbor.id",{"_index":2188,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getadjacentedges(node.id",{"_index":2176,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getedges().foreach(edge",{"_index":2500,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.getnode(node.id",{"_index":2181,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getnodes().foreach(node",{"_index":2279,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.updatedatasets(this.context.nodes",{"_index":4153,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasets",{"_index":482,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["datasets.reduce((prev",{"_index":4148,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasource",{"_index":1455,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["datasubmitcancelled",{"_index":4746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasubmiterror",{"_index":4744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasubmitted",{"_index":4745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataupdatecancelled",{"_index":4688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataupdated",{"_index":4687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataxmlinvalid",{"_index":4781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":760,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["date'},{'name",{"_index":711,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["date.getfullyear",{"_index":3334,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date.gettime",{"_index":3956,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["date.html",{"_index":763,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["date.scss",{"_index":762,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["date.ts",{"_index":756,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["date.ts:108",{"_index":828,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:148",{"_index":825,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:159",{"_index":827,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:163",{"_index":846,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:171",{"_index":820,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:182",{"_index":830,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:311",{"_index":832,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:317",{"_index":822,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:59",{"_index":803,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:60",{"_index":805,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:61",{"_index":798,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:62",{"_index":808,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:63",{"_index":802,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:64",{"_index":806,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:65",{"_index":801,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:66",{"_index":800,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:67",{"_index":799,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:68",{"_index":807,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:69",{"_index":804,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:70",{"_index":817,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:71",{"_index":810,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:72",{"_index":815,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:74",{"_index":835,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:75",{"_index":840,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:77",{"_index":839,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:78",{"_index":837,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:80",{"_index":843,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:81",{"_index":841,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:86",{"_index":796,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:95",{"_index":834,"title":{},"body":{"components/BsFacetDate.html":{}}}],["dateobj.display",{"_index":3351,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.locations.split(\",\")[0",{"_index":3350,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datepickers",{"_index":862,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["daterange",{"_index":884,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["daterangecontrol",{"_index":766,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["dates",{"_index":949,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dates.foreach(dateobj",{"_index":3347,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date|undefined",{"_index":3723,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datum",{"_index":3037,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["datum.currency",{"_index":3176,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["datum.rawvalue",{"_index":3112,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["day",{"_index":3445,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["days",{"_index":3591,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dd",{"_index":3685,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["deactivate",{"_index":3879,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["deal)#(usd",{"_index":2977,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["debounce",{"_index":4257,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncesync",{"_index":4260,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncetime",{"_index":854,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["debouncetime(500",{"_index":898,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["decimal",{"_index":2794,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["declarations",{"_index":20,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["declare",{"_index":2238,"title":{},"body":{"components/DataModalComponent.html":{}}}],["decoration",{"_index":1252,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["decorators",{"_index":1086,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["decreasing",{"_index":1313,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["deep",{"_index":1245,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["defacet",{"_index":4658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":163,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultchart",{"_index":4404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultcoldef",{"_index":1731,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultcolor",{"_index":1415,"title":{},"body":{"interfaces/Category.html":{}}}],["defaultcolumnwidth",{"_index":1724,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultmultilevelchart",{"_index":1378,"title":{},"body":{"interfaces/Category.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultoptions",{"_index":3296,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultrecordstyle(selected",{"_index":3695,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["defaults",{"_index":1698,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultstate",{"_index":1950,"title":{},"body":{"interfaces/Column.html":{}}}],["definance",{"_index":4386,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":161,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["defined",{"_index":392,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["defines",{"_index":2070,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["definition",{"_index":1730,"title":{},"body":{"interfaces/Column.html":{}}}],["definitions",{"_index":1695,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["deg_rad",{"_index":2881,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["degooglemaps",{"_index":4414,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["degrid",{"_index":4381,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deheatmap",{"_index":4427,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["delay",{"_index":4064,"title":{},"body":{"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{}}}],["delayedhide",{"_index":4060,"title":{},"body":{"classes/TooltipManager.html":{}}}],["delete",{"_index":1940,"title":{},"body":{"interfaces/Column.html":{}}}],["denser",{"_index":1720,"title":{},"body":{"interfaces/Column.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{},"index.html":{}}}],["depending",{"_index":2171,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["deprecated",{"_index":1246,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["deresultsview",{"_index":4670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derived",{"_index":1734,"title":{},"body":{"interfaces/Column.html":{}}}],["deriving",{"_index":1785,"title":{},"body":{"interfaces/Column.html":{}}}],["description",{"_index":61,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["desearch",{"_index":4671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desired",{"_index":2787,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["destroy",{"_index":1754,"title":{},"body":{"interfaces/Column.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["detail",{"_index":3629,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["detected",{"_index":4288,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["determined",{"_index":3563,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determines",{"_index":2397,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["diff",{"_index":3847,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["difference",{"_index":4010,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["different",{"_index":220,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["dimensional",{"_index":255,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["dimensions",{"_index":1654,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["directed",{"_index":77,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["directive",{"_index":702,"title":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{}}}],["directives",{"_index":747,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"index.html":{}}}],["directly",{"_index":439,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["disable",{"_index":1395,"title":{},"body":{"interfaces/Category.html":{}}}],["disabled",{"_index":346,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["discarded",{"_index":2410,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["display",{"_index":268,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["display=existingnodes",{"_index":2060,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["display=paginate",{"_index":2132,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["displaycheckbox",{"_index":1717,"title":{},"body":{"interfaces/Column.html":{}}}],["displayed",{"_index":353,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["displayemptydistributionintervals",{"_index":778,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["displaying",{"_index":1442,"title":{},"body":{"interfaces/Category.html":{}}}],["displays",{"_index":78,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["disposecancelled",{"_index":4800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disposed",{"_index":4799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribution",{"_index":248,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["distributions",{"_index":261,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["div",{"_index":4277,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["div.pb",{"_index":2642,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doc",{"_index":3380,"title":{},"body":{"components/ResultTimeline.html":{}}}],["docheck",{"_index":1371,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["document",{"_index":1421,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["document.body.contains(this.wrapper.nativeelement",{"_index":1657,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["documentation",{"_index":4370,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":197,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["doesfilterpass",{"_index":2645,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesfilterpass(params",{"_index":2652,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesn't",{"_index":1836,"title":{},"body":{"interfaces/Column.html":{}}}],["dom",{"_index":625,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain",{"_index":2991,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain([0",{"_index":3067,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["domain(this.datafiltered.map(item",{"_index":1157,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(this.x.domain",{"_index":3904,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(this.xt.domain",{"_index":3906,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(xlabels",{"_index":1146,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(ylabels",{"_index":1152,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain[0].gettime",{"_index":3988,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain[1].gettime",{"_index":3987,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["dompoint(event.clientx",{"_index":3168,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["don't",{"_index":1643,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["done",{"_index":1521,"title":{},"body":{"interfaces/Category.html":{}}}],["double",{"_index":1992,"title":{},"body":{"interfaces/Column.html":{}}}],["download",{"_index":1908,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadcsv",{"_index":1977,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadselection",{"_index":1707,"title":{},"body":{"interfaces/Column.html":{}}}],["draw",{"_index":3028,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawcomplete",{"_index":4778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drawevents(events",{"_index":4037,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawn",{"_index":563,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["draws",{"_index":3081,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawxaxis",{"_index":3082,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawyaxis",{"_index":3086,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drilldown",{"_index":4803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drilldowncancelled",{"_index":4806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drillup",{"_index":4805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drillupcancelled",{"_index":4807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["due",{"_index":3730,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["duplicate",{"_index":2143,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["duplicates",{"_index":2480,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dx",{"_index":4071,"title":{},"body":{"classes/TooltipManager.html":{}}}],["dynamic",{"_index":2248,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["dynamicedge",{"_index":2245,"title":{"interfaces/DynamicEdge.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgeprovider",{"_index":2265,"title":{"classes/DynamicEdgeProvider.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgetype",{"_index":2250,"title":{"interfaces/DynamicEdgeType.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dynamicedgetype).getquery",{"_index":2258,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["dynamicnodeprovider",{"_index":2336,"title":{"classes/DynamicNodeProvider.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["dynamicnodetype",{"_index":2349,"title":{"interfaces/DynamicNodeType.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["e",{"_index":3132,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["e.count",{"_index":1298,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["e.from",{"_index":1293,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.to",{"_index":1295,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.value",{"_index":277,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["e.visible",{"_index":2206,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["each",{"_index":231,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["each(this.wrap",{"_index":1195,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["earth_radius",{"_index":2882,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["ease",{"_index":1259,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["edge",{"_index":90,"title":{"interfaces/Edge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge.context.name",{"_index":603,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.from",{"_index":595,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.to",{"_index":597,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.query.addselect(expr",{"_index":602,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.search",{"_index":604,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.count",{"_index":690,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge.fieldvalue",{"_index":600,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.from",{"_index":2183,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.id",{"_index":2186,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.provider",{"_index":598,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.to",{"_index":2182,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type",{"_index":2178,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type['trigger",{"_index":2195,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.visible",{"_index":2191,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge[\"arrows",{"_index":571,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"font",{"_index":578,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"label",{"_index":576,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge[\"labels",{"_index":577,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"labels\"].foreach(label",{"_index":2511,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge['aggregation'].name",{"_index":692,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge['record']['title",{"_index":694,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'aggregation\\'].name",{"_index":705,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'record\\'][\\'title",{"_index":706,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edgeclicked",{"_index":4108,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgeidx",{"_index":2416,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeoptions",{"_index":2395,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges",{"_index":142,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"miscellaneous/functions.html":{}}}],["edges.foreach(edge",{"_index":2448,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.remove(edges.get().filter(e",{"_index":2526,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.update(this.getvisibleedges",{"_index":2529,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeseparator",{"_index":379,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["edgetpl",{"_index":4117,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgetype",{"_index":91,"title":{"interfaces/EdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edgetype.nodetypes[1",{"_index":2275,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["edgetypes",{"_index":188,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["effect",{"_index":3611,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eg",{"_index":111,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["egjs/hammerjs",{"_index":4516,"title":{},"body":{"dependencies.html":{}}}],["el",{"_index":1023,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["element",{"_index":701,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["elementref",{"_index":1021,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["elementref.nativeelement",{"_index":4309,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["elements",{"_index":2995,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementtype",{"_index":4615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elusive",{"_index":4179,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["email",{"_index":2146,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["emit",{"_index":1568,"title":{},"body":{"interfaces/Category.html":{}}}],["emitevent",{"_index":894,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["emits",{"_index":229,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["emitted",{"_index":4098,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["emitter",{"_index":2802,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["empty",{"_index":1527,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["enabled",{"_index":574,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Category.html":{}}}],["end",{"_index":1267,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enfacet",{"_index":4660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enfinance",{"_index":4387,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enforce",{"_index":3842,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enginetype",{"_index":1671,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.csv",{"_index":1832,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.date",{"_index":1826,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.dates",{"_index":1827,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetime",{"_index":1828,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetimes",{"_index":1829,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.double",{"_index":1821,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.float",{"_index":1822,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.integer",{"_index":1823,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.string",{"_index":1831,"title":{},"body":{"interfaces/Column.html":{}}}],["engooglemaps",{"_index":4415,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["engrid",{"_index":4383,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enheatmap",{"_index":4428,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enresultsview",{"_index":4673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enrich",{"_index":2339,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["enriched",{"_index":2343,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["ensearch",{"_index":4674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":1561,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["entities",{"_index":69,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["entity",{"_index":1608,"title":{},"body":{"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entityclick",{"_index":4697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityitem",{"_index":3286,"title":{},"body":{"components/ResultTimeline.html":{}}}],["entityrollout",{"_index":4695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrollover",{"_index":4696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equivalent",{"_index":3163,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["err",{"_index":3542,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error",{"_index":3541,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(\"column",{"_index":2685,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(\"maxnmonths",{"_index":3600,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`aggregation",{"_index":266,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`an",{"_index":2690,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(`edge",{"_index":2535,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`inconsistent",{"_index":2107,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`missing",{"_index":2185,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`node",{"_index":2532,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`wrong",{"_index":2158,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["errors",{"_index":3023,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["eslint",{"_index":1394,"title":{},"body":{"interfaces/Category.html":{}}}],["eslint/no",{"_index":1396,"title":{},"body":{"interfaces/Category.html":{}}}],["especially",{"_index":3846,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["essentially",{"_index":3962,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["et",{"_index":172,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["etc",{"_index":2391,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["even",{"_index":3792,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event",{"_index":819,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["event)[0",{"_index":3162,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event.api",{"_index":1987,"title":{},"body":{"interfaces/Column.html":{}}}],["event.chart",{"_index":1549,"title":{},"body":{"interfaces/Category.html":{}}}],["event.clienty",{"_index":3169,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event.coldef",{"_index":1999,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.field",{"_index":1997,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.headername",{"_index":1996,"title":{},"body":{"interfaces/Column.html":{}}}],["event.columnapi",{"_index":1988,"title":{},"body":{"interfaces/Column.html":{}}}],["event.data",{"_index":1995,"title":{},"body":{"interfaces/Column.html":{}}}],["event.dataobj.label",{"_index":1555,"title":{},"body":{"interfaces/Category.html":{}}}],["event.dataobj.label.lastindexof",{"_index":1554,"title":{},"body":{"interfaces/Category.html":{}}}],["event.dataobj.label.substring(0",{"_index":1553,"title":{},"body":{"interfaces/Category.html":{}}}],["event.display",{"_index":3324,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.filterinstance",{"_index":2028,"title":{},"body":{"interfaces/Column.html":{}}}],["event.filterinstance.getmodel",{"_index":2026,"title":{},"body":{"interfaces/Column.html":{}}}],["event.locations.split(\",\")[0",{"_index":3331,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.name",{"_index":4044,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["event.nodes.length",{"_index":4200,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["event.preventdefault",{"_index":916,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["event.stoppropagation",{"_index":918,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["event.type",{"_index":1763,"title":{},"body":{"interfaces/Column.html":{}}}],["event.value",{"_index":1998,"title":{},"body":{"interfaces/Column.html":{}}}],["eventclicked",{"_index":3459,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eventdata",{"_index":4193,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[0",{"_index":4195,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[1",{"_index":4196,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventemitter",{"_index":1046,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["eventlist",{"_index":4394,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["eventobj",{"_index":2711,"title":{},"body":{"interfaces/FusionChartsEvent.html":{}}}],["events",{"_index":684,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["events.foreach(event",{"_index":3322,"title":{},"body":{"components/ResultTimeline.html":{}}}],["events.push([event",{"_index":3995,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].size",{"_index":4033,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].sizeopened",{"_index":4034,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[events.length",{"_index":3997,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["eventsize(events",{"_index":4030,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["example",{"_index":2341,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exanding",{"_index":2201,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["except",{"_index":2866,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exclusion",{"_index":2569,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["execute",{"_index":2251,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["executed",{"_index":2254,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["execution",{"_index":1451,"title":{},"body":{"interfaces/Category.html":{}}}],["exist",{"_index":222,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["existing",{"_index":128,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["existingedge",{"_index":2504,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.count",{"_index":2506,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.from",{"_index":2516,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.to].map(id",{"_index":2517,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type",{"_index":2520,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions",{"_index":2515,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions(nodes",{"_index":2519,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.visible",{"_index":2507,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"label",{"_index":2513,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"labels\"].push(label",{"_index":2514,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode",{"_index":476,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["existingnode.count",{"_index":2494,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.precedence",{"_index":2490,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type",{"_index":2498,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions",{"_index":2496,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions(existingnode",{"_index":2497,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.visible",{"_index":2495,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnodes",{"_index":168,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1776,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["expand",{"_index":313,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["expandable",{"_index":4555,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expanded",{"_index":651,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/NodeData.html":{},"miscellaneous/functions.html":{}}}],["expanding",{"_index":127,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["expected",{"_index":3789,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["export",{"_index":52,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{}}}],["exportcancelled",{"_index":4727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exported",{"_index":4726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exporting",{"_index":1964,"title":{},"body":{"interfaces/Column.html":{}}}],["exports",{"_index":21,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["exportvaluegetter",{"_index":1927,"title":{},"body":{"interfaces/Column.html":{}}}],["expr",{"_index":98,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["expr.operands.map(e",{"_index":276,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["expr.value",{"_index":964,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["expr.values",{"_index":963,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["exprbuilder",{"_index":791,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"injectables/GoogleMapsService.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["expression",{"_index":3022,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exprfrom",{"_index":613,"title":{},"body":{"classes/BaseProvider.html":{}}}],["exproperator",{"_index":850,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["exprs",{"_index":3619,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprs.push(this.exprbuilder.makerangeexpr(ccaggregation.column",{"_index":3624,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprto",{"_index":616,"title":{},"body":{"classes/BaseProvider.html":{}}}],["extends",{"_index":110,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["extension",{"_index":105,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["extent",{"_index":2971,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["extent([[0",{"_index":3767,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["extent(allprimarydates",{"_index":3833,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["extent(this.data",{"_index":3059,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["external",{"_index":1760,"title":{},"body":{"interfaces/Column.html":{}}}],["extract",{"_index":3033,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["f8f9fa",{"_index":973,"title":{},"body":{"components/BsFacetDate.html":{}}}],["fa",{"_index":338,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facet",{"_index":48,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facetactive",{"_index":1870,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["facetchartdatapoint",{"_index":2544,"title":{"interfaces/FacetChartDataPoint.html":{}},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["facetconfig",{"_index":848,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["facetdateconfig",{"_index":857,"title":{"interfaces/FacetDateConfig.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["facetdateparams",{"_index":758,"title":{"interfaces/FacetDateParams.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["facetname",{"_index":1533,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["facetngxchart",{"_index":724,"title":{"components/FacetNgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["facets",{"_index":1868,"title":{},"body":{"interfaces/Column.html":{}}}],["facetservice",{"_index":788,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["facetwrappercomponent",{"_index":10,"title":{"components/FacetWrapperComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fact",{"_index":2019,"title":{},"body":{"interfaces/Column.html":{}}}],["factory",{"_index":4542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":4475,"title":{},"body":{"coverage.html":{}}}],["false",{"_index":285,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/variables.html":{}}}],["far",{"_index":873,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["fas",{"_index":337,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["fcroot",{"_index":2747,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fcroot.modules",{"_index":2756,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fcstatic",{"_index":2739,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fcstatic.core",{"_index":2753,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fcstatic.modules",{"_index":2754,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["features",{"_index":492,"title":{},"body":{"classes/BaseProvider.html":{}}}],["featuretype",{"_index":4623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetch",{"_index":165,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["fetchaggregation(aggregation",{"_index":3583,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fetchaggregations(types",{"_index":199,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["fetched",{"_index":121,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fetches",{"_index":190,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["fetching",{"_index":2268,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["field",{"_index":425,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fields",{"_index":2081,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fieldvalue",{"_index":79,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["fill",{"_index":1264,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["fills",{"_index":227,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter",{"_index":118,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["filter(e",{"_index":1292,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["filter(edge",{"_index":2177,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["filter(item",{"_index":3671,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(node",{"_index":324,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter(r",{"_index":2844,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(record",{"_index":1592,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filter(tick",{"_index":3089,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["filter(v",{"_index":2562,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filterarea",{"_index":2813,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["filterchangedevent",{"_index":1684,"title":{},"body":{"interfaces/Column.html":{}}}],["filterdatum(datum",{"_index":3110,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["filtered",{"_index":422,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteredcolor",{"_index":1419,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filtering",{"_index":1424,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteritem",{"_index":770,"title":{},"body":{"components/BsFacetDate.html":{}}}],["filteritem(item",{"_index":818,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["filtermodifiedevent",{"_index":1685,"title":{},"body":{"interfaces/Column.html":{}}}],["filters",{"_index":1467,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["filtertype",{"_index":1873,"title":{},"body":{"interfaces/Column.html":{}}}],["finally",{"_index":1863,"title":{},"body":{"interfaces/Column.html":{}}}],["finance/.../index.ts",{"_index":4608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finance/finance.module.ts",{"_index":2701,"title":{},"body":{"modules/FinanceModule.html":{}}}],["finance/messages/index.ts",{"_index":4385,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finance/money",{"_index":2962,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["financemodule",{"_index":2696,"title":{"modules/FinanceModule.html":{}},"body":{"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["find",{"_index":3601,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["find(a",{"_index":3035,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fire",{"_index":3944,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["first",{"_index":867,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["fit",{"_index":646,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["fitbounds",{"_index":2853,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["fitnetwork",{"_index":4181,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["flag",{"_index":1438,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{}}}],["flags",{"_index":1741,"title":{},"body":{"interfaces/Column.html":{}}}],["fns",{"_index":852,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["focus",{"_index":675,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NodeData.html":{}}}],["focusnode",{"_index":652,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["focusnode(node",{"_index":656,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["following",{"_index":3658,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["font",{"_index":984,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["for(let",{"_index":1865,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach",{"_index":3637,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["foreach(edge",{"_index":2180,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(event",{"_index":3993,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach(item",{"_index":1299,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["foreach(list",{"_index":1315,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["foreach(node",{"_index":2175,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(record",{"_index":1594,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["forget",{"_index":2294,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["form",{"_index":767,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["format",{"_index":271,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["format(date",{"_index":3353,"title":{},"body":{"components/ResultTimeline.html":{}}}],["formatcontent",{"_index":1708,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["formatdayrequest",{"_index":3469,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formating",{"_index":3468,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formatservice",{"_index":1668,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["formatted",{"_index":249,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{}}}],["formatter",{"_index":547,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["formatting",{"_index":2570,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["formbuilder",{"_index":789,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["former",{"_index":3164,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["formsmodule",{"_index":27,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["forroot",{"_index":2717,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["forroot(core",{"_index":2718,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["forwarded",{"_index":1712,"title":{},"body":{"interfaces/Column.html":{}}}],["found",{"_index":2481,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["foundid",{"_index":2013,"title":{},"body":{"interfaces/Column.html":{}}}],["foundrow",{"_index":2007,"title":{},"body":{"interfaces/Column.html":{}}}],["fractional",{"_index":2592,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["frame",{"_index":4159,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["frameworkcomponents",{"_index":1745,"title":{},"body":{"interfaces/Column.html":{}}}],["frfacet",{"_index":4662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frfinance",{"_index":4388,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgooglemaps",{"_index":4416,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgrid",{"_index":4384,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frheatmap",{"_index":4429,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["from?.sethours(0",{"_index":952,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["from?.setminutes(0",{"_index":953,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["from?.setseconds(0",{"_index":954,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["fromnode",{"_index":558,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["fromnode.id",{"_index":567,"title":{},"body":{"classes/BaseProvider.html":{}}}],["frresultsview",{"_index":4676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frsearch",{"_index":4677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fulltext",{"_index":1222,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["function",{"_index":72,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{}}}],["functionality",{"_index":1727,"title":{},"body":{"interfaces/Column.html":{}}}],["functions",{"_index":1915,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Column.html":{},"miscellaneous/functions.html":{}}}],["fusion",{"_index":729,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["fusionchart",{"_index":728,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fusionchartinstance",{"_index":2705,"title":{"interfaces/FusionChartInstance.html":{}},"body":{"interfaces/FusionChartInstance.html":{},"coverage.html":{}}}],["fusioncharts",{"_index":1414,"title":{},"body":{"interfaces/Category.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"dependencies.html":{}}}],["fusioncharts's",{"_index":1418,"title":{},"body":{"interfaces/Category.html":{}}}],["fusioncharts'},{'name",{"_index":749,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["fusioncharts/.../chart.ts",{"_index":4604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/.../events.ts",{"_index":4612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/.../fusioncharts.constructor.ts",{"_index":4533,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fusioncharts/.../multi",{"_index":4605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/angular",{"_index":2706,"title":{},"body":{"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/chart/chart.ts",{"_index":4401,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/events/events.ts",{"_index":4393,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/fusioncharts.constructor.ts",{"_index":4395,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fusioncharts/fusioncharts.directive",{"_index":2722,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.directive.ts",{"_index":4397,"title":{},"body":{"coverage.html":{}}}],["fusioncharts/fusioncharts.module.ts",{"_index":2716,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.module.ts:33",{"_index":2719,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.service",{"_index":2725,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.service.ts",{"_index":2729,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"coverage.html":{}}}],["fusioncharts/fusioncharts.service.ts:11",{"_index":2748,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/fusioncharts.service.ts:12",{"_index":2749,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/fusioncharts.service.ts:14",{"_index":2746,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/fusioncharts.service.ts:18",{"_index":2740,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/fusioncharts.service.ts:22",{"_index":2742,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/fusioncharts.service.ts:24",{"_index":2738,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/fusioncharts.service.ts:39",{"_index":2744,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/fusioncharts.service.ts:5",{"_index":2766,"title":{},"body":{"injectables/FusionChartsStatic.html":{}}}],["fusioncharts/fusioncharts.service.ts:6",{"_index":2767,"title":{},"body":{"injectables/FusionChartsStatic.html":{}}}],["fusioncharts/fusioncharts.service.ts:60",{"_index":2741,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["fusioncharts/interfaces/fusionchartinstance.ts",{"_index":2707,"title":{},"body":{"interfaces/FusionChartInstance.html":{},"coverage.html":{}}}],["fusioncharts/interfaces/fusionchartsevent.ts",{"_index":2709,"title":{},"body":{"interfaces/FusionChartsEvent.html":{},"coverage.html":{}}}],["fusioncharts/multi",{"_index":1364,"title":{},"body":{"interfaces/Category.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusionchartsconstructor",{"_index":4396,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fusionchartsconstructor(fusionchartsservice",{"_index":4587,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fusionchartsdirective",{"_index":748,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fusionchartsevent",{"_index":2708,"title":{"interfaces/FusionChartsEvent.html":{}},"body":{"interfaces/FusionChartsEvent.html":{},"coverage.html":{}}}],["fusionchartsmodule",{"_index":2712,"title":{"modules/FusionChartsModule.html":{}},"body":{"modules/FusionChartsModule.html":{},"index.html":{},"modules.html":{}}}],["fusionchartsmodules(core",{"_index":2765,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsmodules.getname",{"_index":2760,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsmodules.gettype",{"_index":2761,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsmodules.name",{"_index":2762,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsmodules.type",{"_index":2763,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsservice",{"_index":2723,"title":{"injectables/FusionChartsService.html":{}},"body":{"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["fusionchartsservice._fcroot",{"_index":2750,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsservice.getfcroot",{"_index":2752,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsservice.isfcrootset",{"_index":2751,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["fusionchartsstatic",{"_index":2724,"title":{"injectables/FusionChartsStatic.html":{}},"body":{"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"coverage.html":{}}}],["fw",{"_index":341,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["gain",{"_index":671,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["gate",{"_index":2344,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["gates",{"_index":537,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["gates)#(ceo)#(microsoft",{"_index":4562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gates/microsoft",{"_index":251,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["gaugemodule",{"_index":3270,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["gaxis",{"_index":3027,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gbrush",{"_index":3741,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["general",{"_index":2403,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["generate",{"_index":141,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generated",{"_index":2052,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generates",{"_index":175,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["generating",{"_index":2079,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generic",{"_index":4541,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":4552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geolocated",{"_index":2807,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["geometry",{"_index":4616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.fill",{"_index":4638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.stroke",{"_index":4625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georecord",{"_index":2768,"title":{"interfaces/GeoRecord.html":{}},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"coverage.html":{}}}],["georecords",{"_index":2808,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["getactions",{"_index":845,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["getadjacentedges",{"_index":3185,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getadjacentedges(nodeid",{"_index":2474,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getaggregation",{"_index":2668,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregation(aggregationname",{"_index":934,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregationdata",{"_index":1531,"title":{},"body":{"interfaces/Category.html":{}}}],["getaggregationlabel(aggregation",{"_index":368,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["getappservice",{"_index":2670,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getcharttype",{"_index":3251,"title":{},"body":{"components/NgxChart.html":{}}}],["getcolorscheme",{"_index":3253,"title":{},"body":{"components/NgxChart.html":{}}}],["getconnectednodes",{"_index":3186,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getconnectednodes(nodeid",{"_index":2476,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getd3timeinterval(resolution",{"_index":3693,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdata",{"_index":124,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"miscellaneous/typealiases.html":{}}}],["getdata(context",{"_index":295,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getdatasource",{"_index":2664,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getdate",{"_index":3429,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdisplay",{"_index":3430,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getedge",{"_index":3187,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getedge(id",{"_index":2423,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedgeactions",{"_index":385,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeactions(edge",{"_index":413,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeid(node1",{"_index":528,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getedgeids",{"_index":2437,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedges",{"_index":2427,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["geteventaggregation(config",{"_index":3560,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getexportparams",{"_index":1966,"title":{},"body":{"interfaces/Column.html":{}}}],["getfacetservice",{"_index":2672,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getfcroot",{"_index":2732,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["getfield",{"_index":844,"title":{},"body":{"components/BsFacetDate.html":{}}}],["getfusionchartsstatic",{"_index":2733,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["getisshown",{"_index":4073,"title":{},"body":{"classes/TooltipManager.html":{}}}],["getitem",{"_index":2613,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["getitem(datapoint",{"_index":2604,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getitem(label",{"_index":1575,"title":{},"body":{"interfaces/Category.html":{}}}],["getitemcolor",{"_index":1617,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["getlegend",{"_index":1002,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["getmarkeroptions",{"_index":2923,"title":{},"body":{"components/MapComponent.html":{}}}],["getmarkeroptions(record",{"_index":2851,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["getmaxdate",{"_index":3480,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmindate",{"_index":3476,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmodel",{"_index":2646,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getname",{"_index":1480,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getnode",{"_index":3188,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getnode(id",{"_index":2421,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodeactions",{"_index":383,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getnodeactions(node",{"_index":354,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getnodeid(type",{"_index":533,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getnodeids",{"_index":2435,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodes",{"_index":2425,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodevalue(node",{"_index":535,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getprovider",{"_index":386,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getprovideractions",{"_index":333,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getquery",{"_index":2253,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["getrecordsasevents(config",{"_index":3564,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getresults",{"_index":2666,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getresults(query",{"_index":939,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["getrows",{"_index":1934,"title":{},"body":{"interfaces/Column.html":{}}}],["gets",{"_index":1508,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["getstyle(orientation",{"_index":4090,"title":{},"body":{"classes/TooltipManager.html":{}}}],["gettimeseries(config",{"_index":3553,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getting",{"_index":1386,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["getvisibleedges",{"_index":2432,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getvisiblenodes",{"_index":2429,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["given",{"_index":181,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":1938,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["gmaps",{"_index":2815,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["google",{"_index":114,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["google.maps.latlng",{"_index":2890,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["google.maps.latlngbounds",{"_index":2855,"title":{},"body":{"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{}}}],["google.maps.latlngliteral",{"_index":2771,"title":{},"body":{"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{}}}],["google.maps.map",{"_index":2784,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["google.maps.mapoptions",{"_index":2805,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["google.maps.maptypestyle",{"_index":4614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google.maps.markeroptions",{"_index":2770,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["google_maps_api_key",{"_index":2906,"title":{},"body":{"injectables/GoogleMapsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps",{"_index":2779,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["googlemaps'},{'name",{"_index":731,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["googlemaps.service",{"_index":2778,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["googlemaps/.../dark",{"_index":4603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/.../googlemaps.service.ts",{"_index":4613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/.../index.ts",{"_index":4609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/dark",{"_index":4407,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps/googlemaps.module.ts",{"_index":2877,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["googlemaps/googlemaps.service.ts",{"_index":2880,"title":{},"body":{"injectables/GoogleMapsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps/googlemaps.service.ts:13",{"_index":2901,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["googlemaps/googlemaps.service.ts:15",{"_index":2898,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["googlemaps/googlemaps.service.ts:16",{"_index":2886,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["googlemaps/googlemaps.service.ts:19",{"_index":2899,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["googlemaps/googlemaps.service.ts:31",{"_index":2888,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["googlemaps/googlemaps.service.ts:45",{"_index":2893,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["googlemaps/js",{"_index":2904,"title":{},"body":{"injectables/GoogleMapsService.html":{},"dependencies.html":{}}}],["googlemaps/map.component.ts",{"_index":2769,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"coverage.html":{}}}],["googlemaps/map.component.ts:110",{"_index":2959,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:121",{"_index":2942,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:137",{"_index":2941,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:142",{"_index":2946,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:155",{"_index":2940,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:159",{"_index":2939,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:174",{"_index":2944,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:178",{"_index":2945,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:187",{"_index":2943,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:27",{"_index":2953,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:28",{"_index":2954,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:30",{"_index":2955,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:33",{"_index":2934,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:35",{"_index":2935,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:37",{"_index":2937,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:39",{"_index":2930,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:41",{"_index":2929,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:43",{"_index":2931,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:45",{"_index":2932,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:47",{"_index":2933,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:49",{"_index":2936,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:51",{"_index":2938,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:53",{"_index":2956,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:56",{"_index":2951,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:57",{"_index":2948,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:60",{"_index":2950,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:61",{"_index":2947,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:63",{"_index":2928,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:66",{"_index":2957,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:67",{"_index":2958,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:68",{"_index":2949,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:69",{"_index":2952,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/messages/index.ts",{"_index":4413,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemapsmodule",{"_index":2873,"title":{"modules/GoogleMapsModule.html":{}},"body":{"modules/GoogleMapsModule.html":{},"index.html":{},"modules.html":{}}}],["googlemapsservice",{"_index":2777,"title":{"injectables/GoogleMapsService.html":{}},"body":{"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"coverage.html":{}}}],["goup",{"_index":3800,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graph",{"_index":3817,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graphical",{"_index":1120,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["gravity",{"_index":4246,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol",{"_index":4240,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol.value",{"_index":4255,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitypref",{"_index":4274,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["green",{"_index":3697,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["grid",{"_index":31,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{}}}],["grid.module.ts",{"_index":19,"title":{},"body":{"modules/AgGridModule.html":{}}}],["grid/.../data",{"_index":4597,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../datasource.ts",{"_index":4598,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../index.ts",{"_index":4610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grid/ag",{"_index":18,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{},"coverage.html":{}}}],["grid/data",{"_index":2218,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/datasource.ts",{"_index":4376,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/facet",{"_index":2637,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["grid/messages/index.ts",{"_index":4380,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gridactions",{"_index":1747,"title":{},"body":{"interfaces/Column.html":{}}}],["gridapi",{"_index":1674,"title":{},"body":{"interfaces/Column.html":{}}}],["gridcolumnapi",{"_index":1740,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreadyevent",{"_index":1676,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreset",{"_index":1704,"title":{},"body":{"interfaces/Column.html":{}}}],["grip",{"_index":3808,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripheight",{"_index":4023,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grips",{"_index":3742,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripwidth",{"_index":4028,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["group",{"_index":2641,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupedevents",{"_index":3728,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupevents(pixperevent",{"_index":3982,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grouping",{"_index":3856,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groups",{"_index":4336,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["guess",{"_index":3497,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["gx",{"_index":991,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gy",{"_index":992,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["h",{"_index":1900,"title":{},"body":{"interfaces/Column.html":{}}}],["hack",{"_index":670,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/NodeData.html":{}}}],["hammerjs",{"_index":4521,"title":{},"body":{"dependencies.html":{}}}],["handled",{"_index":2406,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["handling",{"_index":2121,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["happens",{"_index":4572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hascollapsededge",{"_index":2204,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasedge",{"_index":3189,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasedge(id",{"_index":2419,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["hasexpandededge",{"_index":2203,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasfiltered",{"_index":1425,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["hasn't",{"_index":2024,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["hasnode",{"_index":3190,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasnode(id",{"_index":2417,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["header",{"_index":1792,"title":{},"body":{"interfaces/Column.html":{}}}],["heatmap",{"_index":719,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["heatmap'},{'name",{"_index":713,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["heatmap.component",{"_index":1277,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap.component.html",{"_index":989,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.scss",{"_index":988,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.ts",{"_index":4418,"title":{},"body":{"coverage.html":{}}}],["heatmap/.../heatmap.component.ts",{"_index":4601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heatmap/.../index.ts",{"_index":4611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heatmap/bootstrap/facet",{"_index":4417,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts",{"_index":986,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:117",{"_index":1066,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:132",{"_index":1050,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:169",{"_index":1079,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:192",{"_index":1076,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:200",{"_index":1074,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:211",{"_index":1070,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:220",{"_index":1065,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:241",{"_index":1093,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:36",{"_index":1030,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:39",{"_index":1033,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:40",{"_index":1045,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:41",{"_index":1037,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:42",{"_index":1044,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:45",{"_index":1034,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:46",{"_index":1024,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:49",{"_index":1026,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:50",{"_index":1028,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:51",{"_index":1038,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:52",{"_index":1039,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:53",{"_index":1042,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:56",{"_index":1048,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:57",{"_index":1047,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:60",{"_index":1099,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:61",{"_index":1102,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:62",{"_index":1084,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:65",{"_index":1088,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:66",{"_index":1090,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:67",{"_index":1101,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:68",{"_index":1103,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:71",{"_index":1085,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:74",{"_index":1091,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:77",{"_index":1092,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:78",{"_index":1022,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:87",{"_index":1067,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.module.ts",{"_index":1274,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap/bootstrap/results",{"_index":4422,"title":{},"body":{"coverage.html":{}}}],["heatmap/messages/index.ts",{"_index":4426,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["heatmapitem",{"_index":1029,"title":{"interfaces/HeatmapItem.html":{}},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["height",{"_index":642,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":950,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["hidden",{"_index":1340,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/NgxChart.html":{},"miscellaneous/functions.html":{}}}],["hide",{"_index":1815,"title":{},"body":{"interfaces/Column.html":{},"classes/TooltipManager.html":{}}}],["hidepref",{"_index":1814,"title":{},"body":{"interfaces/Column.html":{}}}],["hiderecordnode",{"_index":447,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hiderecordnode=true",{"_index":4548,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hides",{"_index":3883,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["hidetooltiptimeout",{"_index":4076,"title":{},"body":{"classes/TooltipManager.html":{}}}],["highest",{"_index":2400,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["highlight",{"_index":1380,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"miscellaneous/variables.html":{}}}],["highlightchildpieslices",{"_index":1384,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["highlighted",{"_index":1387,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["highlightparentpieslices",{"_index":1379,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["histogram",{"_index":3977,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["horizontalbar",{"_index":1641,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["host",{"_index":1241,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["hover",{"_index":977,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["hovered",{"_index":3178,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["hovers",{"_index":1080,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["html",{"_index":700,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["htmlelement",{"_index":1921,"title":{},"body":{"interfaces/Column.html":{}}}],["htmlelement).offsetwidth",{"_index":1212,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["http://localhost:4000/sba",{"_index":3390,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["https://github.com/angular/angular/issues/16982",{"_index":4013,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://github.com/d3/d3",{"_index":3103,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://stackoverflow.com/questions/13576906/d3",{"_index":3094,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://visjs.github.io/vis",{"_index":2388,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":4539,"title":{},"body":{"miscellaneous/functions.html":{}}}],["humans",{"_index":4576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hybrid",{"_index":2140,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["i=0",{"_index":2163,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["i=this.searchservice.query.select.length",{"_index":1943,"title":{},"body":{"interfaces/Column.html":{}}}],["i>=0",{"_index":1944,"title":{},"body":{"interfaces/Column.html":{}}}],["icellrendererfunc",{"_index":1672,"title":{},"body":{"interfaces/Column.html":{}}}],["icon",{"_index":336,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":526,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["idatasource",{"_index":1680,"title":{},"body":{"interfaces/Column.html":{}}}],["identifier",{"_index":2785,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{}}}],["identify",{"_index":1526,"title":{},"body":{"interfaces/Category.html":{}}}],["idoesfilterpassparams",{"_index":2653,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ids",{"_index":2434,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ids.foreach(id",{"_index":2455,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ie",{"_index":423,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!changes['record",{"_index":3313,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(!!existingedge[\"label",{"_index":2510,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!!item.value",{"_index":3667,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!this.selectfield.text",{"_index":2567,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!agg",{"_index":2689,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!changes.timeseries",{"_index":3485,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!changes[\"height",{"_index":3780,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!config.maxnmonths",{"_index":3596,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!d0",{"_index":3955,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!dataset.hasedge(edge.id",{"_index":2152,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!dataset.hasnode(node.id",{"_index":2142,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!foundid",{"_index":2015,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!foundrow",{"_index":2010,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!item.display",{"_index":264,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!items",{"_index":3662,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!keepdanglingnodes",{"_index":2470,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!neighbor",{"_index":2184,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!neighbor.visible",{"_index":2197,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!node",{"_index":2095,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!previousvalue",{"_index":4018,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!record.modified",{"_index":3147,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!record.record.$selected",{"_index":2867,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["if(!select",{"_index":3506,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!series.showdatapoints",{"_index":3950,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!sourcenode",{"_index":263,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this._filterinput",{"_index":2022,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.active",{"_index":2087,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!this.context.appservice.getccaggregation(aggregation",{"_index":217,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this.currentrange",{"_index":3498,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.events",{"_index":3514,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.gridactions",{"_index":1774,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.hasedge(edge.id",{"_index":2501,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(edge.from",{"_index":2536,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(node.id",{"_index":2487,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.isfiltered(item",{"_index":2603,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!this.neighbors[type",{"_index":1307,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(!this.optionsprefs.physics",{"_index":4215,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.optionsprefs.physics.barneshut",{"_index":4217,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.params.coldef.field",{"_index":2684,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!this.permanent",{"_index":2321,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(!this.query",{"_index":1937,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.showtooltip",{"_index":3180,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!this.timeseries",{"_index":3507,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.tooltipmanager.isshown",{"_index":3159,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.x",{"_index":3004,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.zoomable",{"_index":3861,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!utils.isstring(action",{"_index":1890,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!utils.isstring(parsedexpr",{"_index":3491,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!xextent[0",{"_index":3152,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!yextent[0",{"_index":3061,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if((config",{"_index":3526,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if((neighbor.visible",{"_index":2212,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if((node.precedence",{"_index":2489,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(_queries.length",{"_index":2305,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(action",{"_index":1892,"title":{},"body":{"interfaces/Column.html":{}}}],["if(action.selected",{"_index":1846,"title":{},"body":{"interfaces/Column.html":{}}}],["if(actions.length",{"_index":4168,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(agg.aggregation",{"_index":3530,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(aggregation",{"_index":234,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(array.isarray(config",{"_index":3552,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(bin",{"_index":4001,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(bounds",{"_index":2822,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["if(ccaggregation",{"_index":3581,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(changes.chart",{"_index":1492,"title":{},"body":{"interfaces/Category.html":{}}}],["if(changes.columns",{"_index":1771,"title":{},"body":{"interfaces/Column.html":{}}}],["if(changes.results",{"_index":1488,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{}}}],["if(changes[\"events",{"_index":3796,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"height",{"_index":3012,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"width",{"_index":3015,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes['options",{"_index":4134,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['results",{"_index":4128,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(col.field",{"_index":1867,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col.filter",{"_index":1819,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col?.formatter",{"_index":551,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(currentvalue",{"_index":4014,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(data",{"_index":1975,"title":{},"body":{"interfaces/Column.html":{}}}],["if(datum",{"_index":3039,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["if(diff",{"_index":3853,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(directed",{"_index":570,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(edge.type.field",{"_index":599,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(event.edges.length",{"_index":4199,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.event.type",{"_index":4197,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.nodes.length",{"_index":4202,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.records.find(r",{"_index":1767,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.source",{"_index":1762,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.type",{"_index":3400,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["if(events",{"_index":4031,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(events.length",{"_index":3994,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(existingedge[\"labels\"].indexof(label",{"_index":2512,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(exprs.length",{"_index":3625,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(formatcontent",{"_index":1779,"title":{},"body":{"interfaces/Column.html":{}}}],["if(hascollapsededge",{"_index":2207,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(hasexpandededge",{"_index":2209,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(i",{"_index":1833,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(isnan(value",{"_index":3056,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(item.node",{"_index":1300,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(maxnmonths",{"_index":3605,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(neighborsneighbors.length",{"_index":2189,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(node.data?.$selected",{"_index":2043,"title":{},"body":{"interfaces/Column.html":{}}}],["if(node.visible",{"_index":2280,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(nodefrom",{"_index":605,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(opened",{"_index":4231,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(parsedexpr.values",{"_index":3494,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(properties.items.length>0",{"_index":3370,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(query",{"_index":2319,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(query.orderby",{"_index":1880,"title":{},"body":{"interfaces/Column.html":{}}}],["if(range",{"_index":3584,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(recorddata",{"_index":2112,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(recordnode.id",{"_index":2137,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(relation",{"_index":575,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(relativex",{"_index":1216,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(results.records.length",{"_index":2365,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(select",{"_index":3488,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(selection",{"_index":3616,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(sourcenode",{"_index":212,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this._filterinput",{"_index":2036,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this._networkinitialized",{"_index":4155,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectededge",{"_index":4170,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectednode",{"_index":4166,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.active",{"_index":305,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(this.aggrdata",{"_index":1595,"title":{},"body":{"interfaces/Category.html":{}}}],["if(this.aggregations",{"_index":2558,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.checkselectionchange(this.currentselection",{"_index":3933,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.currentselection",{"_index":3890,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.data",{"_index":2573,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.edgetype.trigger",{"_index":2290,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["if(this.events",{"_index":3983,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.facetservice.hasfiltered(this.name",{"_index":3483,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.formatcontent",{"_index":1922,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["if(this.gridapi",{"_index":1850,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.gridapi?.getselectedrows().length",{"_index":1970,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.hasedge(edge.id",{"_index":2534,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.hasfiltered",{"_index":1483,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.hasnode(node.id",{"_index":2531,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.initdone",{"_index":3381,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.items.length",{"_index":3355,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.map",{"_index":2819,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["if(this.maxdate",{"_index":3845,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.mindate",{"_index":3843,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.nodecache.has(node.id",{"_index":2320,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.nodetype.trigger",{"_index":2353,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.providerssubscription",{"_index":4138,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.results",{"_index":1929,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["if(this.searchservice.breadcrumbs",{"_index":4163,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.searchservice.query.findselect(this.name",{"_index":3001,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.query.select?.length",{"_index":1942,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.searchservice.query.select[i].facet.startswith(\"grid",{"_index":1945,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.selectedvalues.has(utils.tosqlvalue(item.value).tolowercase",{"_index":2588,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.skips[type.aggregation+node.id",{"_index":318,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this.tooltipmanager.data",{"_index":3966,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.viewinit",{"_index":1161,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.zoombehavior",{"_index":3862,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(type",{"_index":239,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(type.display",{"_index":2174,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.field",{"_index":548,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(type.nodetypes.length",{"_index":2156,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.nodetypes[0",{"_index":2105,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.parse",{"_index":259,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(typeof",{"_index":555,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(types.length",{"_index":317,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(update",{"_index":1172,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(recorddata",{"_index":2115,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(val",{"_index":1602,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(recorddata",{"_index":2123,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isstring(this.record.modified",{"_index":3361,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(utils.isstring(v",{"_index":1604,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(val",{"_index":1599,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(value",{"_index":2125,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isundefined(x",{"_index":3118,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(val",{"_index":1598,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(value[\"value",{"_index":2126,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(values.length",{"_index":278,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(visibilityaction",{"_index":1957,"title":{},"body":{"interfaces/Column.html":{}}}],["if(year",{"_index":3340,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ifilterparams",{"_index":2650,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ignore",{"_index":2034,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ignored",{"_index":3437,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["image",{"_index":640,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["implementation",{"_index":491,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["implemented",{"_index":1569,"title":{},"body":{"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["implements",{"_index":494,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{}}}],["importance",{"_index":542,"title":{},"body":{"classes/BaseProvider.html":{}}}],["important",{"_index":3781,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["improved",{"_index":3979,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["inactive",{"_index":2401,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["incl",{"_index":3045,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["include",{"_index":2051,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["includes",{"_index":415,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["including",{"_index":2090,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individually",{"_index":332,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["infinite",{"_index":1729,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["influence",{"_index":2131,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["information",{"_index":2348,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["infowindow",{"_index":2782,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["infowindowstpl",{"_index":2783,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["inherited",{"_index":396,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["init",{"_index":2924,"title":{},"body":{"components/MapComponent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["init(map",{"_index":2842,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["initdone",{"_index":3276,"title":{},"body":{"components/ResultTimeline.html":{}}}],["initial",{"_index":3433,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialization",{"_index":1546,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{}}}],["initialize",{"_index":299,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialized",{"_index":1437,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["initnodes",{"_index":1436,"title":{},"body":{"interfaces/Category.html":{}}}],["inject",{"_index":2235,"title":{},"body":{"components/DataModalComponent.html":{},"injectables/GoogleMapsService.html":{}}}],["inject(google_maps_api_key",{"_index":2909,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["inject(modal_model",{"_index":2232,"title":{},"body":{"components/DataModalComponent.html":{}}}],["injectable",{"_index":2727,"title":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"injectables/GoogleMapsService.html":{}},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"injectables/GoogleMapsService.html":{},"coverage.html":{}}}],["injectable({providedin",{"_index":2908,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["injectables",{"_index":2728,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"injectables/GoogleMapsService.html":{},"index.html":{}}}],["injectiontoken",{"_index":2902,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["injectiontoken(\"google_maps_api_key",{"_index":2907,"title":{},"body":{"injectables/GoogleMapsService.html":{},"miscellaneous/variables.html":{}}}],["innerheight",{"_index":3003,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["innerwidth",{"_index":3002,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["input",{"_index":663,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["input(\"field",{"_index":858,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["input('visnetwork",{"_index":4305,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["input('vistimeline",{"_index":4347,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["inputs",{"_index":654,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["insert",{"_index":2326,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["inserted",{"_index":2040,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["inside",{"_index":1096,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instance",{"_index":673,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["instanceof",{"_index":3668,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["instead",{"_index":440,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["integer",{"_index":3092,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["integers",{"_index":3097,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["interaction",{"_index":1122,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interactions",{"_index":1126,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interface",{"_index":56,"title":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":58,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{}}}],["intermediate",{"_index":471,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["internally",{"_index":2407,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interval",{"_index":3499,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interval*0.1",{"_index":3504,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["intervals",{"_index":3888,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["intlmodule",{"_index":33,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["intlservice",{"_index":1373,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["intlsubscription",{"_index":3747,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invalid/empty",{"_index":3821,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invisible",{"_index":2199,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["is(sq",{"_index":2640,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isaggregationedgetype",{"_index":4464,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isaggregationedgetype(et",{"_index":173,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype",{"_index":4472,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype(et",{"_index":2257,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isedgevisible(type",{"_index":2173,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isfcrootset",{"_index":2734,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["isfilteractive",{"_index":2647,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isfiltered",{"_index":771,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"components/FacetNgxChart.html":{}}}],["isfiltered(item",{"_index":821,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{}}}],["ishidden",{"_index":1485,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["isinitialized",{"_index":4307,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["isnan(val[1",{"_index":3148,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["isoltated",{"_index":2216,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isrefreshing",{"_index":1452,"title":{},"body":{"interfaces/Category.html":{}}}],["isselected",{"_index":1428,"title":{},"body":{"interfaces/Category.html":{}}}],["isshown",{"_index":4061,"title":{},"body":{"classes/TooltipManager.html":{}}}],["isstructuraledgetype",{"_index":4479,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isstructuraledgetype(et",{"_index":2077,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["istree",{"_index":1572,"title":{},"body":{"interfaces/Category.html":{},"components/FacetWrapperComponent.html":{}}}],["isvalid",{"_index":3420,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["isvalid(parseiso(r[config.field",{"_index":3565,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["it's",{"_index":2404,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["item",{"_index":155,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["item!.originallabel",{"_index":1563,"title":{},"body":{"interfaces/Category.html":{}}}],["item.count",{"_index":289,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["item.date",{"_index":3674,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.display!.length",{"_index":3050,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display!.substr(1",{"_index":3049,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display.split",{"_index":274,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["item.hasownproperty('items",{"_index":1540,"title":{},"body":{"interfaces/Category.html":{}}}],["item.node",{"_index":1311,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.context.appservice.getplurallabel(item.node.type.field",{"_index":1302,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.field",{"_index":1301,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.name",{"_index":1305,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.start",{"_index":1228,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["item.unsubscribe",{"_index":908,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["item.value",{"_index":267,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Category.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.value.tostring",{"_index":3669,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item:hover",{"_index":971,"title":{},"body":{"components/BsFacetDate.html":{}}}],["item['items'].map(el",{"_index":1543,"title":{},"body":{"interfaces/Category.html":{}}}],["itemclicked",{"_index":1019,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itemclickevent",{"_index":1620,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["items",{"_index":107,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["items._data[properties.items[0]].start",{"_index":3373,"title":{},"body":{"components/ResultTimeline.html":{}}}],["itemsclickable",{"_index":1011,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itimeseries",{"_index":3592,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itooltipparams",{"_index":1673,"title":{},"body":{"interfaces/Column.html":{}}}],["itself",{"_index":2141,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["j",{"_index":2314,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["jmin",{"_index":3603,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["job",{"_index":4561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jobs",{"_index":273,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["join",{"_index":375,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["justify",{"_index":3454,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["keep",{"_index":3091,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keepdanglingnodes",{"_index":2461,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["keeping",{"_index":2806,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["kept",{"_index":2398,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key",{"_index":582,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key:string",{"_index":3453,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["keycharm",{"_index":4518,"title":{},"body":{"dependencies.html":{}}}],["keyword",{"_index":2976,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["l",{"_index":4029,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["label",{"_index":358,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["label1",{"_index":609,"title":{},"body":{"classes/BaseProvider.html":{}}}],["label2",{"_index":611,"title":{},"body":{"classes/BaseProvider.html":{}}}],["labeladded",{"_index":4754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labelclick",{"_index":4759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labeldeleted",{"_index":4755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labeldisplay",{"_index":4654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labeldragend",{"_index":4763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labeldragstart",{"_index":4762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labelrollout",{"_index":4761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labelrollover",{"_index":4760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels",{"_index":1407,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["labels.text.fill",{"_index":4619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels.text.stroke",{"_index":4621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.man_made",{"_index":4630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.natural",{"_index":4632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":2594,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["larry",{"_index":112,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["last",{"_index":3996,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["last.push(event",{"_index":4002,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastbin",{"_index":3998,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastnode",{"_index":287,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["lat",{"_index":2790,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["latitude",{"_index":2793,"title":{},"body":{"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{}}}],["latitudefield",{"_index":2795,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["lead",{"_index":4289,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["leave",{"_index":1413,"title":{},"body":{"interfaces/Category.html":{}}}],["left",{"_index":635,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{}}}],["left'|'right",{"_index":4078,"title":{},"body":{"classes/TooltipManager.html":{}}}],["left.px",{"_index":4091,"title":{},"body":{"classes/TooltipManager.html":{}}}],["legend",{"_index":699,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["legend.component",{"_index":1330,"title":{},"body":{"modules/BsTimelineModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legend.component.ts",{"_index":4042,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["legend.component.ts:54",{"_index":4052,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:55",{"_index":4053,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:56",{"_index":4055,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:57",{"_index":4056,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:58",{"_index":4054,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legendevents",{"_index":3455,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legenditemclicked",{"_index":4717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legenditemrollout",{"_index":4719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legenditemrollover",{"_index":4718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legendorientation",{"_index":3456,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legendpointerdragstart",{"_index":4784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legendpointerdragstop",{"_index":4785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legendrangeupdated",{"_index":4786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legendstyles",{"_index":3452,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["legendyoffset",{"_index":3458,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["length",{"_index":4015,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["lets",{"_index":1871,"title":{},"body":{"interfaces/Column.html":{}}}],["level",{"_index":738,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["levelcallback",{"_index":1535,"title":{},"body":{"interfaces/Category.html":{}}}],["library",{"_index":4180,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["life",{"_index":2378,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["lifecycle",{"_index":1398,"title":{},"body":{"interfaces/Category.html":{}}}],["light",{"_index":1040,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["light'|'dark",{"_index":1362,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["lightblue",{"_index":4045,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["limit",{"_index":3937,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["limits",{"_index":2067,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["line",{"_index":1186,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["linestyles",{"_index":3405,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["link",{"_index":2074,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["linkclicked",{"_index":4792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linked",{"_index":4549,"title":{},"body":{"miscellaneous/functions.html":{}}}],["linkedchartinvoked",{"_index":4801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkeditemclosed",{"_index":4681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkeditemopened",{"_index":4679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["links",{"_index":2214,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["list",{"_index":191,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["list.sort((a,b",{"_index":1316,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["listen",{"_index":885,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["listener",{"_index":4135,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["literal",{"_index":398,"title":{},"body":{"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateParams.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/typealiases.html":{}}}],["lng",{"_index":2791,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["loaded",{"_index":4777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loader",{"_index":2903,"title":{},"body":{"injectables/GoogleMapsService.html":{},"dependencies.html":{}}}],["loader.load().then",{"_index":2910,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["locale",{"_index":3750,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["localechange",{"_index":1462,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["logoclick",{"_index":4722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logoloaded",{"_index":4723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logoloaderror",{"_index":4724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logorollout",{"_index":4721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logorollover",{"_index":4720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longitude",{"_index":2796,"title":{},"body":{"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{}}}],["longitudefield",{"_index":2797,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["look",{"_index":1861,"title":{},"body":{"interfaces/Column.html":{}}}],["lot",{"_index":2346,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["m",{"_index":3471,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["made",{"_index":3532,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["make",{"_index":2200,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["makedata",{"_index":2571,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["makedatasource",{"_index":1928,"title":{},"body":{"interfaces/Column.html":{}}}],["makeexpr",{"_index":2883,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["makeexpr(bounds",{"_index":2887,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["manage",{"_index":1742,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["manager",{"_index":1353,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["manager.ts",{"_index":4058,"title":{},"body":{"classes/TooltipManager.html":{},"coverage.html":{}}}],["manager.ts:13",{"_index":4072,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manager.ts:19",{"_index":4069,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manager.ts:24",{"_index":4068,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manager.ts:30",{"_index":4067,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manager.ts:37",{"_index":4074,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manager.ts:41",{"_index":4075,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manager.ts:5",{"_index":4066,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manager.ts:7",{"_index":4063,"title":{},"body":{"classes/TooltipManager.html":{}}}],["manages",{"_index":2337,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["managing",{"_index":64,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["manual",{"_index":131,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["manually",{"_index":4586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":180,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/VisEvent.html":{}}}],["map",{"_index":855,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map((results",{"_index":940,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["map(agg",{"_index":2564,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(col",{"_index":372,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["map(d",{"_index":3556,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(e",{"_index":1296,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["map(events",{"_index":3519,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(item",{"_index":3666,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(r",{"_index":3566,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(record",{"_index":2847,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["map(results",{"_index":3588,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(x",{"_index":3931,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["map.component",{"_index":2879,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["map.component.html",{"_index":2780,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["map.set(node.id",{"_index":2282,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mapcomponent",{"_index":730,"title":{"components/MapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["mapinfowindow",{"_index":2772,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["mapmarker",{"_index":2773,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["maps",{"_index":2775,"title":{},"body":{"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"dependencies.html":{}}}],["margin",{"_index":1012,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["marker",{"_index":2803,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["markerclick",{"_index":4703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markerrollout",{"_index":4702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markerrollover",{"_index":4701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":3096,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["match",{"_index":1427,"title":{},"body":{"interfaces/Category.html":{}}}],["matching",{"_index":55,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(event.date.gettime",{"_index":4000,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(last[0].date.gettime",{"_index":3999,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(this.innerwidth",{"_index":3985,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.max((this.innerheight",{"_index":4025,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.min(10",{"_index":4024,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.pi",{"_index":2896,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["math.round(this.height",{"_index":3911,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.round(this.width",{"_index":3909,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max",{"_index":1125,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["max(data",{"_index":3835,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max(s.dates",{"_index":3837,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max_dates",{"_index":3280,"title":{},"body":{"components/ResultTimeline.html":{}}}],["max_year",{"_index":3281,"title":{},"body":{"components/ResultTimeline.html":{}}}],["maxaggregationdate",{"_index":3442,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxdate",{"_index":3436,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxheight",{"_index":3309,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":3424,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxlat",{"_index":2914,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["maxlng",{"_index":2918,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["maxnmonths",{"_index":3423,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxx",{"_index":1013,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxy",{"_index":1014,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxzoomdays",{"_index":3446,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["meaning",{"_index":4570,"title":{},"body":{"miscellaneous/functions.html":{}}}],["means",{"_index":120,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["measured",{"_index":3974,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["memberof",{"_index":4304,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["menu",{"_index":1459,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["merge",{"_index":479,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["merge(dataset",{"_index":2484,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["merged",{"_index":545,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["mergedatasets(datasets",{"_index":4147,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["mergedevents",{"_index":3465,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mergedtimeseries",{"_index":3464,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["merges",{"_index":2154,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["merging",{"_index":2399,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["metadata",{"_index":66,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["meters",{"_index":2799,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["method",{"_index":363,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["methods",{"_index":381,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"classes/TooltipManager.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["microsoft",{"_index":2083,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["middle",{"_index":564,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["milestoneclick",{"_index":4772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["milestonerollout",{"_index":4774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["milestonerollover",{"_index":4773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":3602,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min_dates",{"_index":3282,"title":{},"body":{"components/ResultTimeline.html":{}}}],["min_year",{"_index":3283,"title":{},"body":{"components/ResultTimeline.html":{}}}],["minaggregationdate",{"_index":3441,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mindate",{"_index":3435,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["mindiff",{"_index":3850,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minfit",{"_index":2800,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["minheight",{"_index":3307,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":2798,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minlat",{"_index":2912,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["minlng",{"_index":2916,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["minus",{"_index":874,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["minzoomdays",{"_index":3444,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["misc",{"_index":1131,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["miscellaneous",{"_index":4531,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2538,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mistake",{"_index":218,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["mm",{"_index":3684,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modal",{"_index":2220,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal'},{'name",{"_index":723,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["modal.component",{"_index":47,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["modal.component.html",{"_index":2222,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts",{"_index":2219,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["modal.component.ts:30",{"_index":2229,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:31",{"_index":2230,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:32",{"_index":2226,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:35",{"_index":2233,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:36",{"_index":2234,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:37",{"_index":2231,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:42",{"_index":2227,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:53",{"_index":2228,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal_model",{"_index":2237,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modalservice",{"_index":1669,"title":{},"body":{"interfaces/Column.html":{}}}],["mode",{"_index":119,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":1738,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["model.defaultstate",{"_index":1885,"title":{},"body":{"interfaces/Column.html":{}}}],["model.formatcontent",{"_index":2239,"title":{},"body":{"components/DataModalComponent.html":{}}}],["model.name",{"_index":3255,"title":{},"body":{"components/NgxChart.html":{}}}],["model.state",{"_index":1884,"title":{},"body":{"interfaces/Column.html":{}}}],["model.value",{"_index":3256,"title":{},"body":{"components/NgxChart.html":{}}}],["model[col.field",{"_index":1869,"title":{},"body":{"interfaces/Column.html":{}}}],["models",{"_index":95,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["models.ts",{"_index":2380,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{}}}],["models.ts:100",{"_index":3227,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:103",{"_index":3224,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:106",{"_index":3222,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:109",{"_index":3221,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:112",{"_index":3226,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:128",{"_index":3182,"title":{},"body":{"interfaces/NetworkContext.html":{}}}],["models.ts:142",{"_index":3208,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:147",{"_index":3207,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:152",{"_index":3202,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:157",{"_index":3199,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:162",{"_index":3204,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:167",{"_index":3201,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:172",{"_index":3206,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:177",{"_index":3205,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:182",{"_index":3203,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:187",{"_index":3200,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:192",{"_index":3196,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:198",{"_index":3194,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:203",{"_index":3193,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:213",{"_index":3210,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:218",{"_index":3195,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:230",{"_index":3197,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:235",{"_index":3198,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:251",{"_index":3209,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:318",{"_index":3211,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:85",{"_index":3223,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:88",{"_index":3220,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:91",{"_index":3225,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:94",{"_index":3229,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:97",{"_index":3228,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["modelupdatedevent",{"_index":1686,"title":{},"body":{"interfaces/Column.html":{}}}],["modes",{"_index":125,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["modified",{"_index":797,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modifying",{"_index":2486,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["module",{"_index":0,"title":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}},"body":{}}],["module.ts",{"_index":4367,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["modules.foreach((fusionchartsmodules",{"_index":2759,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["modulewithproviders",{"_index":2721,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["moment",{"_index":2055,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["money",{"_index":733,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["moneyaggregation",{"_index":2982,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["moneycloudcomponent",{"_index":732,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyclouddatum",{"_index":2961,"title":{"interfaces/MoneyCloudDatum.html":{}},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["moneycolumn",{"_index":3128,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["moneydatum",{"_index":3122,"title":{"interfaces/MoneyDatum.html":{}},"body":{"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["moneytimelinecomponent",{"_index":735,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyvaluecolumn",{"_index":2979,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["mono",{"_index":2113,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["month",{"_index":3680,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["months",{"_index":3425,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["more",{"_index":1697,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mouse",{"_index":1081,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["mouseevent",{"_index":1078,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["move",{"_index":680,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"injectables/GoogleMapsService.html":{},"interfaces/NodeData.html":{}}}],["move(startll",{"_index":2889,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["moved",{"_index":3915,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ms",{"_index":1121,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["msg#facet.clearselects",{"_index":1469,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["msg#facet.date.custom",{"_index":970,"title":{},"body":{"components/BsFacetDate.html":{}}}],["msg#facet.filters.clear",{"_index":876,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["msg#googlemaps.filterarea",{"_index":2818,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["msg#grid.autosize",{"_index":1901,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.autosizetitle",{"_index":1902,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.columns",{"_index":1757,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copy",{"_index":1905,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copytitle",{"_index":1906,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.download",{"_index":1909,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.downloadtitle",{"_index":1910,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.formatdata",{"_index":1912,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["msg#grid.formatdatatitle",{"_index":1913,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.reset",{"_index":1896,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.resettitle",{"_index":1897,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#heatmap.showing",{"_index":1230,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#heatmap.tooltip",{"_index":1237,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#network.actions.active",{"_index":514,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.collapsemeta",{"_index":2211,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.expandmeta",{"_index":2208,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.fetchmoreall",{"_index":343,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.fetchmorealltext",{"_index":345,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.inactive",{"_index":515,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.providers",{"_index":4174,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.refresh",{"_index":4125,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.reset",{"_index":523,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.resettitle",{"_index":524,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.toggle",{"_index":516,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.infocards.aggregation",{"_index":691,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msg#network.infocards.count",{"_index":688,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["msg#network.infocards.record",{"_index":693,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msgfrom",{"_index":2147,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msgto",{"_index":2148,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multi",{"_index":737,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{}}}],["multilevelpie",{"_index":1457,"title":{},"body":{"interfaces/Category.html":{}}}],["multilevelpiechart",{"_index":736,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["multiple",{"_index":1450,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["multivalued",{"_index":2612,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["mutable",{"_index":2396,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mutate",{"_index":2360,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutatenodes(nodes",{"_index":2368,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutates",{"_index":2367,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutation",{"_index":2371,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["muted",{"_index":697,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["n.visible",{"_index":2431,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["name",{"_index":144,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":1793,"title":{},"body":{"interfaces/Column.html":{}}}],["native",{"_index":1522,"title":{},"body":{"interfaces/Category.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["nbins",{"_index":3984,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["necessarily",{"_index":1786,"title":{},"body":{"interfaces/Column.html":{}}}],["necessary",{"_index":2263,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["need",{"_index":319,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["needs",{"_index":2691,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["neighbor",{"_index":477,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbor.count",{"_index":2469,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["neighbor.key",{"_index":1319,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["neighbor.visible",{"_index":2190,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbors",{"_index":1279,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighborsneighbors",{"_index":2187,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["network",{"_index":94,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["network'},{'name",{"_index":741,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["network.component",{"_index":3217,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network.component.html",{"_index":4102,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["network.directive",{"_index":3219,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network.directive.ts",{"_index":4276,"title":{},"body":{"directives/VisNetworkDirective.html":{},"coverage.html":{}}}],["network.directive.ts:106",{"_index":4298,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:131",{"_index":4301,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:33",{"_index":4284,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:45",{"_index":4286,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:57",{"_index":4291,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:69",{"_index":4294,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:72",{"_index":4282,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:82",{"_index":4303,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.directive.ts:92",{"_index":4302,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["network.service",{"_index":2385,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{}}}],["network.service.ts",{"_index":4482,"title":{},"body":{"coverage.html":{}}}],["network/.../aggregation",{"_index":4534,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/.../dynamic",{"_index":4535,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network",{"_index":4532,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network.component.ts",{"_index":4606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["network/.../records",{"_index":4536,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/docs/network",{"_index":4100,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["network/docs/network/edges.html",{"_index":2394,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/docs/network/nodes.html",{"_index":2389,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/edge",{"_index":627,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"coverage.html":{}}}],["network/esnext",{"_index":4099,"title":{},"body":{"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{}}}],["network/network",{"_index":2379,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/network.component.ts",{"_index":4097,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["network/network.module.ts",{"_index":3216,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network/node",{"_index":1278,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["network/providers/aggregation",{"_index":59,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/async",{"_index":436,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["network/providers/base",{"_index":490,"title":{},"body":{"classes/BaseProvider.html":{},"coverage.html":{}}}],["network/providers/dynamic",{"_index":2246,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/providers/provider",{"_index":4474,"title":{},"body":{"coverage.html":{}}}],["network/providers/records",{"_index":2047,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/selected",{"_index":3385,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["network/vis",{"_index":4275,"title":{},"body":{"directives/VisNetworkDirective.html":{},"coverage.html":{}}}],["networkcomponent",{"_index":740,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"index.html":{}}}],["networkcontext",{"_index":93,"title":{"interfaces/NetworkContext.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkdataset",{"_index":92,"title":{"classes/NetworkDataset.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkinitialized",{"_index":4183,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["networkinstance",{"_index":676,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.focus(node.id",{"_index":678,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.selectnodes([node.id",{"_index":682,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkmodule",{"_index":3212,"title":{"modules/NetworkModule.html":{}},"body":{"modules/NetworkModule.html":{},"index.html":{},"modules.html":{}}}],["networkprovider",{"_index":291,"title":{"interfaces/NetworkProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["networkservice",{"_index":674,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["new",{"_index":149,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["newmodel",{"_index":2027,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows",{"_index":2002,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.find(row",{"_index":2008,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.foreach(row",{"_index":2012,"title":{},"body":{"interfaces/Column.html":{}}}],["newselection",{"_index":3928,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["next",{"_index":458,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Category.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ng",{"_index":1244,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["ngafterviewinit",{"_index":1003,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngdocheck",{"_index":1506,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["nggooglemapsmodule",{"_index":2878,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["ngmodule",{"_index":23,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["ngonchanges",{"_index":653,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["ngonchanges(changes",{"_index":823,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["ngonchanges(changes:simplechanges",{"_index":3312,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ngondestroy",{"_index":772,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["ngoninit",{"_index":773,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["ngx",{"_index":725,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["ngxchart",{"_index":742,"title":{"components/NgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["ngxchartsmodule",{"_index":3259,"title":{"modules/NgxChartsModule.html":{}},"body":{"modules/NgxChartsModule.html":{},"index.html":{},"modules.html":{}}}],["ngzone",{"_index":1372,"title":{},"body":{"interfaces/Category.html":{}}}],["nmonths",{"_index":3594,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["nodatatodisplay",{"_index":4783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":89,"title":{"interfaces/Node.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["node's",{"_index":4579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node.context.name",{"_index":592,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.networkservice['networks'][node.context.name",{"_index":677,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.context.searchservice.query.addselect(expr",{"_index":591,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.searchservice.search",{"_index":593,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.select(node",{"_index":685,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.count",{"_index":698,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["node.data.id",{"_index":1769,"title":{},"body":{"interfaces/Column.html":{}}}],["node.id",{"_index":2138,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.id.substr(node.type.name.length+1",{"_index":536,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.isselected",{"_index":2044,"title":{},"body":{"interfaces/Column.html":{}}}],["node.label",{"_index":359,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["node.provider",{"_index":586,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.record",{"_index":2119,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.record[type.field",{"_index":2111,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.setselected(event.type",{"_index":1770,"title":{},"body":{"interfaces/Column.html":{}}}],["node.setselected(true",{"_index":2045,"title":{},"body":{"interfaces/Column.html":{}}}],["node.type",{"_index":316,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type.field",{"_index":587,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.visible",{"_index":2135,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node1.id",{"_index":530,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2",{"_index":529,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2.id",{"_index":532,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node['icon']['code",{"_index":695,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["node[\\'icon\\'][\\'code",{"_index":707,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["nodeadded",{"_index":4748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodecache",{"_index":2271,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["nodeclicked",{"_index":4107,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodedata",{"_index":1280,"title":{"interfaces/NodeData.html":{}},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["nodedata.count",{"_index":1322,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node.label",{"_index":1321,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node['icon']['code",{"_index":1320,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node[\\'icon\\'][\\'code",{"_index":1323,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedeleted",{"_index":4750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodefrom",{"_index":594,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.label",{"_index":610,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.type.field",{"_index":606,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeid",{"_index":2467,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeidx",{"_index":2415,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodejs.timeout",{"_index":4077,"title":{},"body":{"classes/TooltipManager.html":{}}}],["nodeoptions",{"_index":2390,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes",{"_index":150,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"miscellaneous/functions.html":{}}}],["nodes.foreach(node",{"_index":2443,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.remove(nodes.get().filter(n",{"_index":2524,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.update(this.getvisiblenodes",{"_index":2528,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes/edges",{"_index":2144,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["nodes[i].getcomputedtextlength",{"_index":1220,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["nodeto",{"_index":596,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.label",{"_index":612,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.type.field",{"_index":607,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodetpl",{"_index":4115,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodetype",{"_index":445,"title":{"interfaces/NodeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["nodetypes",{"_index":2393,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodetypes[1",{"_index":154,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["nodeupdated",{"_index":4749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1268,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["normalize",{"_index":3044,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["note",{"_index":543,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["nothing",{"_index":4003,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["notify",{"_index":2032,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["now",{"_index":4185,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nticks",{"_index":3908,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null",{"_index":1739,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null/undefined",{"_index":4009,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number",{"_index":164,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{}}}],["number.isinteger(tick",{"_index":3090,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.max_value",{"_index":3885,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.min_value",{"_index":3884,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["numbercardmodule",{"_index":3269,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["numerical",{"_index":3046,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["o(n",{"_index":2473,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["obama",{"_index":4568,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obj",{"_index":1562,"title":{},"body":{"interfaces/Category.html":{}}}],["object",{"_index":442,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"directives/VisNetworkDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":2485,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["object.keys(query.aggregations).foreach(aggregation",{"_index":216,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["object.values(this.neighbors",{"_index":1314,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["objects",{"_index":1694,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["observable",{"_index":3407,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["observables",{"_index":3460,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["obtain",{"_index":2252,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["obtained",{"_index":1164,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["occurrences",{"_index":861,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["of({aggregation",{"_index":3580,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["oldmodel",{"_index":2025,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows",{"_index":2004,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.find(id",{"_index":2014,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.foreach(id",{"_index":2006,"title":{},"body":{"interfaces/Column.html":{}}}],["ommit",{"_index":945,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["on(\"click",{"_index":1196,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["on(\"end",{"_index":1178,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousedown.zoom",{"_index":3878,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousemove",{"_index":3020,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mouseout",{"_index":3134,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"start",{"_index":3769,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchend.zoom",{"_index":3882,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchmove.zoom",{"_index":3881,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchstart.zoom",{"_index":3880,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"zoom",{"_index":3874,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('brush",{"_index":3771,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('end",{"_index":3773,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on/off",{"_index":3964,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onafterviewinit",{"_index":1163,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onaxisclicked",{"_index":1004,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onaxisclicked(value",{"_index":1069,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onbrush",{"_index":3923,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onbrushend",{"_index":3927,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["once",{"_index":331,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["oncelldoubleclicked(event",{"_index":1993,"title":{},"body":{"interfaces/Column.html":{}}}],["onchange",{"_index":4105,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onchanges",{"_index":629,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["onchanges,afterviewinit",{"_index":2975,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onclick",{"_index":130,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["ondatasetsmerged",{"_index":387,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["ondatasetsmerged(dataset",{"_index":428,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ondestroy",{"_index":388,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["one",{"_index":311,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onedgeclicked",{"_index":389,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onedgeclicked(edge",{"_index":431,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ones",{"_index":2217,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["oneventclick(event",{"_index":3965,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oneventclicked(event",{"_index":3640,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onfilterchanged",{"_index":2020,"title":{},"body":{"interfaces/Column.html":{}}}],["onfilterchanged(event",{"_index":2033,"title":{},"body":{"interfaces/Column.html":{}}}],["onfiltermodified(event",{"_index":2021,"title":{},"body":{"interfaces/Column.html":{}}}],["ongridready(event",{"_index":1985,"title":{},"body":{"interfaces/Column.html":{}}}],["oninit",{"_index":759,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["oninitialized($event",{"_index":1547,"title":{},"body":{"interfaces/Category.html":{}}}],["oninsert",{"_index":135,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["onitemclicked",{"_index":1005,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onitemclicked(item",{"_index":1073,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["only/56821215",{"_index":3098,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmapclick",{"_index":2925,"title":{},"body":{"components/MapComponent.html":{}}}],["onmapclick(event",{"_index":2863,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["onmarkerclick",{"_index":2926,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick(event",{"_index":2865,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["onmodelupdated(event",{"_index":2042,"title":{},"body":{"interfaces/Column.html":{}}}],["onmouseenterdatum(datum",{"_index":3113,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onmousemove",{"_index":3108,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["onmousemove(event",{"_index":3158,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseout",{"_index":1006,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseover",{"_index":1007,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onmouseover(item",{"_index":1077,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["onnetworkclick(eventdata",{"_index":4194,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onnodeclicked",{"_index":384,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodeclicked(node",{"_index":314,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["onnodesinserted",{"_index":390,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodesinserted(nodes",{"_index":433,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onopensettings(opened",{"_index":4230,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onrangechange(range",{"_index":3632,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onrecordclicked(datum",{"_index":3173,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["onresize",{"_index":1630,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["onrowdatachanged(event",{"_index":1990,"title":{},"body":{"interfaces/Column.html":{}}}],["onscroll",{"_index":4736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onselectionchange(selection",{"_index":3615,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onselectionchanged(event",{"_index":2001,"title":{},"body":{"interfaces/Column.html":{}}}],["onsortchanged(event",{"_index":2038,"title":{},"body":{"interfaces/Column.html":{}}}],["onzoom",{"_index":3935,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onzoomend",{"_index":3942,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ootbconfig",{"_index":4448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ootbconfig(providerfactory",{"_index":4553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["opacity",{"_index":978,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["open",{"_index":3887,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["opened",{"_index":2861,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/VisEvent.html":{}}}],["operations",{"_index":1435,"title":{},"body":{"interfaces/Category.html":{}}}],["optional",{"_index":76,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":143,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/variables.html":{}}}],["optionsprefs",{"_index":4106,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["order",{"_index":947,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["orderby",{"_index":1877,"title":{},"body":{"interfaces/Column.html":{}}}],["ordering",{"_index":1961,"title":{},"body":{"interfaces/Column.html":{}}}],["ored",{"_index":2483,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["orientation",{"_index":4050,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"classes/TooltipManager.html":{}}}],["original",{"_index":2340,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["originalcount",{"_index":993,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["originallabel",{"_index":1367,"title":{},"body":{"interfaces/Category.html":{}}}],["others",{"_index":2059,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["otherwise",{"_index":1509,"title":{},"body":{"interfaces/Category.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["output",{"_index":1104,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["output(\"item",{"_index":1619,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["outputs",{"_index":1017,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["outside",{"_index":1559,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["over",{"_index":1082,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["overflow",{"_index":1339,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["overlay",{"_index":2997,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["overlaybuttonclick",{"_index":4776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["override",{"_index":186,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["overriden",{"_index":1723,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overview",{"_index":4589,"title":{"index.html":{}},"body":{"index.html":{}}}],["p.getdata(this.context",{"_index":4145,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getedgeactions(this._selectededge",{"_index":4171,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getnodeactions(this._selectednode",{"_index":4167,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider",{"_index":4142,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider())).subscribe(dataset",{"_index":2277,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["p.getprovideractions",{"_index":4176,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.ondatasetsmerged(dataset",{"_index":4151,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onedgeclicked(edge",{"_index":4123,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodeclicked(node",{"_index":4121,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodesinserted(this.context.nodes.get",{"_index":4157,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["package",{"_index":4502,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":981,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetWrapperComponent.html":{}}}],["page",{"_index":113,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["pagenavigated",{"_index":4704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pages",{"_index":4573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginate",{"_index":2073,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["pagination",{"_index":2068,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["panel",{"_index":4229,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["param",{"_index":171,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["parameter",{"_index":160,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["parameters",{"_index":394,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"classes/TooltipManager.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1920,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["params.coldef",{"_index":1918,"title":{},"body":{"interfaces/Column.html":{}}}],["params.coldef.$column",{"_index":1924,"title":{},"body":{"interfaces/Column.html":{}}}],["params.onlyselected",{"_index":1971,"title":{},"body":{"interfaces/Column.html":{}}}],["params.value",{"_index":1917,"title":{},"body":{"interfaces/Column.html":{}}}],["parent",{"_index":1381,"title":{},"body":{"interfaces/Category.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["parentindex",{"_index":1586,"title":{},"body":{"interfaces/Category.html":{}}}],["parse",{"_index":71,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsed",{"_index":2049,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsedexpr",{"_index":3489,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parsedexpr.operands[0",{"_index":3493,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseentity",{"_index":3047,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["parsefloat(val[1",{"_index":3149,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["parsefloat(valuestr",{"_index":3054,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["parseint(id[1",{"_index":3377,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parseiso",{"_index":851,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseiso(cooc[1",{"_index":3328,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parseiso(dateobj.display",{"_index":3348,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parseiso(parsedexpr.values[0",{"_index":3495,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseiso(parsedexpr.values[1",{"_index":3496,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseiso(r[config.field",{"_index":3567,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseiso(val.length",{"_index":3670,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseiso(value[0",{"_index":890,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["parseiso(value[1",{"_index":892,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["parsing",{"_index":269,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["part",{"_index":946,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["particular",{"_index":2249,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["passed",{"_index":2408,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["path",{"_index":1578,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["path.lastindexof",{"_index":1587,"title":{},"body":{"interfaces/Category.html":{}}}],["path.substring(0",{"_index":1588,"title":{},"body":{"interfaces/Category.html":{}}}],["paul",{"_index":4582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":4505,"title":{},"body":{"dependencies.html":{}}}],["people",{"_index":4584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["per",{"_index":3461,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["percentages",{"_index":1411,"title":{},"body":{"interfaces/Category.html":{}}}],["percentvalue",{"_index":1402,"title":{},"body":{"interfaces/Category.html":{}}}],["performs",{"_index":2065,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["permanent",{"_index":2273,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["persist",{"_index":1840,"title":{},"body":{"interfaces/Column.html":{}}}],["person",{"_index":4544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pie",{"_index":739,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pieborderthickness",{"_index":1391,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["piece",{"_index":4022,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["piechartmodule",{"_index":3267,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["piefillalpha",{"_index":1389,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["pinned",{"_index":4741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pipe",{"_index":897,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["pixel",{"_index":3975,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pixperevent",{"_index":3981,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["plot",{"_index":1448,"title":{},"body":{"interfaces/Category.html":{}}}],["plots",{"_index":1404,"title":{},"body":{"interfaces/Category.html":{}}}],["plottooltext",{"_index":1401,"title":{},"body":{"interfaces/Category.html":{}}}],["plus",{"_index":339,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["poi",{"_index":4634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poi.park",{"_index":4637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":1165,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["point(node",{"_index":3166,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["point.matrixtransform(node.getscreenctm()?.inverse",{"_index":3170,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["point.x",{"_index":3171,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["point.y",{"_index":3172,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pointer",{"_index":1255,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/VisEvent.html":{}}}],["points",{"_index":2596,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["populate",{"_index":1839,"title":{},"body":{"interfaces/Column.html":{}}}],["popup_extract(id[0",{"_index":3376,"title":{},"body":{"components/ResultTimeline.html":{}}}],["pos",{"_index":3330,"title":{},"body":{"components/ResultTimeline.html":{}}}],["position",{"_index":1239,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["possible",{"_index":2102,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["possibly",{"_index":1722,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["post",{"_index":478,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["potentially",{"_index":312,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pp",{"_index":3354,"title":{},"body":{"components/ResultTimeline.html":{}}}],["pre",{"_index":1132,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["precedence",{"_index":2058,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["preference",{"_index":1841,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["preferences",{"_index":1777,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["prefs",{"_index":1755,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["present",{"_index":2145,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pretty",{"_index":1304,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["prev.merge(cur",{"_index":4150,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prevent",{"_index":1385,"title":{},"body":{"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["previous",{"_index":865,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previously",{"_index":2322,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["previousvalue",{"_index":4005,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previousvalue.length",{"_index":4019,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primary",{"_index":933,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["primaryseries",{"_index":3825,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primitives",{"_index":3137,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["printcancelled",{"_index":4730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["printcomplete",{"_index":4729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["printreadystatechange",{"_index":4682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prior",{"_index":3434,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["private",{"_index":919,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["probably",{"_index":2084,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["process",{"_index":230,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["processcellcallback",{"_index":1968,"title":{},"body":{"interfaces/Column.html":{}}}],["processcellforexportparams",{"_index":1682,"title":{},"body":{"interfaces/Column.html":{}}}],["processclick",{"_index":4766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":2266,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processednodes",{"_index":2267,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processes",{"_index":2359,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processing",{"_index":2062,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["processnode(node",{"_index":2318,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processrollout",{"_index":4768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processrollover",{"_index":4767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["produce",{"_index":4104,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["produced",{"_index":4146,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["programmatic",{"_index":2035,"title":{},"body":{"interfaces/Column.html":{}}}],["programmatically",{"_index":1059,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["propagate",{"_index":2198,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["propagated",{"_index":3638,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["propagating",{"_index":4520,"title":{},"body":{"dependencies.html":{}}}],["properties",{"_index":75,"title":{"properties.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"properties.html":{}}}],["properties.event",{"_index":3368,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.event.target,url",{"_index":3378,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items",{"_index":3366,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items[0].split",{"_index":3371,"title":{},"body":{"components/ResultTimeline.html":{}}}],["property",{"_index":418,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["propertyname",{"_index":4315,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["propname",{"_index":4314,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["protected",{"_index":187,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{}}}],["provide",{"_index":2345,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"modules/FusionChartsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["provided",{"_index":148,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["provider",{"_index":104,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["provider.ts",{"_index":60,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["provider.ts:10",{"_index":448,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:141",{"_index":406,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:15",{"_index":498,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:151",{"_index":504,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:155",{"_index":501,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:159",{"_index":506,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:16",{"_index":497,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:163",{"_index":510,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:167",{"_index":509,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:171",{"_index":508,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:179",{"_index":505,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:18",{"_index":499,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:188",{"_index":503,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:19",{"_index":3393,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["provider.ts:21",{"_index":496,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:211",{"_index":502,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:23",{"_index":500,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:245",{"_index":507,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:25",{"_index":495,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:28",{"_index":455,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["provider.ts:39",{"_index":2350,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["provider.ts:58",{"_index":2331,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["provider.ts:65",{"_index":393,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:74",{"_index":3271,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["providerfactory",{"_index":4476,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":457,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"modules/FusionChartsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["providersactionlist",{"_index":4172,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providerssubscription",{"_index":4118,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["provides",{"_index":1791,"title":{},"body":{"interfaces/Column.html":{}}}],["providing",{"_index":2103,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["public",{"_index":185,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["q",{"_index":2304,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["queries",{"_index":2256,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["queries.filter(q",{"_index":2303,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["query",{"_index":97,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["query.action",{"_index":203,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(`${ccaggregation.column}:[${this.formatdayrequest(range[0])}..${this.formatdayrequest(range[1",{"_index":3585,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(this.context.exprbuilder.makeexpr(sourcenode.type.field",{"_index":214,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.aggregations",{"_index":205,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.aggregations[type.aggregation",{"_index":207,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.findselect(\"grid",{"_index":1866,"title":{},"body":{"interfaces/Column.html":{}}}],["query.orderby.split",{"_index":1882,"title":{},"body":{"interfaces/Column.html":{}}}],["query.select",{"_index":3613,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query|undefined",{"_index":2313,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r",{"_index":2992,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.$selected",{"_index":3572,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.id",{"_index":1768,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.records.length",{"_index":2357,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.records[0",{"_index":2358,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.title",{"_index":3578,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r[this.latitudefield",{"_index":2845,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["r[this.longitudefield",{"_index":2846,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["r[this.moneyvaluecolumn]?.foreach((item",{"_index":3078,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["radius",{"_index":644,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NodeData.html":{}}}],["raised",{"_index":4295,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["range",{"_index":833,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range([0",{"_index":1147,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range([4",{"_index":3009,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range([this.innerheight",{"_index":3007,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(colorschemes[this.colorscheme][this.buckets",{"_index":1158,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["range(schemecategory10",{"_index":3011,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range(this.x.range",{"_index":3905,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(this.xt.range",{"_index":3907,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range).pipe",{"_index":3555,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range).subscribe",{"_index":3539,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[0",{"_index":943,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[1",{"_index":944,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rangechange",{"_index":3725,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rangeinit",{"_index":3724,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["raw",{"_index":1031,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rawdata",{"_index":258,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed",{"_index":283,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed[i",{"_index":284,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.fieldvalue",{"_index":288,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations",{"_index":281,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations[i",{"_index":282,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawvalue",{"_index":2965,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rawvalue.split",{"_index":3145,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["re",{"_index":1560,"title":{},"body":{"interfaces/Category.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reactiveformsmodule",{"_index":28,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["read",{"_index":2990,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["read/write",{"_index":2986,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["readable",{"_index":2402,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["readonly",{"_index":182,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Category.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["ready",{"_index":1446,"title":{},"body":{"interfaces/Category.html":{},"injectables/GoogleMapsService.html":{}}}],["realtimeupdatecomplete",{"_index":4691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["realtimeupdateerror",{"_index":4788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rebuild",{"_index":2287,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rebuilds",{"_index":2284,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["rec",{"_index":2829,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["rec.options",{"_index":2832,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["recomputed",{"_index":3439,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["recomputes",{"_index":3136,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record",{"_index":465,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["record.$selected",{"_index":1593,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["record.id",{"_index":2094,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record.record",{"_index":2868,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["record.title",{"_index":2097,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record?.[this.moneycolumn]?.foreach(money",{"_index":3142,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record?.title",{"_index":2960,"title":{},"body":{"components/MapComponent.html":{}}}],["record[this.appservice.getcolumnalias(this.appservice.getcolumn(this.aggrdata.column",{"_index":1597,"title":{},"body":{"interfaces/Category.html":{}}}],["record[this.appservice.getcolumnalias(this.appservice.getcolumn(this.data.column",{"_index":2576,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["record[this.latitudefield",{"_index":2848,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["record[this.longitudefield",{"_index":2849,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["recordclicked",{"_index":2804,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{}}}],["recorddata",{"_index":2110,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recorddata.foreach((value,i",{"_index":2116,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode",{"_index":2053,"title":{"interfaces/RecordNode.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordnode).record",{"_index":2213,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode.record",{"_index":2151,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records",{"_index":437,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["records.length",{"_index":2088,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records.map(record",{"_index":2092,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordsprovider",{"_index":443,"title":{"classes/RecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordsproviderdemo",{"_index":4449,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recordsproviderdemo(providerfactory",{"_index":4556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recordsproviders",{"_index":438,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["record|undefined",{"_index":2369,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["recreate",{"_index":3902,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rect",{"_index":1266,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["rectangle",{"_index":3801,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["red",{"_index":3696,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["redraw",{"_index":3106,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["redrawing",{"_index":3788,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["reference",{"_index":4283,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["referencing",{"_index":198,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["reflect",{"_index":540,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["reformat",{"_index":2595,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["refresh",{"_index":3396,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["refreshaction",{"_index":4113,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["refreshed",{"_index":3387,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["refreshing",{"_index":1447,"title":{},"body":{"interfaces/Category.html":{}}}],["refreshnodeoptions(node",{"_index":2372,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["regenerate",{"_index":2831,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["register",{"_index":4186,"title":{},"body":{"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["registered",{"_index":4297,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["relation",{"_index":280,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["relations",{"_index":80,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["relative",{"_index":1243,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["relativex",{"_index":1213,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["relevant",{"_index":1482,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["remaining",{"_index":2463,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["remove",{"_index":948,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["removed",{"_index":866,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["removeedge(id",{"_index":2542,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removeedges",{"_index":3191,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["removeedges(ids",{"_index":2458,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenode(id",{"_index":2540,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenodes(ids",{"_index":2453,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removes",{"_index":2462,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["rendercancelled",{"_index":4794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rendercell",{"_index":1919,"title":{},"body":{"interfaces/Column.html":{}}}],["rendercomplete",{"_index":4779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rendered",{"_index":2409,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["rendering",{"_index":1652,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["reorganize",{"_index":3943,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["replacecurrent",{"_index":779,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["replaysubject",{"_index":3408,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["replaysubject(1",{"_index":3510,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["representing",{"_index":2381,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["repulsion",{"_index":4245,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol",{"_index":4238,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol.value",{"_index":4254,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsionpref",{"_index":4272,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["require",{"_index":3484,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["required",{"_index":136,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{}}}],["res",{"_index":2311,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results",{"_index":2309,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results.map(r",{"_index":2356,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AgGridModule.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["resetaction",{"_index":380,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resets",{"_index":1960,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["resetstate",{"_index":1936,"title":{},"body":{"interfaces/Column.html":{}}}],["resizable",{"_index":1732,"title":{},"body":{"interfaces/Column.html":{}}}],["resize",{"_index":1979,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["resizecancelled",{"_index":4797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resized",{"_index":4796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolution",{"_index":3660,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["resolvefusioncharts",{"_index":2735,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["resolvefusioncharts(core",{"_index":2743,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["respond",{"_index":1068,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{}}}],["responds",{"_index":3960,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rest",{"_index":1055,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["result",{"_index":744,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{}}}],["resulting",{"_index":481,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resultmodule",{"_index":43,"title":{},"body":{"modules/AgGridModule.html":{}}}],["results",{"_index":54,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.aggregations[0",{"_index":941,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["results.records[0",{"_index":2366,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["resulttimeline",{"_index":743,"title":{"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"index.html":{}}}],["retrieve",{"_index":453,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["retrieves",{"_index":292,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["return",{"_index":157,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{}}}],["returned",{"_index":70,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["returns",{"_index":407,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["rextent",{"_index":3058,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[0",{"_index":3063,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[1",{"_index":3064,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rgb(0,0,0,0.125",{"_index":1351,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rgb(132",{"_index":4046,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["right",{"_index":636,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{}}}],["right.px",{"_index":4095,"title":{},"body":{"classes/TooltipManager.html":{}}}],["rnode",{"_index":2316,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["rnode.record",{"_index":2317,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["road",{"_index":4640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road.highway",{"_index":4643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolling",{"_index":2590,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["root",{"_index":1577,"title":{},"body":{"interfaces/Category.html":{},"injectables/GoogleMapsService.html":{}}}],["rotate",{"_index":1190,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["rotationend",{"_index":4705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rotationstart",{"_index":4706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["row",{"_index":1711,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row\"|\"column",{"_index":3457,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row.id",{"_index":2009,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdata",{"_index":1752,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdatachangedevent",{"_index":1677,"title":{},"body":{"interfaces/Column.html":{}}}],["rowmodeltype",{"_index":1728,"title":{},"body":{"interfaces/Column.html":{}}}],["rows",{"_index":1716,"title":{},"body":{"interfaces/Column.html":{}}}],["rowselection",{"_index":1713,"title":{},"body":{"interfaces/Column.html":{}}}],["runs",{"_index":1558,"title":{},"body":{"interfaces/Category.html":{}}}],["rxjs",{"_index":511,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{}}}],["s",{"_index":3836,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.dates",{"_index":3831,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.primary",{"_index":3827,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.unsubscribe",{"_index":1784,"title":{},"body":{"interfaces/Column.html":{}}}],["same",{"_index":469,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sample",{"_index":4440,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saved",{"_index":4267,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["saving",{"_index":1550,"title":{},"body":{"interfaces/Category.html":{}}}],["scale",{"_index":1110,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleband",{"_index":1108,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["scaleextent",{"_index":3867,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent([scaleextent/this.maxzoomdays",{"_index":3872,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent/this.minzoomdays",{"_index":3873,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scalefactor",{"_index":572,"title":{},"body":{"classes/BaseProvider.html":{}}}],["scalelinear",{"_index":2968,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scalelog",{"_index":2966,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["scaleordinal",{"_index":2967,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["scalequantile",{"_index":1109,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["scales",{"_index":1127,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleutc",{"_index":3124,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaling",{"_index":3466,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["scheme",{"_index":1124,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["schemeblues",{"_index":1027,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["schemecategory10",{"_index":2969,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["schemegreens",{"_index":1112,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["schemerdbu",{"_index":1113,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["schemereds",{"_index":1111,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["schemespectral",{"_index":1114,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["schemeylgnbu",{"_index":1115,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["scratch",{"_index":2288,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["scrollable",{"_index":1758,"title":{},"body":{"interfaces/Column.html":{}}}],["scrollend",{"_index":4735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrolling",{"_index":1726,"title":{},"body":{"interfaces/Column.html":{}}}],["scrollstart",{"_index":4734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":416,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["search?action=select&resultid=\"+resultid+\"&item=%22tag%3b\"+settings.date_column+\"%3b\"+date+\"%3b\"+date+\"%22",{"_index":3375,"title":{},"body":{"components/ResultTimeline.html":{}}}],["searches",{"_index":3589,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchinactive",{"_index":224,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchservice",{"_index":792,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["searchservice.query",{"_index":1699,"title":{},"body":{"interfaces/Column.html":{}}}],["secondaryedgetypes",{"_index":2272,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["see",{"_index":2387,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["seeing",{"_index":1651,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["select",{"_index":196,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["select(node",{"_index":2414,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["select(nodes[i",{"_index":1218,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["select(this.gbrush.nativeelement",{"_index":3798,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["select(this.gx.nativeelement",{"_index":1167,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["select(this.gy.nativeelement",{"_index":1169,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["select(this.overlay.nativeelement",{"_index":3019,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["select.expression",{"_index":1875,"title":{},"body":{"interfaces/Column.html":{}}}],["selected",{"_index":1118,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["selectedcolor",{"_index":1422,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectedge(edge",{"_index":4209,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selecteditems",{"_index":2985,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["selectedrecordsprovider",{"_index":3384,"title":{"classes/SelectedRecordsProvider.html":{}},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["selectedrecordsproviderdemo",{"_index":4450,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectedrecordsproviderdemo(providerfactory",{"_index":4557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectedvalues",{"_index":1458,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectfield",{"_index":2555,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selecting",{"_index":2810,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["selection",{"_index":768,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[i",{"_index":3918,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[index",{"_index":3921,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchange",{"_index":1463,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchanged",{"_index":3785,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchangedevent",{"_index":1679,"title":{},"body":{"interfaces/Column.html":{}}}],["selectionend",{"_index":4758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectioneventtype",{"_index":1664,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.select",{"_index":1764,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.unselect",{"_index":1765,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectionremoved",{"_index":4756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selections",{"_index":1478,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selectionservice",{"_index":1377,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["selectionservice.events.subscribe(event",{"_index":3399,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionservice.getselecteditems",{"_index":3397,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionstart",{"_index":4757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectionsubscription",{"_index":3392,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectnode(node",{"_index":4206,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selector",{"_index":630,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["selects",{"_index":1061,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["self",{"_index":1217,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.append('svg:title').text(fulltext",{"_index":1227,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text",{"_index":1221,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text(text",{"_index":1226,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["semantic",{"_index":2503,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["semi",{"_index":3886,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["separator",{"_index":348,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["series",{"_index":3643,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["series.dates[i",{"_index":3953,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["server",{"_index":177,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":146,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":88,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["set",{"_index":1417,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["set(this.data.map(value",{"_index":1135,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["setcustomdateselect(range",{"_index":942,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["setdata",{"_index":4290,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["setdefaults",{"_index":4262,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["setfcroot",{"_index":2736,"title":{},"body":{"injectables/FusionChartsService.html":{}}}],["setfcroot(fcroot",{"_index":2745,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["setgroups",{"_index":4337,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["setmodel",{"_index":2648,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setmodel(model",{"_index":2657,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setoptions",{"_index":4293,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["setquery",{"_index":444,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["setquery(query",{"_index":454,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["sets",{"_index":456,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["settimeout",{"_index":4084,"title":{},"body":{"classes/TooltipManager.html":{}}}],["settings",{"_index":1667,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["setup",{"_index":2694,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["shape",{"_index":3715,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["shapes",{"_index":3731,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["shift",{"_index":3676,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shiftdate(date",{"_index":3681,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show",{"_index":860,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"classes/TooltipManager.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["show(data",{"_index":4070,"title":{},"body":{"classes/TooltipManager.html":{}}}],["show/hide",{"_index":863,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showall",{"_index":2072,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["showcount",{"_index":780,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showcounter",{"_index":1710,"title":{},"body":{"interfaces/Column.html":{}}}],["showcustomrange",{"_index":781,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showdatapoints",{"_index":3406,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["showing",{"_index":3129,"title":{},"body":{"interfaces/MoneyDatum.html":{},"miscellaneous/functions.html":{}}}],["showlabel",{"_index":1368,"title":{},"body":{"interfaces/Category.html":{}}}],["showlabels",{"_index":1405,"title":{},"body":{"interfaces/Category.html":{}}}],["showlegend",{"_index":3451,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shown",{"_index":485,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["showpercentvalues",{"_index":1409,"title":{},"body":{"interfaces/Category.html":{}}}],["showplotborder",{"_index":1388,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["showtooltip",{"_index":1400,"title":{},"body":{"interfaces/Category.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["showvalue",{"_index":1369,"title":{},"body":{"interfaces/Category.html":{}}}],["showvalues",{"_index":1408,"title":{},"body":{"interfaces/Category.html":{}}}],["side",{"_index":3502,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simple",{"_index":2342,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechange",{"_index":3701,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["simplechanges",{"_index":824,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["simply",{"_index":3855,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simultaneous",{"_index":2255,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sinequa",{"_index":1790,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"properties.html":{}}}],["sinequa/analytics/tooltip",{"_index":1117,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sinequa/components",{"_index":4503,"title":{},"body":{"dependencies.html":{}}}],["sinequa/components/action",{"_index":38,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/advanced",{"_index":847,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["sinequa/components/collapse",{"_index":1333,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["sinequa/components/facet",{"_index":42,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/modal",{"_index":40,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/result",{"_index":44,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/search",{"_index":849,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/selection",{"_index":1276,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"modules/NgxChartsModule.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sinequa/components/user",{"_index":1666,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/utils",{"_index":36,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{}}}],["sinequa/core/app",{"_index":99,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"injectables/GoogleMapsService.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/base",{"_index":101,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/intl",{"_index":34,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["sinequa/core/modal",{"_index":1670,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["sinequa/core/web",{"_index":87,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sinequacomponentsmodule",{"_index":4489,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["single",{"_index":1714,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["size",{"_index":541,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sizeopened",{"_index":3721,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["skip",{"_index":208,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["skip/count",{"_index":2405,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["skips",{"_index":183,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["slantlabel",{"_index":4655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slices",{"_index":1382,"title":{},"body":{"interfaces/Category.html":{},"miscellaneous/variables.html":{}}}],["slicingend",{"_index":4693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slicingstart",{"_index":4694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1347,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["somehow",{"_index":4152,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sort",{"_index":1312,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/NodeData.html":{}}}],["sort((a,b",{"_index":3990,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sort((a,b)=>a",{"_index":3929,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sortchangedevent",{"_index":1683,"title":{},"body":{"interfaces/Column.html":{}}}],["sorted",{"_index":1795,"title":{},"body":{"interfaces/Column.html":{}}}],["sorting",{"_index":1935,"title":{},"body":{"interfaces/Column.html":{}}}],["sorts",{"_index":1743,"title":{},"body":{"interfaces/Column.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"modules/GoogleMapsModule.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"miscellaneous/typealiases.html":{}}}],["sourcecsv",{"_index":1606,"title":{},"body":{"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sourcenode",{"_index":194,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenode.type.field",{"_index":213,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenodes",{"_index":2285,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.filter(node",{"_index":2296,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.find(node",{"_index":2293,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.map(node",{"_index":2298,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourceproviders",{"_index":2274,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcestr",{"_index":1600,"title":{},"body":{"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["special",{"_index":2139,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["specific",{"_index":329,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["specifically",{"_index":4538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":2261,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["specifying",{"_index":139,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["split",{"_index":3146,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["spring",{"_index":4249,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstant",{"_index":4243,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol",{"_index":4234,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol.value",{"_index":4252,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantpref",{"_index":4270,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlength",{"_index":4242,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol",{"_index":4232,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol.value",{"_index":4250,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthpref",{"_index":4268,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sq",{"_index":631,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sqdatasource",{"_index":1690,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["sqdatasource(this.results",{"_index":1930,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.filterchanged",{"_index":2037,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.sortchanged",{"_index":2039,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource.exprtomodel(filtertype",{"_index":1874,"title":{},"body":{"interfaces/Column.html":{}}}],["sqmessage",{"_index":689,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{}}}],["sqmessage:{values",{"_index":1231,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["square",{"_index":875,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sqvalue",{"_index":3257,"title":{},"body":{"components/NgxChart.html":{}}}],["sqvalue:item.$column",{"_index":969,"title":{},"body":{"components/BsFacetDate.html":{}}}],["sr.1",{"_index":4510,"title":{},"body":{"dependencies.html":{}}}],["standalone",{"_index":1361,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["standard",{"_index":525,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["star",{"_index":2377,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["start",{"_index":1194,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["startll",{"_index":2894,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["state",{"_index":472,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["statement",{"_index":3782,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["statements",{"_index":4371,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1622,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["statistical",{"_index":2502,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["steve",{"_index":4580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stop",{"_index":3820,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["store",{"_index":106,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["stored",{"_index":2310,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["stores",{"_index":179,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["storing",{"_index":2792,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["strange",{"_index":1444,"title":{},"body":{"interfaces/Category.html":{}}}],["stream",{"_index":1291,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["strength",{"_index":2382,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["string",{"_index":84,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["strings",{"_index":1095,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["stroke",{"_index":3698,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["structural",{"_index":467,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["structuraldisplaytype",{"_index":2076,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structuraledgetype",{"_index":446,"title":{"interfaces/StructuralEdgeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["structuraledgetype).display",{"_index":2179,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraledgetype).field",{"_index":2078,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraltriggertype",{"_index":2071,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structure",{"_index":63,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["structured",{"_index":2347,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["structures",{"_index":2413,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["style",{"_index":1346,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"classes/TooltipManager.html":{}}}],["style(\"text",{"_index":1192,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["style.ts",{"_index":4408,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stylers",{"_index":4617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":624,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["styleurls",{"_index":761,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sub",{"_index":2814,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["subject",{"_index":427,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.error(err",{"_index":3543,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(config",{"_index":3528,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(d",{"_index":3540,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(t",{"_index":3551,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(this.getrecordsasevents(config",{"_index":3547,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subscribe",{"_index":1759,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["subscribe((value",{"_index":900,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["subscribe(datasets",{"_index":4143,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["subscribe(results",{"_index":488,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["subscribe(this.ready",{"_index":2911,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["subscription",{"_index":853,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["subscriptions",{"_index":868,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["successfully",{"_index":4296,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["super",{"_index":871,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["super(name",{"_index":189,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getnodeactions(node",{"_index":355,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getprovideractions",{"_index":334,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.onnodeclicked(node",{"_index":2327,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["support",{"_index":134,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["supported",{"_index":2801,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["svg",{"_index":1205,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["svggelement",{"_index":3959,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["svgrectelement",{"_index":3167,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["swap",{"_index":2492,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["swimlane/ngx",{"_index":1614,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["switch(col.$column?.etype",{"_index":1820,"title":{},"body":{"interfaces/Column.html":{}}}],["switch(resolution",{"_index":3682,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["switch(type",{"_index":1639,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["switching",{"_index":3426,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sync",{"_index":1895,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["synchronously",{"_index":293,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["syncing",{"_index":4258,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["syntax",{"_index":1057,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["system",{"_index":1209,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["systematically",{"_index":123,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":1173,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"classes/TooltipManager.html":{}}}],["table",{"_index":2041,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4501,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":2057,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["taken",{"_index":3386,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["takes",{"_index":2061,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["taking",{"_index":2508,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["talking",{"_index":4577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":4198,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["target",{"_index":2129,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tasks",{"_index":4173,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["tell",{"_index":1872,"title":{},"body":{"interfaces/Column.html":{}}}],["tells",{"_index":1794,"title":{},"body":{"interfaces/Column.html":{}}}],["temp",{"_index":2493,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["template",{"_index":623,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateref",{"_index":1356,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateurl",{"_index":648,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["test",{"_index":2192,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tests",{"_index":169,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":344,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["text.length",{"_index":1224,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text.slice(0",{"_index":1225,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text:hover",{"_index":1251,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["textlength",{"_index":1219,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["theme",{"_index":1015,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["themselves",{"_index":4547,"title":{},"body":{"miscellaneous/functions.html":{}}}],["there's",{"_index":4016,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this._actions",{"_index":4158,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.concat(actions",{"_index":4169,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(providersactionlist",{"_index":4177,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.clearfilters",{"_index":4165,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.refreshaction",{"_index":4178,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._data",{"_index":1517,"title":{},"body":{"interfaces/Category.html":{}}}],["this._field",{"_index":869,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this._filterinput",{"_index":2030,"title":{},"body":{"interfaces/Column.html":{}}}],["this._fusionchartsstatice",{"_index":2758,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["this._networkinitialized",{"_index":4184,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectededge",{"_index":4210,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectednode",{"_index":4207,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.activateaction",{"_index":512,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.active",{"_index":347,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["this.addaggregationnodes(item",{"_index":242,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.addcustomedge(node",{"_index":2117,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.adddynamicedges([node",{"_index":2325,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.adddynamicedges(sourcenodes",{"_index":2308,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.addedge(edge",{"_index":2449,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addedge(edges",{"_index":2450,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(node",{"_index":2444,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(nodes",{"_index":2445,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addrecordnodes(records",{"_index":2089,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledge(data",{"_index":2124,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledges(node",{"_index":2100,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.advancedservice.validators.date(this.field",{"_index":881,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.advancedservice.validators.range(this.field",{"_index":880,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.aggrdata",{"_index":1532,"title":{},"body":{"interfaces/Category.html":{}}}],["this.aggrdata?.istree",{"_index":1573,"title":{},"body":{"interfaces/Category.html":{}}}],["this.aggrdata?.items?.map(item",{"_index":1518,"title":{},"body":{"interfaces/Category.html":{}}}],["this.aggregation",{"_index":1481,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.aggregation?.name",{"_index":2688,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregationname",{"_index":2692,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregations",{"_index":2561,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.allowcustomrange",{"_index":878,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.appservice",{"_index":1931,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getccaggregation(aggregation",{"_index":3623,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getccaggregation(aggregationname",{"_index":928,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getcolumn(a.column",{"_index":2677,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumn(col.field",{"_index":1801,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getcolumnalias(col",{"_index":2679,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumnalias(this.appservice.getcolumn(colid",{"_index":1883,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.issortable(col.field",{"_index":1813,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.istree(this.field",{"_index":2687,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.parseexpr(select.expression",{"_index":3490,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.area",{"_index":3757,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.area.y0(this.y(0",{"_index":3775,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.attached",{"_index":1655,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.autohide",{"_index":1486,"title":{},"body":{"interfaces/Category.html":{}}}],["this.autoresize",{"_index":1903,"title":{},"body":{"interfaces/Column.html":{}}}],["this.bisectdate(series.dates",{"_index":3951,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush",{"_index":3797,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior",{"_index":3777,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior.move",{"_index":3898,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.selectall(\".grip",{"_index":3803,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior",{"_index":3766,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.extent([[0",{"_index":3776,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.move(this.brush",{"_index":3941,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushing",{"_index":3770,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection",{"_index":3924,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.buildchart",{"_index":1171,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.buildchart(!!this.transition",{"_index":1162,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.c",{"_index":3010,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.c.domain(this.data.map(d",{"_index":3071,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.cancelhide",{"_index":4079,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.cardcomponent?._collapsed",{"_index":1512,"title":{},"body":{"interfaces/Category.html":{}}}],["this.categories",{"_index":3073,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.cdref.detectchanges",{"_index":3029,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.chart",{"_index":1498,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.chart.update",{"_index":1629,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.chartobj",{"_index":1548,"title":{},"body":{"interfaces/Category.html":{}}}],["this.charttype",{"_index":2579,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.checkdatachanges(changes[\"data",{"_index":3791,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.checkselectionchange(this.selection",{"_index":3900,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.clearfilters",{"_index":1468,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.clearfiltersaction",{"_index":872,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.clickedrecord",{"_index":2869,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.closed",{"_index":664,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.coldefs",{"_index":1797,"title":{},"body":{"interfaces/Column.html":{}}}],["this.coldefs.map(col",{"_index":1843,"title":{},"body":{"interfaces/Column.html":{}}}],["this.color",{"_index":1156,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.colors",{"_index":2582,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors.length",{"_index":2583,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors[index",{"_index":2589,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colorscheme",{"_index":2581,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.columns",{"_index":1735,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns.map(c",{"_index":1952,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns?.map((col,i",{"_index":1798,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction",{"_index":1756,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children",{"_index":1842,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children?.find(a",{"_index":1955,"title":{},"body":{"interfaces/Column.html":{}}}],["this.context",{"_index":296,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["this.context.appservice.formatservice.formatfieldvalue({value",{"_index":552,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getccaggregation(aggregation",{"_index":370,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.appservice.getcolumn(type.field",{"_index":550,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getplurallabel(col",{"_index":373,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.appservice.parseexpr(item.value.tostring",{"_index":275,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.edges",{"_index":4154,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.edges.clear",{"_index":4137,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.exprbuilder.concatandexpr([exprfrom",{"_index":619,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(edge.type.field",{"_index":601,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(node.type.field",{"_index":589,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodefrom.type.field",{"_index":614,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodeto.type.field",{"_index":617,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnode",{"_index":357,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnodewith",{"_index":367,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.fetchmoreagg",{"_index":351,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch",{"_index":588,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch2",{"_index":608,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(col",{"_index":374,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.name",{"_index":4130,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.nodes.clear",{"_index":4136,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.searchservice.getmultipleresults(_queries",{"_index":2306,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(query",{"_index":223,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(this.query",{"_index":487,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.context.searchservice.query",{"_index":202,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.convertaggregationitems(el",{"_index":1544,"title":{},"body":{"interfaces/Category.html":{}}}],["this.convertaggregationitems(item",{"_index":1519,"title":{},"body":{"interfaces/Category.html":{}}}],["this.copyaction",{"_index":2240,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.copytoclipboard",{"_index":1907,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createactions",{"_index":1781,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createchartoptions",{"_index":2600,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.createcolumns",{"_index":1772,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createdatapoints(aggregation.items",{"_index":3646,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.createedge(this.edgetype",{"_index":2315,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.createedge(type",{"_index":2150,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createexpandaction(type",{"_index":362,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.createnetwork",{"_index":4313,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.createnode(this.nodetype",{"_index":2096,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createnode(type.nodetypes[1",{"_index":2134,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createrows",{"_index":1773,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createtimeline",{"_index":4352,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.currentrange",{"_index":3477,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[0",{"_index":3478,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[1",{"_index":3481,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentselection",{"_index":3901,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[0",{"_index":3892,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[1",{"_index":3895,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.dampingpref",{"_index":4224,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.data",{"_index":904,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data.filter(value",{"_index":1142,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.data.foreach(d",{"_index":3041,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.data.items",{"_index":2574,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.data.length",{"_index":3819,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.data.push(datum",{"_index":3040,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data?.column",{"_index":870,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.items",{"_index":923,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.items?.filter((item",{"_index":924,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.map(series",{"_index":3949,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.datafiltered",{"_index":1141,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.datapoints",{"_index":2572,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.find(_datapoint",{"_index":2606,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.findindex(datapoint",{"_index":2585,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.push",{"_index":2575,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.dataset",{"_index":2289,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.dataset.addnodes(node",{"_index":2099,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.clear",{"_index":298,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id",{"_index":2194,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id).foreach(e",{"_index":2205,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getconnectednodes(node.id",{"_index":323,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.dataset.getnode(node.id",{"_index":2196,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getnode(this.getnodeid(this.nodetype",{"_index":2093,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.hasnode(node.id",{"_index":2329,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.dataset.merge(data",{"_index":290,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.merge(dataset",{"_index":2170,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.datasource",{"_index":1503,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{}}}],["this.datasource.appservice",{"_index":2681,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.category?.length",{"_index":1487,"title":{},"body":{"interfaces/Category.html":{}}}],["this.datasource.chart",{"_index":1493,"title":{},"body":{"interfaces/Category.html":{}}}],["this.datasource.facetservice",{"_index":2682,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.latestresults",{"_index":2675,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource?.destroy",{"_index":1939,"title":{},"body":{"interfaces/Column.html":{}}}],["this.daterangecontrol",{"_index":879,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.daterangecontrol.setvalue([from",{"_index":893,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.daterangecontrol.valuechanges",{"_index":896,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.dates",{"_index":3318,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.debouncesync",{"_index":4256,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.defaultcolor",{"_index":1542,"title":{},"body":{"interfaces/Category.html":{}}}],["this.defaultcolumnwidth",{"_index":1818,"title":{},"body":{"interfaces/Column.html":{}}}],["this.delay",{"_index":4086,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.displaycheckbox",{"_index":1834,"title":{},"body":{"interfaces/Column.html":{}}}],["this.displayemptydistributionintervals",{"_index":922,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.downloadcsv",{"_index":1911,"title":{},"body":{"interfaces/Column.html":{}}}],["this.drawgrips",{"_index":3779,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawxaxis",{"_index":3017,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawyaxis",{"_index":3014,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.edge.context.nodes.get(this.edge.from",{"_index":667,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edge.context.nodes.get(this.edge.to",{"_index":669,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edgeclicked.next(edge",{"_index":4211,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeclicked.subscribe((edge",{"_index":4122,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeidx.clear",{"_index":2440,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.delete(id",{"_index":2543,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.get(id",{"_index":2424,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.has(id",{"_index":2420,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.set(edge.id",{"_index":2539,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeseparator",{"_index":531,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.edgetype",{"_index":2301,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.getquery(node",{"_index":2300,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.nodetypes[0",{"_index":2281,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.trigger",{"_index":2328,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetypes.filter(type",{"_index":303,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.edgetypes.foreach(type",{"_index":301,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.edgetypes.length",{"_index":2202,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.el.nativeelement",{"_index":1211,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.el.nativeelement.style.setproperty",{"_index":1529,"title":{},"body":{"interfaces/Category.html":{}}}],["this.eventclicked.next(event",{"_index":3641,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events",{"_index":3319,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i",{"_index":3546,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i].next(this.getrecordsasevents(this.events[i",{"_index":3475,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.concat",{"_index":3989,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.events.findindex(e",{"_index":3473,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.foreach((config",{"_index":3545,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.map(_",{"_index":3516,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.expanded",{"_index":665,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.exportvaluegetter",{"_index":1969,"title":{},"body":{"interfaces/Column.html":{}}}],["this.exprbuilder.concatandexpr",{"_index":2920,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["this.exprbuilder.concatorexpr(exprs",{"_index":3626,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.exprbuilder.makeexpr(this.moneycolumn",{"_index":3175,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.exprbuilder.makeexpr(this.moneyvaluecolumn",{"_index":3111,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.exprbuilder.makenumericalexpr",{"_index":960,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.exprbuilder.makenumericalexpr(latitude",{"_index":2921,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["this.exprbuilder.makenumericalexpr(longitude",{"_index":2922,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["this.exprbuilder.makenumericalexpr(this.field",{"_index":962,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.exprbuilder.makerangeexpr(this.field",{"_index":959,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice",{"_index":1932,"title":{},"body":{"interfaces/Column.html":{}}}],["this.facetservice.addfiltersearch(this.getname",{"_index":1566,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.addfiltersearch(this.name",{"_index":913,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.clearfilterssearch(this.getname",{"_index":1470,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.clearfilterssearch(this.name",{"_index":877,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.filteredindex(this.data",{"_index":968,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.formatvalue(item",{"_index":1541,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregation",{"_index":935,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.getaggregation(aggregationname",{"_index":3579,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.facetservice.getaggregation(this.aggregation",{"_index":2599,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationitemsfiltered",{"_index":966,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.getaggregationlabel(agg",{"_index":2565,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationlabel(this.aggregation",{"_index":2559,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.getname",{"_index":1426,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.name",{"_index":909,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.facetservice.itemfiltered(this.getname",{"_index":1571,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.getname",{"_index":1567,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.name",{"_index":915,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.fetchaggregation(aggregationname",{"_index":3582,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.fetchaggregations([type",{"_index":352,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.fetchaggregations(types",{"_index":307,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.field",{"_index":961,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{}}}],["this.filterarea",{"_index":2817,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.filteredcolor",{"_index":1538,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fitbounds",{"_index":2841,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.fitnetwork",{"_index":4156,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form",{"_index":882,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["this.form.valid",{"_index":899,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.form.valuechanges.subscribe(_",{"_index":4247,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.formatcontent",{"_index":1780,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["this.formatdayrequest(selection[0",{"_index":3617,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatdayrequest(selection[1",{"_index":3618,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatservice.formatraw(params.value",{"_index":1925,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatraw(this.model.cell",{"_index":2244,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.formatvalue(params.value",{"_index":1923,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatvalue(this.model.cell",{"_index":2242,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.moneyformatter(datum.value",{"_index":3177,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.formbuilder.group",{"_index":883,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["this.fromnode",{"_index":666,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.georecords",{"_index":2830,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.georecords.length",{"_index":2854,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.getadjacentedges(neighbor.id).length",{"_index":2471,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid",{"_index":2477,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid).foreach(edge",{"_index":2465,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getaggregation(aggregationname",{"_index":929,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.getaggregation(config.aggregation",{"_index":3554,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(config.aggregation).pipe",{"_index":3561,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(this.aggregation",{"_index":905,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.getaggregationdata",{"_index":1514,"title":{},"body":{"interfaces/Category.html":{}}}],["this.getaggregationlabel(type.aggregation",{"_index":350,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.getd3timeinterval(resolution",{"_index":3664,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getdata(this.context",{"_index":519,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedge(e.id)?.visible",{"_index":2527,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedge(edge.id",{"_index":2505,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedgeid(fromnode",{"_index":566,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedges().filter(e",{"_index":2433,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.geteventaggregation(config",{"_index":3549,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getitem(datapoint",{"_index":2602,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getitem(label",{"_index":1556,"title":{},"body":{"interfaces/Category.html":{}}}],["this.getitem(this.datapoints[index",{"_index":2587,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getmarkeroptions(rec.record",{"_index":2833,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.getmarkeroptions(record",{"_index":2850,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.getname",{"_index":1534,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getnode(e.from",{"_index":2478,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(edge.from",{"_index":2466,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(n.id)?.visible",{"_index":2525,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(node.id",{"_index":2488,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodeid(type",{"_index":553,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodes().filter(n",{"_index":2430,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodevalue(node",{"_index":590,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodefrom",{"_index":615,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodeto",{"_index":618,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(sourcenode",{"_index":215,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.getrangevalue",{"_index":888,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.getstyle(orientation",{"_index":4080,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.gettimeseries(agg",{"_index":3538,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gettimeseries(bestaggregation",{"_index":3607,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gmaps.makeexpr(bounds",{"_index":2823,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.gravitypref",{"_index":4228,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.gridactions",{"_index":1888,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(action",{"_index":1891,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(new",{"_index":1894,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(this.columnsaction",{"_index":1893,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi",{"_index":1986,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi.setdatasource(this.datasource",{"_index":1854,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.exportdataascsv(this.getexportparams",{"_index":1978,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.foreachnode(node",{"_index":1766,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getdataascsv(this.getexportparams",{"_index":1974,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getselectedrows",{"_index":2003,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.refreshcells({force",{"_index":1984,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel",{"_index":1948,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel(model",{"_index":1876,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi",{"_index":1851,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate",{"_index":1949,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate(model",{"_index":1886,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.autosizeallcolumns",{"_index":1981,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.setcolumnvisible(col.field",{"_index":1845,"title":{},"body":{"interfaces/Column.html":{}}}],["this.grips",{"_index":3802,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"path",{"_index":3810,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"text",{"_index":3812,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.attr(\"display",{"_index":3917,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall(\"path\").attr(\"d",{"_index":3778,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall('.grip",{"_index":3920,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupedevents",{"_index":3857,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupevents(5",{"_index":3858,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hasnode(edge.to",{"_index":2537,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.height",{"_index":1153,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hide",{"_index":4085,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.hiderecordnode",{"_index":2098,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.hidetooltiptimeout",{"_index":4083,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.infowindow.close",{"_index":2864,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.infowindow.open(marker",{"_index":2871,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.infowindow?.close",{"_index":2838,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.initdone",{"_index":3383,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.initialized.emit(this.visnetwork",{"_index":4326,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.initialized.emit(this.vistimeline",{"_index":4362,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.initialized.next(this.chartobj",{"_index":1551,"title":{},"body":{"interfaces/Category.html":{}}}],["this.initnodes",{"_index":1536,"title":{},"body":{"interfaces/Category.html":{}}}],["this.innerheight",{"_index":3768,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.innerwidth",{"_index":3005,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.instance",{"_index":3754,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.events.subscribe(e",{"_index":3752,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.events.subscribe(event",{"_index":1472,"title":{},"body":{"interfaces/Category.html":{}}}],["this.intlservice.formatdate(this.xt.invert(selection[index",{"_index":3922,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatmessage(col.$column?.label",{"_index":1806,"title":{},"body":{"interfaces/Column.html":{}}}],["this.intlservice.formatmessage(p.name",{"_index":4175,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.intlservice.formatnumber(value",{"_index":2593,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.intlsubscription",{"_index":3751,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlsubscription.unsubscribe",{"_index":3969,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.isedgevisible(type",{"_index":2136,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.isfilteractive",{"_index":2695,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.isfiltered(item",{"_index":912,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{}}}],["this.isfiltered(obj",{"_index":1565,"title":{},"body":{"interfaces/Category.html":{}}}],["this.isinitialized",{"_index":4310,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["this.isrefreshing",{"_index":1505,"title":{},"body":{"interfaces/Category.html":{}}}],["this.isselected(item",{"_index":1539,"title":{},"body":{"interfaces/Category.html":{}}}],["this.istree",{"_index":1429,"title":{},"body":{"interfaces/Category.html":{},"components/FacetWrapperComponent.html":{}}}],["this.itemclickevent",{"_index":1627,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.itemclickevent.emit(datapoint",{"_index":1659,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.items",{"_index":921,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{}}}],["this.items.push({id",{"_index":3343,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.splice(0",{"_index":3317,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.latitudefield",{"_index":2824,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.line",{"_index":3764,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.localechange",{"_index":1471,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.localechange.unsubscribe",{"_index":1476,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.longitudefield",{"_index":2825,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.makedata",{"_index":2597,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.makedatasource",{"_index":1853,"title":{},"body":{"interfaces/Column.html":{}}}],["this.map",{"_index":2834,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.map.getbounds",{"_index":2821,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.map?.fitbounds(bounds",{"_index":2860,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.margin.bottom",{"_index":1155,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.left",{"_index":1149,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.right",{"_index":1150,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.top",{"_index":1154,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.max_dates",{"_index":3357,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.maxaggregationdate",{"_index":3537,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.maxdate",{"_index":3482,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.maxx",{"_index":1137,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.maxy",{"_index":1140,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.mergedatasets(datasets.filter(d",{"_index":4144,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.mergedevents",{"_index":3517,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mergedtimeseries",{"_index":3511,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.min_dates",{"_index":3356,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.min_year",{"_index":3341,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.minaggregationdate",{"_index":3536,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mindate",{"_index":3479,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.minfit*0.5",{"_index":2859,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.minzoomdays",{"_index":3851,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.modalservice.open(datamodalcomponent",{"_index":1994,"title":{},"body":{"interfaces/Column.html":{}}}],["this.model.cccolumn",{"_index":2243,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.moneyaggregation",{"_index":3036,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.mutatenode(node",{"_index":2362,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.mutatenodes(sourcenodes",{"_index":2355,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.name",{"_index":967,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.neighbors",{"_index":1289,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type",{"_index":1308,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type].push",{"_index":1310,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.networkservice.click.subscribe((eventdata",{"_index":4188,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.fit(this.name",{"_index":4182,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.off(this.name",{"_index":4212,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.on(this.name",{"_index":4187,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.setoptions(this.name",{"_index":4190,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.ngonchanges",{"_index":2566,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.node",{"_index":1287,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.edges",{"_index":1290,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.nodes.get(id",{"_index":1297,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.count",{"_index":1288,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.id",{"_index":1294,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodecache.has(node.id",{"_index":2299,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodecache[node.id",{"_index":2363,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodeclicked.next(node",{"_index":4208,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodeclicked.subscribe((node",{"_index":4119,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodedata",{"_index":1286,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodeidx.clear",{"_index":2439,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.delete(id",{"_index":2541,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.get(id",{"_index":2422,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.has(id",{"_index":2418,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.set(node.id",{"_index":2491,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx[id",{"_index":2518,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodetype",{"_index":2106,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.getquery(node",{"_index":2354,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.name",{"_index":2109,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.nodeoptions",{"_index":2373,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.nodeoptions(node",{"_index":2374,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.trigger",{"_index":2375,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.onaxisclicked(d",{"_index":1198,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.onbrush",{"_index":3772,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onbrushend",{"_index":3774,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onclick.next(item",{"_index":1570,"title":{},"body":{"interfaces/Category.html":{}}}],["this.onmousemove",{"_index":3021,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.onmousemove(e",{"_index":3133,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmouseout",{"_index":3135,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onnetworkclick(eventdata",{"_index":4189,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onopensettings(true",{"_index":4265,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onresize",{"_index":1633,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.onzoom",{"_index":3875,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onzoomend",{"_index":3876,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.options",{"_index":2578,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.options.colorscheme",{"_index":1645,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.options.getitemcolor",{"_index":2584,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.optionsprefs",{"_index":4191,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics",{"_index":4216,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut",{"_index":4218,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.centralgravity",{"_index":4227,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.damping",{"_index":4223,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.gravitationalconstant",{"_index":4225,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springconstant",{"_index":4221,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springlength",{"_index":4219,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.params",{"_index":2683,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.coldef.field",{"_index":2686,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.rowmodel['datasource",{"_index":2674,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.parseentity(item",{"_index":3038,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.parseentity(money.value",{"_index":3143,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.plottooltext",{"_index":1500,"title":{},"body":{"interfaces/Category.html":{}}}],["this.point(this.gbrush.nativeelement",{"_index":3946,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.point(this.overlay.nativeelement",{"_index":3161,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.prefs.delete(\"ag",{"_index":1847,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.delete(this.name",{"_index":4263,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.get(\"ag",{"_index":1778,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.get(this.name",{"_index":4269,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.set(\"ag",{"_index":1848,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.set(this.name",{"_index":4248,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.sync",{"_index":1963,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["this.processednodes",{"_index":2291,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.filter(id",{"_index":2292,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.indexof(node.id",{"_index":2297,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.push(node.id",{"_index":2324,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.splice(0",{"_index":2323,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processnode(node",{"_index":2330,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.provider",{"_index":585,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.provider.next(this.dataset",{"_index":243,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.providers.foreach(p",{"_index":4120,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providers.map(p",{"_index":4141,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription",{"_index":4140,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription.unsubscribe",{"_index":4139,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.query",{"_index":486,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["this.r",{"_index":3008,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r(datum.count",{"_index":3117,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r.domain(rextent",{"_index":3070,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.rangechange.next(this.xt.domain",{"_index":3945,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.rangeinit.next(this.xt.domain",{"_index":3854,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.ready",{"_index":1511,"title":{},"body":{"interfaces/Category.html":{}}}],["this.record.id",{"_index":3339,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.record.modified.length>=10",{"_index":3362,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.recordclicked.next(datum.record",{"_index":3174,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.recordclicked.next(record.record",{"_index":2870,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.refreshaction",{"_index":4124,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.removeedge(id",{"_index":2459,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedge(ids",{"_index":2460,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedges(edge.id",{"_index":2468,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(id",{"_index":2456,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(ids",{"_index":2457,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenodes(neighbor.id",{"_index":2472,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.rendercell",{"_index":1811,"title":{},"body":{"interfaces/Column.html":{}}}],["this.replacecurrent",{"_index":914,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.repulsionpref",{"_index":4226,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.resetaction",{"_index":520,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.resetstate",{"_index":1898,"title":{},"body":{"interfaces/Column.html":{}}}],["this.resolvefusioncharts(fcroot.core",{"_index":2755,"title":{},"body":{"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{}}}],["this.results",{"_index":936,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.aggregations",{"_index":3034,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.results.aggregations.find(a",{"_index":2676,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.results.records",{"_index":1591,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.records?.foreach(record",{"_index":3141,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.results?.records",{"_index":1860,"title":{},"body":{"interfaces/Column.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.rowdata",{"_index":1859,"title":{},"body":{"interfaces/Column.html":{}}}],["this.rowmodeltype",{"_index":1852,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice",{"_index":938,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.searchservice.breadcrumbs.findselect(this.name",{"_index":4164,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.searchservice.getresults(query",{"_index":3586,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query",{"_index":1857,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.addselect(expr",{"_index":2826,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.findselect(this.name",{"_index":3487,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.orderby",{"_index":1941,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(i",{"_index":1946,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(this.name",{"_index":2816,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.querystream.subscribe",{"_index":887,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.searchservice.search",{"_index":1947,"title":{},"body":{"interfaces/Column.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search(undefined",{"_index":3627,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.select(node",{"_index":4127,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedcolor",{"_index":1432,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedge",{"_index":4131,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(edge",{"_index":4205,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(this.context.edges.get(event.edges[0",{"_index":4201,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selecteditems",{"_index":3076,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selecteditems.add(item.value",{"_index":3079,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectedvalues.add(v.tolowercase",{"_index":1605,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(v.value.tolowercase",{"_index":1607,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(val.tolowercase",{"_index":1601,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.clear",{"_index":1590,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.has((item",{"_index":1430,"title":{},"body":{"interfaces/Category.html":{}}}],["this.selectedvalues.has(utils.tosqlvalue(item.value).tolowercase",{"_index":1433,"title":{},"body":{"interfaces/Category.html":{}}}],["this.selectfield",{"_index":2556,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield.update",{"_index":2598,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selection",{"_index":895,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selection[0].gettime",{"_index":3501,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selection[1].gettime",{"_index":3500,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionchange",{"_index":1474,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionchange.next(this.currentselection",{"_index":3934,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange.unsubscribe",{"_index":1477,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionservice",{"_index":1933,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.events.subscribe",{"_index":2828,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.selectionservice.events.subscribe(e",{"_index":2999,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.events.subscribe(event",{"_index":1475,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionservice.getselectedids",{"_index":2005,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.getselecteditems().foreach(r",{"_index":3077,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.toggleselectedrecords(row",{"_index":2016,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.toggleselectedrecords({id",{"_index":2011,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionsubscription",{"_index":3398,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectionsubscription?.unsubscribe",{"_index":3403,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectnode",{"_index":4132,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(node",{"_index":4204,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(this.context.nodes.get(event.nodes[0",{"_index":4203,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.setcustomdateselect(range",{"_index":965,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.setcustomdateselect(value",{"_index":901,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.shiftdate(item.date",{"_index":3675,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.showcustomrange",{"_index":917,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.showlabels",{"_index":1530,"title":{},"body":{"interfaces/Category.html":{}}}],["this.showpercentvalues",{"_index":1502,"title":{},"body":{"interfaces/Category.html":{}}}],["this.showtooltip",{"_index":1499,"title":{},"body":{"interfaces/Category.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.showvalues",{"_index":1501,"title":{},"body":{"interfaces/Category.html":{}}}],["this.skips[type.aggregation",{"_index":302,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+(sourcenode?.id",{"_index":209,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+node.id",{"_index":326,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.springconstantpref",{"_index":4222,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.springlengthpref",{"_index":4220,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.style",{"_index":2840,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.sub",{"_index":2827,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.sub.unsubscribe",{"_index":2872,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.subscriptions.foreach(s",{"_index":1783,"title":{},"body":{"interfaces/Column.html":{}}}],["this.subscriptions.map((item",{"_index":907,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.subscriptions.push",{"_index":886,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.subscriptions.push(this.selectionservice.events.subscribe(event",{"_index":1761,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tickformatter",{"_index":2580,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.timeline.addcustomtime(this.record.modified.substring(0,10",{"_index":3363,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.on('select",{"_index":3364,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.removecustomtime(\"date",{"_index":3359,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeseries",{"_index":926,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries$[i",{"_index":3525,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.foreach((config",{"_index":3524,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.map(_",{"_index":3509,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.push",{"_index":930,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.toggleformatcontent(action",{"_index":1914,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tonode",{"_index":668,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.toolbaractions",{"_index":1889,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltip$.next(undefined",{"_index":4082,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.tooltip$.next({data",{"_index":4081,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.tooltip$.value",{"_index":4088,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.tooltip$.value?.data",{"_index":4089,"title":{},"body":{"classes/TooltipManager.html":{}}}],["this.tooltipdatapoints",{"_index":3948,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipmanager.data",{"_index":4032,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipmanager.delayedhide",{"_index":3109,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.tooltipmanager.hide",{"_index":3030,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipvaluegetter",{"_index":1803,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltipx",{"_index":3160,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.turnofftooltip",{"_index":3138,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.uiservice.addelementresizelistener(this.wrapper.nativeelement",{"_index":1632,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.uiservice.copytoclipboard(data",{"_index":1976,"title":{},"body":{"interfaces/Column.html":{}}}],["this.uiservice.copytoclipboard(this.data",{"_index":2241,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.uiservice.removeelementresizelistener(this.wrapper.nativeelement",{"_index":1635,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.updateactions",{"_index":4126,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updateaxes",{"_index":3032,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatebrush",{"_index":3795,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatechart",{"_index":1631,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatecombinedaggregation(config",{"_index":3634,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatedata",{"_index":1473,"title":{},"body":{"interfaces/Category.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["this.updatedataset(records",{"_index":3401,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedataset(results.aggregations",{"_index":226,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.updatedataset(results.records",{"_index":489,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.updatedataset(this.selectionservice.getselecteditems",{"_index":3402,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedynamicdataset(array.from(map.values",{"_index":2283,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.updateevents",{"_index":3521,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatefilterstate(this.query",{"_index":1856,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updategeorecords",{"_index":2837,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["this.updategrips(this.brushselection",{"_index":3926,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateitems",{"_index":906,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.updateoptions",{"_index":4133,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updateplotsvaluedisplay",{"_index":1504,"title":{},"body":{"interfaces/Category.html":{}}}],["this.updatescales",{"_index":3031,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.updatescales(this.data",{"_index":3822,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateselecteditems",{"_index":3000,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.updateselectedvalues",{"_index":1516,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.updateselection",{"_index":3787,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatesortstate(this.query",{"_index":1858,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updatetimeline",{"_index":3316,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.updatetimeseries",{"_index":3513,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatetimeseries(this.timelineaggregation",{"_index":902,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.updatexaxis",{"_index":3753,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatezoom",{"_index":3823,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.viewinit",{"_index":1170,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.visnetwork",{"_index":4311,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.visnetworkcontainer",{"_index":4308,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.visnetworkdata",{"_index":4312,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.visnetworkoptions",{"_index":4325,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.visnetworkservice.create(this.visnetwork",{"_index":4324,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.visnetworkservice.destroy(this.visnetwork",{"_index":4322,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.visnetworkservice.setdata(this.visnetwork",{"_index":4319,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.visnetworkservice.setoptions(this.visnetwork",{"_index":4321,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["this.vistimeline",{"_index":4350,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelinecontainer",{"_index":4349,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelinegroups",{"_index":4358,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineitems",{"_index":4351,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineoptions",{"_index":4360,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineservice.createwithitems(this.vistimeline",{"_index":4361,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineservice.createwithitemsandgroups",{"_index":4359,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineservice.destroy(this.vistimeline",{"_index":4356,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineservice.setgroups(this.vistimeline",{"_index":4355,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineservice.setitems(this.name",{"_index":3382,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.vistimelineservice.setitems(this.vistimeline",{"_index":4353,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.vistimelineservice.setoptions(this.vistimeline",{"_index":4354,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["this.width",{"_index":1148,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.wrapper",{"_index":1656,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.x",{"_index":1145,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x(datum.category",{"_index":3114,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x(datum.date",{"_index":3179,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x(item.x",{"_index":1201,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.x.bandwidth",{"_index":3068,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain",{"_index":3074,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(this.data.map(d",{"_index":3065,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain(this.xt.domain",{"_index":3841,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(xextent",{"_index":3155,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x.range([0",{"_index":3016,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x_inner",{"_index":3006,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x_inner(datum.i",{"_index":3115,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.xaxis",{"_index":1166,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(axisbottom(this.xt).ticks(nticks",{"_index":3910,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(xaxis",{"_index":3084,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.xaxis$.selectall(\".domain\").remove",{"_index":3085,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis.call(axistop(this.x).ticksize(0",{"_index":1183,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\".domain\").remove",{"_index":1185,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\"text",{"_index":1187,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall('text').each(this.wrap",{"_index":1179,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.transition(t",{"_index":1176,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xt",{"_index":3756,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(d.date",{"_index":3760,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(event[0].date",{"_index":3967,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(events[0].date",{"_index":4038,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[0",{"_index":3893,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[1",{"_index":3896,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.domain",{"_index":3986,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.invert(this.tooltipx",{"_index":3947,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.invert(x",{"_index":3932,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y",{"_index":1151,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(d.value",{"_index":3763,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(datum.value",{"_index":3116,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y(item.y",{"_index":1202,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.y.domain(yextent",{"_index":3069,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.range([this.innerheight",{"_index":3013,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks(5",{"_index":3088,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.ticks(nticks",{"_index":3912,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis",{"_index":1168,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.call(yaxis",{"_index":3104,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.selectall(\".domain\").remove",{"_index":3105,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis.call(axisleft(this.y).ticksize(0",{"_index":1184,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\".domain\").remove",{"_index":1199,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\"text",{"_index":1200,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall('text').each(this.wrap",{"_index":1182,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.transition(t",{"_index":1180,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.zone.run",{"_index":1557,"title":{},"body":{"interfaces/Category.html":{}}}],["this.zoombehavior",{"_index":3871,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"end",{"_index":3864,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"zoom",{"_index":3863,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.transform(this.brush",{"_index":3865,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zooming",{"_index":3936,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["though",{"_index":3793,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["three",{"_index":4554,"title":{},"body":{"miscellaneous/functions.html":{}}}],["through",{"_index":1479,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["throw",{"_index":265,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["thumbnail",{"_index":4540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tick",{"_index":3095,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(format(\"~s",{"_index":3913,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(this.formatservice.moneyformatter",{"_index":3102,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tickformatter",{"_index":1618,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ticks",{"_index":3093,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ticks(5",{"_index":3157,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["ticksizeinner",{"_index":3100,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["tickvalues(yaxisticks",{"_index":3101,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tile",{"_index":1075,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["tile.clickable:hover",{"_index":1257,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tile.selected",{"_index":1261,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tilt",{"_index":1188,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["time",{"_index":470,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/functions.html":{}}}],["timeday",{"_index":3416,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeday.offset(date",{"_index":3691,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeformat",{"_index":3414,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeformat(\"%y",{"_index":3470,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timehour",{"_index":3417,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timehour.offset(date",{"_index":3686,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeinterval",{"_index":3663,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeinterval.offset(series[series.length",{"_index":3672,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline",{"_index":746,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{}}}],["timeline'},{'name",{"_index":715,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.component",{"_index":856,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"modules/FinanceModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline.component.html",{"_index":3125,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.scss",{"_index":3126,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.ts",{"_index":3123,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline.directive",{"_index":4368,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["timeline.directive.ts",{"_index":4328,"title":{},"body":{"directives/VisTimelineDirective.html":{},"coverage.html":{}}}],["timeline.directive.ts:102",{"_index":4345,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:116",{"_index":4343,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:145",{"_index":4344,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:34",{"_index":4333,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:45",{"_index":4339,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:56",{"_index":4335,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:67",{"_index":4340,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:79",{"_index":4341,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:82",{"_index":4332,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.directive.ts:92",{"_index":4346,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timeline.html",{"_index":3275,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.name",{"_index":4043,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.service",{"_index":3306,"title":{},"body":{"components/ResultTimeline.html":{},"directives/VisTimelineDirective.html":{}}}],["timeline.service.ts",{"_index":4498,"title":{},"body":{"coverage.html":{}}}],["timeline.ts",{"_index":3274,"title":{},"body":{"components/ResultTimeline.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline.ts:122",{"_index":3300,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:21",{"_index":3294,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:22",{"_index":3298,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:23",{"_index":3287,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:24",{"_index":3288,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:25",{"_index":3293,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:26",{"_index":3291,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:27",{"_index":3292,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:28",{"_index":3289,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:29",{"_index":3297,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:31",{"_index":3302,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:32",{"_index":3285,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:34",{"_index":3304,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:37",{"_index":3299,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:43",{"_index":3301,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline/.../facet",{"_index":4599,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["timeline/.../result",{"_index":4607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeline/.../timeline.component.ts",{"_index":4602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeline/bootstrap/facet",{"_index":755,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline/bootstrap/timeline",{"_index":4041,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.component.ts",{"_index":3700,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline/bootstrap/timeline.module.ts",{"_index":1329,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["timeline/esnext",{"_index":3305,"title":{},"body":{"components/ResultTimeline.html":{},"directives/VisTimelineDirective.html":{}}}],["timeline/money",{"_index":2702,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["timeline/result",{"_index":3273,"title":{},"body":{"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline/vis",{"_index":4327,"title":{},"body":{"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["timelineaggregation",{"_index":782,"title":{"interfaces/TimelineAggregation.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineaggregation).aggregation",{"_index":3620,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations",{"_index":3422,"title":{"interfaces/TimelineCombinedAggregations.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinecombinedaggregations).aggregations",{"_index":3633,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default",{"_index":3621,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default.aggregation",{"_index":3622,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinedata",{"_index":3431,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelinedate",{"_index":3411,"title":{"interfaces/TimelineDate.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timelinedate[]).concat(...primaryseries.map(s",{"_index":3830,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelinedate|undefined",{"_index":3744,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelineevent",{"_index":3412,"title":{"interfaces/TimelineEvent.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineevent[]).concat(...events",{"_index":3520,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation",{"_index":3428,"title":{"interfaces/TimelineEventAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventaggregation).aggregation",{"_index":3548,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation).subscribe",{"_index":3550,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventdata",{"_index":3432,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventtype",{"_index":3413,"title":{"interfaces/TimelineEventType.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["timelineheight",{"_index":783,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["timelineinitialized",{"_index":3278,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timelinelegendcomponent",{"_index":745,"title":{"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["timelinemargin",{"_index":784,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["timelineoptions",{"_index":3295,"title":{},"body":{"components/ResultTimeline.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/variables.html":{}}}],["timelinerecords",{"_index":3427,"title":{"interfaces/TimelineRecords.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinerecords).field",{"_index":3474,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelines",{"_index":3522,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineseries",{"_index":842,"title":{"interfaces/TimelineSeries.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineseries).dates",{"_index":3527,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinewidth",{"_index":785,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["timemonth",{"_index":3415,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timemonth.count(range[0",{"_index":3595,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timemonth.offset(date",{"_index":3692,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["times",{"_index":2269,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["timeseries",{"_index":769,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeseries$.error(err",{"_index":3609,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeseries$.next(d",{"_index":3608,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeweek",{"_index":3418,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeyear",{"_index":3419,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timline",{"_index":4342,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["timsort",{"_index":4525,"title":{},"body":{"dependencies.html":{}}}],["title",{"_index":342,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["to?.sethours(0",{"_index":955,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["to?.setminutes(0",{"_index":956,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["to?.setseconds(0",{"_index":957,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["todate",{"_index":3421,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["todate(this.selection[0].gettime",{"_index":3503,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["todate(this.selection[1].gettime()+interval*0.1",{"_index":3505,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["todo",{"_index":132,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["toeast",{"_index":2892,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["together",{"_index":3972,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["toggle",{"_index":513,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["togglecustomrange",{"_index":774,"title":{},"body":{"components/BsFacetDate.html":{}}}],["togglecustomrange(event",{"_index":829,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["toggleformatcontent(action",{"_index":1983,"title":{},"body":{"interfaces/Column.html":{}}}],["toggles",{"_index":1982,"title":{},"body":{"interfaces/Column.html":{}}}],["tonode",{"_index":559,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["tonode.id",{"_index":568,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tonorth",{"_index":2891,"title":{},"body":{"injectables/GoogleMapsService.html":{}}}],["toolbar",{"_index":1709,"title":{},"body":{"interfaces/Column.html":{}}}],["toolbaractions",{"_index":1702,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltext",{"_index":1370,"title":{},"body":{"interfaces/Category.html":{}}}],["tooltip",{"_index":1130,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{}}}],["tooltip'},{'name",{"_index":722,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["tooltip.left::after",{"_index":1352,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip.right::after",{"_index":1348,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip/tooltip",{"_index":4057,"title":{},"body":{"classes/TooltipManager.html":{},"coverage.html":{}}}],["tooltip/tooltip.component.ts",{"_index":1334,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["tooltip/tooltip.component.ts:51",{"_index":1354,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip/tooltip.component.ts:52",{"_index":1355,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip/tooltip.component.ts:53",{"_index":1358,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip::after",{"_index":1341,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltipdatapoints",{"_index":3743,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipmanager",{"_index":994,"title":{"classes/TooltipManager.html":{}},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"coverage.html":{}}}],["tooltips",{"_index":2998,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tooltiptemplate",{"_index":1625,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["tooltiptpl",{"_index":3727,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipvaluegetter",{"_index":1789,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltipx",{"_index":3131,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["top",{"_index":633,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{}}}],["top.px",{"_index":4093,"title":{},"body":{"classes/TooltipManager.html":{}}}],["total",{"_index":1233,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["transfer",{"_index":2522,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["transform",{"_index":3938,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transform.rescalex(this.x",{"_index":3940,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transformed",{"_index":2338,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transforms",{"_index":3655,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["transit",{"_index":4647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.line",{"_index":4648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.station",{"_index":4649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transition",{"_index":1016,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["transition().duration(this.transition",{"_index":1174,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["transitions",{"_index":1064,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["translate",{"_index":3919,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transparent",{"_index":1350,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["trash",{"_index":521,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tree",{"_index":626,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["treeaggregationnode",{"_index":1374,"title":{},"body":{"interfaces/Category.html":{}}}],["treeaggregationnode).$path!.tolowercase",{"_index":1431,"title":{},"body":{"interfaces/Category.html":{}}}],["treemapmodule",{"_index":3268,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["triangle",{"_index":3961,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["trigger",{"_index":162,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["trigger/display",{"_index":2054,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=onclick",{"_index":2063,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=oninsert",{"_index":2066,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["triggered",{"_index":1545,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triggers",{"_index":3631,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triple",{"_index":4559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":116,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"miscellaneous/variables.html":{}}}],["true}).pipe",{"_index":3587,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["true}).subscribe",{"_index":225,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["true}).subscribe(results",{"_index":2364,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["truncates",{"_index":1094,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["try",{"_index":1303,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{}}}],["turn",{"_index":400,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["turned",{"_index":2050,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["turning",{"_index":3963,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["two",{"_index":262,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":83,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/FusionChartInstance.html":{},"interfaces/FusionChartsEvent.html":{},"modules/FusionChartsModule.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type's",{"_index":1306,"title":{},"body":{"components/BsNodeInfoCard.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["type.count",{"_index":210,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.display",{"_index":2172,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.edgeoptions",{"_index":583,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.edgeoptions([fromnode",{"_index":584,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.field",{"_index":417,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["type.name}:${value",{"_index":534,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions",{"_index":556,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions(node",{"_index":557,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodetypes.length",{"_index":2159,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[0",{"_index":315,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.nodetypes[0].name",{"_index":2108,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[1",{"_index":325,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.parse!(recorddata",{"_index":2120,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse!(value",{"_index":2118,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse(item",{"_index":260,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.trigger",{"_index":304,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type:auditeventtype.search_timeline_usage",{"_index":3628,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["typealiases",{"_index":4595,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":4564,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo",{"_index":4451,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo(providerfactory",{"_index":4558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo",{"_index":4452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo(providerfactory",{"_index":4563,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":3570,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["types",{"_index":67,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["types.find(type",{"_index":236,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.foreach(type",{"_index":206,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.length",{"_index":306,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.map(type",{"_index":361,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["typically",{"_index":2392,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["uiservice",{"_index":1375,"title":{},"body":{"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["undefined",{"_index":156,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"injectables/GoogleMapsService.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"miscellaneous/variables.html":{}}}],["undefined).subscribe(res",{"_index":2307,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["underline",{"_index":1253,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["understand",{"_index":1862,"title":{},"body":{"interfaces/Column.html":{}}}],["undirected",{"_index":561,"title":{},"body":{"classes/BaseProvider.html":{}}}],["unfortunately",{"_index":3026,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["unique",{"_index":2193,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["unlimited",{"_index":2069,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["unselected",{"_index":3388,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["unsubscribe",{"_index":1782,"title":{},"body":{"interfaces/Column.html":{}}}],["until",{"_index":2064,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["untypedformbuilder",{"_index":790,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["untypedformcontrol",{"_index":836,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["untypedformcontrol(this.dampingpref",{"_index":4237,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["untypedformcontrol(this.gravitypref",{"_index":4241,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["untypedformcontrol(this.repulsionpref",{"_index":4239,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["untypedformcontrol(this.springconstantpref",{"_index":4235,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["untypedformcontrol(this.springlengthpref",{"_index":4233,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["untypedformgroup",{"_index":838,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["up",{"_index":1644,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/NgxChart.html":{},"interfaces/VisEvent.html":{}}}],["update",{"_index":686,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["update/reset",{"_index":3859,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateactions",{"_index":4162,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updateaxes",{"_index":3080,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatebrush",{"_index":3889,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatechart",{"_index":1628,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatecombinedaggregation",{"_index":3635,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatecombinedaggregation(config",{"_index":3593,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updated",{"_index":2482,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatedata",{"_index":1513,"title":{},"body":{"interfaces/Category.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["updatedataset(aggregations",{"_index":232,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["updatedataset(records",{"_index":2086,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["updatedatasets",{"_index":3192,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["updatedatasets(nodes",{"_index":2523,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["updatedynamicdataset(sourcenodes",{"_index":2286,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["updateevents",{"_index":3544,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["updatefilterstate(query",{"_index":1864,"title":{},"body":{"interfaces/Column.html":{}}}],["updategeorecords",{"_index":2843,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["updategrips(selection",{"_index":3916,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateitems",{"_index":920,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updateoptions",{"_index":4213,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updateplotsvaluedisplay",{"_index":1528,"title":{},"body":{"interfaces/Category.html":{}}}],["updater",{"_index":2557,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updaterange",{"_index":775,"title":{},"body":{"components/BsFacetDate.html":{}}}],["updaterange(range",{"_index":831,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updates",{"_index":192,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["updatescales(data",{"_index":3824,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateselecteditems",{"_index":3075,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["updateselectedvalues",{"_index":1589,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updateselection",{"_index":3899,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatesortstate(query",{"_index":1879,"title":{},"body":{"interfaces/Column.html":{}}}],["updatetimeline",{"_index":3279,"title":{},"body":{"components/ResultTimeline.html":{}}}],["updatetimeseries",{"_index":3523,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatetimeseries(aggregationname",{"_index":925,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updatexaxis",{"_index":3903,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatezoom",{"_index":3860,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updating",{"_index":3612,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["upon",{"_index":2361,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["url",{"_index":3374,"title":{},"body":{"components/ResultTimeline.html":{}}}],["usd",{"_index":3127,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["use",{"_index":460,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["used",{"_index":140,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["useful",{"_index":2017,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["user",{"_index":1071,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["userpreferences",{"_index":1665,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["users",{"_index":1991,"title":{},"body":{"interfaces/Column.html":{}}}],["uses",{"_index":3976,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["usevalue",{"_index":2726,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["using",{"_index":153,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["util",{"_index":4514,"title":{},"body":{"dependencies.html":{}}}],["utilities",{"_index":3970,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["utility",{"_index":3642,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils",{"_index":100,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"injectables/GoogleMapsService.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["utils.copy(this.options",{"_index":4214,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.copy(this.query",{"_index":201,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.copy(this.searchservice.query",{"_index":937,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.debounce",{"_index":4261,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.eqnc(a.name",{"_index":3139,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.eqnc(alias",{"_index":2680,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["utils.eqnc(type.aggregation",{"_index":237,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.equals(oldmodel",{"_index":2031,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend",{"_index":1799,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend(edge",{"_index":569,"title":{},"body":{"classes/BaseProvider.html":{}}}],["utils.extend(existingedge",{"_index":2521,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(existingnode",{"_index":2499,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(node",{"_index":554,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["utils.isnumber(value",{"_index":2591,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["utils.isundefined(r",{"_index":3120,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x",{"_index":3181,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x_inner",{"_index":3119,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["utils.isundefined(y",{"_index":3121,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.merge",{"_index":4656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.subscribe(this.intlservice.events",{"_index":1634,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["utils.tolowercase(this.options.type",{"_index":1637,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["utilsmodule",{"_index":35,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{}}}],["uuid",{"_index":4523,"title":{},"body":{"dependencies.html":{}}}],["v!==this.aggregation",{"_index":2563,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["val",{"_index":1596,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["val.foreach(v",{"_index":1603,"title":{},"body":{"interfaces/Category.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["valid",{"_index":3055,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["validity",{"_index":3838,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["value",{"_index":117,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"injectables/FusionChartsService.html":{},"injectables/FusionChartsStatic.html":{},"injectables/GoogleMapsService.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"classes/TooltipManager.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["value.x))).slice(0",{"_index":1136,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value.y))).slice(0",{"_index":1139,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value[\"display",{"_index":2128,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[\"value",{"_index":2127,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[0",{"_index":889,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["value[1",{"_index":891,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["value_amount",{"_index":2980,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valueamounts",{"_index":2983,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valued",{"_index":2114,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["valueitem",{"_index":2236,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["values",{"_index":81,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["valuestr",{"_index":3052,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["var",{"_index":703,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["variable",{"_index":4161,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["variables",{"_index":4600,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":4593,"title":{},"body":{"properties.html":{}}}],["vertical",{"_index":3107,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["verticaltalbar",{"_index":1642,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["via",{"_index":441,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["view",{"_index":681,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["view'},{'name",{"_index":708,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["view.component",{"_index":45,"title":{},"body":{"modules/AgGridModule.html":{}}}],["view.component.html",{"_index":1691,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.scss",{"_index":1692,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.ts",{"_index":1661,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["view.ts",{"_index":4423,"title":{},"body":{"coverage.html":{}}}],["viewbox",{"_index":1203,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild",{"_index":1105,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"brush",{"_index":3740,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"chart",{"_index":1626,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"overlay",{"_index":2996,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["viewchild(\"tooltiptemplate",{"_index":1624,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"wrapper",{"_index":1621,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"xaxis",{"_index":1128,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"yaxis",{"_index":1129,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild('chart",{"_index":3243,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('tooltiptemplate",{"_index":3247,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('wrapper",{"_index":3249,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('xaxis",{"_index":1087,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewchild('yaxis",{"_index":1089,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewchild(mapinfowindow",{"_index":2781,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["viewinit",{"_index":995,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["vis",{"_index":2384,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vis.js",{"_index":2412,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["visdata",{"_index":4299,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["visevent",{"_index":4096,"title":{"interfaces/VisEvent.html":{}},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["visibility",{"_index":167,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["visibilityaction",{"_index":1954,"title":{},"body":{"interfaces/Column.html":{}}}],["visibilityaction.selected",{"_index":1958,"title":{},"body":{"interfaces/Column.html":{}}}],["visible",{"_index":538,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Category.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["visiblity",{"_index":1951,"title":{},"body":{"interfaces/Column.html":{}}}],["visnetwork",{"_index":4278,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["visnetwork]'},{'name",{"_index":751,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["visnetworkcontainer",{"_index":4306,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["visnetworkdata",{"_index":4279,"title":{},"body":{"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["visnetworkdirective",{"_index":750,"title":{"directives/VisNetworkDirective.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"directives/VisNetworkDirective.html":{},"coverage.html":{},"index.html":{}}}],["visnetworkoptions",{"_index":4280,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["visnetworkservice",{"_index":2383,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{}}}],["visoptions",{"_index":4300,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["vistimeline",{"_index":753,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"directives/VisTimelineDirective.html":{}}}],["vistimelinecontainer",{"_index":4348,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["vistimelinedirective",{"_index":752,"title":{"directives/VisTimelineDirective.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"directives/VisTimelineDirective.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"index.html":{}}}],["vistimelinegroups",{"_index":4329,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["vistimelineitems",{"_index":4330,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["vistimelinemodule",{"_index":4363,"title":{"modules/VisTimelineModule.html":{}},"body":{"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["vistimelineoptions",{"_index":4331,"title":{},"body":{"directives/VisTimelineDirective.html":{}}}],["vistimelineservice",{"_index":3277,"title":{},"body":{"components/ResultTimeline.html":{},"directives/VisTimelineDirective.html":{},"coverage.html":{}}}],["visual",{"_index":1510,"title":{},"body":{"interfaces/Category.html":{}}}],["void",{"_index":408,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Category.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"injectables/FusionChartsService.html":{},"interfaces/GeoRecord.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"classes/TooltipManager.html":{},"directives/VisNetworkDirective.html":{},"directives/VisTimelineDirective.html":{}}}],["w",{"_index":3805,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["wait",{"_index":1439,"title":{},"body":{"interfaces/Category.html":{}}}],["want",{"_index":459,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["warning",{"_index":683,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["water",{"_index":4651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1648,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["web",{"_index":145,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["weeks",{"_index":3590,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["well",{"_index":2451,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["whatever",{"_index":4578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["whether",{"_index":170,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["while(!parsedexpr.isleaf",{"_index":3492,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["whole",{"_index":4292,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["whose",{"_index":2260,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["width",{"_index":637,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Category.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/GeoRecord.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["wikiasyncconfig",{"_index":4453,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikiasyncconfig(providerfactory",{"_index":4565,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynconfig",{"_index":4454,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynconfig(providerfactory",{"_index":4569,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynedgeconfig",{"_index":4455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynedgeconfig(providerfactory",{"_index":4574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikimultidynconfig",{"_index":4456,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikimultidynconfig(providerfactory",{"_index":4585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikipedia",{"_index":2082,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["windows",{"_index":2862,"title":{},"body":{"interfaces/GeoRecord.html":{},"components/MapComponent.html":{}}}],["wish",{"_index":364,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["within",{"_index":2130,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["without",{"_index":1441,"title":{},"body":{"interfaces/Category.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["withtext",{"_index":365,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["won't",{"_index":4287,"title":{},"body":{"directives/VisNetworkDirective.html":{}}}],["work",{"_index":1837,"title":{},"body":{"interfaces/Column.html":{}}}],["works",{"_index":115,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["wrap",{"_index":996,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["wrapper",{"_index":1623,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["wrapper'},{'name",{"_index":727,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["wrapper.component",{"_index":49,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["wrapper.component.ts",{"_index":2638,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["wrapper.component.ts:28",{"_index":2663,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:30",{"_index":2660,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:31",{"_index":2661,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:32",{"_index":2659,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:33",{"_index":2662,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:35",{"_index":2665,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:39",{"_index":2667,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:43",{"_index":2669,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:51",{"_index":2671,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:55",{"_index":2673,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:59",{"_index":2651,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:73",{"_index":2656,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:78",{"_index":2654,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:82",{"_index":2655,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:86",{"_index":2658,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ww",{"_index":3688,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["x",{"_index":997,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x(d",{"_index":3759,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0",{"_index":3891,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0,x1",{"_index":3897,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x1",{"_index":3894,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x_inner",{"_index":2987,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["xaxis",{"_index":998,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain",{"_index":3866,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[0].gettime",{"_index":3869,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[1].gettime",{"_index":3868,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent",{"_index":3832,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0",{"_index":3844,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0].gettime",{"_index":3849,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1",{"_index":3153,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1].gettime",{"_index":3848,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xlabels",{"_index":1133,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xlabels.includes(value.x",{"_index":1143,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xss",{"_index":4527,"title":{},"body":{"dependencies.html":{}}}],["xt",{"_index":3729,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y",{"_index":999,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y(d",{"_index":3765,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y0(this.y(0",{"_index":3761,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y1(d",{"_index":3762,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxis",{"_index":1000,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxisticks",{"_index":3087,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["year",{"_index":3333,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["years",{"_index":3448,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["yes",{"_index":395,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["yextent",{"_index":3151,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[0",{"_index":3154,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[1",{"_index":3062,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["yielded",{"_index":1855,"title":{},"body":{"interfaces/Column.html":{}}}],["ylabels",{"_index":1138,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ylabels.includes(value.y",{"_index":1144,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ymax",{"_index":3834,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yoffset",{"_index":4051,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["yyyy",{"_index":3683,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["z",{"_index":1337,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zeros",{"_index":3657,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zone",{"_index":1465,"title":{},"body":{"interfaces/Category.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["zoom/selection",{"_index":3531,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoomable",{"_index":3443,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["zoombehavior",{"_index":3737,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoomed",{"_index":3440,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["zoomedin",{"_index":4739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoomedout",{"_index":4738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoomidentity",{"_index":3719,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zooming",{"_index":3748,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoommodechanged",{"_index":4740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoomreset",{"_index":4737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zooms",{"_index":3630,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoomtransform",{"_index":3720,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoomtransform(this.brush$.node",{"_index":3939,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AgGridModule.html":{"url":"modules/AgGridModule.html","title":"module - AgGridModule","body":"\n                   \n\n\n\n\n    Modules\n    AgGridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_exports\n\n\n\ncluster_AgGridModule_declarations\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ag-grid/ag-grid.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AgGridViewComponent\n                        \n                        \n                            DataModalComponent\n                        \n                        \n                            FacetWrapperComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AgGridViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { AgGridModule as AGModule } from 'ag-grid-angular';\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsModalModule } from \"@sinequa/components/modal\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { ResultModule } from \"@sinequa/components/result\";\n\nimport { AgGridViewComponent } from \"./ag-grid-view.component\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n        \n        IntlModule,\n        UtilsModule,\n        BsActionModule,\n        BsModalModule,\n        ResultModule,\n        BsFacetModule,\n        \n        AGModule.withComponents([FacetWrapperComponent]),\n    ],\n    declarations: [\n        AgGridViewComponent,\n        DataModalComponent,\n        FacetWrapperComponent\n    ],\n    exports: [\n        AgGridViewComponent\n    ],\n})\nexport class AgGridModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationData.html":{"url":"interfaces/AggregationData.html","title":"interface - AggregationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Convenience structure for managing custom metadata types (like\ncooccurrence entities). AggregationData is returned by the custom\nparse() function of an AggregationEdgeType.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdge.html":{"url":"interfaces/AggregationEdge.html","title":"interface - AggregationEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to store the aggregation and\naggregation items from which the edge is constructed\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            aggregationItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:     Aggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Aggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aggregationItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregationItem:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdgeType.html":{"url":"interfaces/AggregationEdgeType.html","title":"interface - AggregationEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, specifying which aggregation is used\nto generate the Edges, and additional options.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the aggregation in the Web Service configuration\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default number of items to fetch\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         AggregationTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AggregationTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A parameter to define when the aggregation is fetched and nodes are added\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AggregationProvider.html":{"url":"classes/AggregationProvider.html","title":"class - AggregationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AggregationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                The Aggregation Provider generates nodes and edges from aggregations\nfetched from the server.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Readonly\n                                skips\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAggregationNodes\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeTypes: AggregationEdgeType[], query?: Query)\n                    \n                \n                        \n                            \n                                Defined in network/providers/aggregation-provider.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    AggregationEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        skips\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in network/providers/aggregation-provider.ts:65\n                        \n                    \n\n            \n                \n                    Stores how many aggregation items have been fetched from the server for a given aggregation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAggregationNodes\n                        \n                    \n                \n            \n            \n                \naddAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/aggregation-provider.ts:141\n                \n            \n\n\n            \n                \n                    Create nodes and edges for the given aggregation item and adds them\nto the dataset. By default (if the edge does not have a parse() function\nand there is no sourceNode), the aggregation is assumed to be a cross-\ndistribution, with items formatted as \"Bill Gates/Microsoft\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation item to process\n\n                                    \n                                \n                                \n                                    aggregation\n                                    \n                                            Aggregation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation from which the item comes from\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                AggregationEdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the edge corresponding to that aggregation\n\n                                    \n                                \n                                \n                                    sourceNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:195\n\n                \n            \n\n\n            \n                \n                    Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:279\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions displayed for a specific node\nwhen it is clicked on.\nWe display \"expand\" actions for the edges with a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:241\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions specific to this provider.\nWe display actions allowing to add additional data for \"source\" edges\n(either all the source edges at once, or each individually).\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:219\n\n                \n            \n\n\n            \n                \n                    Called when a node in the network is clicked.\nIf one edge has an \"onclick\" trigger we potentially expand that\nclicked node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:159\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AsyncRecordsProvider.html":{"url":"classes/AsyncRecordsProvider.html","title":"class - AsyncRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/async-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of RecordsProviders where the records are not provided\ndirectly, but instead fetched from the server via a given Query object.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    Public\n                                setQuery\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], query: Query, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/async-records-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:38\n\n                \n            \n\n\n            \n                \n                    Updates the dataset after an asynchronous call to retrieve the records.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuery(query: Query)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:28\n                \n            \n\n\n            \n                \n                    Sets a new query to asynchronous records providers.\nIt will be used on the next call to getData()\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The query object we want to use to fetch records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of RecordsProviders where the records are not provided\n * directly, but instead fetched from the server via a given Query object.\n */\nexport class AsyncRecordsProvider extends RecordsProvider {\n\n    constructor(\n        public override name: string,\n        protected override nodeType: NodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected query: Query,\n        protected override hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, [], hideRecordNode);\n    }\n\n\n    /**\n     * Sets a new query to asynchronous records providers.\n     * It will be used on the next call to getData()\n     * @param query The query object we want to use to fetch records\n     */\n    public setQuery(query: Query) {\n        this.query = query;\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Updates the dataset after an asynchronous call to retrieve the records.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        // Query mode\n        this.context.searchService.getResults(this.query, undefined, {searchInactive: true})\n            .subscribe(results => {\n                this.updateDataset(results.records);\n                this.provider.next(this.dataset);\n            });\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseProvider.html":{"url":"classes/BaseProvider.html","title":"class - BaseProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/base-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Base implementation of the NetworkProvider interface with convenience\nmethods to create nodes and edges, and default features which should apply\nto all providers.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NetworkProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:21\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:23\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:211\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:188\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:179\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Node, Edge, NodeType, EdgeType, NetworkProvider, NetworkDataset, NetworkContext} from '../network-models';\nimport { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n\n/**\n * Base implementation of the NetworkProvider interface with convenience\n * methods to create nodes and edges, and default features which should apply\n * to all providers.\n */\nexport class BaseProvider implements NetworkProvider {\n\n    protected readonly provider = new Subject();\n    public dataset = new NetworkDataset();\n    public active = true;\n\n    public readonly EDGESEPARATOR = \"~~~EDGE~~~\";\n\n    /** Action to turn the provider on or off */\n    public readonly activateAction: Action;\n    /** Action to reset the provider */\n    public readonly resetAction: Action;\n\n    public context: NetworkContext;\n\n    constructor(\n        public name: string\n    ) {\n        this.activateAction = new Action({\n            icon: this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\",\n            text: this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\",\n            title: \"msg#network.actions.toggle\",\n            action: (action: Action) => {\n                this.active = !this.active\n                action.icon = this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\";\n                action.text = this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\";\n                this.getData(this.context);\n            }\n        });\n        this.resetAction = new Action({\n            icon: \"fas fa-trash-alt fa-fw\",\n            text: \"msg#network.actions.reset\",\n            title: \"msg#network.actions.resetTitle\",\n            action: () => {\n                this.dataset.clear();\n                this.getData(this.context);\n            }\n        });\n    }\n\n    /** Returns a standard ID for an edge between two given nodes */\n    protected getEdgeId(node1: Node, node2: Node): string {\n        return node1.id + this.EDGESEPARATOR + node2.id;\n    }\n    \n    /** Returns a standard ID for a node with a given type and \"value\" */\n    protected getNodeId(type: NodeType, value: string): string {\n        return `${type.name}:${value}`;\n    }\n\n    /** Retrieves the \"value\" of the node from its ID */\n    protected getNodeValue(node: Node): string {\n        return node.id.substr(node.type.name.length+1);\n    }\n\n    /**\n     * Creates a new Node object\n     * @param type The NodeType of the node\n     * @param value The \"value\" of the node (eg. \"BILL GATES\")\n     * @param label (default: display = value) The \"display value\" of the node (eg. \"Bill Gates\")\n     * @param visible (default: true) Whether the node should be visible or not\n     * @param customProps (default: {}) Custom properties to add to the node object\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the node in the network (note that the count property accumulates when nodes are merged)\n     */\n    protected createNode(type: NodeType, value: string, label?: string, visible = true, customProps = {}, count = 1): Node {\n        // Apply formatter if any\n        if(type.field) {\n            const col = this.context.appService.getColumn(type.field);\n            if(col?.formatter) {\n                label = this.context.appService.formatService.formatFieldValue({value, display: label}, col);\n            }\n        }\n        // Create node\n        const node: Node = {\n            id: this.getNodeId(type, value),\n            label: label || value,\n            type,\n            provider: this,\n            visible,\n            count,\n            context: this.context\n        }\n        Utils.extend(node, customProps);\n        let options;\n        if(typeof type.nodeOptions === \"function\") {\n            options = type.nodeOptions(node, type);\n        }\n        else {\n            options = type.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    /**\n     * Creates a new Edge object\n     * @param type The EdgeType of that Edge\n     * @param fromNode The \"from\" Node object to which this edge is attached\n     * @param toNode The \"to\" Node object to which this edge is attached\n     * @param fieldValue (default: undefined) An optional value, which, if provided, allows to filter the search with a select (\"type.field = fieldValue\")\n     * @param visible (default: true) Whether the edge should be visible or not\n     * @param customProps (default: {}) Custom properties to add to this edge\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the edge in the network (note that the count property accumulates when edges are merged)\n     * @param directed (default: false) Whether the edge is directed or undirected. If true, an arrow is drawn on the edge.\n     * @param relation (default: undefined) If provided, the \"relation\" is a label displayed in the middle of the edge\n     */\n    protected createEdge(type: EdgeType, fromNode: Node, toNode: Node, fieldValue: string | undefined = undefined, visible = true, customProps = {}, count = 1, directed = false, relation?: string): Edge {\n        const edge: Edge = {\n            id: this.getEdgeId(fromNode, toNode),\n            from: fromNode.id,\n            to: toNode.id,\n            fieldValue,\n            type,\n            visible,\n            count,\n            provider: this,\n            context: this.context\n        }\n        Utils.extend(edge, customProps);\n        if(directed) {\n            edge[\"arrows\"] = {middle: {scaleFactor: 0.3, enabled: true}};\n        }\n        if(relation) {\n            edge[\"label\"] = relation;\n            edge[\"labels\"] = [relation];\n            edge[\"font\"] = {size: 5, color: \"#808080\"};            \n        }\n        let options: {[key: string]: any};\n        if(typeof type.edgeOptions === \"function\") {\n            options = type.edgeOptions([fromNode, toNode], edge, type);\n        }\n        else {\n            options = type.edgeOptions;\n        }\n        return Utils.extend(edge, options);\n    }\n    \n\n    // Implementation of the NetworkProvider interface\n\n    getProvider(): Subject {\n        return this.provider;\n    }\n\n    getData(context: NetworkContext) {\n        this.context = context;\n    }\n\n    onDatasetsMerged(dataset: NetworkDataset) {\n        \n    }\n\n    onNodesInserted(nodes: Node[]) {\n        \n    }\n    \n    onNodeClicked(node: Node | undefined) {\n        \n    }\n\n    onEdgeClicked(edge: Edge | undefined) {\n        \n    }\n\n    /**\n     * By default, the base provider includes an action to turn the provider\n     * on or off, and an action to reset the data from this provider\n     */\n    getProviderActions(): Action[] {\n        return [this.activateAction, this.resetAction];\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * node has a \"field\" property\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions: Action[] = []\n        if(this.active && node.provider === this && node.type.field) {\n            actions.push(new Action({\n                icon: \"fas fa-filter\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: node.label}),\n                action: () => {\n                    const expr = this.context.exprBuilder.makeExpr(node.type.field!, this.getNodeValue(node), node.label);\n                    node.context.searchService.query.addSelect(expr, node.context.name);\n                    node.context.searchService.search();\n                }\n            }));\n        }\n        return actions;\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * edge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\n     * is created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\n     * property)\n     * @param edge The clicked edge\n     */\n    getEdgeActions(edge: Edge): Action[] {\n        const actions: Action[] = [];\n        const nodeFrom = edge.context.nodes.get(edge.from);\n        const nodeTo = edge.context.nodes.get(edge.to);\n        if(this.active && edge.provider === this) {\n            if(edge.type.field && edge.fieldValue) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: edge.fieldValue}),\n                    action: () => {\n                        const expr = this.context.exprBuilder.makeExpr(edge.type.field!, edge.fieldValue!);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            else if(nodeFrom && nodeTo && nodeFrom.type.field && nodeTo.type.field) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch2\", {label1: nodeFrom.label, label2: nodeTo.label}),\n                    action: () => {\n                        const exprFrom = this.context.exprBuilder.makeExpr(nodeFrom.type.field!, this.getNodeValue(nodeFrom), nodeFrom.label);\n                        const exprTo = this.context.exprBuilder.makeExpr(nodeTo.type.field!, this.getNodeValue(nodeTo), nodeTo.label);\n                        const expr = this.context.exprBuilder.concatAndExpr([exprFrom, exprTo]);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            \n        }\n        return actions;\n    }\n\n    onDestroy() {\n        \n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsEdgeInfoCard.html":{"url":"components/BsEdgeInfoCard.html","title":"component - BsEdgeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsEdgeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/edge-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-edge-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                edge-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                fromNode\n                            \n                            \n                                toNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                edge\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        edge\n                    \n                \n                \n                    \n                        Type :         Edge\n\n                    \n                \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node, Edge } from './network-models';\n\n\n@Component({\n    selector: \"sq-edge-info-card\",\n    templateUrl: \"edge-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsEdgeInfoCard implements OnChanges {\n    @Input() edge: Edge;\n\n    closed: boolean;\n    expanded: boolean;\n\n    fromNode: Node;\n    toNode: Node;\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n\n        this.fromNode = this.edge.context.nodes.get(this.edge.from) as Node;\n        this.toNode = this.edge.context.nodes.get(this.edge.to) as Node;\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            -\n            \n\n            \n                \n            \n            \n                \n            \n        \n        \n            \n                {{ 'msg#network.infocards.count' | sqMessage }}:  {{edge.count}}\n                {{ 'msg#network.infocards.aggregation' | sqMessage }}:  {{edge['aggregation'].name}}\n                {{ 'msg#network.infocards.record' | sqMessage }}:  {{edge['record']['title']}}\n            \n        \n    \n\n\n\n    \n    {{node['icon']['code']}}\n    {{node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{node.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    -                                                                                                                                        {{ \\'msg#network.infocards.count\\' | sqMessage }}:  {{edge.count}}                {{ \\'msg#network.infocards.aggregation\\' | sqMessage }}:  {{edge[\\'aggregation\\'].name}}                {{ \\'msg#network.infocards.record\\' | sqMessage }}:  {{edge[\\'record\\'][\\'title\\']}}                                {{node[\\'icon\\'][\\'code\\']}}    {{node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{node.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'BsEdgeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsFacetDate.html":{"url":"components/BsFacetDate.html","title":"component - BsFacetDate","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsFacetDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/facet-date.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    FacetDateParams\n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-date\n            \n\n            \n                styleUrls\n                ./facet-date.scss\n            \n\n\n\n            \n                templateUrl\n                ./facet-date.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cdRef\n                            \n                            \n                                clearFiltersAction\n                            \n                            \n                                dateRangeControl\n                            \n                            \n                                form\n                            \n                            \n                                items\n                            \n                            \n                                selection\n                            \n                            \n                                timeSeries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterItem\n                            \n                            \n                                    Public\n                                isFiltered\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleCustomRange\n                            \n                            \n                                    Public\n                                updateRange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                allowCustomRange\n                            \n                            \n                                allowPredefinedRange\n                            \n                            \n                                displayEmptyDistributionIntervals\n                            \n                            \n                                field\n                            \n                            \n                                name\n                            \n                            \n                                replaceCurrent\n                            \n                            \n                                results\n                            \n                            \n                                showCount\n                            \n                            \n                                showCustomRange\n                            \n                            \n                                timelineAggregation\n                            \n                            \n                                timelineHeight\n                            \n                            \n                                timelineMargin\n                            \n                            \n                                timelineWidth\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    field\n                                \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, formBuilder: UntypedFormBuilder, exprBuilder: ExprBuilder, searchService: SearchService, advancedService: AdvancedService, appService: AppService, cdRef: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in timeline/bootstrap/facet-date.ts:86\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    UntypedFormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        advancedService\n                                                  \n                                                        \n                                                                    AdvancedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdRef\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Modified\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        allowCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:67\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        allowPredefinedRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:66\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        displayEmptyDistributionIntervals\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:65\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Date\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        replaceCurrent\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:69\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:60\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCount\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:68\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        timelineAggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Timeline\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        timelineHeight\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 150\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:71\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        timelineMargin\n                    \n                \n                \n                    \n                        Type :     { top: number; bottom: number; left: number; right: number; }\n\n                    \n                \n                \n                    \n                        Default value : {top: 15, bottom: 20, left: 30, right: 15}\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:72\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        timelineWidth\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 250\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:70\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterItem\n                        \n                    \n                \n            \n            \n                \nfilterItem(item: AggregationItem, event)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isFiltered\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:317\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCustomRange\n                        \n                    \n                \n            \n            \n                \ntoggleCustomRange(event)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRange(range: Date[])\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:311\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            Date[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChangeDetectorRef\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFiltersAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateRangeControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UntypedFormControl\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UntypedFormGroup\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AggregationItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Date | undefined)[] | undefined\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeSeries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:80\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n\n                \n                    \n                        getfield()\n                    \n                \n                            \n                                \n                                    Defined in timeline/bootstrap/facet-date.ts:86\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in timeline/bootstrap/facet-date.ts:163\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { parseISO } from \"date-fns\";\nimport { Subscription, debounceTime, filter, map } from \"rxjs\";\nimport { BsFacetTimelineComponent } from \"./facet-timeline.component\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface FacetDateParams {\n    aggregation: string;\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n    timelineWidth?: number;\n    timelineHeight?: number;\n    timelineMargin?: {top: number, bottom: number, left: number, right: number};\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n    @Input() timelineWidth = 250;\n    @Input() timelineHeight = 150;\n    @Input() timelineMargin = {top: 15, bottom: 20, left: 30, right: 15};\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: UntypedFormGroup;\n    dateRangeControl: UntypedFormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[] | undefined;\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: UntypedFormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new UntypedFormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    const from = !value[0] ? undefined : parseISO(value[0]);\n                    const to = !value[1] ? undefined : parseISO(value[1]);\n                    this.dateRangeControl.setValue([from, to], { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : [from, to];\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n\n            // ommit time part of the Date in order to remove display dates with hh:mm:ss in the breadcrumb\n              from?.setHours(0);\n              from?.setMinutes(0);\n              from?.setSeconds(0);\n\n              to?.setHours(0);\n              to?.setMinutes(0);\n              to?.setSeconds(0);\n\n            // update search query with current selection\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n\n            {{item | sqValue:item.$column}}\n\n            \n              {{item.count}}\n            \n        \n    \n\n    \n        \n            \n            {{'msg#facet.date.custom' | sqMessage}} :\n        \n    \n\n\n    \n      \n        \n            \n                \n                \n            \n        \n\n        \n        \n\n      \n    \n\n\n\n    \n\n    \n                \n                    ./facet-date.scss\n                \n                .date-item:hover {\n    background-color: #f8f9fa;\n    color: black;\n}\n\n.active {\n    color: #0f5132;\n    background-color: #d1e7dd;\n\n    &:hover {\n        background-color: #d1e7dd;\n        opacity: 0.8;\n    }\n}\n\n.counter {\n    padding-left: 4px;\n    padding-right: 6px;\n    font-size: .7rem;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{item | sqValue:item.$column}}                          {{item.count}}                                                            {{\\'msg#facet.date.custom\\' | sqMessage}} :                                                                                                                        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'BsFacetDate'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsHeatmapComponent.html":{"url":"components/BsHeatmapComponent.html","title":"component - BsHeatmapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsHeatmapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/heatmap.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-heatmap\n            \n\n            \n                styleUrls\n                ./heatmap.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./heatmap.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                dataFiltered\n                            \n                            \n                                gx\n                            \n                            \n                                gy\n                            \n                            \n                                originalCount\n                            \n                            \n                                tooltipManager\n                            \n                            \n                                viewInit\n                            \n                            \n                                wrap\n                            \n                            \n                                x\n                            \n                            \n                                xAxis\n                            \n                            \n                                y\n                            \n                            \n                                yAxis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildChart\n                            \n                            \n                                getLegend\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onAxisClicked\n                            \n                            \n                                onItemClicked\n                            \n                            \n                                onMouseOut\n                            \n                            \n                                onMouseOver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClickable\n                            \n                            \n                                buckets\n                            \n                            \n                                colorScheme\n                            \n                            \n                                data\n                            \n                            \n                                height\n                            \n                            \n                                itemsClickable\n                            \n                            \n                                margin\n                            \n                            \n                                maxX\n                            \n                            \n                                maxY\n                            \n                            \n                                theme\n                            \n                            \n                                transition\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClicked\n                            \n                            \n                                itemClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in heatmap/bootstrap/heatmap.component.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        axisClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:46\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        buckets\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 9\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"schemeBlues\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:50\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:36\n                            \n                        \n                \n                    \n                        Raw data to display (will be filtered in function of maxX and maxY parameters)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemsClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:45\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        margin\n                    \n                \n                \n                    \n                        Type :     { top: number; bottom: number; left: number; right: number; }\n\n                    \n                \n                \n                    \n                        Default value : {top: 100, bottom: 20, left: 100, right: 40}\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxX\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:51\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxY\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:53\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        transition\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:42\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:40\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        axisClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:57\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:56\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildChart\n                        \n                    \n                \n            \n            \n                \nbuildChart(update?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:132\n                \n            \n\n\n            \n                \n                    buildChart() actually only builds the axes of the chart, since the\nrest is build automatically with Angular syntax in the template.\nWe build axis programmatically (with D3 selects) to benefit from the\nD3 abstractions and transitions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLegend\n                        \n                    \n                \n            \n            \n                \ngetLegend()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:220\n                \n            \n\n\n            \n                \n                    Builds the list of legend items\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:87\n                \n            \n\n\n            \n                \n                    ngOnChanges is used to respond to changes in the data (or chart parameter)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAxisClicked\n                        \n                    \n                \n            \n            \n                \nonAxisClicked(value: string, axis: \"x\" | \"y\")\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:211\n                \n            \n\n\n            \n                \n                    Called when the user clicks on an axis item\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    axis\n                                    \n                                            \"x\" | \"y\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onItemClicked\n                        \n                    \n                \n            \n            \n                \nonItemClicked(item: HeatmapItem)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:200\n                \n            \n\n\n            \n                \n                    Called when the user clicks on a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMouseOut\n                        \n                    \n                \n            \n            \n                \nonMouseOut()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMouseOver\n                        \n                    \n                \n            \n            \n                \nonMouseOver(item: HeatmapItem, event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:169\n                \n            \n\n\n            \n                \n                    Called when the user hovers the mouse over a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleQuantile\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataFiltered\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('xAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('yAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipManager\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TooltipManager()\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:241\n                        \n                    \n\n            \n                \n                    Truncates the axis strings to fit inside 90px width\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\nimport { axisLeft, axisTop } from 'd3-axis';\nimport { scaleBand, scaleQuantile } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { transition } from 'd3-transition';\nimport { schemeBlues, schemeReds, schemeGreens, schemeRdBu, schemeSpectral, schemeYlGnBu } from 'd3-scale-chromatic';\nimport { TooltipManager } from '@sinequa/analytics/tooltip';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\nexport const colorSchemes = {\n  schemeBlues,\n  schemeReds,\n  schemeGreens,\n  schemeRdBu,\n  schemeSpectral,\n  schemeYlGnBu\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n\n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip\n    tooltipManager = new TooltipManager();\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(colorSchemes[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = select(this.gx.nativeElement);\n        this.yAxis = select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n\n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update\n     */\n    buildChart(update?: boolean){\n\n        if(update){\n            const t = transition().duration(this.transition) as d3.Transition;\n\n            this.xAxis.transition(t)\n                .call(axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n\n        }\n        else {\n            this.xAxis.call(axisTop(this.x).tickSize(0));\n            this.yAxis.call(axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item\n     * @param event\n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        const top = scale * (this.margin.top + y + 0.5*this.y.bandwidth()); // Align tooltip arrow\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n    \n        \n\n    \n    \n        \n            \n            \n            {{ item.start | number : '1.0-0'}}\n        \n    \n\n    \n        \n        \n\n        \n        \n\n        \n        \n        \n\n    \n\n    \n        {{'msg#heatmap.showing' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}\n    \n\n\n\n\n\n  \n    {{data.display || data.value}}\n    {{'msg#heatmap.tooltip' | sqMessage:{values: {count: data.count} } }}\n  \n\n\n    \n\n    \n                \n                    ./heatmap.component.scss\n                \n                // This is required to position the tooltip absolutely\n:host {\n    display: block;\n    position: relative;\n}\n\n// Note: ::ng-deep is deprecated, but currently no better alternative\n.axis.clickable ::ng-deep text:hover {\n    text-decoration: underline;\n    cursor: pointer;\n}\n\n.tile {\n    opacity: 0.9;\n}\n\n.tile.clickable:hover {\n    cursor: pointer;\n    opacity: 1;\n    transition: opacity 0.2s ease-in 0s;\n}\n\n.tile.selected {\n    opacity: 0.5;\n}\n\n.legend {\n    font-size: 10px;\n    fill: darkgrey;\n\n    rect {\n        opacity: 0.9;\n    }\n}\n\n.bottom-legend {\n    fill: darkgrey;\n    font-size: 10px;\n    text-anchor: end;\n}\n\nsq-tooltip ::ng-deep {\n    .sq-tooltip {\n        pointer-events: none;\n        opacity: 0.8;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ item.start | number : \\'1.0-0\\'}}                                                                                        {{\\'msg#heatmap.showing\\' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}          {{data.display || data.value}}    {{\\'msg#heatmap.tooltip\\' | sqMessage:{values: {count: data.count} } }}  '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'BsHeatmapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsHeatmapModule.html":{"url":"modules/BsHeatmapModule.html","title":"module - BsHeatmapModule","body":"\n                   \n\n\n\n\n    Modules\n    BsHeatmapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsHeatmapModule_imports\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {BsHeatmapComponent} from \"./heatmap.component\";\nimport {BsFacetHeatmapComponent} from \"./facet-heatmap.component\";\nimport {BsResultsHeatmapView} from \"./results-heatmap-view\";\nimport { BsTooltipComponent } from \"@sinequa/analytics/tooltip\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n        BsTooltipComponent,\n        BsSelectionModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsResultsHeatmapView,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ],\n    exports: [\n        BsResultsHeatmapView,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ]\n})\nexport class BsHeatmapModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsNodeInfoCard.html":{"url":"components/BsNodeInfoCard.html","title":"component - BsNodeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsNodeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/node-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-node-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                node-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                neighbors\n                            \n                            \n                                nodeData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                node\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        node\n                    \n                \n                \n                    \n                        Type :         Node\n\n                    \n                \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neighbors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NodeData\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            \n                \n            \n            \n                \n            \n        \n        \n            \n                \n                    {{neighbor.key | sqMessage}}\n                    \n                        \n                            \n                                \n                            \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n    {{nodeData.node['icon']['code']}}\n    {{nodeData.node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{nodeData.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                        {{neighbor.key | sqMessage}}                                                                                                                                                                                                                                {{nodeData.node[\\'icon\\'][\\'code\\']}}    {{nodeData.node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{nodeData.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'BsNodeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsTimelineModule.html":{"url":"modules/BsTimelineModule.html","title":"module - BsTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    BsTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_BsTimelineModule_imports\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsTimelineModule -->\n\nBsTooltipComponent->BsTimelineModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            timeline/bootstrap/timeline.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport { BsTooltipComponent } from \"@sinequa/analytics/tooltip\";\n\nimport {BsTimelineComponent} from \"./timeline.component\";\nimport {BsFacetTimelineComponent} from \"./facet-timeline.component\";\nimport { TimelineLegendComponent } from \"./timeline-legend.component\";\nimport { BsFacetDate } from \"./facet-date\";\nimport { BsAdvancedModule } from \"@sinequa/components/advanced\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsActionModule,\n        BsTooltipComponent,\n        BsAdvancedModule,\n        BsFacetModule,\n        CollapseModule,\n    ],\n    declarations: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ],\n    exports: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ]\n})\nexport class BsTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsTooltipComponent.html":{"url":"components/BsTooltipComponent.html","title":"component - BsTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsTooltipComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    tooltip/tooltip.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-tooltip\n            \n\n\n            \n                styles\n                \n.sq-tooltip {\n    z-index: 10;\n    max-height: 100%;\n}\n\n.card-body {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n  \n            \n\n            \n                template\n                \n  \n    \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                manager\n                            \n                            \n                                theme\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        manager\n                    \n                \n                \n                    \n                        Type :         TooltipManager\n\n                    \n                \n                        \n                            \n                                    Defined in tooltip/tooltip.component.ts:51\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : 'light'\n                    \n                \n                        \n                            \n                                    Defined in tooltip/tooltip.component.ts:52\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild(TemplateRef)\n                        \n                    \n                \n                    \n                        \n                                Defined in tooltip/tooltip.component.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { TooltipManager } from './tooltip-manager';\n\n@Component({\n  standalone: true,\n  selector: \"sq-tooltip\",\n  imports: [CommonModule],\n  template: `\n\n  \n    \n  \n\n`,\n  styles: [`\n.sq-tooltip {\n    z-index: 10;\n    max-height: 100%;\n}\n\n.card-body {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BsTooltipComponent {\n  @Input() manager: TooltipManager;\n  @Input() theme: 'light'|'dark' = 'light';\n  @ContentChild(TemplateRef) template: TemplateRef;\n}\n\n    \n\n\n    \n            \n.sq-tooltip {\n    z-index: 10;\n    max-height: 100%;\n}\n\n.card-body {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'BsTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            fusioncharts/multi-level-pie-chart/multi-level-pie-chart.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    AggregationItem\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            originalLabel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showLabel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tooltext\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         Category[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Category[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalLabel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originalLabel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showLabel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showLabel:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showValue:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltext\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tooltext:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     number | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, Optional, DoCheck, NgZone, ElementRef } from \"@angular/core\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { Results, Aggregation, AggregationItem, TreeAggregationNode } from '@sinequa/core/web-services';\nimport { UIService } from \"@sinequa/components/utils\";\nimport { FacetService, AbstractFacet, BsFacetCard } from \"@sinequa/components/facet\";\nimport { Action } from '@sinequa/components/action';\nimport { Subscription } from 'rxjs';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { AppService } from '@sinequa/core/app-utils';\nimport { Utils } from \"@sinequa/core/base\";\n\nexport const defaultMultiLevelChart = {\n    \"theme\": \"fusion\",\n    \"highlightParentPieSlices\": true, // automatically highlight parent slices when you hover over the child pie slices\n    \"highlightChildPieSlices\": false, // prevent child pie slices from getting highlighted, when you hover over the parent slices\n    \"showPlotBorder\": true,\n    \"piefillalpha\": 60,\n    \"pieborderthickness\": 3\n}\n\nexport interface Category extends AggregationItem, TreeAggregationNode {\n    label: string;\n    originalLabel: string;\n    value: number | string;\n    tooltext?: string;\n    color?: string;\n    showLabel?: boolean;\n    showValue?: boolean;\n    category?: Category[];\n}\n\n@Component({\n    selector: \"sq-multi-level-pie-chart\",\n    templateUrl: \"./multi-level-pie-chart.html\",\n    styleUrls: [\"./multi-level-pie-chart.scss\"]\n})\n// eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle\nexport class MultiLevelPieChart extends AbstractFacet implements OnChanges, OnDestroy, DoCheck {\n    @Input() results: Results;\n    @Input() aggregation: string; // Aggregation name\n\n    @Input() data: Category[];\n\n    @Input() width: string = '100%';\n    @Input() height: string = '350';\n    @Input() showToolTip: boolean = true;\n    @Input() plottooltext: string = \"$label, $value, $percentValue\"; // configure the tooltip text of plots\n    @Input() showLabels: boolean = false; // Show/hide ALL CHART'S plots labels\n    @Input() showValues: boolean = false; // Show/hide ALL CHART'S plots value next to labels\n    @Input() showPercentValues: boolean = false; // if enabled along with \"showValues\", values of ALL CHART'S plots will be shown as percentages\n    @Input() chart: any = defaultMultiLevelChart;\n    @Input() autohide = true;\n\n    /** Leave the default color undefined to use the color scheme of FusionCharts */\n    @Input() defaultColor?: string;\n    /** Filtered items appear in a different color. Set to undefined use FusionCharts's color scheme */\n    @Input() filteredColor: string = \"#C3E6CB\";\n    /** Items that belong in a selected document appear in a different color. Set to undefined use FusionCharts's color scheme */\n    @Input() selectedColor: string = \"#8186d4\";\n\n    /**\n     * A function that returns true this component is already filtering the query\n     */\n    @Input()\n    hasFiltered = () => {\n        return this.facetService.hasFiltered(this.getName());\n    }\n    /**\n     * A function that returns true the aggregationItem match a selected document\n     */\n    @Input()\n    isSelected = (item: T) => {\n        if (this.isTree()) {\n            return this.selectedValues.has((item as TreeAggregationNode).$path!.toLowerCase()) && this.selectedColor;\n        }\n        return this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase()) && this.selectedColor;\n    }\n    /**\n     * Callback used to apply custom operations (sort, filter ...) on a tree nodes\n     */\n    @Input() initNodes = (nodes: TreeAggregationNode[], level: number, node: TreeAggregationNode) => {}\n\n    @Output() initialized = new EventEmitter();\n    @Output() onClick = new EventEmitter();\n\n    // A flag to wait for the parent component to actually display this child, since creating\n    // the fusionchart component without displaying causes strange bugs...\n    ready = false;\n\n    // A flag to remove the fusionChart component from the DOM when refreshing the data after a plot click, since it causes\n    // strange multiple execution of the click action\n    isRefreshing = true;\n\n    chartObj: any;\n    aggrData?: Aggregation;\n    dataSource: any = {};\n    _data: Category[] | undefined;\n    public readonly type = \"multilevelpie\";\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        public intlService: IntlService,\n        public uiService: UIService,\n        public facetService: FacetService,\n        public selectionService: SelectionService,\n        public appService: AppService,\n        @Optional() public cardComponent: BsFacetCard,\n        private zone: NgZone,\n        private el: ElementRef\n    ) {\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.localeChange = this.intlService.events.subscribe(event => {\n            this.updateData();\n        });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.updateData();\n        });\n    }\n\n    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    override isHidden(): boolean {\n        return this.autohide && !this.dataSource.category?.length;\n    }\n\n    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle\n    ngOnChanges(changes: SimpleChanges) {\n        if(changes.results || changes.defaultColor || changes.filteredColor || changes.selectedColor) {\n            this.updateData();\n        }\n        if(changes.chart || !this.dataSource.chart || changes.showToolTip || changes.plottooltext\n            || changes.showValues || changes.showPercentValues) {\n                this.chart = {\n                    ...this.chart,\n                    showToolTip: this.showToolTip,\n                    plottooltext: this.plottooltext,\n                    showValues: this.showValues,\n                    showPercentValues: this.showPercentValues\n                }\n                this.dataSource = {...this.dataSource, chart: this.chart};\n        }\n        this.updatePlotsValueDisplay();\n        this.isRefreshing = false\n    }\n\n    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle\n    ngDoCheck(){\n        // We check that the parent component (if any) has been expanded at least once so that the fusioncharts\n        // gets created when it is visible (otherwise, there can be visual bugs...)\n        this.ready = !this.cardComponent?._collapsed;\n    }\n\n    /**\n     * Update the chart dataSource\n     */\n    updateData() {\n        // Retrieve aggregation data\n        this.getAggregationData();\n\n        // Update the set of selected values (for chart coloring)\n        this.updateSelectedValues();\n\n        this._data = this.data || this.aggrData?.items?.map(item => this.convertAggregationItems(item)) || [];\n\n        this.dataSource = {\n            ...this.dataSource,\n            category: this._data\n        };\n    }\n\n    /**\n     * Hack to show/hide plots labels since it couldn't be done with native fusionChart attributes without breaking\n     * the component behavior (on click, will not be able to identify the clicked plot because the key === label will be empty)\n     */\n    updatePlotsValueDisplay() {\n        this.el.nativeElement.style.setProperty('--display', this.showLabels ? '' : 'none')\n    }\n\n    private getAggregationData(): void {\n        if (this.aggregation) {\n            // Get aggregation from the facet service\n            this.aggrData = this.facetService.getAggregation(\n                this.aggregation,\n                this.results,\n                {facetName: this.getName(), levelCallback: this.initNodes}\n            );\n        }\n    }\n\n    private convertAggregationItems(item: T): Category {\n        const isFiltered = this.isFiltered(item) && this.filteredColor;\n        const isSelected = this.isSelected(item);\n        if (item.hasOwnProperty('items')) {\n            return {\n                ...item,\n                label: this.facetService.formatValue(item),\n                originalLabel: item.value,\n                value: item.count,\n                color: isFiltered ? this.filteredColor : isSelected ? this.selectedColor : this.defaultColor,\n                category: item['items'].map(el => this.convertAggregationItems(el))\n            } as Category\n        }\n        return {\n            ...item,\n            label: this.facetService.formatValue(item),\n            originalLabel: item.value,\n            value: item.count,\n            color: isFiltered ? this.filteredColor : isSelected ? this.selectedColor : this.defaultColor\n        } as Category\n    }\n\n    /**\n     * Event triggered on initialization of the fusion chart\n     * @param $event\n     */\n    onInitialized($event) {\n        this.chartObj = $event.chart; // saving chart instance\n        this.initialized.next(this.chartObj);\n    }\n\n    /**\n     * Event triggered when the user clicks on the plot, on a data element.\n     * We create a filter for the clicked element.\n     * @param $event\n     */\n    dataplotClick($event) {\n        this.isRefreshing = true;\n        const label = this.showValues ? $event.dataObj.label.substring(0, $event.dataObj.label.lastIndexOf(',')) : $event.dataObj.label;\n        const item = this.getItem(label, this._data);\n        this.zone.run(() => { // FusionCharts runs outside Angular zone, so we must re-enter it\n            if (this.aggrData) { // For standard Aggregation data structure\n                const obj = {...item!, value: item!.originalLabel} // Re-convert clickedItem structure to fit standard AggregationItem\n                if (!this.isFiltered(obj)) {\n                    this.facetService.addFilterSearch(this.getName(), this.aggrData, obj);\n                } else {\n                    this.facetService.removeFilterSearch(this.getName(), this.aggrData, obj);\n                }\n            } else { // For custom data structure, just emit the clicked item, behavior should be implemented at parent component level\n                this.onClick.next(item);\n            }\n        });\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    private isFiltered(item: AggregationItem) : boolean {\n        return !!this.aggrData && this.facetService.itemFiltered(this.getName(), this.aggrData, item);\n    }\n\n    private isTree(): boolean {\n        return !!this.aggrData?.isTree;\n    }\n\n    /**\n     * Get the aggregation item based on its label\n     * @param label\n     */\n    getItem(label: string, data: Category[] | undefined): Category | undefined {\n        let item;\n        const isTree = this.isTree()\n\n        function _getItem(label: string, data: Category[] | undefined, root = '/') {\n            let path = root;\n            if (data) {\n                for (const _element of data) {\n                    path = path + _element.originalLabel + '/';\n                    if (_element.label === label && (isTree ? _element.$path === path : true)) {\n                        item = _element;\n                        break;\n                    } else if (_element.category) {\n                        for (const _elem of _element.category) {\n                            _getItem(label, [_elem], path);\n                            if (item) {\n                                break;\n                            }\n                        }\n                    }\n                    if (item) {\n                        break;\n                    }\n                    const parentIndex = path.lastIndexOf('/', path.lastIndexOf('/') - 1);\n                    path = path.substring(0, parentIndex + 1);\n                }\n            }\n        }\n\n        _getItem(label, data);\n        return item;\n    }\n\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.aggrData){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.aggrData.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartDataPoint.html":{"url":"interfaces/ChartDataPoint.html","title":"interface - ChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartOptions.html":{"url":"interfaces/ChartOptions.html","title":"interface - ChartOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            colorScheme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            getItemColor\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tickFormatter\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colorScheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colorScheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemColor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickFormatter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tickFormatter:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Column.html":{"url":"interfaces/Column.html","title":"interface - Column","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ag-grid/ag-grid-view.component.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ColDef\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            $column\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $column:         CCColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CCColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionEventType, SelectionService } from \"@sinequa/components/selection\";\nimport { UserPreferences } from \"@sinequa/components/user-settings\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { AppService, FormatService, Query } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { ModalService } from \"@sinequa/core/modal\";\nimport { Results, Record, CCColumn, EngineType } from \"@sinequa/core/web-services\";\nimport { ICellRendererFunc, ITooltipParams, ColDef, GridApi, ColumnApi, GridReadyEvent, RowDataChangedEvent, CellDoubleClickedEvent, SelectionChangedEvent, IDatasource, CsvExportParams, ProcessCellForExportParams, SortChangedEvent, FilterChangedEvent, FilterModifiedEvent, ModelUpdatedEvent } from 'ag-grid-community';\nimport { ApplyColumnStateParams } from \"ag-grid-community/dist/lib/columnController/columnApi\";\nimport { Subscription } from \"rxjs\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { SqDatasource } from \"./datasource\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n\nexport interface Column extends ColDef {\n    field: string;\n    $column?: CCColumn;\n}\n\n\n@Component({\n    selector: 'sq-ag-grid-view',\n    templateUrl: './ag-grid-view.component.html',\n    styleUrls: ['./ag-grid-view.component.scss']\n})\nexport class AgGridViewComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Results containing the record objects displayed in this grid */\n    @Input() results?: Results;\n    /** List of column definitions for each column displayed in the grid */\n    @Input() columns: Column[];\n    /** Optional query to fetch more data from the server (defaults to searchService.query) */\n    @Input() query?: Query;\n\n    /** Width of the grid */\n    @Input() width = \"100%\";\n    /** Height of the grid */\n    @Input() height = \"600px\";\n    /** Which actions to show above the grid, if any */\n    @Input() toolbarActions: (string | Action)[] = [\"columnVisibility\", \"gridReset\", \"autosize\", \"copySelection\", \"downloadSelection\", \"formatContent\"];\n    /** Whether or not to show the results counter in the toolbar */\n    @Input() showCounter = true;\n    /** Whether or not to format the data in the grid, using the FormatService */\n    @Input() formatContent = true;\n    /** Row selection mode (forwarded to ag-grid) */\n    @Input() rowSelection: 'single' | 'multiple' | undefined = 'multiple';\n    /** Whether or not to display checkboxes in the first column of the grid to select rows */\n    @Input() displayCheckbox = false;\n    /** Choice of ag-grid theme (balham is denser) */\n    @Input() theme: \"ag-theme-balham\" | \"ag-theme-alpine\" | \"ag-theme-balham-dark\" | \"ag-theme-alpine-dark\" = \"ag-theme-alpine\";\n    /** Default column grid (possibly overriden by column definitions) */\n    @Input() defaultColumnWidth = 200;\n    /** Configure scrolling functionality */\n    @Input() rowModelType: string = 'infinite';\n\n    /** Default column definition */\n    @Input()\n    defaultColDef: ColDef = {\n        resizable: true\n    }\n    \n    /** Actual column definitions (derived from this.columns) */\n    colDefs: ColDef[] = [];\n    \n    /** ag-grid API for the grid and the column model */\n    gridApi: GridApi | null | undefined;\n    gridColumnApi: ColumnApi | null | undefined;\n\n    /** Datasource implementation for infinite scrolling row model */\n    datasource?: IDatasource;\n\n    // Flags to manage the state of filters and sorts\n    _filterInput = false;\n    \n    /** Custom components */\n    frameworkComponents = {\n        facet: FacetWrapperComponent\n    };\n    \n    /** List of action buttons displayed in the toolbar */\n    gridActions: Action[];\n    /** Action button allowing to toggle each column's visibility */\n    columnsAction: Action;\n\n    /** If rowModelType is 'clientSide', set rowData directly */\n    rowData: Record[] = [];\n\n    /** List of subscriptions to clean up on destroy */\n    subscriptions: Subscription[] = [];\n\n    constructor(\n        public appService: AppService,\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public intlService: IntlService,\n        public formatService: FormatService,\n        public selectionService: SelectionService,\n        public uiService: UIService,\n        public modalService: ModalService,\n        public prefs: UserPreferences\n    ) {\n        this.columnsAction = new Action({\n            icon: \"fas fa-columns fa-fw\",\n            text: \"msg#grid.columns\",\n            scrollable: true,\n            children: []\n        });\n    }\n\n    ngOnInit() {\n        // Subscribe to the selection service to reflect external row selection into the grid\n        this.subscriptions.push(this.selectionService.events.subscribe(event => {\n            if(event.source !== \"ag-grid\" && (event.type === SelectionEventType.SELECT || event.type === SelectionEventType.UNSELECT)) {\n                this.gridApi?.forEachNode(node => {\n                    if(event.records.find(r => r.id === node.data.id)) {\n                        node.setSelected(event.type === SelectionEventType.SELECT, undefined, true);\n                    }\n                });\n            }\n        }));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if(changes.columns) {\n            this.createColumns();\n        }\n        if(changes.results) {\n            this.createRows();\n        }\n        if(!this.gridActions || changes.toolbarActions) {\n            // Override the \"formatContent\" property if it exists in the user preferences\n            const formatContent = this.prefs.get(\"ag-grid-format-content\");\n            if(formatContent !== undefined) {\n                this.formatContent = formatContent;\n            }\n            this.createActions();\n        }\n    }\n\n    ngOnDestroy() {\n        // Unsubscribe from any subscription\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    /**\n     * Create the list of column definitions by deriving the input\n     * `columns` list. Since record objects do not necessarily contain\n     * clean string data, we add a custom cellRenderer and tooltipValueGetter.\n     * Sinequa provides header names and tells us if a column can be sorted on,\n     * or filtered.\n     */\n    createColumns() {\n        this.colDefs = this.columns?.map((col,i) => {\n\n            col = Utils.extend({}, col);\n            col.$column = this.appService.getColumn(col.field);\n\n            col.tooltipValueGetter = col.tooltipValueGetter || this.tooltipValueGetter;\n            col.headerName = col.headerName || (col.$column?.label? this.intlService.formatMessage(col.$column?.label) : col.field);\n            col.headerTooltip = col.headerTooltip || col.headerName;\n            col.cellRenderer = col.cellRendererFramework ? undefined : col.cellRenderer || this.renderCell;\n            col.sortable = col.sortable || this.appService.isSortable(col.field);\n            const hidePref = this.prefs.get(\"ag-grid-hide-\"+col.field);\n            col.hide = hidePref === undefined? col.hide : hidePref;\n            col.width = col.width || this.defaultColumnWidth;\n\n            // How to filter the column\n            if(col.filter === undefined) {\n                switch(col.$column?.eType) {\n                    case EngineType.double:\n                    case EngineType.float:\n                    case EngineType.integer:\n                        col.filter = 'agNumberColumnFilter'; break;\n                    case EngineType.date:\n                    case EngineType.dates:\n                    case EngineType.dateTime:\n                    case EngineType.dateTimes:\n                        col.filter = 'agDateColumnFilter'; break;\n                    case EngineType.string:\n                    case EngineType.csv:\n                        col.filter = true; break;\n                }\n            }\n\n            if(i === 0 && this.displayCheckbox) {\n                // Note that header selection checkbox doesn't work with the infinite row model\n                col.checkboxSelection = true;\n            }\n\n            return col;\n        }) || [];\n\n        // Populate the columnsAction: for each column we toggle the \"hide\" property and persist that preference\n        this.columnsAction.children = this.colDefs.map(col => new Action({\n            name: col.field,\n            text: col.headerName,\n            selected: !col.hide,\n            action: (action, event) => {\n                action.selected = !action.selected;\n                this.gridColumnApi?.setColumnVisible(col.field!, action.selected);\n                if(action.selected) {\n                    this.prefs.delete(\"ag-grid-hide-\"+col.field);\n                }\n                else {\n                    this.prefs.set(\"ag-grid-hide-\"+col.field, true);\n                }\n                event.stopPropagation();\n            }\n        }));\n    }\n\n    /**\n     * Create the rows' datasource\n     */\n    createRows() {\n        if(this.gridApi && this.gridColumnApi && this.rowModelType === 'infinite') {\n            // Create a new datasource\n            this.datasource = this.makeDatasource();\n            // Apply to the grid\n            this.gridApi.setDatasource(this.datasource);\n            // The query that yielded this data may have active filters & sort: we want the grid to reflect this\n            this.updateFilterState(this.query || this.searchService.query);\n            this.updateSortState(this.query || this.searchService.query);\n        } else if (this.rowModelType === 'clientSide') {\n            this.rowData = this.results?.records || [];\n        }\n    }\n\n    /**\n     * For each column of the grid, look for an active filter in the query\n     * and create a filter model that the grid can understand.\n     * Finally, set the filter model via the grid API.\n     * @param query \n     */\n    updateFilterState(query: Query) {\n        let model = {};\n        for(let col of this.colDefs) {\n            const select = query.findSelect(\"grid-filter-\"+col.field);\n            if(col.field && select) {\n                if(col.filter === \"facet\") { // Sinequa facets\n                    model[col.field] = {facetActive: true}; // Lets us tell ag-grid that a custom filter is active this column\n                }\n                else { // AG Grid filters\n                    const filterType = col.filter ===\"agNumberColumnFilter\"? \"number\" : col.filter ===\"agDateColumnFilter\"? \"date\" : \"text\";\n                    model[col.field] = SqDatasource.exprToModel(filterType, col.field, select.expression);\n                }\n            }\n        }\n        this.gridApi?.setFilterModel(model);\n    }\n\n    /**\n     * If the query has a custom orderby clause, create\n     * a sort model that the grid can understand and apply\n     * that model via the grid column API.\n     * @param query \n     */\n    updateSortState(query: Query) {\n        const model: ApplyColumnStateParams = {};\n        if(query.orderBy) {\n            let [colId, sort] = query.orderBy.split(\" \");\n            colId = this.appService.getColumnAlias(this.appService.getColumn(colId));\n            model.state = [{colId, sort}];\n        }\n        else {\n            model.defaultState = {sort: null};\n        }\n        this.gridColumnApi?.applyColumnState(model);\n    }\n\n    /**\n     * Create the actions displayed in the toolbar\n     */\n    createActions() {\n        // Initialization of button actions\n        this.gridActions = [];\n        for(let action of this.toolbarActions) {\n            if(!Utils.isString(action)) {\n                this.gridActions.push(action);\n            }\n            else if(action === \"columnVisibility\") {\n                this.gridActions.push(this.columnsAction);\n            }\n            else if(action === \"gridReset\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-sync-alt fa-fw\",\n                    text: \"msg#grid.reset\",\n                    title: \"msg#grid.resetTitle\",\n                    action: () => this.resetState()\n                }));\n            }\n            else if(action === \"autosize\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-arrows-alt-h fa-fw\",\n                    text: \"msg#grid.autosize\",\n                    title: \"msg#grid.autosizeTitle\",\n                    action: () => this.autoResize()\n                }));\n            }\n            else if(action === \"copySelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-copy fa-fw\",\n                    text: \"msg#grid.copy\",\n                    title: \"msg#grid.copyTitle\",\n                    action: () => this.copyToClipboard()\n                }));\n            }\n            else if(action === \"downloadSelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-download fa-fw\",\n                    text: \"msg#grid.download\",\n                    title: \"msg#grid.downloadTitle\",\n                    action: () => this.downloadCsv()\n                }));\n            }\n            else if(action === \"formatContent\") {\n                this.gridActions.push(new Action({\n                    icon: this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\",\n                    text: \"msg#grid.formatData\",\n                    title: \"msg#grid.formatDataTitle\",\n                    action: action => this.toggleFormatContent(action)\n                }));\n            }\n        }\n    }\n\n    // Custom rendering functions\n\n    /**\n     * A function that returns a HTML string for each cell.\n     * The value in the cell is params.value and the column definition\n     * is params.colDef.\n     */\n    @Input()\n    renderCell: ICellRendererFunc = (params: any): HTMLElement |string => {\n        if(this.formatContent) {\n            return this.formatService.formatValue(params.value, params.colDef.$column);\n        }\n        else {\n            return this.formatService.formatRaw(params.value);\n        }\n    }\n\n    /**\n     * A function that returns a tooltip string for each cell's value\n     */\n    @Input()\n    tooltipValueGetter = (params: ITooltipParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n    /**\n     * A function that returns a string formatted for export for each cell's value\n     */\n    @Input()\n    exportValueGetter = (params: ProcessCellForExportParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n\n    /**\n     * Create a datasource object from the given results and query\n     */\n    makeDatasource() : IDatasource {\n        if(this.results) {\n            return new SqDatasource(this.results, this.query, this.colDefs, this.searchService, this.appService, this.facetService, this.selectionService);\n        }\n        return {getRows: () => []};\n    }\n\n\n    // User actions\n\n    /**\n     * Reset filtering, sorting, column width and order\n     */\n    resetState() {\n        if(!this.query) {\n            // In global search mode, the new query & results will update the filter model\n            this.datasource?.destroy?.();\n            delete this.searchService.query.orderBy;\n            if(this.searchService.query.select?.length) {\n                for(let i=this.searchService.query.select.length; i--; i>=0) {\n                    if(this.searchService.query.select[i].facet.startsWith(\"grid-filter-\")) {\n                        this.searchService.query.removeSelect(i);\n                    }\n                }\n            }\n            this.searchService.search();\n        }\n        else {\n            // clear filters\n            this.gridApi?.setFilterModel({});\n            // clear sort\n            this.gridColumnApi?.applyColumnState({\n                defaultState:{\n                    sort: null\n                }\n            })\n        }\n        // clear width, visiblity, order\n        this.gridColumnApi?.applyColumnState({\n            defaultState:{\n                width: this.defaultColumnWidth\n            },\n            state: this.columns.map(c => {\n                // Delete the visibility preference\n                this.prefs.delete(\"ag-grid-hide-\"+c.field, true);\n                // Update the visibility action\n                const visibilityAction = this.columnsAction.children?.find(a => a.name === c.field);\n                if(visibilityAction) {\n                    visibilityAction.selected = !c.hide;\n                }\n                return {\n                    colId: c.field, // Resets the ordering\n                    hide: !!c.hide // Resets the visibility\n                };\n            }),\n            applyOrder: true\n        });\n        // Sync to apply the new visibility preference\n        this.prefs.sync();\n    }\n\n    /**\n     * Returns a configuration for exporting the data as CSV.\n     */\n    getExportParams(): CsvExportParams {\n        const params: CsvExportParams = {\n            allColumns: true,\n            processCellCallback: this.exportValueGetter\n        };\n        if(this.gridApi?.getSelectedRows().length) {\n            params.onlySelected = true;\n        }\n        return params;\n    }\n\n    /**\n     * Copy the data to the clipboard\n     */\n    copyToClipboard() {\n        const data = this.gridApi?.getDataAsCsv(this.getExportParams());\n        if(data) {\n            this.uiService.copyToClipboard(data);\n        }\n    }\n    \n    /** Download the data as a CSV file */\n    downloadCsv() {\n        this.gridApi?.exportDataAsCsv(this.getExportParams());\n    }\n\n    /**\n     * Auto-resize the columns\n     */\n    autoResize() {\n        this.gridColumnApi?.autoSizeAllColumns();\n    }\n    \n    /**\n     * Called when the user toggles the \"format content\" checkbox\n     */\n    toggleFormatContent(action: Action) {\n        this.formatContent = !this.formatContent;\n        action.icon = this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\";\n        this.prefs.set(\"ag-grid-format-content\", this.formatContent);\n        this.gridApi?.refreshCells({force: true})\n    }\n\n    // AG-GRID events\n\n    /**\n     * Callback function called when the grid is initialized\n     */\n    onGridReady(event: GridReadyEvent) {\n        this.gridApi = event.api;\n        this.gridColumnApi = event.columnApi;\n        // Create the rows in case there are already results available\n        this.createRows();\n    }\n\n    /**\n     * Callback function called when data in the grid changes\n     */\n    onRowDataChanged(event: RowDataChangedEvent) {\n        \n    }\n\n    /**\n     * Callback function called when users double click on a cell\n     */\n    onCellDoubleClicked(event: CellDoubleClickedEvent) {\n        this.modalService.open(DataModalComponent, {\n            model: {\n                row: event.data,\n                column: event.colDef.headerName || event.colDef.field,\n                cell: event.value,\n                cccolumn: (event.colDef as Column).$column,\n                formatContent: this.formatContent\n            }\n        })\n    }\n\n    /**\n     * Callback function called when users select data in the grid\n     */\n    onSelectionChanged(event: SelectionChangedEvent) {\n        const newRows = this.gridApi?.getSelectedRows() as Record[] | undefined;\n        const oldRows = this.selectionService.getSelectedIds();\n        oldRows.forEach(id => {\n            const foundRow = newRows?.find(row => row.id === id);\n            if(!foundRow) {\n                this.selectionService.toggleSelectedRecords({id} as Record, \"ag-grid\");\n            }\n        });\n        newRows?.forEach(row => {\n            const foundId = oldRows.find(id => row.id === id);\n            if(!foundId) {\n                this.selectionService.toggleSelectedRecords(row, \"ag-grid\");\n            }\n        });\n    }\n\n    /**\n     * Callback triggered on every user key input. It is useful to capture\n     * the fact that onFilterChanged is about to be called after some\n     * user input.\n     * @param event \n     */\n     onFilterModified(event: FilterModifiedEvent) {\n        if(!this._filterInput) {\n            // Check that the model has actually changed, as the method can be called event it hasn't changed!\n            const oldModel = event.filterInstance.getModel();\n            const newModel = (event.filterInstance as any).getModelFromUi?.();\n            this._filterInput = !Utils.equals(oldModel, newModel);\n        }\n    }\n\n    /**\n     * Notify the datasource that filter have changed\n     * @param event \n     */\n    onFilterChanged(event: FilterChangedEvent) {\n        // The _filterInput flag allows us to only respond to actual user input and ignore programmatic changes\n        if(this._filterInput) {\n            this._filterInput = false;\n            (this.datasource as SqDatasource)?.filterChanged?.();\n        }\n    }\n\n    /**\n     * Notify the datasource that sort has changed\n     * @param event\n     */\n    onSortChanged(event: SortChangedEvent) {\n        (this.datasource as SqDatasource)?.sortChanged?.();\n    }\n\n    /**\n     * Update selection when new rows are inserted in the table\n     * @param event \n     */\n    onModelUpdated(event: ModelUpdatedEvent) {\n        this.gridApi?.forEachNode(node => {\n            if(node.data?.$selected && !node.isSelected()) {\n                node.setSelected(true, undefined, true);\n            }\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomData.html":{"url":"interfaces/CustomData.html","title":"interface - CustomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Data structure returned by the optional parse() function of a structural edge\ntype. Contains the parsed values of a property that can be turned into one or\nmultiple nodes and edges.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DataModalComponent.html":{"url":"components/DataModalComponent.html","title":"component - DataModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DataModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/data-modal.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-data-modal\n            \n\n\n            \n                styles\n                \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n            \n\n\n            \n                templateUrl\n                ./data-modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                copyAction\n                            \n                            \n                                data\n                            \n                            \n                                formatContent\n                            \n                            \n                                    Public\n                                formatService\n                            \n                            \n                                    Public\n                                model\n                            \n                            \n                                    Public\n                                uiService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(model: DataModel, uiService: UIService, formatService: FormatService)\n                    \n                \n                        \n                            \n                                Defined in ag-grid/data-modal.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        DataModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formatService\n                                                  \n                                                        \n                                                                    FormatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateData\n                        \n                    \n                \n            \n            \n                \nupdateData()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        copyAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formatService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormatService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MODAL_MODEL)\n                        \n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uiService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UIService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { FieldValue } from \"@sinequa/core/base\";\nimport { MODAL_MODEL } from \"@sinequa/core/modal\";\nimport { CCColumn } from \"@sinequa/core/web-services\";\n\ndeclare type DataModel = {\n    cell: ValueItem | FieldValue,\n    row: any,\n    column: string,\n    cccolumn: CCColumn,\n    formatContent: boolean\n};\n\n@Component({\n    selector: 'sq-data-modal',\n    templateUrl: './data-modal.component.html',\n    styles: [`\npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    `]\n})\nexport class DataModalComponent {\n\n    copyAction: Action;\n    formatContent = true;\n    data: string;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: DataModel,\n        public uiService: UIService,\n        public formatService: FormatService\n    ){\n        this.formatContent = model.formatContent;\n    }\n\n    ngOnInit() {\n\n        this.copyAction = new Action({\n            icon: \"far fa-copy\",\n            title: \"Copy to Clipboard\",\n            action: () => this.uiService.copyToClipboard(this.data)\n        });\n\n        this.updateData();\n    }\n\n    updateData() {\n        if(this.formatContent) {\n            this.data = this.formatService.formatValue(this.model.cell, this.model.cccolumn);\n        }\n        else {\n            this.data = this.formatService.formatRaw(this.model.cell);\n        }\n    }\n}\n    \n\n    \n        \n    \n        \n        {{'msg#grid.formatData' | sqMessage}}\n    \n\n    {{data}}\n\n    \n    \n\n\n    \n\n    \n            \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{\\'msg#grid.formatData\\' | sqMessage}}        {{data}}        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'DataModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdge.html":{"url":"interfaces/DynamicEdge.html","title":"interface - DynamicEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to include the record property\nfrom which this edge is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicEdgeProvider.html":{"url":"classes/DynamicEdgeProvider.html","title":"class - DynamicEdgeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicEdgeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A extension of the RecordsProvider, where records are not directly\nprovided, but are instead fetched from the server via a Query specific\nto a source node.\nConcretely, the dynamic edge provider will attach one (or more) record nodes\n(and their structural edges) to one (or more) source nodes, whose type is\nspecified in the DynamicEdgeType.\nDynamic edges can be attached right when the source nodes are inserted (oninsert),\nor when a user clicks on a source node (onclick) or when a user clicks on an\naction button displayed when a source node is clicked.\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeType: DynamicEdgeType, secondaryEdgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-edge-provider.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeType\n                                                  \n                                                        \n                                                                        DynamicEdgeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        secondaryEdgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:202\n\n                \n            \n\n\n            \n                \n                    Returns an Action allowing to process a node, if the trigger of the edge type\nis \"manual\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:190\n\n                \n            \n\n\n            \n                \n                    Process a clicked source node, if the trigger of the edge type is \"onclick\"\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdgeType.html":{"url":"interfaces/DynamicEdgeType.html","title":"interface - DynamicEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, to include properties specific\nto dynamic edges, in particular a function that returns a Query object\nfor a given source node.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of records returned by the query service and allows for pagination\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain dynamic edges from a node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicNodeProvider.html":{"url":"classes/DynamicNodeProvider.html","title":"class - DynamicNodeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicNodeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider which manages dynamic node types.\nDynamic nodes are nodes that are transformed into record nodes via a\nquery. The records are fetched from the server dynamic to enrich the\noriginal node.\nFor example, a simple metadata node with the value \"Bill Gates\" can be\nenriched with the wikipedia page of Bill Gate, which can provide a lot\nof structured information about Bill Gates (which can be used, for\nexample, to attach structural edges to the original Bill Gates node).\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: DynamicNodeType, edgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-node-provider.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        DynamicNodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    Creates an action to process a clicked node, for dynamic node types\nwith a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:199\n\n                \n            \n\n\n            \n                \n                    Process a clicked node, for dynamic node types with an \"onclick\" trigger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected override nodeType: DynamicNodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicNodeType.html":{"url":"interfaces/DynamicNodeType.html","title":"interface - DynamicNodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicNodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the NodeType interface with additional properties specific\nto dynamic nodes, in particular the getQuery() function that returns a\nquery given a node\n\n            \n\n            \n                Extends\n            \n            \n                        NodeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain a record for this node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected override nodeType: DynamicNodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edge.html":{"url":"interfaces/Edge.html","title":"interface - Edge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Edge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a property representing the strength of an edge, which scales the count of adjacent nodes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A field value may be provided to filter search based on the edge field type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         EdgeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EdgeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from './vis-network.service';\nimport { DataSet } from 'vis-data/esnext';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n\n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n\n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }\n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n\n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one.\n     *\n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     *\n     * @param dataset\n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n\n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n\n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EdgeType.html":{"url":"interfaces/EdgeType.html","title":"interface - EdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edgeOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            nodeTypes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edgeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edgeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeTypes:     NodeType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NodeType[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from './vis-network.service';\nimport { DataSet } from 'vis-data/esnext';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n\n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n\n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }\n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n\n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one.\n     *\n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     *\n     * @param dataset\n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n\n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n\n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetChartDataPoint.html":{"url":"interfaces/FacetChartDataPoint.html","title":"interface - FacetChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/facet-chart/facet-chart.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ChartDataPoint\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $item:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\",\n    styles: [`\n    :host {\n        fill: var(--bs-dark);\n    }\n    :host-context(.dark) {\n        fill: var(--bs-light);\n    }\n    `]\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {\n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    override isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetDateConfig.html":{"url":"interfaces/FacetDateConfig.html","title":"interface - FacetDateConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetDateConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-date.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    FacetConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { parseISO } from \"date-fns\";\nimport { Subscription, debounceTime, filter, map } from \"rxjs\";\nimport { BsFacetTimelineComponent } from \"./facet-timeline.component\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface FacetDateParams {\n    aggregation: string;\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n    timelineWidth?: number;\n    timelineHeight?: number;\n    timelineMargin?: {top: number, bottom: number, left: number, right: number};\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n    @Input() timelineWidth = 250;\n    @Input() timelineHeight = 150;\n    @Input() timelineMargin = {top: 15, bottom: 20, left: 30, right: 15};\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: UntypedFormGroup;\n    dateRangeControl: UntypedFormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[] | undefined;\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: UntypedFormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new UntypedFormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    const from = !value[0] ? undefined : parseISO(value[0]);\n                    const to = !value[1] ? undefined : parseISO(value[1]);\n                    this.dateRangeControl.setValue([from, to], { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : [from, to];\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n\n            // ommit time part of the Date in order to remove display dates with hh:mm:ss in the breadcrumb\n              from?.setHours(0);\n              from?.setMinutes(0);\n              from?.setSeconds(0);\n\n              to?.setHours(0);\n              to?.setMinutes(0);\n              to?.setSeconds(0);\n\n            // update search query with current selection\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetDateParams.html":{"url":"interfaces/FacetDateParams.html","title":"interface - FacetDateParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetDateParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-date.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowCustomRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowPredefinedRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            displayEmptyDistributionIntervals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            replaceCurrent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showCount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showCustomRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timelineAggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timelineHeight\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timelineMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timelineWidth\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowCustomRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowCustomRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowPredefinedRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowPredefinedRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayEmptyDistributionIntervals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayEmptyDistributionIntervals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replaceCurrent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        replaceCurrent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showCount:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showCustomRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showCustomRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timelineAggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timelineAggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timelineHeight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timelineHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timelineMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timelineMargin:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timelineWidth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timelineWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { parseISO } from \"date-fns\";\nimport { Subscription, debounceTime, filter, map } from \"rxjs\";\nimport { BsFacetTimelineComponent } from \"./facet-timeline.component\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface FacetDateParams {\n    aggregation: string;\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n    timelineWidth?: number;\n    timelineHeight?: number;\n    timelineMargin?: {top: number, bottom: number, left: number, right: number};\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n    @Input() timelineWidth = 250;\n    @Input() timelineHeight = 150;\n    @Input() timelineMargin = {top: 15, bottom: 20, left: 30, right: 15};\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: UntypedFormGroup;\n    dateRangeControl: UntypedFormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[] | undefined;\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: UntypedFormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new UntypedFormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    const from = !value[0] ? undefined : parseISO(value[0]);\n                    const to = !value[1] ? undefined : parseISO(value[1]);\n                    this.dateRangeControl.setValue([from, to], { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : [from, to];\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n\n            // ommit time part of the Date in order to remove display dates with hh:mm:ss in the breadcrumb\n              from?.setHours(0);\n              from?.setMinutes(0);\n              from?.setSeconds(0);\n\n              to?.setHours(0);\n              to?.setMinutes(0);\n              to?.setSeconds(0);\n\n            // update search query with current selection\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetNgxChart.html":{"url":"components/FacetNgxChart.html","title":"component - FacetNgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetNgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/facet-chart/facet-chart.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-ngx-chart\n            \n\n\n            \n                styles\n                \n    :host {\n        fill: var(--bs-dark);\n    }\n    :host-context(.dark) {\n        fill: var(--bs-light);\n    }\n    \n            \n\n\n            \n                templateUrl\n                ./facet-chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dataPoints\n                            \n                            \n                                options\n                            \n                            \n                                tickFormatter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                getItem\n                            \n                            \n                                getName\n                            \n                            \n                                hasFiltered\n                            \n                            \n                                isFiltered\n                            \n                            \n                                    \n                                isHidden\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                aggregations\n                            \n                            \n                                chartType\n                            \n                            \n                                colors\n                            \n                            \n                                colorScheme\n                            \n                            \n                                filteredColor\n                            \n                            \n                                results\n                            \n                            \n                                selectedColor\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, intlService: IntlService, selectionService: SelectionService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        aggregations\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colors\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\"#7aa3e5\"]\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filteredColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#C3E6CB\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#7acce5\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:36\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:263\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AggregationItem | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getName\n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:99\n                \n            \n\n\n            \n                \n                    Name of the facet, used to create and retrieve selections\nthrough the facet service.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasFiltered\n                        \n                    \n                \n            \n            \n                \nhasFiltered()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:120\n                \n            \n\n\n            \n                \n                    Returns true if there is an active selection (or exclusion) from this facet\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFiltered\n                        \n                    \n                \n            \n            \n                \nisFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:259\n                \n            \n\n\n            \n                \n                    Returns true if the given AggregationItem is filtered\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        isHidden\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHidden()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:272\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:212\n                \n            \n\n\n            \n                \n                    Subscribe to language changes, in order to reformat the data points.\nSubscribe to selection changes, in order to highlight selected documents.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Aggregation | undefined\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetChartDataPoint[]\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tickFormatter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:197\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:106\n                                \n                            \n                    \n                        \n                                Returns all the actions that are relevant in the current context\n\n\n                                \n                                    Returns :     Action[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\",\n    styles: [`\n    :host {\n        fill: var(--bs-dark);\n    }\n    :host-context(.dark) {\n        fill: var(--bs-light);\n    }\n    `]\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {\n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    override isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n    \n        \n    \n\n    \n\n    \n            \n    :host {\n        fill: var(--bs-dark);\n    }\n    :host-context(.dark) {\n        fill: var(--bs-light);\n    }\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'FacetNgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetWrapperComponent.html":{"url":"components/FacetWrapperComponent.html","title":"component - FacetWrapperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetWrapperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/facet-wrapper.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                facet-wrapper\n            \n\n\n            \n                styles\n                \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n            \n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aggregationName\n                            \n                            \n                                field\n                            \n                            \n                                isTree\n                            \n                            \n                                name\n                            \n                            \n                                params\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agInit\n                            \n                            \n                                doesFilterPass\n                            \n                            \n                                getModel\n                            \n                            \n                                isFilterActive\n                            \n                            \n                                setModel\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    datasource\n                                \n                                \n                                    results\n                                \n                                \n                                    aggregation\n                                \n                                \n                                    appService\n                                \n                                \n                                    facetService\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        agInit\n                        \n                    \n                \n            \n            \n                \nagInit(params: IFilterParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IFilterParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doesFilterPass\n                        \n                    \n                \n            \n            \n                \ndoesFilterPass(params: IDoesFilterPassParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IDoesFilterPassParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getModel\n                        \n                    \n                \n            \n            \n                \ngetModel()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { facetActive: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFilterActive\n                        \n                    \n                \n            \n            \n                \nisFilterActive()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setModel\n                        \n                    \n                \n            \n            \n                \nsetModel(model: any)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aggregationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IFilterParams\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        datasource\n                    \n                \n\n                \n                    \n                        getdatasource()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n\n                \n                    \n                        getresults()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:39\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n\n                \n                    \n                        getaggregation()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:43\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        appService\n                    \n                \n\n                \n                    \n                        getappService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:51\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        facetService\n                    \n                \n\n                \n                    \n                        getfacetService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:55\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { IDoesFilterPassParams, IFilterParams } from \"ag-grid-community\";\nimport { Component } from \"@angular/core\";\nimport { SqDatasource } from \"./datasource\";\nimport { Aggregation, Results } from \"@sinequa/core/web-services\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { FacetService } from \"@sinequa/components/facet\";\n\n@Component({\n   selector: 'facet-wrapper',\n   template: `\n\n\n   `,\n   styles: [`\nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   `]\n})\nexport class FacetWrapperComponent {\n    params: IFilterParams;\n\n    field: string;\n    isTree: boolean;\n    aggregationName: string;\n    name: string;\n\n    get datasource(): SqDatasource {\n        return this.params.rowModel['datasource'];\n    }\n\n    get results(): Results {\n        return this.datasource.latestResults;\n    }\n\n    get aggregation(): Aggregation | undefined {\n        return this.results.aggregations.find(a => {\n            const col = this.appService.getColumn(a.column);\n            const alias = this.appService.getColumnAlias(col);\n            return Utils.eqNC(alias, this.field);\n        });\n    }\n\n    get appService(): AppService {\n        return this.datasource.appService;\n    }\n\n    get facetService(): FacetService {\n        return this.datasource.facetService;\n    }\n    \n    agInit(params: IFilterParams): void {\n        this.params = params;\n        if(!this.params.colDef.field)\n            throw Error(\"Column definitions need at least a field\");\n        this.field = this.params.colDef.field; // Field is the alias\n        this.isTree = this.appService.isTree(this.field);\n        const agg = this.aggregation?.name;\n        if(!agg)\n            throw Error(`An aggregation needs to be defined for '${this.field}' to display a facet`);\n        this.aggregationName = agg;\n        this.name = \"grid-filter-\"+this.field;\n        console.log(\"agInit called \", this.name);\n    }\n\n    isFilterActive(): boolean {\n        return this.facetService.hasFiltered(this.name);\n    }\n\n    // Not called in infinite row model setup\n    doesFilterPass(params: IDoesFilterPassParams): boolean {\n        return true;\n    }\n\n    getModel() {\n        return this.isFilterActive()? {facetActive: true} : undefined;\n    }\n\n    setModel(model: any) {\n    }\n\n}\n\n    \n\n\n    \n            \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'FacetWrapperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FinanceModule.html":{"url":"modules/FinanceModule.html","title":"module - FinanceModule","body":"\n                   \n\n\n\n\n    Modules\n    FinanceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FinanceModule_imports\n\n\n\ncluster_FinanceModule_declarations\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nFinanceModule -->\n\nBsTooltipComponent->FinanceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            finance/finance.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsTooltipComponent } from \"@sinequa/analytics/tooltip\";\nimport { MoneyTimelineComponent } from \"./money-timeline/money-timeline.component\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { MoneyCloudComponent } from \"./money-cloud/money-cloud.component\";\n\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsTooltipComponent,\n        BsActionModule\n    ],\n    declarations: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n    exports: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n})\nexport class FinanceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FusionChartInstance.html":{"url":"interfaces/FusionChartInstance.html","title":"interface - FusionChartInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FusionChartInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            fusioncharts/angular-fusioncharts/interfaces/FusionChartInstance.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            chart\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chart:         Object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface FusionChartInstance{\n  chart: Object;\n}\n\nexport default FusionChartInstance;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FusionChartsEvent.html":{"url":"interfaces/FusionChartsEvent.html","title":"interface - FusionChartsEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FusionChartsEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            fusioncharts/angular-fusioncharts/interfaces/FusionChartsEvent.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dataObj\n                                        \n                                \n                                \n                                        \n                                            eventObj\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataObj\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataObj:         Object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventObj\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventObj:         Object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface FusionChartsEvent{\n  eventObj: Object;\n  dataObj: Object;\n}\nexport default FusionChartsEvent;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FusionChartsModule.html":{"url":"modules/FusionChartsModule.html","title":"module - FusionChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    FusionChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChartsDirective\n\nFusionChartsDirective\n\nFusionChartsModule -->\n\nFusionChartsDirective->FusionChartsModule\n\n\n\n\n\nMultiLevelPieChart\n\nMultiLevelPieChart\n\nFusionChartsModule -->\n\nMultiLevelPieChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\nFusionChartsDirective \n\nFusionChartsDirective \n\nFusionChartsDirective  -->\n\nFusionChartsModule->FusionChartsDirective \n\n\n\n\n\nMultiLevelPieChart \n\nMultiLevelPieChart \n\nMultiLevelPieChart  -->\n\nFusionChartsModule->MultiLevelPieChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            fusioncharts/fusioncharts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FusionChart\n                        \n                        \n                            FusionChartsDirective\n                        \n                        \n                            MultiLevelPieChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FusionChart\n                        \n                        \n                            FusionChartsDirective\n                        \n                        \n                            MultiLevelPieChart\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(core: any, ...modules: any[])\n                \n            \n\n\n            \n                \n                    Defined in fusioncharts/fusioncharts.module.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    core\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    modules\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsSelectionModule } from '@sinequa/components/selection';\nimport { UtilsModule } from \"@sinequa/components/utils\";\n\nimport { FusionChart } from \"./chart/chart\";\nimport { FusionChartsDirective } from \"./angular-fusioncharts/fusioncharts.directive\";\nimport { FusionChartsService, FusionChartsStatic } from \"./angular-fusioncharts/fusioncharts.service\";\nimport { MultiLevelPieChart } from \"./multi-level-pie-chart/multi-level-pie-chart\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IntlModule,\n    UtilsModule,\n    BsSelectionModule\n  ],\n  declarations: [\n    FusionChartsDirective,\n    FusionChart,\n    MultiLevelPieChart\n  ],\n  exports: [\n    FusionChartsDirective,\n    FusionChart,\n    MultiLevelPieChart\n  ]\n})\nexport class FusionChartsModule {\n  static forRoot(core: any, ...modules: any[]): ModuleWithProviders {\n    return {\n      ngModule: FusionChartsModule,\n      providers: [\n        FusionChartsService,\n        {\n          provide: FusionChartsStatic,\n          useValue: {\n            core,\n            modules\n          }\n        }\n      ]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FusionChartsService.html":{"url":"injectables/FusionChartsService.html","title":"injectable - FusionChartsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FusionChartsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            fusioncharts/angular-fusioncharts/fusioncharts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                _fcRoot\n                            \n                            \n                                _fusionchartsStatice\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getFCRoot\n                            \n                            \n                                getFusionChartsStatic\n                            \n                            \n                                    Static\n                                isFCRootSet\n                            \n                            \n                                resolveFusionCharts\n                            \n                            \n                                    Static\n                                setFCRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(FCStatic: FusionChartsStatic)\n                    \n                \n                        \n                            \n                                Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        FCStatic\n                                                  \n                                                        \n                                                                        FusionChartsStatic\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getFCRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFCRoot()\n                \n            \n\n\n            \n                \n                    Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFusionChartsStatic\n                        \n                    \n                \n            \n            \n                \ngetFusionChartsStatic()\n                \n            \n\n\n            \n                \n                    Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FusionChartsStatic\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isFCRootSet\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFCRootSet()\n                \n            \n\n\n            \n                \n                    Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveFusionCharts\n                        \n                    \n                \n            \n            \n                \nresolveFusionCharts(core: any, modules: any[])\n                \n            \n\n\n            \n                \n                    Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    core\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    modules\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        setFCRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFCRoot(fcRoot: any)\n                \n            \n\n\n            \n                \n                    Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fcRoot\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        _fcRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _fusionchartsStatice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FusionChartsStatic\n\n                    \n                \n                \n                    \n                        Default value : new FusionChartsStatic()\n                    \n                \n                    \n                        \n                                Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class FusionChartsStatic {\n  core: any;\n  modules: Function[] = [];\n}\n\n@Injectable()\nexport class FusionChartsService {\n  static _fcRoot: any = null;\n  _fusionchartsStatice: FusionChartsStatic = new FusionChartsStatic();\n\n  static setFCRoot(fcRoot: any) {\n    FusionChartsService._fcRoot = fcRoot;\n  }\n\n  static getFCRoot(): any {\n    return FusionChartsService._fcRoot;\n  }\n\n  static isFCRootSet() {\n    return !!FusionChartsService._fcRoot;\n  }\n\n  constructor(FCStatic: FusionChartsStatic) {\n    let fcRoot: any;\n    if (FusionChartsService.isFCRootSet()) {\n      fcRoot = FusionChartsService.getFCRoot();\n    } else {\n      fcRoot = {\n        core: FCStatic.core,\n        modules: FCStatic.modules\n      };\n    }\n    this.resolveFusionCharts(fcRoot.core, fcRoot.modules);\n  }\n\n  resolveFusionCharts(core: any, modules: any[]) {\n    if (core?.id === 'FusionCharts') {\n      this._fusionchartsStatice = core;\n    } else {\n      this._fusionchartsStatice = core();\n    }\n\n    if (modules) {\n      modules.forEach((FusionChartsModules: any) => {\n        if (\n          (FusionChartsModules.getName && FusionChartsModules.getType) ||\n          (FusionChartsModules.name && FusionChartsModules.type)\n        ) {\n          core.addDep(FusionChartsModules);\n        } else {\n          FusionChartsModules(core);\n        }\n      });\n    }\n  }\n\n  getFusionChartsStatic() {\n    return this._fusionchartsStatice;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FusionChartsStatic.html":{"url":"injectables/FusionChartsStatic.html","title":"injectable - FusionChartsStatic","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FusionChartsStatic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            fusioncharts/angular-fusioncharts/fusioncharts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                core\n                            \n                            \n                                modules\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        core\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modules\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Function[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in fusioncharts/angular-fusioncharts/fusioncharts.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class FusionChartsStatic {\n  core: any;\n  modules: Function[] = [];\n}\n\n@Injectable()\nexport class FusionChartsService {\n  static _fcRoot: any = null;\n  _fusionchartsStatice: FusionChartsStatic = new FusionChartsStatic();\n\n  static setFCRoot(fcRoot: any) {\n    FusionChartsService._fcRoot = fcRoot;\n  }\n\n  static getFCRoot(): any {\n    return FusionChartsService._fcRoot;\n  }\n\n  static isFCRootSet() {\n    return !!FusionChartsService._fcRoot;\n  }\n\n  constructor(FCStatic: FusionChartsStatic) {\n    let fcRoot: any;\n    if (FusionChartsService.isFCRootSet()) {\n      fcRoot = FusionChartsService.getFCRoot();\n    } else {\n      fcRoot = {\n        core: FCStatic.core,\n        modules: FCStatic.modules\n      };\n    }\n    this.resolveFusionCharts(fcRoot.core, fcRoot.modules);\n  }\n\n  resolveFusionCharts(core: any, modules: any[]) {\n    if (core?.id === 'FusionCharts') {\n      this._fusionchartsStatice = core;\n    } else {\n      this._fusionchartsStatice = core();\n    }\n\n    if (modules) {\n      modules.forEach((FusionChartsModules: any) => {\n        if (\n          (FusionChartsModules.getName && FusionChartsModules.getType) ||\n          (FusionChartsModules.name && FusionChartsModules.type)\n        ) {\n          core.addDep(FusionChartsModules);\n        } else {\n          FusionChartsModules(core);\n        }\n      });\n    }\n  }\n\n  getFusionChartsStatic() {\n    return this._fusionchartsStatice;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GeoRecord.html":{"url":"interfaces/GeoRecord.html","title":"interface - GeoRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GeoRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            googlemaps/map.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     google.maps.MarkerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     google.maps.MarkerOptions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     google.maps.LatLngLiteral\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     google.maps.LatLngLiteral\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\nimport { MapInfoWindow, MapMarker } from '@angular/google-maps';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\nimport { Results, Record } from '@sinequa/core/web-services';\n\nimport { darkStyle } from \"./dark-style\";\nimport { GoogleMapsService } from './googlemaps.service';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Subscription } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { TemplateRef } from '@angular/core';\nimport { ContentChild } from '@angular/core';\n\nexport interface GeoRecord {\n  position: google.maps.LatLngLiteral;\n  options: google.maps.MarkerOptions;\n  record: Record;\n}\n\n@Component({\n  selector: \"sq-googlemaps\",\n  templateUrl: \"./map.component.html\"\n})\nexport class MapComponent extends AbstractFacet implements OnChanges, OnDestroy {\n  @ViewChild(MapInfoWindow) infoWindow: MapInfoWindow;\n  @ContentChild(TemplateRef) infoWindowsTpl?: TemplateRef;\n\n  map?: google.maps.Map;\n\n  /** Name of the map used as an identifier for the facet, to associate its selects */\n  @Input() name = \"map\";\n  /** Results list displayed on the map when possible */\n  @Input() results: Results;\n  /** Desired width of the map */\n  @Input() width = 300;\n  /** Desired height of the map */\n  @Input() height = 300;\n  /** Default position of the map */\n  @Input() center: google.maps.LatLngLiteral = { lat: 35, lng: -30 };\n  /** Name of the field storing the latitude as a decimal number */\n  @Input() latitudeField = \"latitude\";\n  /** Name of the field storing the longitude as a decimal number */\n  @Input() longitudeField = \"longitude\";\n  /** Minimum size to auto fit in meters */\n  @Input() minFit = 1000;\n  /** Map style (light or dark are supported) */\n  @Input() style = \"light\";\n  /** Event emitter that emits a Record object when the marker of that record is clicked by the user */\n  @Output() recordClicked = new EventEmitter();\n\n  options: google.maps.MapOptions;\n\n  /** Filtered list of records, keeping only the geolocated records */\n  geoRecords: GeoRecord[] = [];\n  clickedRecord: Record | undefined;\n\n  // Actions for selecting an area on the map, and clearing that selection\n  filterArea: Action;\n  clearFilters: Action;\n\n  sub: Subscription;\n\n  constructor(\n    public searchService: SearchService,\n    public selectionService: SelectionService,\n    public facetService: FacetService,\n    public gmaps: GoogleMapsService\n  ) {\n    super();\n\n    // Clear the current filters\n    this.clearFilters = new Action({\n      icon: \"far fa-minus-square\",\n      title: \"msg#facet.clearSelects\",\n      action: () => {\n        this.searchService.query.removeSelect(this.name);\n        this.searchService.search();\n      }\n    });\n\n    // Filter the currently selected area\n    this.filterArea = new Action({\n      icon: \"fas fa-search\",\n      title: \"msg#googlemaps.filterArea\",\n      action: () => {\n        if(this.map) {\n          if (this.facetService.hasFiltered(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n          }\n          const bounds = this.map.getBounds();\n          if(bounds) {\n            const expr = this.gmaps.makeExpr(bounds, this.latitudeField, this.longitudeField);\n            this.searchService.query.addSelect(expr, this.name);\n            this.searchService.search();\n          }\n        }\n      }\n    });\n\n    this.sub = this.selectionService.events.subscribe(() => {\n      for(let rec of this.geoRecords) {\n        // Regenerate the marker styles depending on their selection state\n        rec.options = this.getMarkerOptions(rec.record);\n      }\n    });\n  }\n\n  override get actions(): Action[] {\n    const actions = [] as Action[];\n    if (this.facetService.hasFiltered(this.name)) {\n      actions.push(this.clearFilters);\n    }\n    if (this.map) {\n      actions.push(this.filterArea);\n    }\n    return actions;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    if (changes['results']) {\n      this.updateGeoRecords();\n      this.infoWindow?.close();\n    }\n\n    if (changes['style']) {\n      this.options = {\n        styles: this.style === \"dark\" ? darkStyle : undefined\n      };\n    }\n\n    this.fitBounds();\n  }\n\n  init(map: google.maps.Map) {\n    this.map = map;\n    this.fitBounds();\n  }\n\n  updateGeoRecords() {\n    this.geoRecords = this.results?.records\n      .filter(r => r[this.latitudeField] && r[this.longitudeField])\n      .map(record => ({\n        position: {\n          lat: record[this.latitudeField],\n          lng: record[this.longitudeField]\n        },\n        options: this.getMarkerOptions(record),\n        record\n      })) || [];\n  }\n\n  getMarkerOptions(record: Record): google.maps.MarkerOptions {\n    return {opacity: record.$selected? 1 : 0.65, title: record.title}\n  }\n\n  fitBounds() {\n    if(this.map && this.geoRecords.length) {\n      var bounds = new google.maps.LatLngBounds();\n      for (let record of this.geoRecords) {\n        bounds.extend(record.position);\n      }\n      const center = bounds.getCenter();\n      bounds.extend(this.gmaps.move(center, this.minFit*0.5, this.minFit*0.5));\n      bounds.extend(this.gmaps.move(center, -this.minFit*0.5, -this.minFit*0.5));\n      this.map?.fitBounds(bounds);\n    }\n  }\n\n  // Manage map interactions (avoid multiple opened info windows)\n\n  onMapClick(event: Event) {\n    this.infoWindow.close();\n  }\n\n  onMarkerClick(event: Event, marker: MapMarker, record: GeoRecord) {\n    // Toggle selection except if we focus an previously selected record\n    if(!record.record.$selected || record.record === this.clickedRecord) {\n      this.recordClicked.next(record.record);\n    }\n    this.infoWindow.open(marker);\n    this.clickedRecord = record.record;\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleMapsModule.html":{"url":"modules/GoogleMapsModule.html","title":"module - GoogleMapsModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleMapsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            googlemaps/googlemaps.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { BsSelectionModule } from '@sinequa/components/selection';\n\nimport { GoogleMapsModule as NgGoogleMapsModule } from '@angular/google-maps';\nimport { MapComponent } from './map.component';\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        BsActionModule,\n        BsFacetModule,\n        BsSelectionModule,\n\n        NgGoogleMapsModule,\n    ],\n    declarations: [\n        MapComponent\n    ],\n    exports: [\n        MapComponent\n    ],\n})\nexport class GoogleMapsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleMapsService.html":{"url":"injectables/GoogleMapsService.html","title":"injectable - GoogleMapsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleMapsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            googlemaps/googlemaps.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                DEG_RAD\n                            \n                            \n                                EARTH_RADIUS\n                            \n                            \n                                    Public\n                                exprBuilder\n                            \n                            \n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                makeExpr\n                            \n                            \n                                move\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exprBuilder: ExprBuilder, apiKey: string | undefined)\n                    \n                \n                        \n                            \n                                Defined in googlemaps/googlemaps.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiKey\n                                                  \n                                                        \n                                                                    string | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        makeExpr\n                        \n                    \n                \n            \n            \n                \nmakeExpr(bounds: google.maps.LatLngBounds, latitude: string, longitude: string)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/googlemaps.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                            google.maps.LatLngBounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    latitude\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    longitude\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        move\n                        \n                    \n                \n            \n            \n                \nmove(startLL: google.maps.LatLng, toNorth: number, toEast: number)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/googlemaps.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startLL\n                                    \n                                            google.maps.LatLng\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toNorth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toEast\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     google.maps.LatLngLiteral\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        DEG_RAD\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 180.0 / Math.PI\n                    \n                \n                    \n                        \n                                Defined in googlemaps/googlemaps.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EARTH_RADIUS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 6366198.0\n                    \n                \n                    \n                        \n                                Defined in googlemaps/googlemaps.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exprBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ExprBuilder\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/googlemaps.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ready\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in googlemaps/googlemaps.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectionToken } from \"@angular/core\";\nimport { Inject, Optional } from \"@angular/core\";\nimport { Injectable } from \"@angular/core\";\nimport { Loader } from \"@googlemaps/js-api-loader\"\nimport { ExprBuilder } from \"@sinequa/core/app-utils\";\nimport { BehaviorSubject, from } from \"rxjs\";\n\nexport const GOOGLE_MAPS_API_KEY = new InjectionToken(\"GOOGLE_MAPS_API_KEY\");\n\n@Injectable({providedIn: 'root'})\nexport class GoogleMapsService {\n\n  ready = new BehaviorSubject(false);\n\n  EARTH_RADIUS = 6366198.0;\n  DEG_RAD = 180.0 / Math.PI;\n\n  constructor(\n    public exprBuilder: ExprBuilder,\n    @Optional() @Inject(GOOGLE_MAPS_API_KEY) apiKey: string | undefined,\n  ){\n    const loader = new Loader({\n      apiKey: apiKey || \"\",\n    });\n\n    from(\n      loader.load().then(() => true)\n    ).subscribe(this.ready);\n  }\n\n  makeExpr(bounds: google.maps.LatLngBounds, latitude: string, longitude: string) {\n    const minLat = bounds.getSouthWest().lat();\n    const maxLat = bounds.getNorthEast().lat();\n    const minLng = bounds.getSouthWest().lng();\n    const maxLng = bounds.getNorthEast().lng();\n    return this.exprBuilder.concatAndExpr([\n      this.exprBuilder.makeNumericalExpr(latitude, '>=', minLat),\n      this.exprBuilder.makeNumericalExpr(latitude, '=', minLng),\n      this.exprBuilder.makeNumericalExpr(longitude, '\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeatmapItem.html":{"url":"interfaces/HeatmapItem.html","title":"interface - HeatmapItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HeatmapItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\nimport { axisLeft, axisTop } from 'd3-axis';\nimport { scaleBand, scaleQuantile } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { transition } from 'd3-transition';\nimport { schemeBlues, schemeReds, schemeGreens, schemeRdBu, schemeSpectral, schemeYlGnBu } from 'd3-scale-chromatic';\nimport { TooltipManager } from '@sinequa/analytics/tooltip';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\nexport const colorSchemes = {\n  schemeBlues,\n  schemeReds,\n  schemeGreens,\n  schemeRdBu,\n  schemeSpectral,\n  schemeYlGnBu\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n\n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip\n    tooltipManager = new TooltipManager();\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(colorSchemes[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = select(this.gx.nativeElement);\n        this.yAxis = select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n\n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update\n     */\n    buildChart(update?: boolean){\n\n        if(update){\n            const t = transition().duration(this.transition) as d3.Transition;\n\n            this.xAxis.transition(t)\n                .call(axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n\n        }\n        else {\n            this.xAxis.call(axisTop(this.x).tickSize(0));\n            this.yAxis.call(axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item\n     * @param event\n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        const top = scale * (this.margin.top + y + 0.5*this.y.bandwidth()); // Align tooltip arrow\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    googlemaps/map.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-googlemaps\n            \n\n\n\n\n            \n                templateUrl\n                ./map.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clearFilters\n                            \n                            \n                                clickedRecord\n                            \n                            \n                                    Public\n                                facetService\n                            \n                            \n                                filterArea\n                            \n                            \n                                geoRecords\n                            \n                            \n                                    Public\n                                gmaps\n                            \n                            \n                                infoWindow\n                            \n                            \n                                    Optional\n                                infoWindowsTpl\n                            \n                            \n                                    Optional\n                                map\n                            \n                            \n                                options\n                            \n                            \n                                    Public\n                                searchService\n                            \n                            \n                                    Public\n                                selectionService\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fitBounds\n                            \n                            \n                                getMarkerOptions\n                            \n                            \n                                init\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onMapClick\n                            \n                            \n                                onMarkerClick\n                            \n                            \n                                updateGeoRecords\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                center\n                            \n                            \n                                height\n                            \n                            \n                                latitudeField\n                            \n                            \n                                longitudeField\n                            \n                            \n                                minFit\n                            \n                            \n                                name\n                            \n                            \n                                results\n                            \n                            \n                                style\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                recordClicked\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(searchService: SearchService, selectionService: SelectionService, facetService: FacetService, gmaps: GoogleMapsService)\n                    \n                \n                        \n                            \n                                Defined in googlemaps/map.component.ts:63\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gmaps\n                                                  \n                                                        \n                                                                        GoogleMapsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        center\n                    \n                \n                \n                    \n                        Type :     google.maps.LatLngLiteral\n\n                    \n                \n                \n                    \n                        Default value : { lat: 35, lng: -30 }\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:41\n                            \n                        \n                \n                    \n                        Default position of the map\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 300\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:39\n                            \n                        \n                \n                    \n                        Desired height of the map\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        latitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"latitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:43\n                            \n                        \n                \n                    \n                        Name of the field storing the latitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        longitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"longitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:45\n                            \n                        \n                \n                    \n                        Name of the field storing the longitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        minFit\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:47\n                            \n                        \n                \n                    \n                        Minimum size to auto fit in meters\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:33\n                            \n                        \n                \n                    \n                        Name of the map used as an identifier for the facet, to associate its selects\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:35\n                            \n                        \n                \n                    \n                        Results list displayed on the map when possible\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:49\n                            \n                        \n                \n                    \n                        Map style (light or dark are supported)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 300\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:37\n                            \n                        \n                \n                    \n                        Desired width of the map\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        recordClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:51\n                            \n                        \n                \n                    \n                        Event emitter that emits a Record object when the marker of that record is clicked by the user\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        fitBounds\n                        \n                    \n                \n            \n            \n                \nfitBounds()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMarkerOptions\n                        \n                    \n                \n            \n            \n                \ngetMarkerOptions(record: Record)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    record\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     google.maps.MarkerOptions\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(map: google.maps.Map)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    map\n                                    \n                                            google.maps.Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMapClick\n                        \n                    \n                \n            \n            \n                \nonMapClick(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMarkerClick\n                        \n                    \n                \n            \n            \n                \nonMarkerClick(event: Event, marker: MapMarker, record: GeoRecord)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    marker\n                                    \n                                            MapMarker\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    record\n                                    \n                                                GeoRecord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateGeoRecords\n                        \n                    \n                \n            \n            \n                \nupdateGeoRecords()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        clearFilters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clickedRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record | undefined\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        facetService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterArea\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoRecords\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeoRecord[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:56\n                        \n                    \n\n            \n                \n                    Filtered list of records, keeping only the geolocated records\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gmaps\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GoogleMapsService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        infoWindow\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MapInfoWindow\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MapInfoWindow)\n                        \n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        infoWindowsTpl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild(TemplateRef)\n                        \n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.Map\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.MapOptions\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        searchService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SearchService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectionService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SelectionService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:63\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in googlemaps/map.component.ts:110\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\nimport { MapInfoWindow, MapMarker } from '@angular/google-maps';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\nimport { Results, Record } from '@sinequa/core/web-services';\n\nimport { darkStyle } from \"./dark-style\";\nimport { GoogleMapsService } from './googlemaps.service';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Subscription } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { TemplateRef } from '@angular/core';\nimport { ContentChild } from '@angular/core';\n\nexport interface GeoRecord {\n  position: google.maps.LatLngLiteral;\n  options: google.maps.MarkerOptions;\n  record: Record;\n}\n\n@Component({\n  selector: \"sq-googlemaps\",\n  templateUrl: \"./map.component.html\"\n})\nexport class MapComponent extends AbstractFacet implements OnChanges, OnDestroy {\n  @ViewChild(MapInfoWindow) infoWindow: MapInfoWindow;\n  @ContentChild(TemplateRef) infoWindowsTpl?: TemplateRef;\n\n  map?: google.maps.Map;\n\n  /** Name of the map used as an identifier for the facet, to associate its selects */\n  @Input() name = \"map\";\n  /** Results list displayed on the map when possible */\n  @Input() results: Results;\n  /** Desired width of the map */\n  @Input() width = 300;\n  /** Desired height of the map */\n  @Input() height = 300;\n  /** Default position of the map */\n  @Input() center: google.maps.LatLngLiteral = { lat: 35, lng: -30 };\n  /** Name of the field storing the latitude as a decimal number */\n  @Input() latitudeField = \"latitude\";\n  /** Name of the field storing the longitude as a decimal number */\n  @Input() longitudeField = \"longitude\";\n  /** Minimum size to auto fit in meters */\n  @Input() minFit = 1000;\n  /** Map style (light or dark are supported) */\n  @Input() style = \"light\";\n  /** Event emitter that emits a Record object when the marker of that record is clicked by the user */\n  @Output() recordClicked = new EventEmitter();\n\n  options: google.maps.MapOptions;\n\n  /** Filtered list of records, keeping only the geolocated records */\n  geoRecords: GeoRecord[] = [];\n  clickedRecord: Record | undefined;\n\n  // Actions for selecting an area on the map, and clearing that selection\n  filterArea: Action;\n  clearFilters: Action;\n\n  sub: Subscription;\n\n  constructor(\n    public searchService: SearchService,\n    public selectionService: SelectionService,\n    public facetService: FacetService,\n    public gmaps: GoogleMapsService\n  ) {\n    super();\n\n    // Clear the current filters\n    this.clearFilters = new Action({\n      icon: \"far fa-minus-square\",\n      title: \"msg#facet.clearSelects\",\n      action: () => {\n        this.searchService.query.removeSelect(this.name);\n        this.searchService.search();\n      }\n    });\n\n    // Filter the currently selected area\n    this.filterArea = new Action({\n      icon: \"fas fa-search\",\n      title: \"msg#googlemaps.filterArea\",\n      action: () => {\n        if(this.map) {\n          if (this.facetService.hasFiltered(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n          }\n          const bounds = this.map.getBounds();\n          if(bounds) {\n            const expr = this.gmaps.makeExpr(bounds, this.latitudeField, this.longitudeField);\n            this.searchService.query.addSelect(expr, this.name);\n            this.searchService.search();\n          }\n        }\n      }\n    });\n\n    this.sub = this.selectionService.events.subscribe(() => {\n      for(let rec of this.geoRecords) {\n        // Regenerate the marker styles depending on their selection state\n        rec.options = this.getMarkerOptions(rec.record);\n      }\n    });\n  }\n\n  override get actions(): Action[] {\n    const actions = [] as Action[];\n    if (this.facetService.hasFiltered(this.name)) {\n      actions.push(this.clearFilters);\n    }\n    if (this.map) {\n      actions.push(this.filterArea);\n    }\n    return actions;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    if (changes['results']) {\n      this.updateGeoRecords();\n      this.infoWindow?.close();\n    }\n\n    if (changes['style']) {\n      this.options = {\n        styles: this.style === \"dark\" ? darkStyle : undefined\n      };\n    }\n\n    this.fitBounds();\n  }\n\n  init(map: google.maps.Map) {\n    this.map = map;\n    this.fitBounds();\n  }\n\n  updateGeoRecords() {\n    this.geoRecords = this.results?.records\n      .filter(r => r[this.latitudeField] && r[this.longitudeField])\n      .map(record => ({\n        position: {\n          lat: record[this.latitudeField],\n          lng: record[this.longitudeField]\n        },\n        options: this.getMarkerOptions(record),\n        record\n      })) || [];\n  }\n\n  getMarkerOptions(record: Record): google.maps.MarkerOptions {\n    return {opacity: record.$selected? 1 : 0.65, title: record.title}\n  }\n\n  fitBounds() {\n    if(this.map && this.geoRecords.length) {\n      var bounds = new google.maps.LatLngBounds();\n      for (let record of this.geoRecords) {\n        bounds.extend(record.position);\n      }\n      const center = bounds.getCenter();\n      bounds.extend(this.gmaps.move(center, this.minFit*0.5, this.minFit*0.5));\n      bounds.extend(this.gmaps.move(center, -this.minFit*0.5, -this.minFit*0.5));\n      this.map?.fitBounds(bounds);\n    }\n  }\n\n  // Manage map interactions (avoid multiple opened info windows)\n\n  onMapClick(event: Event) {\n    this.infoWindow.close();\n  }\n\n  onMarkerClick(event: Event, marker: MapMarker, record: GeoRecord) {\n    // Toggle selection except if we focus an previously selected record\n    if(!record.record.$selected || record.record === this.clickedRecord) {\n      this.recordClicked.next(record.record);\n    }\n    this.infoWindow.open(marker);\n    this.clickedRecord = record.record;\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n}\n\n    \n\n    \n        \n\n  \n  \n\n  \n    \n    \n    \n      {{record?.title}}\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{record?.title}}      '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyCloudDatum.html":{"url":"interfaces/MoneyCloudDatum.html","title":"interface - MoneyCloudDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyCloudDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-cloud/money-cloud.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { ExprBuilder, FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { AggregationItem, Results } from \"@sinequa/core/web-services\";\nimport { scaleBand, scaleLog, scaleOrdinal, scaleLinear } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { select } from 'd3-selection';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { extent } from 'd3-array';\nimport { TooltipManager } from \"@sinequa/analytics/tooltip\";\n\nexport interface MoneyCloudDatum {\n    value: number;\n    currency: string;\n    count: number;\n    category: string;\n    i: number;\n    rawvalue: string;\n}\n\n@Component({\n    selector: 'sq-money-cloud',\n    templateUrl: './money-cloud.component.html',\n    styleUrls: ['./money-cloud.component.scss']\n})\nexport class MoneyCloudComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-cloud\"\n\n    @Input() results: Results;\n    /** The \"money-value\" column stores an entity in the form \"(KEYWORD)#( )\", for example \"(DEAL)#(USD 69420)\" */\n    @Input() moneyValueColumn = \"value_amount\";\n    /** The \"Money-Value\" aggregation must be computed over the money-value column */\n    @Input() moneyAggregation = \"ValueAmounts\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    data: MoneyCloudDatum[];\n    categories: string[];\n\n    selectedItems: Set;\n\n    // Scales\n    x: d3.ScaleBand; // Read/Write\n    x_inner: d3.ScaleLinear; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic; // Radius (function of counts)\n    c: d3.ScaleOrdinal; // Color\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n\n    // Tooltips\n    tooltipManager = new TooltipManager();\n\n    viewInit: boolean;\n\n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public selectionService: SelectionService,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n\n        this.selectionService.events.subscribe(e => this.updateSelectedItems());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = scaleBand()\n                .range([0, this.innerWidth]);\n\n            this.x_inner = scaleLinear();\n\n            this.y = scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = scaleLog()\n                .range([4, 10]);\n\n            this.c = scaleOrdinal()\n                .range(schemeCategory10);\n\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = select(this.gx.nativeElement);\n        this.yAxis$ = select(this.gy.nativeElement);\n\n        select(this.overlay.nativeElement)\n            .on(\"mousemove\", () => this.onMousemove());\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    updateChart() {\n\n        this.tooltipManager.hide();\n\n        if(this.results) {\n\n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    updateData() {\n\n        this.updateSelectedItems();\n\n        const counts = new Map();\n\n        this.data = [];\n        // Extract number of occurrences from the aggregation\n        this.results.aggregations\n            ?.find(a => a.name === this.moneyAggregation)\n            ?.items\n            ?.forEach(item => {\n                const datum = this.parseEntity(item, counts);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            });\n\n        this.data.forEach(d => d.i = (d.i-0.5) / counts.get(d.category)!); // Normalize i between 0 and 1\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money-value\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (item: AggregationItem, counts: Map): MoneyCloudDatum | undefined => {\n        const rawvalue = item.value as string;\n        const [category, amount] = item.display!.substr(1, item.display!.length-2).split(\")#(\");\n        const [currency, valuestr] = amount.split(\" \");\n        const value = parseFloat(valuestr);\n        // Check the data is valid\n        if(isNaN(value) || value (this.data, d => d.value);\n            const rExtent = extent(this.data, d => d.count);\n\n            if(!yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(this.data.map(d => d.category));\n            this.x_inner\n                .domain([0, 1])\n                .range([0, this.x.bandwidth()]);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.currency));\n\n            this.categories = this.x.domain();\n\n        }\n\n    }\n\n    public updateSelectedItems() {\n        this.selectedItems = new Set();\n        this.selectionService.getSelectedItems().forEach(r => {\n            r[this.moneyValueColumn]?.forEach((item: ValueItem) => {\n                this.selectedItems.add(item.value as string);\n            });\n        });\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = axisBottom(this.x);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = axisLeft(this.y)\n            .tickSizeInner(-this.innerWidth)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        this.tooltipManager.delayedHide();\n    }\n\n    filterDatum(datum: MoneyCloudDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyValueColumn, datum.rawvalue)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    onMouseEnterDatum(datum: MoneyCloudDatum) {\n\n        let x = this.x(datum.category);\n        const x_inner = this.x_inner(datum.i);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(Utils.isUndefined(x) || Utils.isUndefined(x_inner) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        x += x_inner;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        const top = scale * (this.margin.top + y); // Align tooltip arrow\n\n        // Tooltip to the right\n        if(relativeX \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyDatum.html":{"url":"interfaces/MoneyDatum.html","title":"interface - MoneyDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-timeline/money-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            record\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ExprBuilder } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Results, Record } from \"@sinequa/core/web-services\";\nimport { FormatService } from \"@sinequa/core/app-utils\";\nimport { scaleUtc, scaleLog, scaleOrdinal } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { select } from 'd3-selection';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { extent } from 'd3-array';\nimport { parseISO } from \"date-fns\";\nimport { TooltipManager } from \"@sinequa/analytics/tooltip\";\n\nexport interface MoneyDatum {\n    value: number;\n    currency: string;\n    count: number;\n    date: Date;\n    rawvalue: string;\n    record: Record;\n}\n\n@Component({\n    selector: 'sq-money-timeline',\n    templateUrl: './money-timeline.component.html',\n    styleUrls: ['./money-timeline.component.scss']\n})\nexport class MoneyTimelineComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-timeline\"\n\n    @Input() results: Results;\n    /** The \"money\" column stores an entity in the form \" \", for example \"USD 69420\" */\n    @Input() moneyColumn = \"money\";\n    /** The \"Money\" aggregation must be computed over the money column */\n    @Input() moneyAggregation = \"Money\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    /** Displays a tooltip showing the current date */\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() recordClicked = new EventEmitter();\n\n    data: MoneyDatum[];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic;\n    c: d3.ScaleOrdinal;\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n\n    // Tooltips\n    tooltipX: number | undefined;\n    tooltipManager = new TooltipManager();\n\n    viewInit: boolean;\n\n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = scaleUtc()\n                .range([0, this.innerWidth]);\n\n            this.y = scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = scaleLog()\n                .range([4, 10]);\n\n            this.c = scaleOrdinal()\n                .range(schemeCategory10);\n\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = select(this.gx.nativeElement);\n        this.yAxis$ = select(this.gy.nativeElement);\n\n        select(this.overlay.nativeElement)\n            .on(\"mousemove\", e => this.onMousemove(e))\n            .on(\"mouseout\", () => this.onMouseout());\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Recomputes the data to display and update the chart's primitives\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n\n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    /**\n     * Computes the data displayed in the chart in function of the raw data provided as input\n     */\n    updateData() {\n\n        // Extract number of occurrences from the aggregation\n        const counts = new Map();\n        this.results.aggregations\n            ?.find(a => Utils.eqNC(a.name, this.moneyAggregation))\n            ?.items\n            ?.forEach(item => counts.set(item.value.toString(), item.count));\n\n        this.data = [];\n        this.results.records?.forEach(record =>\n            record?.[this.moneyColumn]?.forEach(money => {\n                const datum = this.parseEntity(money.value, record, counts.get(money.value) || 1);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            })\n        );\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (rawvalue: string, record: Record, count): MoneyDatum | undefined => {\n        const val = rawvalue.split(\" \"); // Split \"USD 1000\"\n        // Check the data is valid\n        if(!record.modified || isNaN(val[1] as any) || parseFloat(val[1]) (this.data, d => d.date);\n            const yExtent = extent(this.data, d => d.value);\n            const rExtent = extent(this.data, d => d.count);\n\n            if(!xExtent[0] || !xExtent[1] || !yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(xExtent);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.record.id));\n        }\n\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = axisBottom(this.x)\n            .ticks(5);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove(event) {\n        if(!this.tooltipManager.isShown && this.showTooltip) {\n            this.tooltipX = this.point(this.overlay.nativeElement, event)[0];\n        }\n        this.tooltipManager.delayedHide();\n    }\n\n    /**\n     * Equivalent of former d3.mouse()\n     */\n    private point(node: SVGRectElement, event: MouseEvent) {\n        var point = new DOMPoint(event.clientX, event.clientY);\n        point = point.matrixTransform(node.getScreenCTM()?.inverse());\n        return [point.x, point.y];\n    }\n\n    /**\n     * Notify parent component that a record was clicked\n     * @param datum\n     */\n    onRecordClicked(datum: MoneyDatum) {\n        this.recordClicked.next(datum.record);\n    }\n\n    /**\n     * Filter the search results with the clicked amount of money\n     * @param datum\n     */\n    filterDatum(datum: MoneyDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyColumn, datum.rawvalue, `${datum.currency} ${this.formatService.moneyFormatter(datum.value)}`)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        this.tooltipX = undefined;\n    }\n\n    /**\n     * Compute the tooltip position when an amount of money is hovered\n     * @param datum\n     */\n    onMouseEnterDatum(datum: MoneyDatum) {\n\n        const x = this.x(datum.date);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(!this.showTooltip || Utils.isUndefined(x) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        const top = scale * (this.margin.top + y); // Align tooltip arrow\n\n        // Tooltip to the right\n        if(relativeX \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkContext.html":{"url":"interfaces/NetworkContext.html","title":"interface - NetworkContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            appService\n                                        \n                                \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            exprBuilder\n                                        \n                                \n                                \n                                        \n                                            intlService\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            networkService\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            searchService\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        select\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(node?: Node, edge?: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:128\n                \n            \n\n\n            \n                \n                    Interactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appService:     AppService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AppService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exprBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exprBuilder:     ExprBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ExprBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intlService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intlService:     IntlService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IntlService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of this network, for use in selections\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        networkService:         VisNetworkService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VisNetworkService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis.js data structures\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        searchService:     SearchService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SearchService\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Useful services\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from './vis-network.service';\nimport { DataSet } from 'vis-data/esnext';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n\n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n\n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }\n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n\n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one.\n     *\n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     *\n     * @param dataset\n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n\n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n\n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NetworkDataset.html":{"url":"classes/NetworkDataset.html","title":"class - NetworkDataset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NetworkDataset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addEdges\n                            \n                            \n                                    Public\n                                addNodes\n                            \n                            \n                                    Public\n                                cleanRemoveNode\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getAdjacentEdges\n                            \n                            \n                                    Public\n                                getConnectedNodes\n                            \n                            \n                                    Public\n                                getEdge\n                            \n                            \n                                    Public\n                                getEdgeIds\n                            \n                            \n                                    Public\n                                getEdges\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                getNodeIds\n                            \n                            \n                                    Public\n                                getNodes\n                            \n                            \n                                    Public\n                                getVisibleEdges\n                            \n                            \n                                    Public\n                                getVisibleNodes\n                            \n                            \n                                    Public\n                                hasEdge\n                            \n                            \n                                    Public\n                                hasNode\n                            \n                            \n                                    Public\n                                merge\n                            \n                            \n                                    Public\n                                removeEdges\n                            \n                            \n                                updateDatasets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEdges(edges: Edge | Edge[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:203\n                \n            \n\n\n            \n                \n                    Add one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edge | Edge[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    addNodes(nodes: Node | Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:198\n                \n            \n\n\n            \n                \n                    Add one or multiple nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node | Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        cleanRemoveNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:218\n                \n            \n\n\n            \n                \n                    Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keepDanglingNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:192\n                \n            \n\n\n            \n                \n                    Clears this dataset\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAdjacentEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdjacentEdges(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:230\n                \n            \n\n\n            \n                \n                    Get the edges adjacent to a node (O(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getConnectedNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectedNodes(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:235\n                \n            \n\n\n            \n                \n                    Get the nodes connected to a node via a single node (0(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:157\n                \n            \n\n\n            \n                \n                    Returns the edge with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdgeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdgeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:187\n                \n            \n\n\n            \n                \n                    Get the list of edge ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:167\n                \n            \n\n\n            \n                \n                    Get the list of edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:152\n                \n            \n\n\n            \n                \n                    Returns the node with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:182\n                \n            \n\n\n            \n                \n                    Get the list of node ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:162\n                \n            \n\n\n            \n                \n                    Get the list of nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:177\n                \n            \n\n\n            \n                \n                    Get the list of visible edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:172\n                \n            \n\n\n            \n                \n                    Get the list of visible nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:147\n                \n            \n\n\n            \n                \n                    Returns whether this edge exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:142\n                \n            \n\n\n            \n                \n                    Returns whether this node exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        merge\n                        \n                    \n                \n            \n            \n                \n                    \n                    merge(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:251\n                \n            \n\n\n            \n                \n                    Merge this dataset with another one.\nWhen duplicates nodes or edges are found:\n\nThe existing item is kept and updated\nTheir 'count' properties are added\nTheir 'visible' properties are ORed\nTheir nodeOptions and edgeOptions are updated\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkDataset\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEdges(ids: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:213\n                \n            \n\n\n            \n                \n                    Remove one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDatasets\n                        \n                    \n                \n            \n            \n                \nupdateDatasets(nodes: DataSet, edges: DataSet)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:318\n                \n            \n\n\n            \n                \n                    Transfer nodes and edges to the Vis nodes and edges DataSets\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from './vis-network.service';\nimport { DataSet } from 'vis-data/esnext';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n\n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n\n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }\n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n\n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one.\n     *\n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     *\n     * @param dataset\n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n\n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n\n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NetworkModule.html":{"url":"modules/NetworkModule.html","title":"module - NetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    NetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nVisNetworkDirective\n\nVisNetworkDirective\n\nNetworkModule -->\n\nVisNetworkDirective->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\nVisNetworkDirective \n\nVisNetworkDirective \n\nVisNetworkDirective  -->\n\nNetworkModule->VisNetworkDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            network/network.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                        \n                            VisNetworkDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                        \n                            VisNetworkDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n\nimport { IntlModule } from \"@sinequa/core/intl\";\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\n\nimport { NetworkComponent } from \"./network.component\";\nimport { BsNodeInfoCard } from \"./node-info-card.component\";\nimport { BsEdgeInfoCard } from \"./edge-info-card.component\";\nimport { VisNetworkDirective } from \"./vis-network.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule,\n\n        IntlModule,\n        UtilsModule,\n        CollapseModule,\n        BsActionModule,\n        BsFacetModule\n    ],\n    declarations: [\n        VisNetworkDirective,\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n    exports: [\n        VisNetworkDirective,\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n})\nexport class NetworkModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkProvider.html":{"url":"interfaces/NetworkProvider.html","title":"interface - NetworkProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            dataset\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getData\n                                    \n                                \n                                \n                                    \n                                        getEdgeActions\n                                    \n                                \n                                \n                                    \n                                        getNodeActions\n                                    \n                                \n                                \n                                    \n                                        getProvider\n                                    \n                                \n                                \n                                    \n                                        getProviderActions\n                                    \n                                \n                                \n                                    \n                                        onDatasetsMerged\n                                    \n                                \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                                \n                                    \n                                        onEdgeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodesInserted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:88\n                \n            \n\n\n            \n                \n                    Asynchronously provide data via it's provider Subject\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:109\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given edge, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:106\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given node, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:85\n                \n            \n\n\n            \n                \n                    Returns the Subject of this provider\n\n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:103\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for this provider.\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:91\n                \n            \n\n\n            \n                \n                    Called after the datasets provided by all providers have been merged into a single dataset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:112\n                \n            \n\n\n            \n                \n                    Called when the providers are discarded. Can be use to cancel subscriptions\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:100\n                \n            \n\n\n            \n                \n                    Called when ANY edge is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:97\n                \n            \n\n\n            \n                \n                    Called when ANY node is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:94\n                \n            \n\n\n            \n                \n                    Called after the dataset is filtered and passed to Vis for rendering\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Context (wrapper for general data about the network and services)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataset:         NetworkDataset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkDataset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dataset of this provider\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Readable name of this provider\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from './vis-network.service';\nimport { DataSet } from 'vis-data/esnext';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n\n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n\n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }\n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n\n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one.\n     *\n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     *\n     * @param dataset\n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n\n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n\n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxChart.html":{"url":"components/NgxChart.html","title":"component - NgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/chart/chart.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n                    DoCheck\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-ngx-chart\n            \n\n            \n                styleUrls\n                ./chart.scss\n            \n\n\n\n            \n                templateUrl\n                ./chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attached\n                            \n                            \n                                chart\n                            \n                            \n                                localeChange\n                            \n                            \n                                select\n                            \n                            \n                                tooltipTemplate\n                            \n                            \n                                wrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                chartComponent\n                            \n                            \n                                ngDoCheck\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateChart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                item-click\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    chartType\n                                \n                                \n                                    colorScheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(intlService: IntlService, uiService: UIService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ChartDataPoint[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:28\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        item-click\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:30\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        chartComponent\n                        \n                    \n                \n            \n            \n                \nchartComponent(type: string)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngDoCheck\n                        \n                    \n                \n            \n            \n                \nngDoCheck()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateChart\n                        \n                    \n                \n            \n            \n                \nupdateChart()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BaseChartComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        localeChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('tooltipTemplate', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('wrapper', {static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n\n                \n                    \n                        getchartType()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n\n                \n                    \n                        getcolorScheme()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:75\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n    \n        \n    \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n    \n    \n        {{model.name}}\n        {{model.value | sqValue}}\n    \n\n    \n\n    \n                \n                    ./chart.scss\n                \n                .sq-chart-wrapper {\n    visibility: hidden;\n    width: 100%;\n    height: 16rem;\n    overflow: hidden;\n    &.sq-attached {\n        visibility: visible;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {{model.name}}        {{model.value | sqValue}}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxChartsModule.html":{"url":"modules/NgxChartsModule.html","title":"module - NgxChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ngx-charts/ngx-charts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n    AreaChartModule,\n    BarChartModule,\n    PieChartModule,\n    TreeMapModule,\n    NumberCardModule,\n    GaugeModule } from \"@swimlane/ngx-charts\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsSelectionModule } from \"@sinequa/components/selection\";\n\nimport { NgxChart } from \"./chart/chart\";\nimport { FacetNgxChart } from \"./facet-chart/facet-chart\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n\n        // ngx-charts modules\n        AreaChartModule,\n        BarChartModule,\n        PieChartModule,\n        TreeMapModule,\n        NumberCardModule,\n        GaugeModule\n    ],\n    declarations: [\n        NgxChart, FacetNgxChart\n    ],\n    exports: [\n        NgxChart, FacetNgxChart\n    ],\n})\nexport class NgxChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precedence\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a mutable property used to scale the node size in function of the size of adjacent edges\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precedence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precedence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         NodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from './vis-network.service';\nimport { DataSet } from 'vis-data/esnext';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n\n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n\n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }\n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n\n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one.\n     *\n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     *\n     * @param dataset\n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n\n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n\n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeData.html":{"url":"interfaces/NodeData.html","title":"interface - NodeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/node-info-card.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeType.html":{"url":"interfaces/NodeType.html","title":"interface - NodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nodeOptions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from './vis-network.service';\nimport { DataSet } from 'vis-data/esnext';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n\n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n\n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }\n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n\n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one.\n     *\n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     *\n     * @param dataset\n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n\n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n\n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RecordNode.html":{"url":"interfaces/RecordNode.html","title":"interface - RecordNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RecordNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Node interface, to include the Record object\nfrom which the node is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Node\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecordsProvider.html":{"url":"classes/RecordsProvider.html","title":"class - RecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A network provider generating nodes from records.\nAdditionally, the provider can generate the \"structural edges\" of that\nnode. Structural edges are edges between a record and the fields of\nthat record (eg. the wikipedia page of Microsoft is a record that probably\ncontains the fields \"Microsoft\" and \"Bill Gates\").\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], records: Record[], hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/records-provider.ts:74\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        records\n                                                  \n                                                        \n                                                                    Record[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:77\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultTimeline.html":{"url":"components/ResultTimeline.html","title":"component - ResultTimeline","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ResultTimeline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    vis-timeline/result-timeline/result-timeline.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-result-timeline\n            \n\n\n\n\n            \n                templateUrl\n                ./result-timeline.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                initDone\n                            \n                            \n                                items\n                            \n                            \n                                    Public\n                                visTimelineService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                timelineInitialized\n                            \n                            \n                                updateTimeline\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dates\n                            \n                            \n                                events\n                            \n                            \n                                max_dates\n                            \n                            \n                                max_year\n                            \n                            \n                                min_dates\n                            \n                            \n                                min_year\n                            \n                            \n                                name\n                            \n                            \n                                options\n                            \n                            \n                                record\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(visTimelineService: VisTimelineService)\n                    \n                \n                        \n                            \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        visTimelineService\n                                                  \n                                                        \n                                                                        VisTimelineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dates\n                    \n                \n                \n                    \n                        Type :     EntityItem[] | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     EntityItem[] | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10000\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"vis-timeline\"\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : defaultOptions\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        record\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timelineInitialized\n                        \n                    \n                \n            \n            \n                \ntimelineInitialized()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTimeline\n                        \n                    \n                \n            \n            \n                \nupdateTimeline()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        initDone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        visTimelineService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VisTimelineService\n\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Record, EntityItem} from \"@sinequa/core/web-services\";\nimport { format, parseISO } from \"date-fns\";\nimport {TimelineOptions, DataItem} from \"vis-timeline/esnext\";\nimport { VisTimelineService } from \"../vis-timeline.service\";\n\nexport const defaultOptions : TimelineOptions = {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n};\n\n@Component({\n    selector: \"sq-result-timeline\",\n    templateUrl: \"./result-timeline.html\"\n})\nexport class ResultTimeline implements OnChanges {\n    @Input() name = \"vis-timeline\";\n    @Input() record: Record;\n    @Input() dates: EntityItem[] | undefined;\n    @Input() events: EntityItem[] | undefined;\n    @Input() min_year: number = 0;\n    @Input() max_year: number = 10000;\n    @Input() min_dates: number = 1;\n    @Input() max_dates: number = 100;\n    @Input() options: TimelineOptions = defaultOptions;\n\n    initDone = false;\n    items : DataItem[] = [];\n\n    constructor(public visTimelineService: VisTimelineService){\n    }\n\n    ngOnChanges(changes:SimpleChanges) {\n        if(!!changes['record'] || !!changes['dates'] || !!changes['events']){\n            this.updateTimeline();\n        }\n    }\n\n    updateTimeline(){\n\n        this.items.splice(0);\n\n        const dates = this.dates || [];\n        const events = this.events || [];\n\n        const all_ids: string[] = [];\n        const all_dates: string[] = [];\n\n        events.forEach(event => {\n            const data_date = event.display;\n            const cooc = data_date.substring(1,data_date.length-1).split(\")#(\");\n            const date = parseISO(cooc[1]);\n            //console.log(\"cooc1:\",data_date[i+2]);\n            //const pos = event.locations.split(\",\")[0];\n            //console.log(cooc);\n            const year = date.getFullYear();\n            //console.log(year);\n            //console.log(regdate.test(date) );\n            //console.log( year  1950);\n            const id = this.record.id + \"#\" + data_date;\n            if(year  this.min_year && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: cooc[0], start: date});\n                all_dates.push(cooc[1]);\n                all_ids.push(id);\n            }\n        });\n\n        dates.forEach(dateobj => {\n            const date: Date = parseISO(dateobj.display);\n            //console.log(\"date:\",data_date[i+1]);\n            //const pos = dateobj.locations.split(\",\")[0];\n            const year = date.getFullYear();\n            const id = this.record.id + \"#\" + dateobj.display;\n            if(year  this.min_year && all_dates.indexOf(dateobj.display)===-1 && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: format(date, 'PP'), start: date});\n                all_ids.push(id);\n            }\n        });\n\n        if(this.items.length >= this.min_dates){\n\n            if(this.items.length> this.max_dates )\n                this.items.splice(0, this.max_dates);\n\n            //console.log(data);\n\n            //try{\n            //    this.timeline.removeCustomTime(\"date-modified\");\n            //}catch{\n                // No date-modified\n            //}\n\n            //if(Utils.isString(this.record.modified) && this.record.modified.length>=10){\n            //    this.timeline.addCustomTime(this.record.modified.substring(0,10), \"date-modified\");\n            //}\n\n            /*this.timeline.on('select', properties => {\n                //console.log('selected items: ' + properties.items);\n                //console.log('event: ', properties.event);\n                //console.log(properties);\n                if(properties.items.length>0){\n                    //var id = properties.items[0].split(\"#\");\n                    console.log(this.items.get(properties.items[0]));\n                    //var date = items._data[properties.items[0]].start;\n                    //var url = \"search?action=select&resultid=\"+RESULTID+\"&item=%22Tag%3B\"+settings.date_column+\"%3B\"+date+\"%3B\"+date+\"%22\"\n                    //popup_extract(id[0], parseInt(id[1]), properties.event.target,url);\n                }\n            });*/\n\n        }else{\n            console.log(\"no timeline for this doc...\");\n        }\n        if(this.initDone) {\n            this.visTimelineService.setItems(this.name, this.items);\n        }\n    }\n\n    timelineInitialized() {\n        this.initDone = true;\n    }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'ResultTimeline'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectedRecordsProvider.html":{"url":"classes/SelectedRecordsProvider.html","title":"class - SelectedRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectedRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/selected-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider, where records are not provided\ndirectly, but instead are taken from the SelectionService and refreshed\nevery time a node is selected or unselected.\n⚠️ Note that the SelectionService must be configured to store records instead\nof just records ids!\nSee http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                selectionSubscription\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                onDestroy\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], selectionService: SelectionService, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/selected-records-provider.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Selected documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/selected-records-provider.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:42\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subscription } from 'rxjs';\nimport { Record } from '@sinequa/core/web-services';\nimport { SelectionService, SelectionEventType } from '@sinequa/components/selection';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of the RecordsProvider, where records are not provided\n * directly, but instead are taken from the SelectionService and refreshed\n * every time a node is selected or unselected.\n * ⚠️ Note that the SelectionService must be configured to store records instead\n * of just records ids!\n * See http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n */\nexport class SelectedRecordsProvider extends RecordsProvider {\n\n    // Subscription to the SelectionService, allowing to refresh the list of records\n    selectionSubscription: Subscription;\n\n    constructor(\n        public override name = \"Selected documents\",\n        protected override nodeType: NodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected selectionService: SelectionService,\n        protected override hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, selectionService.getSelectedItems() as Record[], hideRecordNode);\n\n        this.selectionSubscription = selectionService.events.subscribe(event => {\n            if(event.type === SelectionEventType.SELECT || SelectionEventType.UNSELECT) {\n                const records = selectionService.getSelectedItems() as Record[];\n                this.updateDataset(records);\n                this.provider.next(this.dataset);\n            }\n        });\n    }\n\n\n    // NetworkProvider interface\n\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.updateDataset(this.selectionService.getSelectedItems() as Record[]);\n        this.provider.next(this.dataset);\n    }\n    \n    override onDestroy() {\n        this.selectionSubscription?.unsubscribe();\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuralEdgeType.html":{"url":"interfaces/StructuralEdgeType.html","title":"interface - StructuralEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuralEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the EdgeType interface to include properties specific to\nstructural edges (edge between a record and its metadata).\nAbout trigger/display: At the moment, the Record provider always adds ALL nodes and edges\nto the dataset, but potentially with a visibility set to false. Some of the settings are\nnot compatible with each other, and some take precedence over the others:\n\ndisplay=existingnodes takes precedence over other settings, as it is implemented as\na post-processing of the dataset (in onDatasetsMerged)\ntrigger=onclick or manual take precedence over the other settings, as they set the\nvisibility to false by false, until the user performs an action\ntrigger=oninsert is compatible with the other display settings\n\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of values displayed and allows for pagination. Use 0 for unlimited values\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         StructuralDisplayType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralDisplayType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the field in the record\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function to parse metadata from a record node in a custom way\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         StructuralTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the edge should be displayed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineAggregation.html":{"url":"interfaces/TimelineAggregation.html","title":"interface - TimelineAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDatapoints\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDatapoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDatapoints:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject, map } from 'rxjs';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport { TimelineEventType } from './timeline-legend.component';\nimport { timeFormat } from 'd3-time-format';\nimport { timeMonth, timeDay, timeHour, timeWeek, timeYear } from 'd3-time';\nimport { isValid, parseISO, toDate } from 'date-fns';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default\n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n\n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [parseISO(parsedexpr.values[0]), parseISO(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            toDate(this.selection[0].getTime()-interval*0.1),\n                            toDate(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n\n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n\n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n\n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input,\n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config\n     * @param subject\n     * @param range\n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config\n     * @param subject\n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config\n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if (this.results) {\n            return this.results.records\n                .filter(r =>  isValid(parseISO(r[config.field])))\n                .map(r => ({\n                        id: r.id,\n                        date: parseISO(r[config.field]),\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) :\n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }));\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName\n     * @param range\n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n\n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => ({aggregation: agg, ccaggregation: ccaggregation}))\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation\n     * @param ccaggregation\n     * @param range\n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most\n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config\n     * @param range\n     * @param iTimeseries\n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection\n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n\n                if((config as TimelineAggregation).aggregation !== undefined\n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }\n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range\n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event\n     * @param closeTooltip\n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n\n\n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => ({\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) :\n                        config.styles,\n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }));\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items\n     * @param resolution\n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n\n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = parseISO(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n\n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n\n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date\n     * @param resolution\n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeHour.offset(date, 12);\n            case \"YYYY-WW\": return timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return timeDay.offset(date, 15);\n            case \"YYYY\": return timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeDay;\n            case \"YYYY-WW\": return timeWeek;\n            case \"YYYY-MM\": return timeMonth;\n            case \"YYYY\": return timeYear;\n        }\n        return timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineCombinedAggregations.html":{"url":"interfaces/TimelineCombinedAggregations.html","title":"interface - TimelineCombinedAggregations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineCombinedAggregations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            current\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                        \n                                            maxNMonths\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregations:         TimelineAggregation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        current\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        current:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxNMonths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxNMonths:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject, map } from 'rxjs';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport { TimelineEventType } from './timeline-legend.component';\nimport { timeFormat } from 'd3-time-format';\nimport { timeMonth, timeDay, timeHour, timeWeek, timeYear } from 'd3-time';\nimport { isValid, parseISO, toDate } from 'date-fns';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default\n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n\n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [parseISO(parsedexpr.values[0]), parseISO(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            toDate(this.selection[0].getTime()-interval*0.1),\n                            toDate(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n\n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n\n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n\n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input,\n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config\n     * @param subject\n     * @param range\n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config\n     * @param subject\n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config\n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if (this.results) {\n            return this.results.records\n                .filter(r =>  isValid(parseISO(r[config.field])))\n                .map(r => ({\n                        id: r.id,\n                        date: parseISO(r[config.field]),\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) :\n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }));\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName\n     * @param range\n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n\n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => ({aggregation: agg, ccaggregation: ccaggregation}))\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation\n     * @param ccaggregation\n     * @param range\n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most\n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config\n     * @param range\n     * @param iTimeseries\n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection\n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n\n                if((config as TimelineAggregation).aggregation !== undefined\n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }\n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range\n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event\n     * @param closeTooltip\n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n\n\n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => ({\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) :\n                        config.styles,\n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }));\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items\n     * @param resolution\n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n\n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = parseISO(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n\n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n\n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date\n     * @param resolution\n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeHour.offset(date, 12);\n            case \"YYYY-WW\": return timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return timeDay.offset(date, 15);\n            case \"YYYY\": return timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeDay;\n            case \"YYYY-WW\": return timeWeek;\n            case \"YYYY-MM\": return timeMonth;\n            case \"YYYY\": return timeYear;\n        }\n        return timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineDate.html":{"url":"interfaces/TimelineDate.html","title":"interface - TimelineDate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport { Record } from '@sinequa/core/web-services';\nimport { TooltipManager } from '@sinequa/analytics/tooltip';\nimport { bisector, extent, max } from 'd3-array';\nimport { scaleLinear, scaleUtc } from 'd3-scale';\nimport { line, area, curveBasis, curveBasisClosed, curveBasisOpen, curveBumpX, curveBumpY, curveLinear, curveLinearClosed, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore } from 'd3-shape';\nimport { brushX, brushSelection } from 'd3-brush';\nimport { select } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { format } from 'd3-format';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\nexport const curveTypes = {\n  curveBasis,\n  curveBasisClosed,\n  curveBasisOpen,\n  curveBumpX,\n  curveBumpY,\n  curveLinear,\n  curveLinearClosed,\n  curveMonotoneX,\n  curveMonotoneY,\n  curveNatural,\n  curveStep,\n  curveStepAfter,\n  curveStepBefore\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    bisectDate = bisector(d => { return d.date; }).left;\n    tooltipManager = new TooltipManager();\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = area()\n                .curve(curveTypes[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = line()\n                .curve(curveTypes[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = select(this.gx.nativeElement);\n        this.yAxis$ = select(this.gy.nativeElement);\n        this.brush$ = select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", e => this.onMousemove(e))\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = extent(allPrimaryDates, d => d.date);\n        const yMax = max(data,\n            s => max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove(event) {\n        if(!this.tooltipManager.isShown && this.showTooltip) {\n            this.tooltipX = this.point(this.gbrush.nativeElement, event)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Equivalent of former d3.mouse()\n     */\n    private point(node: SVGGElement, event: MouseEvent) {\n        var point = new DOMPoint(event.clientX, event.clientY);\n        point = point.matrixTransform(node.getScreenCTM()?.inverse());\n        return [point.x, point.y];\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipManager.isShown) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipManager.data === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            const top = scale * (this.margin.top + 0.3*this.innerHeight); // Align tooltip arrow\n\n            // Tooltip to the right\n            if(relativeX  {\n        this.tooltipManager.hide();\n        this.tooltipX = undefined;\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events !== this.tooltipManager.data) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEvent.html":{"url":"interfaces/TimelineEvent.html","title":"interface - TimelineEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            record\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeOpened\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeOpened\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeOpened:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport { Record } from '@sinequa/core/web-services';\nimport { TooltipManager } from '@sinequa/analytics/tooltip';\nimport { bisector, extent, max } from 'd3-array';\nimport { scaleLinear, scaleUtc } from 'd3-scale';\nimport { line, area, curveBasis, curveBasisClosed, curveBasisOpen, curveBumpX, curveBumpY, curveLinear, curveLinearClosed, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore } from 'd3-shape';\nimport { brushX, brushSelection } from 'd3-brush';\nimport { select } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { format } from 'd3-format';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\nexport const curveTypes = {\n  curveBasis,\n  curveBasisClosed,\n  curveBasisOpen,\n  curveBumpX,\n  curveBumpY,\n  curveLinear,\n  curveLinearClosed,\n  curveMonotoneX,\n  curveMonotoneY,\n  curveNatural,\n  curveStep,\n  curveStepAfter,\n  curveStepBefore\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    bisectDate = bisector(d => { return d.date; }).left;\n    tooltipManager = new TooltipManager();\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = area()\n                .curve(curveTypes[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = line()\n                .curve(curveTypes[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = select(this.gx.nativeElement);\n        this.yAxis$ = select(this.gy.nativeElement);\n        this.brush$ = select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", e => this.onMousemove(e))\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = extent(allPrimaryDates, d => d.date);\n        const yMax = max(data,\n            s => max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove(event) {\n        if(!this.tooltipManager.isShown && this.showTooltip) {\n            this.tooltipX = this.point(this.gbrush.nativeElement, event)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Equivalent of former d3.mouse()\n     */\n    private point(node: SVGGElement, event: MouseEvent) {\n        var point = new DOMPoint(event.clientX, event.clientY);\n        point = point.matrixTransform(node.getScreenCTM()?.inverse());\n        return [point.x, point.y];\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipManager.isShown) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipManager.data === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            const top = scale * (this.margin.top + 0.3*this.innerHeight); // Align tooltip arrow\n\n            // Tooltip to the right\n            if(relativeX  {\n        this.tooltipManager.hide();\n        this.tooltipX = undefined;\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events !== this.tooltipManager.data) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventAggregation.html":{"url":"interfaces/TimelineEventAggregation.html","title":"interface - TimelineEventAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            getDate\n                                        \n                                \n                                \n                                        \n                                            getDisplay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDate:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDisplay:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject, map } from 'rxjs';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport { TimelineEventType } from './timeline-legend.component';\nimport { timeFormat } from 'd3-time-format';\nimport { timeMonth, timeDay, timeHour, timeWeek, timeYear } from 'd3-time';\nimport { isValid, parseISO, toDate } from 'date-fns';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default\n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n\n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [parseISO(parsedexpr.values[0]), parseISO(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            toDate(this.selection[0].getTime()-interval*0.1),\n                            toDate(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n\n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n\n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n\n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input,\n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config\n     * @param subject\n     * @param range\n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config\n     * @param subject\n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config\n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if (this.results) {\n            return this.results.records\n                .filter(r =>  isValid(parseISO(r[config.field])))\n                .map(r => ({\n                        id: r.id,\n                        date: parseISO(r[config.field]),\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) :\n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }));\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName\n     * @param range\n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n\n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => ({aggregation: agg, ccaggregation: ccaggregation}))\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation\n     * @param ccaggregation\n     * @param range\n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most\n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config\n     * @param range\n     * @param iTimeseries\n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection\n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n\n                if((config as TimelineAggregation).aggregation !== undefined\n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }\n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range\n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event\n     * @param closeTooltip\n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n\n\n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => ({\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) :\n                        config.styles,\n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }));\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items\n     * @param resolution\n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n\n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = parseISO(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n\n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n\n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date\n     * @param resolution\n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeHour.offset(date, 12);\n            case \"YYYY-WW\": return timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return timeDay.offset(date, 15);\n            case \"YYYY\": return timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeDay;\n            case \"YYYY-WW\": return timeWeek;\n            case \"YYYY-MM\": return timeMonth;\n            case \"YYYY\": return timeYear;\n        }\n        return timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventType.html":{"url":"interfaces/TimelineEventType.html","title":"interface - TimelineEventType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline-legend.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimelineLegendComponent.html":{"url":"components/TimelineLegendComponent.html","title":"component - TimelineLegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TimelineLegendComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/timeline-legend.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-timeline-legend\n            \n\n\n            \n                styles\n                \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n            \n\n            \n                template\n                \n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                events\n                            \n                            \n                                legendStyles\n                            \n                            \n                                orientation\n                            \n                            \n                                yOffset\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:54\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     TimelineEventType[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        legendStyles\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"row\" | \"column\"\n\n                    \n                \n                \n                    \n                        Default value : \"row\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        yOffset\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:57\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n    \n            \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ timeline.name }}                                            {{ event.name }}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'MultiLevelPieChart', 'selector': 'sq-multi-level-pie-chart'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [{'name': 'FusionChartsDirective', 'selector': 'fusioncharts'},{'name': 'VisNetworkDirective', 'selector': '[visNetwork]'},{'name': 'VisTimelineDirective', 'selector': '[visTimeline]'}];\n    var ACTUAL_COMPONENT = {'name': 'TimelineLegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineRecords.html":{"url":"interfaces/TimelineRecords.html","title":"interface - TimelineRecords","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineRecords\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject, map } from 'rxjs';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport { TimelineEventType } from './timeline-legend.component';\nimport { timeFormat } from 'd3-time-format';\nimport { timeMonth, timeDay, timeHour, timeWeek, timeYear } from 'd3-time';\nimport { isValid, parseISO, toDate } from 'date-fns';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default\n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n\n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [parseISO(parsedexpr.values[0]), parseISO(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            toDate(this.selection[0].getTime()-interval*0.1),\n                            toDate(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n\n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n\n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n\n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input,\n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config\n     * @param subject\n     * @param range\n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config\n     * @param subject\n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config\n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if (this.results) {\n            return this.results.records\n                .filter(r =>  isValid(parseISO(r[config.field])))\n                .map(r => ({\n                        id: r.id,\n                        date: parseISO(r[config.field]),\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) :\n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }));\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName\n     * @param range\n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n\n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => ({aggregation: agg, ccaggregation: ccaggregation}))\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation\n     * @param ccaggregation\n     * @param range\n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most\n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config\n     * @param range\n     * @param iTimeseries\n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection\n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n\n                if((config as TimelineAggregation).aggregation !== undefined\n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }\n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range\n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event\n     * @param closeTooltip\n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n\n\n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config\n     * @param aggregation\n     * @param ccaggregation\n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => ({\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) :\n                        config.styles,\n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }));\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items\n     * @param resolution\n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n\n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = parseISO(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n\n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n\n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date\n     * @param resolution\n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeHour.offset(date, 12);\n            case \"YYYY-WW\": return timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return timeDay.offset(date, 15);\n            case \"YYYY\": return timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return timeDay;\n            case \"YYYY-WW\": return timeWeek;\n            case \"YYYY-MM\": return timeMonth;\n            case \"YYYY\": return timeYear;\n        }\n        return timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineSeries.html":{"url":"interfaces/TimelineSeries.html","title":"interface - TimelineSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineSeries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                        \n                                            dates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDatapoints\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dates:         TimelineDate[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineDate[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDatapoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDatapoints:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport { Record } from '@sinequa/core/web-services';\nimport { TooltipManager } from '@sinequa/analytics/tooltip';\nimport { bisector, extent, max } from 'd3-array';\nimport { scaleLinear, scaleUtc } from 'd3-scale';\nimport { line, area, curveBasis, curveBasisClosed, curveBasisOpen, curveBumpX, curveBumpY, curveLinear, curveLinearClosed, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore } from 'd3-shape';\nimport { brushX, brushSelection } from 'd3-brush';\nimport { select } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { format } from 'd3-format';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\nexport const curveTypes = {\n  curveBasis,\n  curveBasisClosed,\n  curveBasisOpen,\n  curveBumpX,\n  curveBumpY,\n  curveLinear,\n  curveLinearClosed,\n  curveMonotoneX,\n  curveMonotoneY,\n  curveNatural,\n  curveStep,\n  curveStepAfter,\n  curveStepBefore\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    bisectDate = bisector(d => { return d.date; }).left;\n    tooltipManager = new TooltipManager();\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = area()\n                .curve(curveTypes[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = line()\n                .curve(curveTypes[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = select(this.gx.nativeElement);\n        this.yAxis$ = select(this.gy.nativeElement);\n        this.brush$ = select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", e => this.onMousemove(e))\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = extent(allPrimaryDates, d => d.date);\n        const yMax = max(data,\n            s => max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove(event) {\n        if(!this.tooltipManager.isShown && this.showTooltip) {\n            this.tooltipX = this.point(this.gbrush.nativeElement, event)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Equivalent of former d3.mouse()\n     */\n    private point(node: SVGGElement, event: MouseEvent) {\n        var point = new DOMPoint(event.clientX, event.clientY);\n        point = point.matrixTransform(node.getScreenCTM()?.inverse());\n        return [point.x, point.y];\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipManager.isShown) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipManager.data === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            const top = scale * (this.margin.top + 0.3*this.innerHeight); // Align tooltip arrow\n\n            // Tooltip to the right\n            if(relativeX  {\n        this.tooltipManager.hide();\n        this.tooltipX = undefined;\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events !== this.tooltipManager.data) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TooltipManager.html":{"url":"classes/TooltipManager.html","title":"class - TooltipManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TooltipManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            tooltip/tooltip-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                tooltip$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelHide\n                            \n                            \n                                delayedHide\n                            \n                            \n                                hide\n                            \n                            \n                                show\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isShown\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(delay: number)\n                    \n                \n                        \n                            \n                                Defined in tooltip/tooltip-manager.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        delay\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        tooltip$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in tooltip/tooltip-manager.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelHide\n                        \n                    \n                \n            \n            \n                \ncancelHide()\n                \n            \n\n\n            \n                \n                    Defined in tooltip/tooltip-manager.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delayedHide\n                        \n                    \n                \n            \n            \n                \ndelayedHide()\n                \n            \n\n\n            \n                \n                    Defined in tooltip/tooltip-manager.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hide\n                        \n                    \n                \n            \n            \n                \nhide()\n                \n            \n\n\n            \n                \n                    Defined in tooltip/tooltip-manager.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        show\n                        \n                    \n                \n            \n            \n                \nshow(data: T, orientation: \"left\" | \"right\", top: number, dx: number)\n                \n            \n\n\n            \n                \n                    Defined in tooltip/tooltip-manager.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orientation\n                                    \n                                            \"left\" | \"right\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isShown\n                    \n                \n\n                \n                    \n                        getisShown()\n                    \n                \n                            \n                                \n                                    Defined in tooltip/tooltip-manager.ts:37\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in tooltip/tooltip-manager.ts:41\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BehaviorSubject } from \"rxjs\";\n\nexport class TooltipManager {\n\n  tooltip$ = new BehaviorSubject(undefined);\n\n  protected hideTooltipTimeout: NodeJS.Timeout | undefined;\n\n  constructor(\n    protected delay = 200\n  ) { }\n\n  show(data: T, orientation: 'left'|'right', top: number, dx: number) {\n    this.cancelHide();\n    const style = this.getStyle(orientation, top, dx);\n    this.tooltip$.next({data, style, orientation});\n  }\n\n  hide() {\n    this.cancelHide();\n    this.tooltip$.next(undefined);\n  }\n\n  delayedHide() {\n    if (!this.hideTooltipTimeout) {\n      this.hideTooltipTimeout = setTimeout(() => this.hide(), this.delay);\n    }\n  }\n\n  cancelHide() {\n    if (this.hideTooltipTimeout) {\n      clearTimeout(this.hideTooltipTimeout);\n      this.hideTooltipTimeout = undefined;\n    }\n  }\n\n  get isShown(): boolean {\n    return !!this.tooltip$.value;\n  }\n\n  get data(): T | undefined {\n    return this.tooltip$.value?.data;\n  }\n\n  protected getStyle(orientation: 'left'|'right', top: number, dx: number) {\n    if (orientation === \"right\") {\n      return {\n        'left.px': dx + 7,\n        'top.px': top - 21, // Align tooltip arrow\n      }\n    }\n    else {\n      return {\n        'right.px': dx + 7,\n        'top.px': top - 21, // Align tooltip arrow\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VisEvent.html":{"url":"interfaces/VisEvent.html","title":"interface - VisEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VisEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Structure of the events emitted by the Vis.js network\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            pointer\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pointer:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, ContentChild, TemplateRef } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, UntypedFormBuilder } from '@angular/forms';\nimport { Subscription, combineLatest } from 'rxjs';\n\nimport { Results } from '@sinequa/core/web-services';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { UserPreferences } from '@sinequa/components/user-settings';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { VisNetworkService } from './vis-network.service';\nimport { Options } from 'vis-network/esnext';\nimport { DataSet } from 'vis-data/esnext';\n\nimport { Node, Edge, NetworkDataset, NetworkProvider, NetworkContext } from './network-models';\nimport { IntlService } from '@sinequa/core/intl';\n\n/**\n * Default options of the Vis.js network.\n * See: https://visjs.github.io/vis-network/docs/network/\n */\nexport const defaultOptions: Options = {\n    height: '500px'\n};\n\n/**\n * Structure of the events emitted by the Vis.js network\n */\nexport interface VisEvent {\n    nodes: string[];\n    edges: string[];\n    event: any;\n    items: any[];\n    pointer: any;\n}\n\n@Component({\n    selector: 'sq-network',\n    templateUrl: './network.component.html'\n})\nexport class NetworkComponent extends AbstractFacet implements OnChanges, OnDestroy {\n\n    /** Name of the network - should be unique within the app */\n    @Input() name = \"Network\";\n\n    /** Input results - used to produce a OnChange event when  */\n    @Input() results: Results;\n\n    @Input() providers: NetworkProvider[];\n\n    /** General Vis options passed to the network (https://visjs.github.io/vis-network/docs/network/) */\n    @Input() options: Options = defaultOptions;\n\n    optionsPrefs: Options;\n\n    @Output() nodeClicked = new EventEmitter();\n    @Output() edgeClicked = new EventEmitter();\n\n    // Settings form\n    form: UntypedFormGroup;\n\n    // State\n    _networkInitialized: boolean;\n    _selectedNode?: Node;\n    _selectedEdge?: Edge;\n\n    // Actions\n    _actions: Action[] = [];\n    refreshAction: Action;\n    clearFilters: Action;\n\n    // Info cards\n    @ContentChild(\"nodeTpl\", {static: false}) nodeTpl: TemplateRef;\n    @ContentChild(\"edgeTpl\", {static: false}) edgeTpl: TemplateRef;\n\n    readonly context: NetworkContext;\n\n    providersSubscription: Subscription;\n\n    constructor(\n        public networkService: VisNetworkService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public intlService: IntlService,\n        public formBuilder: UntypedFormBuilder,\n        public prefs: UserPreferences,\n        public exprBuilder: ExprBuilder\n    ) {\n        super();\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.nodeClicked.subscribe((node?: Node) => {\n            this.providers.forEach(p => p.onNodeClicked(node));\n        });\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.edgeClicked.subscribe((edge?: Edge) => {\n            this.providers.forEach(p => p.onEdgeClicked(edge));\n        });\n\n        // Refresh the network\n        this.refreshAction = new Action({\n            icon: \"fas fa-sync-alt\",\n            title: \"msg#network.actions.refresh\",\n            action: () => {\n                this.updateData();\n                this.updateActions();\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        this.context = {\n            name: this.name,\n            nodes: new DataSet(),\n            edges: new DataSet(),\n            searchService: searchService,\n            appService: appService,\n            networkService: networkService,\n            intlService: intlService,\n            exprBuilder: exprBuilder,\n            select: (node?: Node, edge?: Edge) => this.select(node, edge),\n        };\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(changes['results'] || changes['providers']) {\n            // Update the context\n            this.context.name = this.name;\n\n            // Update selections\n            this.selectEdge();\n            this.selectNode();\n\n            // Update options from the preferences\n            this.updateOptions();\n\n            // Update data from the providers (async)\n            this.updateData();\n\n            // Update the actions of the facet\n            this.updateActions();\n        }\n        else if(changes['options']) {\n            this.updateOptions();\n        }\n\n    }\n\n    /**\n     * Resets the nodes and edges, create a new listener for the providers and\n     * call getData() on these providers to refresh the data\n     */\n    protected updateData() {\n\n        this.context.nodes.clear();\n        this.context.edges.clear();\n\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n\n        this.providersSubscription = combineLatest(\n            this.providers.map(p => p.getProvider())\n        ).subscribe(datasets =>\n            this.mergeDatasets(datasets.filter(d => !!d) as NetworkDataset[])\n        );\n\n        this.providers.forEach(p => p.getData(this.context));\n    }\n\n    /**\n     * Take in the datasets produced by each provider and merges them into\n     * a single one\n     * @param datasets\n     */\n    protected mergeDatasets(datasets: NetworkDataset[]) {\n        const dataset = datasets.reduce((prev, cur) => prev.merge(cur), new NetworkDataset());\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onDatasetsMerged(dataset));\n\n        // TODO: Post process the dataset somehow to adjust visibility (or other properties)\n        dataset.updateDatasets(this.context.nodes, this.context.edges);\n\n        // Fit the nodes and edges\n        if(this._networkInitialized) {\n            this.fitNetwork();\n        }\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onNodesInserted(this.context.nodes.get()));\n\n        this.updateActions();\n    }\n\n    override get actions(): Action[] {\n        return this._actions;\n    }\n\n    /**\n     * Updates the actions displayed in the facet frame (_action variable).\n     * Actions may come from this component or from its providers\n     */\n    protected updateActions() {\n        this._actions = [];\n\n        // Clear the active filters\n        if(this.searchService.breadcrumbs && !!this.searchService.breadcrumbs.findSelect(this.name)) {\n            this._actions.push(this.clearFilters);\n        }\n\n        // Selected node actions\n        if(this._selectedNode) {\n            this.providers.forEach(p => {\n                const actions = p.getNodeActions(this._selectedNode!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Selected edge actions\n        if(this._selectedEdge) {\n            this.providers.forEach(p => {\n                const actions = p.getEdgeActions(this._selectedEdge!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Actions specific to each provider\n        const providersActionList = new Action({\n            icon: \"fas fa-tasks\",\n            title: \"msg#network.actions.providers\",\n            children: this.providers.map(p => new Action({\n                text: this.intlService.formatMessage(p.name),\n                title: this.intlService.formatMessage(p.name),\n                children: p.getProviderActions()\n            }))\n        });\n        this._actions.push(providersActionList);\n\n        // Action to refresh the network\n        this._actions.push(this.refreshAction);\n\n    }\n\n    /**\n     * Fit the network view (zoom and position) to its content, with a delay\n     * to avoid some elusive bugs in the Vis library\n     */\n    fitNetwork() {\n        this.networkService.fit(this.name);\n    }\n\n\n    // Event handling\n\n    /**\n     * Called from the template by ngx-vis, when the network is initialized,\n     * and the NetworkService can be used.\n     */\n    networkInitialized() {\n        this._networkInitialized = true;\n\n        // now we can use the service to register on events\n        this.networkService.on(this.name, 'click');\n\n        this.networkService.click.subscribe((eventData: any[]) => this.onNetworkClick(eventData));\n\n        this.networkService.setOptions(this.name, this.optionsPrefs);\n\n    }\n\n    /**\n     * Method called when a node or edge in the network is clicked.\n     * The method generates appropriate nodeClicked and edgeClicked events,\n     * and updates the state of _selectedEdge and _selectedNode.\n     * @param eventData\n     */\n    protected onNetworkClick(eventData: any[]) {\n        if (eventData[0] === this.name) {\n            const event = eventData[1] as VisEvent;\n\n            if(event.event.type === \"tap\") {\n\n                if(event.edges.length === 1 && event.nodes.length === 0) {\n                    this.selectEdge(this.context.edges.get(event.edges[0]) as Edge);\n                    this.selectNode();\n                }\n                else {\n                    this.selectEdge();\n                    if(event.nodes.length === 1) {\n                        this.selectNode(this.context.nodes.get(event.nodes[0]) as Node);\n                    }\n                    else {\n                        this.selectNode();\n                    }\n                }\n\n            }\n            else {\n                this.selectNode();\n                this.selectEdge();\n            }\n\n            this.updateActions();\n        }\n    }\n\n    select(node?: Node, edge?: Edge) {\n        this.selectNode(node);\n        this.selectEdge(edge);\n        this.updateActions();\n    }\n\n    selectNode(node?: Node) {\n        this._selectedNode = node;\n        this.nodeClicked.next(node);\n    }\n\n    selectEdge(edge?: Edge) {\n        this._selectedEdge = edge;\n        this.edgeClicked.next(edge);\n    }\n\n    ngOnDestroy() {\n        this.networkService.off(this.name, 'click');\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n    }\n\n\n    // Settings\n\n    /**\n     * Sets the options values either to the user preferences (stored in user settings)\n     * or the default values.\n     */\n    updateOptions() {\n        this.optionsPrefs = Utils.copy(this.options);\n        if(!this.optionsPrefs.physics){\n            this.optionsPrefs.physics = {};\n        }\n        if(!this.optionsPrefs.physics.barnesHut){\n            this.optionsPrefs.physics.barnesHut = {};\n        }\n        this.optionsPrefs.physics.barnesHut.springLength = this.springLengthPref;\n        this.optionsPrefs.physics.barnesHut.springConstant = this.springConstantPref / 100;\n        this.optionsPrefs.physics.barnesHut.damping = this.dampingPref / 100;\n        this.optionsPrefs.physics.barnesHut.gravitationalConstant = -this.repulsionPref;\n        this.optionsPrefs.physics.barnesHut.centralGravity = this.gravityPref / 10;\n\n        if(this._networkInitialized) {\n            this.networkService.setOptions(this.name, this.optionsPrefs);\n            this.fitNetwork();\n        }\n    }\n\n    /**\n     * Method from the AbstractFacet interface called when the settings\n     * panel is opened or closed\n     * @param opened whether settings are opened or closed\n     */\n    override onOpenSettings(opened: boolean){\n        if(opened) {\n            const springLengthControl = new UntypedFormControl(this.springLengthPref);\n            const springConstantControl = new UntypedFormControl(this.springConstantPref);\n            const dampingControl = new UntypedFormControl(this.dampingPref);\n            const repulsionControl = new UntypedFormControl(this.repulsionPref);\n            const gravityControl = new UntypedFormControl(this.gravityPref);\n\n            this.form = this.formBuilder.group({\n                springLength: springLengthControl,\n                springConstant: springConstantControl,\n                damping: dampingControl,\n                repulsion: repulsionControl,\n                gravity: gravityControl\n            });\n\n            this.form.valueChanges.subscribe(_ => {\n                this.prefs.set(this.name+'-spring-length', springLengthControl.value, true);\n                this.prefs.set(this.name+'-spring-constant', springConstantControl.value, true);\n                this.prefs.set(this.name+'-damping', dampingControl.value, true);\n                this.prefs.set(this.name+'-repulsion', repulsionControl.value, true);\n                this.prefs.set(this.name+'-gravity', gravityControl.value, true);\n                this.debounceSync();\n            });\n        }\n        else {\n            this.updateOptions();\n            this.updateData();\n        }\n    }\n\n    // Debounce syncing to avoid many calls to the user settings web service\n    debounceSync = Utils.debounce(() => {\n        this.prefs.sync();\n    }, 1000);\n\n    /**\n     * This method resets all the user preferences and rebuilds the settings form,\n     * so that the values displayed are up-to-date\n     */\n    setDefaults() {\n        this.prefs.delete(this.name+'-spring-length', true);\n        this.prefs.delete(this.name+'-spring-constant',true);\n        this.prefs.delete(this.name+'-damping', true);\n        this.prefs.delete(this.name+'-repulsion', true);\n        this.prefs.delete(this.name+'-gravity', true);\n        this.prefs.sync();\n        this.onOpenSettings(true);\n    }\n\n    // Accessor method for each of the settings.\n    // Return either the saved user preference or the default value.\n\n    get springLengthPref(): number {\n        return this.prefs.get(this.name+'-spring-length') || 100;\n    }\n\n    get springConstantPref(): number {\n        return this.prefs.get(this.name+'-spring-constant') || 4;\n    }\n\n    get dampingPref(): number {\n        return this.prefs.get(this.name+'-damping') || 50;\n    }\n\n    get repulsionPref(): number {\n        return this.prefs.get(this.name+'-repulsion') || 2000;\n    }\n\n    get gravityPref(): number {\n        return this.prefs.get(this.name+'-gravity') || 3;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/VisNetworkDirective.html":{"url":"directives/VisNetworkDirective.html","title":"directive - VisNetworkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  VisNetworkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/vis-network.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Use this directive with a div container to show network data.\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n                            OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [visNetwork]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnChanges\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                visNetwork\n                            \n                            \n                                visNetworkData\n                            \n                            \n                                visNetworkOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                initialized\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(elementRef: ElementRef, visNetworkService: VisNetworkService)\n                    \n                \n                        \n                            \n                                Defined in network/vis-network.directive.ts:72\n                            \n                        \n\n                \n                    \n                            Creates an instance of VisNetworkDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTML element reference.\n\n                                                        \n                                                \n                                                \n                                                        visNetworkService\n                                                  \n                                                        \n                                                                        VisNetworkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The VisNetworkService.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        visNetwork\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in network/vis-network.directive.ts:33\n                            \n                        \n                \n                    \n                        The name or identifier of the network (must be unique in your application).\nThis property is used once on init and must not be changed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        visNetworkData\n                    \n                \n                \n                    \n                        Type :         Data\n\n                    \n                \n                        \n                            \n                                    Defined in network/vis-network.directive.ts:45\n                            \n                        \n                \n                    \n                        The data that will be used to create the network.\nChanges to the nodes or edges property won't be detected but\nchanges to the reference of this object.\nChanges lead to a call to setData of this network instance.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        visNetworkOptions\n                    \n                \n                \n                    \n                        Type :     Options\n\n                    \n                \n                        \n                            \n                                    Defined in network/vis-network.directive.ts:57\n                            \n                        \n                \n                    \n                        The options that will be used with this network instance.\nOnly reference changes to the whole options object will be detected\nbut not changes to properties.\nChanges lead to a call to setOptions of the network instance.\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        initialized\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in network/vis-network.directive.ts:69\n                            \n                        \n                \n                    \n                        This event will be raised when the network is initialized.\nAt this point of time the network is successfully registered\nwith the VisNetworkService and you can register to events.\nThe event data is the name of the network as a string.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnChanges(changes: literal type)\n                \n            \n\n\n            \n                \n                    Defined in network/vis-network.directive.ts:106\n                \n            \n\n\n            \n                \n                    Update the network data or options on reference changes to\nthe visData or visOptions properties.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/vis-network.directive.ts:131\n                \n            \n\n\n            \n                \n                    Calls the destroy function for this network instance.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in network/vis-network.directive.ts:92\n                \n            \n\n\n            \n                \n                    Create the network when at least visNetwork and visData\nare defined.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                    \n                        \n                                Defined in network/vis-network.directive.ts:82\n                        \n                    \n\n            \n                \n                    The HTML element reference.\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\nimport { Data, Options } from 'vis-network/esnext';\n\nimport { VisNetworkService } from './vis-network.service';\n\n/**\n * Use this directive with a div container to show network data.\n *\n * @export\n * @class VisNetworkDirective\n * @implements {OnInit}\n * @implements {OnDestroy}\n * @implements {OnChanges}\n */\n@Directive({\n  selector: '[visNetwork]',\n})\nexport class VisNetworkDirective implements OnInit, OnDestroy, OnChanges {\n  /**\n   * The name or identifier of the network (must be unique in your application).\n   * This property is used once on init and must not be changed.\n   *\n   * @type {string}\n   * @memberOf VisNetworkDirective\n   */\n  @Input('visNetwork')\n  public visNetwork: string;\n\n  /**\n   * The data that will be used to create the network.\n   * Changes to the nodes or edges property won't be detected but\n   * changes to the reference of this object.\n   * Changes lead to a call to setData of this network instance.\n   *\n   * @type {Data}\n   * @memberOf VisNetworkDirective\n   */\n  @Input()\n  public visNetworkData: Data;\n\n  /**\n   * The options that will be used with this network instance.\n   * Only reference changes to the whole options object will be detected\n   * but not changes to properties.\n   * Changes lead to a call to setOptions of the network instance.\n   *\n   * @type {VisOptions}\n   * @memberOf VisNetworkDirective\n   */\n  @Input()\n  public visNetworkOptions: Options;\n\n  /**\n   * This event will be raised when the network is initialized.\n   * At this point of time the network is successfully registered\n   * with the VisNetworkService and you can register to events.\n   * The event data is the name of the network as a string.\n   *\n   * @type {EventEmitter}\n   * @memberOf VisNetworkDirective\n   */\n  @Output()\n  public initialized: EventEmitter = new EventEmitter();\n\n  private visNetworkContainer: any;\n  private isInitialized: boolean = false;\n\n  /**\n   * Creates an instance of VisNetworkDirective.\n   *\n   * @param {ElementRef} elementRef The HTML element reference.\n   * @param {VisNetworkService} visNetworkService The VisNetworkService.\n   *\n   * @memberOf VisNetworkDirective\n   */\n  public constructor(public elementRef: ElementRef, private visNetworkService: VisNetworkService) {\n    this.visNetworkContainer = elementRef.nativeElement;\n  }\n\n  /**\n   * Create the network when at least visNetwork and visData\n   * are defined.\n   *\n   * @memberOf VisNetworkDirective\n   */\n  public ngOnInit(): void {\n    if (!this.isInitialized && this.visNetwork && this.visNetworkData) {\n      this.createNetwork();\n    }\n  }\n\n  /**\n   * Update the network data or options on reference changes to\n   * the visData or visOptions properties.\n   *\n   * @param {{[propName: string]: SimpleChange}} changes\n   *\n   * @memberOf VisNetworkDirective\n   */\n  public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n    if (!this.isInitialized && this.visNetwork && this.visNetworkData) {\n      this.createNetwork();\n    }\n\n    for (const propertyName in changes) {\n      if (changes.hasOwnProperty(propertyName)) {\n        const change = changes[propertyName];\n        if (!change.isFirstChange()) {\n          if (propertyName === 'visNetworkData') {\n            this.visNetworkService.setData(this.visNetwork, changes[propertyName].currentValue);\n          }\n          if (propertyName === 'visNetworkOptions') {\n            this.visNetworkService.setOptions(this.visNetwork, changes[propertyName].currentValue);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Calls the destroy function for this network instance.\n   *\n   * @memberOf VisNetworkDirective\n   */\n  public ngOnDestroy(): void {\n    this.isInitialized = false;\n    this.visNetworkService.destroy(this.visNetwork);\n  }\n\n  private createNetwork(): void {\n    this.visNetworkService.create(this.visNetwork, this.visNetworkContainer, this.visNetworkData, this.visNetworkOptions);\n    this.isInitialized = true;\n    this.initialized.emit(this.visNetwork);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/VisTimelineDirective.html":{"url":"directives/VisTimelineDirective.html","title":"directive - VisTimelineDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  VisTimelineDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            vis-timeline/vis-timeline.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Use this directive with a div container to show timeline data.\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n                            OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [visTimeline]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnChanges\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                visTimeline\n                            \n                            \n                                visTimelineGroups\n                            \n                            \n                                visTimelineItems\n                            \n                            \n                                visTimelineOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                initialized\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(elementRef: ElementRef, visTimelineService: VisTimelineService)\n                    \n                \n                        \n                            \n                                Defined in vis-timeline/vis-timeline.directive.ts:82\n                            \n                        \n\n                \n                    \n                            Creates an instance of VisTimelineDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The HTML element reference.\n\n                                                        \n                                                \n                                                \n                                                        visTimelineService\n                                                  \n                                                        \n                                                                        VisTimelineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The VisTimelineService.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        visTimeline\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/vis-timeline.directive.ts:34\n                            \n                        \n                \n                    \n                        The name or identifier of the timeline (must be unique in your application).\nThis property is used once on init and must not be changed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        visTimelineGroups\n                    \n                \n                \n                    \n                        Type :     DataGroupCollectionType\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/vis-timeline.directive.ts:56\n                            \n                        \n                \n                    \n                        The groups that will be used to create the timeline.\nChanges will be detected. If the reference changes then\nsetGroups will be called on this timeline instance.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        visTimelineItems\n                    \n                \n                \n                    \n                        Type :     DataItemCollectionType\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/vis-timeline.directive.ts:45\n                            \n                        \n                \n                    \n                        The data that will be used to create the timeline.\nChanges will be detected. If the reference changes then\nsetData will be called on this timeline instance.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        visTimelineOptions\n                    \n                \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/vis-timeline.directive.ts:67\n                            \n                        \n                \n                    \n                        The options that will be used with this timeline.\nChanges will be detected. If the reference changes then\nsetOptions will be called on this timeline instance.\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        initialized\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/vis-timeline.directive.ts:79\n                            \n                        \n                \n                    \n                        This event will be raised when the timline is initialized.\nAt this point of time the timeline is successfully registered\nwith the VisNetworkService and you can register to events.\nThe event data is the name of the timeline as a string.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnChanges(changes: literal type)\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/vis-timeline.directive.ts:116\n                \n            \n\n\n            \n                \n                    Update the timeline data, groups or options on reference changes to\nthe visTimelineItems, visTimelineGroups or visTimelineOptions properties.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/vis-timeline.directive.ts:145\n                \n            \n\n\n            \n                \n                    Calls the destroy function for this timeline instance.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/vis-timeline.directive.ts:102\n                \n            \n\n\n            \n                \n                    Create the timeline when at least visNetwork and visNetworkData\nare defined.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/vis-timeline.directive.ts:92\n                        \n                    \n\n            \n                \n                    The HTML element reference.\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\nimport { DataGroupCollectionType, DataItemCollectionType, TimelineOptions } from 'vis-timeline/esnext';\n\nimport { VisTimelineService } from './vis-timeline.service';\n\n\n/**\n * Use this directive with a div container to show timeline data.\n *\n * @export\n * @class VisTimelineDirective\n * @implements {OnInit}\n * @implements {OnDestroy}\n * @implements {OnChanges}\n */\n@Directive({\n  selector: '[visTimeline]',\n})\nexport class VisTimelineDirective implements OnInit, OnDestroy, OnChanges {\n  /**\n   * The name or identifier of the timeline (must be unique in your application).\n   * This property is used once on init and must not be changed.\n   *\n   * @type {string}\n   * @memberOf VisTimelineDirective\n   */\n  @Input('visTimeline')\n  public visTimeline: string;\n\n  /**\n   * The data that will be used to create the timeline.\n   * Changes will be detected. If the reference changes then\n   * setData will be called on this timeline instance.\n   *\n   * @type {VisTimelineItems}\n   * @memberOf VisTimelineDirective\n   */\n  @Input()\n  public visTimelineItems: DataItemCollectionType;\n\n  /**\n   * The groups that will be used to create the timeline.\n   * Changes will be detected. If the reference changes then\n   * setGroups will be called on this timeline instance.\n   *\n   * @type {VisTimelineGroups}\n   * @memberOf VisTimelineDirective\n   */\n  @Input()\n  public visTimelineGroups: DataGroupCollectionType;\n\n  /**\n   * The options that will be used with this timeline.\n   * Changes will be detected. If the reference changes then\n   * setOptions will be called on this timeline instance.\n   *\n   * @type {VisTimelineOptions}\n   * @memberOf VisTimelineDirective\n   */\n  @Input()\n  public visTimelineOptions: TimelineOptions;\n\n  /**\n   * This event will be raised when the timline is initialized.\n   * At this point of time the timeline is successfully registered\n   * with the VisNetworkService and you can register to events.\n   * The event data is the name of the timeline as a string.\n   *\n   * @type {EventEmitter}\n   * @memberOf VisTimelineDirective\n   */\n  @Output()\n  public initialized: EventEmitter = new EventEmitter();\n\n  private visTimelineContainer: any;\n  private isInitialized: boolean = false;\n\n  /**\n   * Creates an instance of VisTimelineDirective.\n   *\n   * @param {ElementRef} elementRef The HTML element reference.\n   * @param {VisTimelineService} visTimelineService The VisTimelineService.\n   *\n   * @memberOf VisTimelineDirective\n   */\n  public constructor(public elementRef: ElementRef, private visTimelineService: VisTimelineService) {\n    this.visTimelineContainer = elementRef.nativeElement;\n  }\n\n  /**\n   * Create the timeline when at least visNetwork and visNetworkData\n   * are defined.\n   *\n   * @memberOf VisTimelineDirective\n   */\n  public ngOnInit(): void {\n    if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\n      this.createTimeline();\n    }\n  }\n\n  /**\n   * Update the timeline data, groups or options on reference changes to\n   * the visTimelineItems, visTimelineGroups or visTimelineOptions properties.\n   *\n   * @param {{[propName: string]: SimpleChange}} changes\n   *\n   * @memberOf VisTimelineDirective\n   */\n  public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n    if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {\n      this.createTimeline();\n    }\n\n    for (const propertyName in changes) {\n      if (changes.hasOwnProperty(propertyName)) {\n        const change = changes[propertyName];\n        if (!change.isFirstChange()) {\n          if (propertyName === 'visTimelineItems') {\n            this.visTimelineService.setItems(this.visTimeline, changes[propertyName].currentValue);\n          }\n          if (propertyName === 'visTimelineOptions') {\n            this.visTimelineService.setOptions(this.visTimeline, changes[propertyName].currentValue);\n          }\n          if (propertyName === 'visTimelineGroups') {\n            this.visTimelineService.setGroups(this.visTimeline, changes[propertyName].currentValue);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Calls the destroy function for this timeline instance.\n   *\n   *\n   * @memberOf VisTimelineDirective\n   */\n  public ngOnDestroy(): void {\n    this.isInitialized = false;\n    this.visTimelineService.destroy(this.visTimeline);\n  }\n\n  private createTimeline(): void {\n    if (this.visTimelineGroups) {\n      this.visTimelineService.createWithItemsAndGroups(\n        this.visTimeline,\n        this.visTimelineContainer,\n        this.visTimelineItems,\n        this.visTimelineGroups,\n        this.visTimelineOptions,\n      );\n    } else {\n      this.visTimelineService.createWithItems(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineOptions);\n    }\n    this.isInitialized = true;\n    this.initialized.emit(this.visTimeline);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VisTimelineModule.html":{"url":"modules/VisTimelineModule.html","title":"module - VisTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    VisTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nVisTimelineDirective\n\nVisTimelineDirective\n\nVisTimelineModule -->\n\nVisTimelineDirective->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\nVisTimelineDirective \n\nVisTimelineDirective \n\nVisTimelineDirective  -->\n\nVisTimelineModule->VisTimelineDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            vis-timeline/vis-timeline-module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultTimeline\n                        \n                        \n                            VisTimelineDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultTimeline\n                        \n                        \n                            VisTimelineDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {ResultTimeline} from \"./result-timeline/result-timeline\";\nimport { VisTimelineDirective } from \"./vis-timeline.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        IntlModule\n    ],\n    declarations: [\n        ResultTimeline,\n        VisTimelineDirective\n    ],\n    exports: [\n        ResultTimeline,\n        VisTimelineDirective\n    ]\n})\nexport class VisTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            component\n            AgGridViewComponent\n            \n                73 %\n                (45/61)\n            \n        \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            interface\n            Column\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ag-grid/data-modal.component.ts\n            \n            component\n            DataModalComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                ag-grid/datasource.ts\n            \n            class\n            SqDatasource\n            \n                42 %\n                (11/26)\n            \n        \n        \n            \n                \n                ag-grid/facet-wrapper.component.ts\n            \n            component\n            FacetWrapperComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            deGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            enGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            frGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            deFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            enFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            frFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            component\n            MoneyCloudComponent\n            \n                9 %\n                (4/41)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            interface\n            MoneyCloudDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            component\n            MoneyTimelineComponent\n            \n                31 %\n                (13/41)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            interface\n            MoneyDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                fusioncharts/angular-fusioncharts/events/events.ts\n            \n            variable\n            eventList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                fusioncharts/angular-fusioncharts/fusioncharts.constructor.ts\n            \n            function\n            FusionChartsConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                fusioncharts/angular-fusioncharts/fusioncharts.directive.ts\n            \n            directive\n            FusionChartsDirective\n            \n                0 %\n                (1/204)\n            \n        \n        \n            \n                \n                fusioncharts/angular-fusioncharts/fusioncharts.service.ts\n            \n            injectable\n            FusionChartsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                fusioncharts/angular-fusioncharts/fusioncharts.service.ts\n            \n            injectable\n            FusionChartsStatic\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                fusioncharts/angular-fusioncharts/interfaces/FusionChartInstance.ts\n            \n            interface\n            FusionChartInstance\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                fusioncharts/angular-fusioncharts/interfaces/FusionChartsEvent.ts\n            \n            interface\n            FusionChartsEvent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            component\n            FusionChart\n            \n                23 %\n                (9/38)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            variable\n            defaultChart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                fusioncharts/multi-level-pie-chart/multi-level-pie-chart.ts\n            \n            component\n            MultiLevelPieChart\n            \n                26 %\n                (12/45)\n            \n        \n        \n            \n                \n                fusioncharts/multi-level-pie-chart/multi-level-pie-chart.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                fusioncharts/multi-level-pie-chart/multi-level-pie-chart.ts\n            \n            variable\n            defaultMultiLevelChart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/dark-style.ts\n            \n            variable\n            darkStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/googlemaps.service.ts\n            \n            injectable\n            GoogleMapsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                googlemaps/googlemaps.service.ts\n            \n            variable\n            GOOGLE_MAPS_API_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/map.component.ts\n            \n            component\n            MapComponent\n            \n                33 %\n                (11/33)\n            \n        \n        \n            \n                \n                googlemaps/map.component.ts\n            \n            interface\n            GeoRecord\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            deGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            enGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            frGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/facet-heatmap.component.ts\n            \n            component\n            BsFacetHeatmapComponent\n            \n                23 %\n                (13/56)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            component\n            BsHeatmapComponent\n            \n                22 %\n                (8/36)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            interface\n            HeatmapItem\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            variable\n            colorSchemes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/results-heatmap-view.ts\n            \n            component\n            BsResultsHeatmapView\n            \n                18 %\n                (11/60)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            deHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            enHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            frHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                network/edge-info-card.component.ts\n            \n            component\n            BsEdgeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            class\n            NetworkDataset\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Edge\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            EdgeType\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkContext\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkProvider\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Node\n            \n                22 %\n                (2/9)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NodeType\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            asyncRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationExpandDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            oOTBConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            recordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            selectedRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiAsyncConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynEdgeConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiMultiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            component\n            NetworkComponent\n            \n                21 %\n                (8/38)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            interface\n            VisEvent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            variable\n            defaultOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            component\n            BsNodeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            interface\n            NodeData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            class\n            AggregationProvider\n            \n                47 %\n                (10/21)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdge\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdgeType\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            function\n            isAggregationEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/async-records-provider.ts\n            \n            class\n            AsyncRecordsProvider\n            \n                45 %\n                (9/20)\n            \n        \n        \n            \n                \n                network/providers/base-provider.ts\n            \n            class\n            BaseProvider\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            class\n            DynamicEdgeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdge\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdgeType\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            function\n            isDynamicEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            class\n            DynamicNodeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            interface\n            DynamicNodeType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                network/providers/provider-factory.ts\n            \n            injectable\n            ProviderFactory\n            \n                90 %\n                (30/33)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            class\n            RecordsProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            CustomData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            RecordNode\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            StructuralEdgeType\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            function\n            isStructuralEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/selected-records-provider.ts\n            \n            class\n            SelectedRecordsProvider\n            \n                35 %\n                (7/20)\n            \n        \n        \n            \n                \n                network/vis-network.directive.ts\n            \n            directive\n            VisNetworkDirective\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                network/vis-network.service.ts\n            \n            injectable\n            VisNetworkService\n            \n                100 %\n                (77/77)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            component\n            NgxChart\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartDataPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            component\n            FacetNgxChart\n            \n                17 %\n                (4/23)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            interface\n            FacetChartDataPoint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                public-api.ts\n            \n            variable\n            sinequaComponentsModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            component\n            BsFacetDate\n            \n                0 %\n                (0/30)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            interface\n            FacetDateConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            interface\n            FacetDateParams\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            component\n            BsFacetTimelineComponent\n            \n                25 %\n                (15/60)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineAggregation\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineCombinedAggregations\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineEventAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineRecords\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            component\n            TimelineLegendComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            interface\n            TimelineEventType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            component\n            BsTimelineComponent\n            \n                11 %\n                (7/61)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineDate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineSeries\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            variable\n            curveTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                tooltip/tooltip-manager.ts\n            \n            class\n            TooltipManager\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                tooltip/tooltip.component.ts\n            \n            component\n            BsTooltipComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            component\n            ResultTimeline\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                vis-timeline/vis-timeline.directive.ts\n            \n            directive\n            VisTimelineDirective\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                vis-timeline/vis-timeline.service.ts\n            \n            injectable\n            VisTimelineService\n            \n                97 %\n                (44/45)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @sinequa/components : ^0.0.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/google-maps : 14.0.6\n        \n            @googlemaps/js-api-loader : ^1.14.3\n        \n            @swimlane/ngx-charts : ^20.1.0\n        \n            fusioncharts : 3.15.1-sr.1\n        \n            vis-network : 9.1.2\n        \n            vis-timeline : 7.7.0\n        \n            vis-data : 7.1.4\n        \n            vis-util : 5.0.3\n        \n            @egjs/hammerjs : 2.0.17\n        \n            keycharm : 0.3.1\n        \n            propagating-hammerjs : 2.0.1\n        \n            uuid : 8.3.2\n        \n            timsort : ^0.3.0\n        \n            xss : ^1.0.0\n        \n            d3 : ^7.6.1\n        \n            ag-grid-angular : ^25.2.0\n        \n            ag-grid-community : ^25.2.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationExpandDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            FusionChartsConstructor   (fusioncharts/.../fusioncharts.constructor.ts)\n                        \n                        \n                            isAggregationEdgeType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            isDynamicEdgeType   (network/.../dynamic-edge-provider.ts)\n                        \n                        \n                            isStructuralEdgeType   (network/.../records-provider.ts)\n                        \n                        \n                            oOTBConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            recordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            selectedRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiAsyncConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynEdgeConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiMultiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/network-sample-configs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        asyncRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nasyncRecordsProviderDemo(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network for a list of records fetched with a query. The query\nspecifically returns 5 wikipedia documents about \"human\" and containing the text \"google\".\nThe record nodes are rendered with the wikipedia thumbnail rather than a generic icon.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cooccurrence distribution between person and company\nentities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocRecordDemo\n                        \n                    \n                \n            \n            \n                \ncoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the cooccurrence entities\ncontained in these records. The record nodes themselves are actually hidden (hideRecordNode=true).\nThe cooccurrence entities are each displayed as two nodes linked by an edge.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationExpandDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationExpandDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\nAdditionally, the company and person nodes can be expanded to other company, person\nand geo entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oOTBConfig\n                        \n                    \n                \n            \n            \n                \noOTBConfig(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected record and three cross-distributions between geo, \nperson and company entities.\nAdditionally, the metadata nodes are expandable to other metadata nodes, via cross-distributions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nrecordsProviderDemo(providerFactory: ProviderFactory, records)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    records\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A given list of records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nselectedRecordsProviderDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the selected records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\nThe network is refreshed every time documents are selected or unselected.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a triple-cooccurrence between person, companies and in-between\na \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)').\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocRecordDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the triple-cooccurrence entities\nbetween person, companies and in-between a \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)') contained\nin these records.\nThe cooccurrence entities are each displayed as two nodes linked by a typed edge (with a label showing the \"job\").\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiAsyncConfig\n                        \n                    \n                \n            \n            \n                \nwikiAsyncConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records fetched via a query asynchronously, and cross-distributions\nbetween the geo, company and person nodes.\nThe query specifically asks for 3 wikipedia documents about \"Barack Obama\".\nThe network will contain relations between the records and the metadata displayed among the aggregation\nedges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from cross distribution between Company and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when clicked on,\nby default) with a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon),\nand \"structural edges\" are added to the nodes (in this case we display the \"company\" entities\ncontained in the wikipedia pages of the person).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynEdgeConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynEdgeConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records. Additionally, when these records\nare inserted, fetches additional records from the server, which gets attached to the record\nnodes (\"dynamic edges\"). Specifically these new records are 5 wikipedia articles about humans\nand talking about whatever the original node's label is. (if the original node is \"Microsoft\",\nthe dynamic edges will likely include Bill Gates, Steve Ballmer, Paul Allen, etc.)\nThe nodes of these new records (with the \"people\" type) are displayed with the wikipedia thumbnail.\nAdditionally we display the company entities contained in these people nodes (structural edges).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiMultiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiMultiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from 3 cross distribution between Company, Geo and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when inserted) \nwith a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon).\nAdditionally, the company nodes are manually expandable to display relations with other people nodes.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    fusioncharts/angular-fusioncharts/fusioncharts.constructor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FusionChartsConstructor\n                        \n                    \n                \n            \n            \n                \nFusionChartsConstructor(fusionchartsService: any, chartConfig: Object)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fusionchartsService\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    chartConfig\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    network/providers/aggregation-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAggregationEdgeType\n                        \n                    \n                \n            \n            \n                \nisAggregationEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether an EdgeType is an AggregationEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AggregationEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/dynamic-edge-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDynamicEdgeType\n                        \n                    \n                \n            \n            \n                \nisDynamicEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether a given edge type is a DynamicEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DynamicEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isStructuralEdgeType\n                        \n                    \n                \n            \n            \n                \nisStructuralEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether the given edge type is a structural edge type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StructuralEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_declarations\n\n\n\ncluster_AgGridModule_exports\n\n\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_imports\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsTooltipComponent->BsTimelineModule\n\n\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nBsTooltipComponent->FinanceModule\n\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChartsDirective\n\nFusionChartsDirective\n\nFusionChartsModule -->\n\nFusionChartsDirective->FusionChartsModule\n\n\n\n\n\nMultiLevelPieChart\n\nMultiLevelPieChart\n\nFusionChartsModule -->\n\nMultiLevelPieChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\nFusionChartsDirective \n\nFusionChartsDirective \n\nFusionChartsDirective  -->\n\nFusionChartsModule->FusionChartsDirective \n\n\n\n\n\nMultiLevelPieChart \n\nMultiLevelPieChart \n\nMultiLevelPieChart  -->\n\nFusionChartsModule->MultiLevelPieChart \n\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nVisNetworkDirective\n\nVisNetworkDirective\n\nNetworkModule -->\n\nVisNetworkDirective->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\nVisNetworkDirective \n\nVisNetworkDirective \n\nVisNetworkDirective  -->\n\nNetworkModule->VisNetworkDirective \n\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nVisTimelineDirective\n\nVisTimelineDirective\n\nVisTimelineModule -->\n\nVisTimelineDirective->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\nVisTimelineDirective \n\nVisTimelineDirective \n\nVisTimelineDirective  -->\n\nVisTimelineModule->VisTimelineDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    22 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    38 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AgGridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsHeatmapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FinanceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FusionChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleMapsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VisTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Author : Sinequa\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AggregationTriggerType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            DataModel   (ag-grid/.../data-modal.component.ts)\n                        \n                        \n                            Filter   (ag-grid/.../datasource.ts)\n                        \n                        \n                            StructuralDisplayType   (network/.../records-provider.ts)\n                        \n                        \n                            StructuralTriggerType   (network/.../records-provider.ts)\n                        \n                        \n                            TimelineData   (timeline/.../facet-timeline.component.ts)\n                        \n                        \n                            TimelineEventData   (timeline/.../facet-timeline.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/providers/aggregation-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AggregationTriggerType\n                \n            \n            \n                \n                    Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node\n\n                \n            \n            \n                \n                        \"source\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    ag-grid/data-modal.component.ts\n    \n    \n        \n            \n                \n                    \n                    DataModel\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    ag-grid/datasource.ts\n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n    \n        \n            \n                \n                    \n                    StructuralDisplayType\n                \n            \n            \n                \n                        \"all\" | \"paginate\" | \"existingnodes\" | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuralTriggerType\n                \n            \n            \n                \n                        \"oninsert\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    timeline/bootstrap/facet-timeline.component.ts\n    \n    \n        \n            \n                \n                    \n                    TimelineData\n                \n            \n            \n                \n                        TimelineSeries | TimelineAggregation | TimelineCombinedAggregations\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TimelineEventData\n                \n            \n            \n                \n                        TimelineEvent[] | TimelineRecords | TimelineEventAggregation\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            colorSchemes   (heatmap/.../heatmap.component.ts)\n                        \n                        \n                            curveTypes   (timeline/.../timeline.component.ts)\n                        \n                        \n                            darkStyle   (googlemaps/.../dark-style.ts)\n                        \n                        \n                            defaultChart   (fusioncharts/.../chart.ts)\n                        \n                        \n                            defaultMultiLevelChart   (fusioncharts/.../multi-level-pie-chart.ts)\n                        \n                        \n                            defaultOptions   (network/.../network.component.ts)\n                        \n                        \n                            defaultOptions   (vis-timeline/.../result-timeline.ts)\n                        \n                        \n                            deFinance   (finance/.../index.ts)\n                        \n                        \n                            deGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            deGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            deHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            enFinance   (finance/.../index.ts)\n                        \n                        \n                            enGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            enGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            enHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            eventList   (fusioncharts/.../events.ts)\n                        \n                        \n                            frFinance   (finance/.../index.ts)\n                        \n                        \n                            frGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            frGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            frHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            GOOGLE_MAPS_API_KEY   (googlemaps/.../googlemaps.service.ts)\n                        \n                        \n                            sinequaComponentsModule   (public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    heatmap/bootstrap/heatmap.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        colorSchemes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  schemeBlues,\n  schemeReds,\n  schemeGreens,\n  schemeRdBu,\n  schemeSpectral,\n  schemeYlGnBu\n}\n                    \n                \n\n\n        \n    \n\n    timeline/bootstrap/timeline.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        curveTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  curveBasis,\n  curveBasisClosed,\n  curveBasisOpen,\n  curveBumpX,\n  curveBumpY,\n  curveLinear,\n  curveLinearClosed,\n  curveMonotoneX,\n  curveMonotoneY,\n  curveNatural,\n  curveStep,\n  curveStepAfter,\n  curveStepBefore\n}\n                    \n                \n\n\n        \n    \n\n    googlemaps/dark-style.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        darkStyle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.MapTypeStyle[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8ec3b9\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1a3646\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#64779e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.province\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.man_made\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#334e87\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.natural\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#6f9ba5\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3C7680\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#304a7d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c6675\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#255763\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#b0d5ce\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.line\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.station\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3a4762\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#222222\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e6d70\"\n        }\n      ]\n    }\n  ]\n                    \n                \n\n\n        \n    \n\n    fusioncharts/chart/chart.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultChart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"theme\": \"fusion\",\n    \"labelDisplay\": \"rotate\",\n    \"slantLabel\": \"1\"\n}\n                    \n                \n\n\n        \n    \n\n    fusioncharts/multi-level-pie-chart/multi-level-pie-chart.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultMultiLevelChart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"theme\": \"fusion\",\n    \"highlightParentPieSlices\": true, // automatically highlight parent slices when you hover over the child pie slices\n    \"highlightChildPieSlices\": false, // prevent child pie slices from getting highlighted, when you hover over the parent slices\n    \"showPlotBorder\": true,\n    \"piefillalpha\": 60,\n    \"pieborderthickness\": 3\n}\n                    \n                \n\n\n        \n    \n\n    network/network.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Options\n\n                    \n                \n                \n                    \n                        Default value : {\n    height: '500px'\n}\n                    \n                \n\n            \n                \n                    Default options of the Vis.js network.\nSee: https://visjs.github.io/vis-network/docs/network/\n\n                \n            \n\n        \n    \n\n    vis-timeline/result-timeline/result-timeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n}\n                    \n                \n\n\n        \n    \n\n    finance/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deFinance, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enFinance, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frFinance, frFacet)\n                    \n                \n\n\n        \n    \n\n    googlemaps/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGooglemaps, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGooglemaps, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGooglemaps, frFacet)\n                    \n                \n\n\n        \n    \n\n    ag-grid/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGrid)\n                    \n                \n\n\n        \n    \n\n    heatmap/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deHeatmap, deResultsView, deSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enHeatmap, enResultsView, enSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frHeatmap, frResultsView, frSearch)\n                    \n                \n\n\n        \n    \n\n    fusioncharts/angular-fusioncharts/events/events.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        eventList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : [\n  \"beforeLinkedItemOpen\",\n  \"linkedItemOpened\",\n  \"beforeLinkedItemClose\",\n  \"linkedItemClosed\",\n  \"printReadyStateChange\",\n  \"dataLoadRequestCompleted\",\n  \"dataLoadError\",\n  \"dataLoadCancelled\",\n  \"dataLoadRequestCancelled\",\n  \"dataUpdated\",\n  \"dataUpdateCancelled\",\n  \"dataLoadRequested\",\n  \"beforeDataUpdate\",\n  \"realTimeUpdateComplete\",\n  \"chartCleared\",\n  \"slicingEnd\",\n  \"slicingStart\",\n  \"entityRollOut\",\n  \"entityRollOver\",\n  \"entityClick\",\n  \"connectorRollOver\",\n  \"connectorRollOut\",\n  \"connectorClick\",\n  \"markerRollOver\",\n  \"markerRollOut\",\n  \"markerClick\",\n  \"pageNavigated\",\n  \"rotationEnd\",\n  \"rotationStart\",\n  \"centerLabelRollover\",\n  \"centerLabelRollout\",\n  \"centerLabelClick\",\n  \"centerLabelChanged\",\n  \"chartClick\",\n  \"chartMouseMove\",\n  \"chartRollOver\",\n  \"chartRollOut\",\n  \"backgroundLoaded\",\n  \"backgroundLoadError\",\n  \"legendItemClicked\",\n  \"legendItemRollover\",\n  \"legendItemRollout\",\n  \"logoRollover\",\n  \"logoRollout\",\n  \"logoClick\",\n  \"logoLoaded\",\n  \"logoLoadError\",\n  \"beforeExport\",\n  \"exported\",\n  \"exportCancelled\",\n  \"beforePrint\",\n  \"printComplete\",\n  \"printCancelled\",\n  \"dataLabelClick\",\n  \"dataLabelRollOver\",\n  \"dataLabelRollOut\",\n  \"scrollStart\",\n  \"scrollEnd\",\n  \"onScroll\",\n  \"zoomReset\",\n  \"zoomedOut\",\n  \"zoomedIn\",\n  \"zoomed\",\n  \"zoomModeChanged\",\n  \"pinned\",\n  \"dataRestored\",\n  \"beforeDataSubmit\",\n  \"dataSubmitError\",\n  \"dataSubmitted\",\n  \"dataSubmitCancelled\",\n  \"chartUpdated\",\n  \"nodeAdded\",\n  \"nodeUpdated\",\n  \"nodeDeleted\",\n  \"connectorAdded\",\n  \"connectorUpdated\",\n  \"connectorDeleted\",\n  \"labelAdded\",\n  \"labelDeleted\",\n  \"selectionRemoved\",\n  \"selectionStart\",\n  \"selectionEnd\",\n  \"labelClick\",\n  \"labelRollOver\",\n  \"labelRollOut\",\n  \"labelDragStart\",\n  \"labelDragEnd\",\n  \"dataplotDragStart\",\n  \"dataplotDragEnd\",\n  \"processClick\",\n  \"processRollOver\",\n  \"processRollOut\",\n  \"categoryClick\",\n  \"categoryRollOver\",\n  \"categoryRollOut\",\n  \"milestoneClick\",\n  \"milestoneRollOver\",\n  \"milestoneRollOut\",\n  \"chartTypeChanged\",\n  \"overlayButtonClick\",\n  \"loaded\",\n  \"rendered\",\n  \"drawComplete\",\n  \"renderComplete\",\n  \"dataInvalid\",\n  \"dataXMLInvalid\",\n  \"dataLoaded\",\n  \"noDataToDisplay\",\n  \"legendPointerDragStart\",\n  \"legendPointerDragStop\",\n  \"legendRangeUpdated\",\n  \"alertComplete\",\n  \"realTimeUpdateError\",\n  \"dataplotRollOver\",\n  \"dataplotRollOut\",\n  \"dataplotClick\",\n  \"linkClicked\",\n  \"beforeRender\",\n  \"renderCancelled\",\n  \"beforeResize\",\n  \"resized\",\n  \"resizeCancelled\",\n  \"beforeDispose\",\n  \"disposed\",\n  \"disposeCancelled\",\n  \"linkedChartInvoked\",\n  \"beforeDrillDown\",\n  \"drillDown\",\n  \"beforeDrillUp\",\n  \"drillUp\",\n  \"drillDownCancelled\",\n  \"drillUpCancelled\",\n]\n                    \n                \n\n\n        \n    \n\n    googlemaps/googlemaps.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GOOGLE_MAPS_API_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\"GOOGLE_MAPS_API_KEY\")\n                    \n                \n\n\n        \n    \n\n    public-api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sinequaComponentsModule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : undefined\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
