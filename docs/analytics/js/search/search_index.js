var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AgGridModule.html",[0,1.905,1,2.762]],["body/modules/AgGridModule.html",[1,5.784,2,2.575,3,3.056,4,5,5,5,6,5,7,3.031,8,0.016,9,2.803,10,2.803,11,2.355,12,1.5,13,2.351,14,0.149,15,0.149,16,0.149,17,2.511,18,4.493,19,5.77,20,3.547,21,3.547,22,0.245,23,3.547,24,0.879,25,3.547,26,2.988,27,4.883,28,4.883,29,3.56,30,5.77,31,2.559,32,3.812,33,3.547,34,1.442,35,4.226,36,2.7,37,4.226,38,0.803,39,6.849,40,5.77,41,4.883,42,2.068,43,6.849,44,5.77,45,5.77,46,0.412,47,5,48,1.623,49,5,50,2.988,51,5.77,52,0.173,53,0.032,54,0.013,55,0.013]],["title/interfaces/AggregationData.html",[56,0.116,57,2.39]],["body/interfaces/AggregationData.html",[8,0.016,14,0.089,15,0.192,16,0.089,22,0.204,38,0.479,46,0.442,52,0.204,53,0.019,54,0.011,55,0.009,56,0.202,57,4.187,58,0.65,59,1.995,60,1.136,61,1.183,62,3.754,63,2.531,64,3.485,65,1.74,66,1.375,67,2.693,68,2.535,69,3.228,70,2.287,71,3.212,72,1.12,73,4.315,74,0.18,75,0.398,76,0.859,77,3.515,78,3.212,79,1.884,80,3.203,81,3.057,82,0.709,83,0.405,84,0.626,85,2.362,86,3.028,87,0.677,88,0.501,89,1.019,90,1.055,91,1.912,92,0.86,93,1.375,94,1.042,95,1.091,96,1.27,97,2.341,98,2.421,99,0.705,100,0.712,101,0.623,102,1.906,103,1.467,104,1.477,105,1.906,106,1.693,107,1.81,108,2.454,109,2.124,110,1.365,111,2.441,112,2.673,113,1.991,114,2.531,115,1.883,116,0.821,117,0.719,118,0.677,119,1.883,120,2.274,121,2.76,122,2.082,123,2.274,124,1.467,125,3.228,126,2.124,127,2.287,128,1.286,129,3.228,130,2.123,131,2.315,132,2.531,133,1.599,134,1.883,135,1.402,136,2.274,137,3.293,138,2.454,139,2.454,140,1.375,141,2.636,142,1.768,143,1.007,144,0.349,145,2.943,146,2.036,147,2.123,148,1.663,149,0.637,150,1.887,151,1.693,152,2.454,153,1.783,154,2.454,155,1.888,156,0.903,157,0.787,158,1.536,159,0.795,160,2.124,161,2.454,162,2.216,163,0.791,164,0.719,165,3.015,166,1.221,167,1.342,168,1.783,169,1.342,170,1.271,171,1.27,172,2.535,173,2.274,174,2.454,175,1.611,176,3.212,177,1.826,178,2.124,179,2.124,180,2.274,181,1.233,182,1.091,183,2.454,184,0.525,185,0.548,186,1.698,187,1.536,188,1.342,189,2.274,190,1.233,191,2.082,192,1.835,193,5.086,194,2.673,195,1.091,196,1.467,197,2.454,198,2.454,199,0.885,200,2.454,201,2.454,202,1.783,203,1.783,204,1.783,205,4.052,206,2.454,207,3.108,208,3.485,209,2.454,210,1.286,211,2.454,212,2.454,213,2.454,214,2.454,215,2.454,216,2.454,217,2.454,218,2.124,219,1.183,220,2.454,221,1.467,222,1.783,223,1.342,224,2.454,225,2.454,226,2.454,227,2.794,228,2.274,229,1.906,230,1.599,231,2.454,232,2.454,233,1.883,234,1.883,235,2.454,236,2.454,237,1.883,238,2.454,239,2.454,240,2.454,241,2.454,242,2.181,243,0.931,244,1.883,245,2.454,246,3.228,247,3.754,248,2.274,249,1.536,250,2.454,251,1.995,252,2.454,253,0.909,254,3.485,255,1.783,256,2.454,257,3.485,258,1.883,259,2.454,260,2.274,261,1.467,262,2.454,263,2.454,264,1.091,265,1.883,266,1.783,267,1.477,268,2.454,269,2.454,270,1.693,271,2.454,272,2.454,273,2.454,274,2.454,275,2.454,276,2.454,277,2.454,278,0.787,279,2.531,280,2.454,281,2.454,282,2.454,283,2.454,284,0.436,285,2.454,286,2.673,287,2.454,288,1.536,289,1.883,290,0.968,291,2.274,292,1.995,293,1.233,294,1.233,295,1.883,296,1.091,297,1.402,298,1.467,299,1.883,300,1.883,301,2.454,302,4.41,303,3.042,304,2.315,305,2.454,306,4.052,307,0.931,308,1.875,309,1.338,310,0.764,311,1.883,312,2.895,313,0.968,314,3.485,315,2.636,316,4.41,317,3.485,318,1.906,319,1.488,320,2.287,321,3.485,322,3.485,323,3.485,324,3.485,325,3.485,326,3.485,327,1.461,328,1.991,329,1.783,330,1.286,331,2.454,332,1.091,333,1.883,334,2.76,335,1.509,336,2.216,337,1.677,338,4.41,339,4.41,340,3.506,341,1.549,342,2.454,343,2.216,344,2.454,345,3.485,346,3.228,347,2.454,348,2.454,349,2.287,350,4.052,351,3.485,352,0.895,353,0.968,354,1.467,355,2.454,356,1.783,357,1.091,358,1.611,359,2.124,360,2.454,361,2.454,362,0.968,363,2.454,364,4.052,365,2.454,366,2.454]],["title/interfaces/AggregationEdge.html",[56,0.116,109,2.39]],["body/interfaces/AggregationEdge.html",[8,0.016,14,0.09,15,0.193,16,0.09,22,0.205,38,0.485,46,0.444,52,0.205,53,0.019,54,0.011,55,0.009,56,0.209,57,3.838,58,0.658,59,2.02,60,1.15,61,1.198,62,3.257,63,1.805,64,2.485,65,1.387,66,0.981,67,2.674,68,2.2,69,2.303,70,1.631,71,3.059,72,1.036,73,4.276,74,0.182,75,0.402,77,2.963,78,2.425,79,1.062,80,1.805,81,2.307,82,0.565,83,0.399,84,0.571,85,2.381,86,3.33,87,0.685,88,0.508,89,1.02,90,1.077,91,1.921,92,0.871,93,1.387,94,1.051,95,1.105,96,1.272,97,2.352,98,2.438,99,0.714,100,0.718,101,0.631,102,1.923,103,1.485,104,1.488,105,2.231,106,2.425,107,1.921,108,3.516,109,3.042,110,1.495,111,2.453,112,2.697,113,2.009,114,2.554,115,1.906,116,0.826,117,0.724,118,0.685,119,1.906,120,2.303,121,2.775,122,2.101,123,2.303,124,1.485,125,3.257,126,2.151,127,2.307,128,1.302,129,3.257,130,2.138,131,2.331,132,2.554,133,1.61,134,1.906,135,1.42,136,2.303,137,3.316,138,2.485,139,2.485,140,1.387,141,2.65,142,1.773,143,1.02,144,0.352,145,2.963,146,2.05,147,2.138,148,1.675,149,0.64,150,1.892,151,1.714,152,2.485,153,1.805,154,2.485,155,1.895,156,0.906,157,0.791,158,1.555,159,0.805,160,2.151,161,2.485,162,2.229,163,0.796,164,0.724,165,3.042,166,1.232,167,1.359,168,1.805,169,1.359,170,1.282,171,1.272,172,2.553,173,2.303,174,2.485,175,1.631,176,3.228,177,1.843,178,2.151,179,2.151,180,2.303,181,1.239,182,1.105,183,2.485,184,0.531,185,0.555,186,1.706,187,1.555,188,1.359,189,2.303,190,1.239,191,2.101,192,1.843,193,5.103,194,2.697,195,1.105,196,1.485,197,2.485,198,2.485,199,0.886,200,2.485,201,2.485,202,1.805,203,1.805,204,1.805,205,4.08,206,2.485,207,3.129,208,3.516,209,2.485,210,1.302,211,2.485,212,2.485,213,2.485,214,2.485,215,2.485,216,2.485,217,2.485,218,2.151,219,1.198,220,2.485,221,1.485,222,1.805,223,1.359,224,2.485,225,2.485,226,2.485,227,2.813,228,2.303,229,1.923,230,1.61,231,2.485,232,2.485,233,1.906,234,1.906,235,2.485,236,2.485,237,1.906,238,2.485,239,2.485,240,2.485,241,2.485,242,2.2,243,0.943,244,1.906,245,2.485,246,3.257,247,3.78,248,2.303,249,1.555,250,2.485,251,2.02,252,2.485,253,0.913,254,3.516,255,1.805,256,2.485,257,3.516,258,1.906,259,2.485,260,2.303,261,1.485,262,2.485,263,2.485,264,1.105,265,1.906,266,1.805,267,1.488,268,2.485,269,2.485,270,1.714,271,2.485,272,2.485,273,2.485,274,2.485,275,2.485,276,2.485,277,2.485,278,0.791,279,2.554,280,2.485,281,2.485,282,2.485,283,2.485,284,0.441,285,2.485,286,2.697,287,2.485,288,1.555,289,1.906,290,0.981,291,2.303,292,2.02,293,1.249,294,1.249,295,1.906,296,1.105,297,1.42,298,1.485,299,1.906,300,1.906,301,2.485,302,4.435,303,3.059,304,2.331,305,2.485,306,4.08,307,0.943,308,1.888,309,1.344,310,0.774,311,1.906,312,2.911,313,0.981,314,3.516,315,2.65,316,4.435,317,3.516,318,1.923,319,1.502,320,2.307,321,3.516,322,3.516,323,3.516,324,3.516,325,3.516,326,3.516,327,1.466,328,2.009,329,1.805,330,1.302,331,2.485,332,1.105,333,1.906,334,2.775,335,1.516,336,2.229,337,1.683,338,4.435,339,4.435,340,3.53,341,1.555,342,2.485,343,2.229,344,2.485,345,3.516,346,3.257,347,2.485,348,2.485,349,2.307,350,4.08,351,3.516,352,0.906,353,0.981,354,1.485,355,2.485,356,1.805,357,1.105,358,1.631,359,2.151,360,2.485,361,2.485,362,0.981,363,2.485,364,4.08,365,2.485,366,2.485]],["title/interfaces/AggregationEdgeType.html",[56,0.116,73,2.245]],["body/interfaces/AggregationEdgeType.html",[8,0.016,14,0.088,15,0.192,16,0.088,22,0.204,38,0.476,46,0.44,52,0.204,53,0.019,54,0.011,55,0.009,56,0.208,57,3.805,58,0.645,59,1.982,60,1.129,61,1.176,62,3.213,63,1.771,64,2.438,65,1.368,66,0.962,67,2.664,68,2.17,69,2.259,70,1.6,71,3.501,72,1.18,73,4.309,74,0.178,75,0.397,76,0.781,77,2.932,78,2.392,79,1.041,80,1.771,81,2.276,82,0.557,83,0.403,84,0.591,85,2.376,86,3.021,87,0.672,88,0.498,89,1.018,90,1.054,91,2.039,92,0.855,93,1.368,94,1.037,95,1.084,96,1.268,97,2.335,98,2.412,99,0.7,100,0.709,101,0.619,102,1.897,103,1.457,104,1.472,105,2.208,106,1.681,107,1.907,108,2.438,109,2.11,110,1.482,111,2.435,112,2.66,113,1.982,114,2.519,115,1.87,116,0.819,117,0.781,118,0.672,119,1.87,120,2.259,121,2.907,122,2.412,123,2.259,124,1.457,125,3.213,126,2.11,127,2.276,128,1.278,129,4.074,130,2.116,131,2.307,132,2.519,133,1.593,134,1.87,135,1.393,136,2.259,137,3.574,138,2.438,139,3.468,140,1.735,141,2.776,142,1.804,143,1.424,144,0.404,145,3.194,146,2.21,147,2.305,148,1.805,149,0.66,150,1.952,151,2.392,152,3.468,153,2.519,154,3.468,155,1.884,156,0.901,157,0.785,158,1.526,159,0.79,160,3.001,161,3.468,162,2.496,163,0.858,164,0.857,165,3.493,166,1.629,167,1.334,168,1.771,169,1.334,170,1.265,171,1.268,172,2.526,173,2.259,174,2.438,175,1.6,176,3.204,177,1.818,178,2.11,179,2.11,180,2.259,181,1.23,182,1.084,183,2.438,184,0.521,185,0.545,186,1.694,187,1.526,188,1.334,189,2.259,190,1.23,191,2.073,192,1.831,193,5.077,194,2.66,195,1.084,196,1.457,197,2.438,198,2.438,199,0.884,200,2.438,201,2.438,202,1.771,203,1.771,204,1.771,205,4.037,206,2.438,207,3.096,208,3.468,209,2.438,210,1.278,211,2.438,212,2.438,213,2.438,214,2.438,215,2.438,216,2.438,217,2.438,218,2.11,219,1.176,220,2.438,221,1.457,222,1.771,223,1.334,224,2.438,225,2.438,226,2.438,227,2.784,228,2.259,229,1.897,230,1.593,231,2.438,232,2.438,233,1.87,234,1.87,235,2.438,236,2.438,237,1.87,238,2.438,239,2.438,240,2.438,241,2.438,242,2.17,243,0.925,244,1.87,245,2.438,246,3.213,247,3.74,248,2.259,249,1.526,250,2.438,251,1.982,252,2.438,253,0.907,254,3.468,255,1.771,256,2.438,257,3.468,258,1.87,259,2.438,260,2.259,261,1.457,262,2.438,263,2.438,264,1.084,265,1.87,266,1.771,267,1.472,268,2.438,269,2.438,270,1.681,271,2.438,272,2.438,273,2.438,274,2.438,275,2.438,276,2.438,277,2.438,278,0.785,279,2.519,280,2.438,281,2.438,282,2.438,283,2.438,284,0.433,285,2.438,286,2.66,287,2.438,288,1.526,289,1.87,290,0.962,291,2.259,292,1.982,293,1.225,294,1.225,295,1.87,296,1.084,297,1.393,298,1.457,299,1.87,300,1.87,301,2.438,302,4.397,303,3.033,304,2.307,305,2.438,306,4.037,307,0.925,308,1.869,309,1.334,310,0.759,311,1.87,312,2.886,313,0.962,314,3.468,315,2.628,316,4.397,317,3.468,318,1.897,319,1.481,320,2.276,321,3.468,322,3.468,323,3.468,324,3.468,325,3.468,326,3.468,327,1.458,328,1.982,329,1.771,330,1.278,331,2.438,332,1.084,333,1.87,334,2.752,335,1.505,336,2.21,337,1.674,338,4.397,339,4.397,340,3.493,341,1.546,342,2.438,343,2.21,344,2.438,345,3.468,346,3.213,347,2.438,348,2.438,349,2.276,350,4.037,351,3.468,352,0.889,353,0.962,354,1.457,355,2.438,356,1.771,357,1.084,358,1.6,359,2.11,360,2.438,361,2.438,362,0.962,363,2.438,364,4.037,365,2.438,366,2.438]],["title/classes/AggregationProvider.html",[53,0.021,178,2.39]],["body/classes/AggregationProvider.html",[8,0.016,12,0.763,14,0.076,15,0.192,16,0.076,22,0.193,38,0.408,46,0.458,52,0.193,53,0.016,54,0.01,55,0.008,56,0.192,57,3.541,59,3.327,60,0.968,61,2.107,62,2.875,63,1.52,64,2.092,65,1.224,66,0.825,67,2.58,68,1.942,69,1.938,70,1.373,71,3.014,72,1.039,73,4.307,74,0.153,75,0.355,76,0.883,77,2.687,78,2.14,79,1.326,80,1.52,81,2.037,82,0.499,83,0.415,84,0.587,85,2.369,86,3.046,87,0.577,88,0.427,89,1.026,90,1.091,91,1.794,92,1.434,93,1.724,94,1.106,95,0.93,96,1.296,97,2.499,98,2.211,99,0.601,100,0.634,101,0.531,102,3.004,103,1.855,104,1.775,105,1.698,106,1.443,107,1.879,108,2.092,109,1.81,110,1.379,111,2.291,112,2.38,113,1.773,114,2.254,115,1.605,116,0.814,117,0.841,118,0.856,119,1.605,120,1.938,121,2.865,122,1.855,123,1.938,124,2.211,125,2.875,126,1.81,127,2.037,128,1.097,129,2.875,130,2.145,131,2.338,132,2.254,133,1.615,134,1.605,135,1.196,136,1.938,137,3.327,138,2.092,139,2.092,140,1.224,141,2.736,142,1.799,143,0.859,144,0.53,145,2.687,146,1.859,147,1.939,148,1.68,149,0.648,150,1.914,151,1.443,152,2.092,153,1.52,154,2.092,155,1.947,156,0.898,157,0.739,158,1.309,159,1.005,160,1.81,161,2.092,162,2.301,163,0.97,164,0.657,165,2.685,166,1.088,167,1.144,168,1.52,169,1.144,170,1.132,171,1.236,172,2.315,173,1.938,174,2.092,175,2.037,176,3.158,177,2.145,178,2.685,179,2.685,180,2.875,181,1.254,182,2.211,183,3.699,184,0.663,185,1.193,186,1.594,187,2.315,188,1.144,189,1.938,190,1.254,191,2.211,192,1.947,193,5.133,194,2.38,195,0.93,196,1.25,197,2.092,198,2.092,199,0.864,200,2.092,201,2.092,202,1.52,203,1.52,204,1.52,205,3.699,206,2.092,207,2.838,208,3.103,209,2.092,210,1.097,211,2.092,212,2.092,213,2.092,214,2.092,215,2.092,216,2.092,217,2.092,218,1.81,219,1.009,220,2.092,221,1.25,222,1.52,223,1.144,224,2.092,225,2.092,226,2.092,227,2.822,228,1.938,229,2.023,230,1.724,231,2.092,232,2.092,233,1.605,234,1.605,235,2.092,236,2.092,237,1.605,238,2.092,239,2.092,240,2.092,241,2.092,242,1.942,243,1.177,244,2.38,245,3.103,246,3.427,247,4.05,248,2.875,249,1.942,250,3.103,251,2.523,252,3.103,253,0.894,254,3.699,255,2.254,256,3.103,257,3.103,258,1.605,259,2.092,260,1.938,261,1.25,262,2.092,263,2.092,264,0.93,265,1.605,266,1.52,267,1.594,268,2.092,269,2.092,270,1.443,271,2.092,272,2.092,273,2.092,274,2.092,275,2.092,276,2.092,277,2.092,278,0.739,279,2.254,280,2.092,281,2.092,282,2.092,283,2.092,284,0.371,285,2.092,286,2.38,287,2.092,288,1.309,289,1.605,290,0.825,291,2.875,292,2.523,293,1.56,294,1.56,295,1.605,296,1.819,297,1.196,298,1.25,299,1.605,300,1.605,301,2.092,302,4.092,303,2.822,304,2.114,305,2.092,306,3.699,307,0.794,308,2.119,309,1.492,310,0.966,311,2.38,312,3.005,313,1.224,314,3.103,315,2.445,316,4.092,317,3.103,318,1.698,319,1.326,320,2.037,321,3.103,322,3.103,323,3.103,324,3.103,325,3.103,326,3.103,327,1.492,328,2.338,329,2.254,330,1.626,331,3.103,332,1.819,333,1.605,334,2.561,335,1.416,336,2.056,337,1.597,338,4.092,339,4.092,340,3.201,341,1.475,342,2.092,343,2.056,344,2.092,345,3.103,346,2.875,347,2.092,348,2.092,349,2.037,350,3.699,351,3.103,352,1.132,353,1.224,354,1.25,355,2.092,356,1.52,357,0.93,358,1.373,359,1.81,360,2.092,361,2.092,362,0.825,363,2.092,364,3.699,365,2.092,366,2.092,367,1.52,368,2.523,369,1.224,370,2.523,371,2.523,372,1.132,373,4.352,374,2.38,375,2.38,376,2.38,377,2.114,378,2.037,379,1.349,380,2.38,381,2.38,382,1.701,383,2.003,384,4.352,385,2.041,386,2.551,387,4.682,388,2.934,389,1.309,390,1.81,391,1.701,392,1.81,393,1.81,394,1.81,395,1.81,396,1.81,397,2.934,398,0.911,399,1.417,400,2.934,401,1.81,402,2.934,403,2.934,404,1.196,405,1.81,406,1.701,407,0.794,408,1.701,409,1.177,410,1.443,411,1.196,412,1.196,413,0.763,414,1.196,415,1.25,416,0.705,417,1.81,418,1.009,419,1.196,420,2.934,421,1.938,422,1.196,423,1.81,424,1.196,425,1.81]],["title/classes/AsyncRecordsProvider.html",[53,0.021,426,3.017]],["body/classes/AsyncRecordsProvider.html",[8,0.016,12,1.16,14,0.115,15,0.115,16,0.115,22,0.195,52,0.134,53,0.025,54,0.011,55,0.011,56,0.133,60,1.472,61,2.459,72,0.808,74,0.233,75,0.475,76,0.97,79,1.359,83,0.415,84,0.583,89,0.998,90,1.067,92,1.624,93,2.012,94,0.951,95,1.414,96,1.275,97,2.89,99,0.914,100,0.65,102,3.122,103,1.901,104,1.792,105,2.275,110,1.401,116,0.774,117,0.823,118,0.877,119,2.44,121,2.602,124,2.937,127,2.73,130,1.667,140,1.641,142,1.561,144,0.563,148,1.707,149,0.634,150,1.908,156,0.823,159,1.03,163,0.959,165,3.599,167,2.688,171,0.742,177,2.18,181,1.101,182,2.326,184,0.889,185,1.278,186,1.792,187,3.075,188,1.74,191,2.485,192,1.984,223,1.74,242,1.99,284,0.565,290,1.255,294,2.09,295,2.44,296,2.185,303,2.193,309,1.465,310,0.99,313,1.255,327,1.194,330,1.667,332,2.06,352,1.16,353,1.255,367,2.31,368,3.381,369,1.641,370,3.381,371,3.381,372,1.516,374,3.19,375,3.19,376,3.19,377,2.648,378,2.73,379,1.69,380,3.19,381,3.19,382,2.585,383,2.092,385,2.244,386,2.193,387,4.939,390,2.752,391,2.585,392,2.752,393,2.752,394,2.752,395,2.752,396,2.752,398,0.986,399,1.594,401,2.752,404,1.817,405,2.752,406,2.585,407,1.206,408,2.585,409,1.577,410,2.193,411,1.817,412,1.817,413,1.16,414,1.817,415,2.485,416,1.072,417,2.752,418,1.534,419,1.817,421,2.947,422,1.817,423,2.752,424,1.817,425,2.752,426,4.542,427,5.632,428,2.696,429,5.832,430,2.485,431,2.868,432,1.641,433,1.47,434,2.769,435,5.832,436,2.607,437,2.808,438,4.253,439,4.461,440,4.461,441,4.461,442,6.892,443,3.995,444,2.376,445,5.832,446,3.865,447,3.021,448,2.275,449,3.853,450,2.005,451,1.401,452,3.473,453,2.193,454,2.752,455,3.599,456,1.641,457,2.752,458,2.602,459,1.359,460,1.534,461,1.901,462,2.752,463,2.44,464,2.947,465,2.947,466,1.99,467,1.598,468,2.31,469,2.005,470,2.947,471,2.947,472,1.667,473,3.473,474,1.817,475,2.585,476,3.865,477,4.461,478,3.181,479,4.461]],["title/classes/BaseProvider.html",[53,0.021,102,1.511]],["body/classes/BaseProvider.html",[8,0.016,12,1.591,14,0.087,15,0.087,16,0.087,22,0.184,38,0.468,46,0.343,52,0.101,53,0.018,54,0.009,55,0.009,56,0.167,60,1.109,61,1.928,62,3.173,65,1.351,72,0.87,74,0.175,75,0.499,76,0.913,77,2.903,79,2.05,83,0.409,84,0.62,89,1.024,90,1.118,91,1.641,92,1.683,93,1.894,94,1.195,95,1.065,96,1.349,98,2.389,100,0.489,101,0.608,102,1.873,103,3.02,104,2.012,111,1.795,116,0.941,117,0.963,118,1.394,124,2.047,133,1.351,142,1.347,143,2.074,144,0.534,148,1.406,149,0.676,150,1.802,156,0.926,157,0.869,159,1.109,163,1.094,166,1.83,170,1.458,171,1.287,181,0.906,182,2.32,184,0.732,185,1.252,186,1.75,192,1.655,195,1.065,199,0.857,243,1.516,249,2.143,253,0.851,261,1.432,267,1.458,279,3.352,284,0.608,290,1.894,291,2.219,294,1.721,295,3.066,296,2.197,297,1.369,304,1.957,309,1.452,313,1.351,327,1.253,332,1.939,334,2.502,335,1.495,336,2.54,337,1.814,340,3.993,341,1.436,343,1.721,346,4.447,352,0.873,353,1.351,357,2.287,358,2.248,367,1.74,368,3.25,369,1.577,370,3.25,371,3.25,372,1.591,374,2.627,375,2.627,376,2.627,377,2.493,378,2.248,379,1.591,380,2.627,381,2.627,382,1.947,383,2.021,385,2.074,391,3.546,398,0.947,399,1.435,404,1.957,406,3.902,407,1.75,408,3.25,409,1.98,410,2.362,411,1.957,412,1.957,413,1.249,414,1.957,415,2.047,416,1.47,418,2.103,419,1.957,422,1.957,424,1.957,433,1.38,436,2.103,446,2.911,448,1.873,453,2.362,459,1.463,480,6.763,481,4.858,482,4.803,483,3.704,484,1.249,485,4.803,486,3.359,487,3.359,488,3.359,489,3.359,490,3.359,491,3.359,492,3.359,493,3.359,494,3.359,495,3.359,496,3.359,497,3.359,498,3.359,499,3.359,500,3.359,501,0.746,502,4.803,503,5.302,504,4.803,505,4.803,506,3.359,507,2.911,508,2.616,509,4.803,510,4.803,511,3.359,512,1.652,513,3.359,514,3.359,515,2.488,516,1.75,517,1.572,518,3.359,519,3.359,520,3.359,521,3.359,522,3.359,523,3.359,524,3.359,525,3.359,526,3.359,527,2.627,528,3.02,529,6.732,530,4.162,531,1.577,532,4.803,533,1.463,534,4.803,535,2.143,536,3.359,537,1.837,538,3.359,539,3.74,540,3.359,541,3.359,542,3.359,543,3.359,544,3.74,545,2.362,546,4.803,547,3.359,548,4.162,549,5.302,550,1.74,551,3.359,552,2.911,553,2.396,554,3.173,555,3.359,556,3.359,557,3.359,558,3.359,559,4.803,560,3.359,561,3.359,562,3.359,563,3.359,564,3.359,565,3.359,566,1.837,567,3.359,568,3.359,569,1.947,570,1.369,571,3.359,572,1.432,573,4.803,574,3.359,575,3.359,576,3.359,577,3.359,578,4.803,579,3.359,580,3.359,581,3.359,582,3.359,583,3.359,584,3.359,585,3.359,586,4.803,587,3.359,588,3.359,589,3.359,590,5.606,591,3.359,592,4.803,593,4.803,594,4.803,595,3.359,596,3.359,597,3.359,598,3.359,599,3.359,600,4.803,601,3.359,602,4.803,603,3.359,604,3.359,605,3.359,606,4.803,607,3.359,608,3.359,609,3.359]],["title/components/BsEdgeInfoCard.html",[610,0.467,611,1.448]],["body/components/BsEdgeInfoCard.html",[7,1.761,8,0.016,9,1.688,10,1.688,14,0.207,15,0.122,16,0.122,17,1.62,22,0.182,24,0.718,31,1.761,46,0.336,48,2.047,52,0.142,53,0.026,54,0.013,55,0.011,66,1.326,74,0.246,75,0.493,76,0.596,82,0.834,83,0.389,89,1.009,90,1.094,94,1.289,95,1.494,116,0.802,144,0.476,156,0.596,157,0.568,159,1.396,162,1.688,195,1.494,199,0.54,278,0.924,284,0.844,327,0.965,341,1.341,343,2.165,358,2.828,362,1.326,372,1.571,383,1.968,385,1.379,398,0.765,399,1.005,433,1.423,484,1.571,548,5.781,549,5.781,610,0.804,611,2.63,612,2.462,613,1.62,614,2.202,615,1.688,616,2.103,617,6.645,618,3.36,619,1.804,620,1.807,621,1.805,622,5.666,623,2.493,624,5.195,625,2.493,626,2.115,627,2.36,628,5.195,629,5.195,630,5.195,631,5.798,632,2.115,633,3.867,634,4.757,635,4.408,636,4.408,637,5.195,638,1.571,639,4.706,640,3.455,641,4.757,642,5.237,643,2.999,644,2.575,645,4.712,646,4.706,647,4.712,648,4.083,649,4.712,650,4.712,651,4.083,652,4.712,653,1.452,654,3.669,655,3.669,656,4.712,657,4.712,658,4.712,659,4.712,660,3.669,661,3.669,662,1.838,663,2.317,664,2.205,665,3.669,666,3.669,667,3.669,668,3.669,669,4.706,670,3.669,671,1.688,672,3.669,673,2.577,674,1.688,675,3.669,676,1.132,677,3.36,678,6.098,679,5.971,680,3.305,681,6.043,682,4.712,683,6.043,684,4.712,685,4.712,686,5.237,687,5.237,688,3.305,689,2.575,690,1.995,691,2.357,692,2.103,693,3.14,694,2.103,695,4.712,696,4.712,697,4.712,698,2.697,699,2.697,700,1.761,701,2.103,702,1.838,703,2.697,704,1.555,705,3.14,706,1.688,707,1.688,708,1.838,709,1.761,710,1.62,711,1.761,712,2.103,713,2.103,714,1.688,715,1.396,716,2.977,717,2.103,718,1.838,719,1.92,720,1.761,721,2.103,722,1.761,723,2.357,724,2.103,725,1.761,726,1.761,727,2.103,728,1.62,729,1.761,730,1.761,731,1.688,732,1.274,733,2.103,734,2.103]],["title/components/BsFacetDate.html",[610,0.467,700,1.448]],["body/components/BsFacetDate.html",[7,1.337,8,0.016,9,1.282,10,1.282,14,0.15,15,0.092,16,0.092,17,1.23,22,0.227,24,0.545,29,2.207,31,1.337,38,0.498,42,1.282,46,0.358,48,2.129,52,0.108,53,0.02,54,0.014,55,0.01,65,1.633,66,1.006,74,0.187,75,0.409,76,0.839,82,0.825,83,0.412,84,0.611,85,2.233,86,3.267,87,0.703,88,0.521,89,0.453,90,0.498,96,1.174,97,1.799,98,2.824,99,0.733,100,0.732,101,0.648,107,1.842,110,1.207,116,0.972,117,0.966,118,0.988,126,2.207,144,0.53,149,0.49,155,1.909,156,0.939,157,0.799,163,1.032,164,0.453,166,0.894,184,0.765,185,1.094,199,0.825,202,1.853,203,1.853,204,1.853,223,1.395,253,0.699,267,0.93,278,0.699,284,0.734,288,2.589,327,1.357,330,1.337,335,0.826,337,0.86,341,0.794,369,1.006,372,1.306,379,1.509,383,2.068,385,1.94,398,0.87,399,1.413,413,1.306,416,1.394,451,0.86,484,1.306,501,0.794,531,1.006,570,2.564,610,0.699,611,1.337,612,2.046,613,1.23,614,1.181,615,1.282,616,1.596,619,1.569,620,1.765,621,1.761,625,1.337,626,1.134,638,1.306,643,2.14,644,2.14,653,1.782,689,2.14,690,1.658,691,1.959,692,1.596,693,2.808,694,1.596,698,2.241,699,2.241,700,2.351,701,1.596,702,1.395,703,2.241,704,1.658,705,2.808,706,1.282,707,1.282,708,1.395,709,1.337,710,1.23,711,1.337,712,1.596,713,1.596,714,1.282,715,1.16,716,2.589,717,1.596,718,1.395,719,1.458,720,1.337,721,1.596,722,1.337,723,1.959,724,1.596,725,1.337,726,1.337,727,1.596,728,1.23,729,1.337,730,1.337,731,1.282,732,1.792,733,1.596,734,1.596,735,4.621,736,3.1,737,2.716,738,3.364,739,3.292,740,1.877,741,5.803,742,5.022,743,5.803,744,5.803,745,4.487,746,2.808,747,3.174,748,5.022,749,4.352,750,2.945,751,3.441,752,5.022,753,5.803,754,5.803,755,5.803,756,5.803,757,5.803,758,3.099,759,3.1,760,3.379,761,6.116,762,2.637,763,2.426,764,7.057,765,2.529,766,3.577,767,3.882,768,3.577,769,3.577,770,3.577,771,3.577,772,3.577,773,3.577,774,3.577,775,3.577,776,3.577,777,5.022,778,2.263,779,3.577,780,3.91,781,3.577,782,1.658,783,2.077,784,3.577,785,2.079,786,3.577,787,3.577,788,5.022,789,3.577,790,4.759,791,3.577,792,5.029,793,3.577,794,5.029,795,3.577,796,3.577,797,3.577,798,2.473,799,3.577,800,2.786,801,3.577,802,3.1,803,1.282,804,3.577,805,2.241,806,3.577,807,1.134,808,2.363,809,1.759,810,2.786,811,5.022,812,3.577,813,3.577,814,2.551,815,2.712,816,1.674,817,1.674,818,3.577,819,1.524,820,1.674,821,1.596,822,3.577,823,5.022,824,3.577,825,5.022,826,3.577,827,3.577,828,3.577,829,3.1,830,3.1,831,3.577,832,3.099,833,5.022,834,3.577,835,3.577,836,3.577,837,3.577,838,1.957,839,3.577,840,3.577,841,3.577,842,3.577,843,3.577,844,3.577,845,2.551,846,3.577,847,3.577,848,3.577,849,2.074,850,3.174,851,3.577,852,3.577,853,3.577,854,3.577,855,3.1,856,3.577,857,3.577,858,2.786,859,3.577,860,3.577,861,3.577,862,3.577,863,3.1,864,3.577,865,3.577,866,3.577,867,3.577,868,2.363,869,3.834,870,2.363,871,3.577,872,3.577,873,3.099,874,1.957,875,2.363,876,2.363,877,1.853,878,2.363,879,2.363,880,3.577,881,2.363,882,3.577,883,2.363,884,2.363,885,3.577,886,5.022,887,3.577,888,3.577,889,3.577,890,3.577,891,3.577,892,5.022,893,5.022,894,3.577,895,5.022,896,3.577,897,2.786,898,3.577,899,3.577,900,2.363,901,4.352,902,3.577,903,3.577,904,2.363,905,3.577]],["title/components/BsHeatmapComponent.html",[610,0.467,706,1.388]],["body/components/BsHeatmapComponent.html",[7,1.202,8,0.016,9,1.153,10,1.153,14,0.141,15,0.083,16,0.083,17,1.106,22,0.14,24,0.49,31,1.202,32,3.076,46,0.518,48,1.79,52,0.14,53,0.018,54,0.01,55,0.009,56,0.096,66,0.905,72,0.843,74,0.168,75,0.38,76,0.866,82,0.803,83,0.42,84,0.558,89,0.407,90,0.448,107,1.601,116,0.845,117,0.962,136,2.125,140,1.31,144,0.488,149,0.454,151,2.29,155,1.721,160,2.873,163,1.042,164,0.996,166,1.368,171,0.91,184,0.71,190,0.607,199,0.831,229,1.255,243,0.87,253,0.648,267,1.559,278,0.723,288,1.436,307,0.87,308,2.1,330,1.202,343,2.28,352,0.836,372,1.211,383,2.1,385,2.122,386,1.582,398,0.866,399,1.415,413,1.211,443,1.865,451,0.773,461,1.371,474,1.311,475,2.699,484,1.211,531,1.539,533,1.666,570,2.593,610,0.659,611,1.202,612,1.897,613,1.881,614,1.062,615,1.153,616,1.436,619,1.48,620,1.746,621,1.751,623,2.045,625,2.378,626,2.103,627,1.901,632,1.735,636,2.125,638,1.211,643,2.915,644,1.984,653,1.8,662,1.255,674,1.668,676,1.119,689,2.712,690,1.806,691,1.816,692,1.436,693,2.676,694,1.436,698,2.078,699,2.078,700,1.202,701,1.436,702,1.255,703,2.078,704,1.062,705,2.676,706,2.149,707,1.153,708,1.255,709,2.479,710,1.106,711,1.202,712,1.436,713,1.436,714,1.153,715,1.075,716,2.442,717,1.436,718,1.255,719,1.311,720,1.202,721,1.436,722,1.202,723,1.816,724,1.436,725,1.202,726,1.202,727,1.436,728,1.106,729,1.202,730,1.202,731,1.153,732,0.87,733,1.436,734,1.436,740,1.74,778,2.339,785,1.668,815,1.153,850,2.547,904,3.076,906,2.505,907,3.172,908,4.742,909,4.035,910,4.742,911,3.476,912,3.476,913,4.742,914,3.172,915,3.172,916,3.172,917,3.172,918,3.172,919,3.172,920,4.656,921,4.202,922,3.172,923,4.138,924,3.172,925,5.515,926,5.472,927,3.689,928,4.656,929,4.656,930,4.656,931,4.742,932,5.197,933,3.172,934,4.742,935,2.332,936,5.515,937,5.515,938,2.134,939,5.515,940,3.626,941,4.742,942,4.742,943,3.217,944,3.445,945,4.656,946,2.699,947,3.217,948,3.626,949,3.217,950,4.035,951,3.217,952,5.292,953,3.217,954,2.699,955,2.807,956,3.217,957,3.217,958,2.676,959,2.443,960,3.262,961,2.078,962,3.217,963,3.217,964,3.217,965,2.443,966,1.816,967,3.217,968,2.699,969,3.217,970,3.217,971,2.482,972,3.217,973,3.217,974,4.035,975,3.217,976,3.172,977,4.742,978,3.172,979,2.555,980,4.035,981,5.197,982,4.035,983,3.628,984,2.411,985,3.126,986,2.699,987,4.035,988,4.035,989,4.742,990,3.217,991,3.217,992,3.217,993,3.626,994,3.217,995,3.217,996,2.378,997,2.873,998,3.217,999,3.217,1000,5.197,1001,4.035,1002,4.742,1003,3.217,1004,4.035,1005,3.076,1006,2.078,1007,4.742,1008,3.217,1009,3.217,1010,3.626,1011,3.217,1012,3.217,1013,3.217,1014,3.217,1015,3.217,1016,3.217,1017,3.217,1018,3.217,1019,3.217,1020,3.217,1021,3.217,1022,3.217,1023,3.217,1024,1.985,1025,3.217,1026,5.166,1027,3.217,1028,3.476,1029,3.217,1030,3.217,1031,3.217,1032,2.134,1033,2.29,1034,1.371,1035,2.788,1036,2.788,1037,1.582,1038,2.788,1039,1.506,1040,2.29,1041,1.582,1042,1.897,1043,1.865,1044,1.865,1045,2.593,1046,2.125,1047,2.505,1048,2.788,1049,4.035,1050,4.035,1051,2.788,1052,2.788,1053,2.788,1054,2.788,1055,2.788,1056,2.788,1057,2.788,1058,2.788,1059,2.788,1060,1.865,1061,2.788,1062,2.699,1063,3.172,1064,1.865,1065,1.865,1066,1.865,1067,2.788,1068,1.865,1069,1.865,1070,1.865,1071,2.788,1072,2.788,1073,2.788,1074,1.506,1075,1.666,1076,1.865,1077,2.788,1078,2.125,1079,1.76,1080,2.125,1081,1.865,1082,1.865,1083,1.865,1084,1.865,1085,1.865,1086,2.788,1087,1.985,1088,1.985,1089,2.788,1090,2.788,1091,2.788,1092,2.788,1093,3.076,1094,2.788,1095,2.788,1096,2.788,1097,2.788,1098,2.788,1099,2.788,1100,2.788,1101,1.31,1102,2.411,1103,2.788,1104,2.788,1105,2.125,1106,2.505,1107,2.505,1108,2.788,1109,3.076,1110,1.985,1111,4.035,1112,4.035,1113,2.078,1114,4.035,1115,2.788,1116,2.788,1117,1.865,1118,2.788,1119,2.788,1120,1.865,1121,1.371,1122,2.547,1123,1.865,1124,1.865,1125,2.699,1126,2.699,1127,2.699,1128,1.865,1129,1.865,1130,1.062,1131,1.865,1132,1.865,1133,2.788,1134,2.788,1135,4.742,1136,4.035,1137,4.035,1138,2.788,1139,2.505,1140,2.788,1141,2.788,1142,2.788,1143,2.788,1144,4.656,1145,4.656,1146,4.656,1147,5.997,1148,4.656,1149,4.656,1150,4.656,1151,4.656,1152,4.656,1153,4.656,1154,4.656,1155,2.699,1156,3.217,1157,3.217,1158,2.788,1159,3.217,1160,4.742,1161,4.742,1162,3.217,1163,1.582,1164,3.217,1165,3.217,1166,3.217,1167,3.217,1168,3.217,1169,3.217,1170,4.656,1171,4.742,1172,5.166,1173,4.656,1174,3.217,1175,3.217,1176,3.217,1177,3.217,1178,3.217,1179,2.294,1180,4.656,1181,2.078,1182,3.626,1183,3.217,1184,1.865,1185,1.985,1186,3.217]],["title/modules/BsHeatmapModule.html",[0,1.905,1187,2.39]],["body/modules/BsHeatmapModule.html",[2,2.596,3,3.071,8,0.016,11,2.366,12,1.513,13,2.371,14,0.15,15,0.15,16,0.15,20,3.564,21,3.564,22,0.242,23,3.564,24,0.887,25,3.564,26,3.013,27,4.908,28,4.908,29,3.59,33,3.564,34,1.454,37,4.247,38,0.81,48,1.637,50,3.013,52,0.175,53,0.032,54,0.014,55,0.013,671,2.085,702,3.167,706,2.91,708,3.167,709,2.174,711,3.034,1187,5.056,1188,5.042,1189,5.042,1190,5.042,1191,5.819,1192,4.547,1193,2.371,1194,5.819,1195,6.883]],["title/components/BsNodeInfoCard.html",[610,0.467,707,1.388]],["body/components/BsNodeInfoCard.html",[7,1.67,8,0.016,9,1.602,10,1.602,14,0.206,15,0.116,16,0.116,17,1.537,22,0.176,24,0.681,31,1.67,46,0.417,48,2.014,52,0.176,53,0.025,54,0.012,55,0.011,56,0.133,66,1.258,74,0.233,75,0.476,76,0.566,82,0.82,83,0.4,84,0.364,89,1.032,90,0.813,94,1.245,95,1.417,116,0.864,118,0.879,142,1.403,144,0.492,156,0.566,157,0.784,159,1.349,162,1.602,164,0.739,166,1.896,195,1.417,199,0.79,219,1.537,243,1.209,278,0.933,284,0.823,288,1.995,298,1.905,327,0.916,341,1.296,343,2.093,352,1.162,357,1.417,362,1.258,372,1.519,383,1.944,385,1.308,389,1.995,398,0.739,399,0.953,433,1.387,451,1.074,467,1.602,484,1.519,516,1.209,610,0.784,611,1.67,612,2.38,613,1.537,614,2.147,615,1.602,616,1.995,618,3.187,619,1.759,620,1.8,621,1.797,622,5.573,623,2.431,624,5.066,625,2.431,626,2.062,627,2.327,628,5.066,629,5.066,630,5.066,631,5.716,632,2.062,633,3.771,634,4.639,635,4.298,636,4.298,637,5.066,638,1.519,639,4.548,640,3.369,641,4.639,642,5.061,643,2.939,644,2.489,646,4.548,648,3.874,651,3.874,653,1.403,654,3.481,655,3.481,660,3.481,661,3.481,662,1.743,663,2.198,664,2.092,665,3.481,666,3.481,667,3.481,668,3.481,669,4.548,670,3.481,671,1.602,672,3.481,673,2.445,674,1.602,675,3.481,676,1.074,677,3.187,678,5.061,679,5.371,686,5.061,687,5.061,689,2.489,690,1.928,691,2.278,692,1.995,693,3.078,694,1.995,698,2.606,699,2.606,700,1.67,701,1.995,702,1.743,703,2.606,704,1.475,705,3.078,706,1.602,707,2.472,708,1.743,709,1.67,710,1.537,711,1.67,712,1.995,713,1.995,714,1.602,715,1.349,716,2.903,717,1.995,718,1.743,719,1.821,720,1.67,721,1.995,722,1.67,723,2.278,724,1.995,725,1.67,726,1.67,727,1.995,728,1.537,729,1.67,730,1.67,731,1.602,732,1.209,733,1.995,734,1.995,1196,5.906,1197,4.256,1198,5.408,1199,4.47,1200,4.47,1201,4.47,1202,4.47,1203,4.47,1204,3.874,1205,3.874,1206,3.874,1207,3.874,1208,3.874,1209,3.874,1210,3.874,1211,3.369,1212,5.637,1213,3.025,1214,2.315,1215,3.874,1216,3.874,1217,3.187,1218,3.874,1219,3.874,1220,3.874,1221,3.481,1222,3.874,1223,3.874,1224,3.187,1225,3.874,1226,3.874,1227,3.874,1228,3.874,1229,3.874,1230,3.481,1231,3.874,1232,3.874,1233,3.874,1234,3.874,1235,3.874,1236,3.874,1237,5.841,1238,4.47,1239,5.841,1240,5.841,1241,4.47]],["title/modules/BsTimelineModule.html",[0,1.905,1242,2.762]],["body/modules/BsTimelineModule.html",[0,2.785,2,2.527,3,3.022,8,0.016,11,2.329,12,1.472,13,2.307,14,0.146,15,0.146,16,0.146,20,3.508,21,3.508,22,0.245,23,3.508,24,0.863,25,3.508,26,2.933,27,4.829,28,4.829,29,3.494,33,3.508,34,1.416,35,4.179,36,2.65,37,4.179,38,0.788,41,4.829,42,2.029,48,1.905,50,3.508,52,0.17,53,0.031,54,0.013,55,0.013,318,2.209,610,0.682,700,3.025,704,2.672,709,2.116,710,2.783,731,2.9,732,1.532,739,2.413,802,4.908,1045,2.307,1187,4.807,1192,4.474,1193,2.307,1242,5.848,1243,4.908,1244,4.908,1245,5.663,1246,4.908,1247,5.663,1248,4.908,1249,3.704,1250,3.741,1251,6.773]],["title/components/BsTooltipComponent.html",[610,0.467,711,1.448]],["body/components/BsTooltipComponent.html",[7,1.794,8,0.016,9,1.72,10,1.72,14,0.174,15,0.124,16,0.124,17,1.65,22,0.144,24,0.731,31,1.794,46,0.343,48,2.059,52,0.144,53,0.026,54,0.013,55,0.012,66,1.35,74,0.37,83,0.382,89,0.607,90,0.668,117,0.926,144,0.436,157,0.737,163,1.018,164,0.852,210,2.515,278,0.902,383,1.945,552,5.299,570,3.048,610,0.811,611,1.794,612,2.491,613,2.102,614,2.221,615,1.72,616,2.142,620,1.81,621,1.829,623,2.796,625,2.876,626,2.499,627,2.133,633,4.593,644,2.606,653,1.798,689,2.606,690,2.018,691,2.385,692,2.142,693,3.162,694,2.142,698,2.728,699,2.728,700,1.794,701,2.142,702,1.872,703,2.728,704,1.584,705,3.162,706,1.72,707,1.72,708,1.872,709,1.794,710,1.65,711,2.648,712,2.142,713,2.142,714,1.72,715,1.412,716,3.003,717,2.142,718,1.872,719,1.956,720,1.794,721,2.142,722,1.794,723,2.385,724,2.142,725,1.794,726,1.794,727,2.142,728,1.65,729,1.794,730,1.794,731,1.72,732,1.298,733,2.142,734,2.142,758,3.773,938,2.625,965,2.887,966,2.385,1045,3.098,1155,3.901,1252,4.159,1253,4.798,1254,6.729,1255,3.681,1256,6.729,1257,4.798,1258,6.729,1259,6.483,1260,6.729,1261,6.729,1262,7.482,1263,8.084,1264,7.482,1265,6.729,1266,5.24,1267,4.799,1268,4.799,1269,4.799,1270,4.799,1271,4.799,1272,4.799,1273,4.799,1274,4.799,1275,4.799,1276,4.799,1277,6.115,1278,6.115,1279,6.115,1280,4.761,1281,6.115,1282,4.799,1283,4.799]],["title/interfaces/ChartDataPoint.html",[56,0.116,1284,2.245]],["body/interfaces/ChartDataPoint.html",[8,0.016,14,0.139,15,0.139,16,0.139,22,0.231,24,0.82,34,1.345,36,2.518,46,0.384,52,0.213,53,0.03,54,0.012,55,0.012,56,0.196,58,1.015,74,0.281,75,0.535,82,0.616,83,0.395,84,0.65,100,0.784,101,0.974,116,0.872,117,0.986,143,1.575,144,0.527,149,0.525,157,0.912,163,0.914,164,0.897,184,0.82,186,1.399,195,1.705,284,0.831,379,1.707,399,1.147,459,1.638,484,1.399,501,1.194,570,2.675,610,0.791,619,1.776,620,1.194,621,1.194,638,1.399,653,1.703,715,1.637,728,1.85,738,3.806,740,2.01,750,2.518,751,2.942,782,1.776,783,2.167,805,2.93,815,2.353,933,3.806,944,3.229,971,2.764,979,2.798,1032,2.098,1033,2.646,1039,3.073,1184,3.118,1284,4.277,1285,3.836,1286,5.113,1287,2.539,1288,5.113,1289,5.518,1290,5.113,1291,3.554,1292,3.591,1293,4.682,1294,3.806,1295,4.189,1296,3.554,1297,3.554,1298,4.189,1299,4.189,1300,2.292,1301,4.189,1302,4.189,1303,3.317,1304,2.518,1305,4.189,1306,4.189,1307,4.189,1308,3.554,1309,4.189,1310,2.942,1311,4.189,1312,4.189,1313,4.189,1314,3.876,1315,4.189,1316,5.113,1317,3.554,1318,3.554,1319,4.189,1320,3.554,1321,3.554,1322,4.189,1323,4.189,1324,4.189,1325,2.257,1326,4.189,1327,4.189,1328,2.646,1329,3.554,1330,1.242,1331,4.189,1332,4.189,1333,4.189,1334,3.118,1335,4.189,1336,4.189,1337,4.189,1338,2.518,1339,4.189,1340,4.189,1341,4.189,1342,5.113,1343,4.189,1344,4.189,1345,3.118,1346,4.189]],["title/interfaces/ChartOptions.html",[56,0.116,1294,2.245]],["body/interfaces/ChartOptions.html",[8,0.016,14,0.137,15,0.137,16,0.137,22,0.231,24,0.809,34,1.327,36,2.485,46,0.379,52,0.212,53,0.029,54,0.012,55,0.012,56,0.194,58,1.002,72,1.33,74,0.277,75,0.531,76,0.971,82,0.608,83,0.415,84,0.655,100,0.774,101,0.961,116,0.865,117,0.93,143,1.554,144,0.379,149,0.518,157,0.908,163,0.907,164,0.672,184,0.809,186,1.381,195,1.684,284,0.825,379,1.694,399,1.132,459,1.617,484,1.381,501,1.179,570,2.654,610,0.785,619,1.762,620,1.179,621,1.179,638,1.381,653,1.693,715,1.627,728,1.826,738,3.776,740,1.985,750,2.485,751,2.905,782,1.753,783,2.15,805,2.907,815,2.334,933,4.37,944,3.203,971,2.748,979,2.776,1032,2.071,1033,2.612,1039,3.049,1184,3.078,1284,4.084,1285,3.787,1286,5.073,1287,2.525,1288,5.073,1289,5.487,1290,5.073,1291,3.509,1292,3.563,1293,4.655,1294,4.084,1295,5.721,1296,4.854,1297,3.509,1298,4.135,1299,4.135,1300,2.263,1301,4.135,1302,4.135,1303,3.298,1304,2.485,1305,4.135,1306,4.135,1307,4.135,1308,3.509,1309,4.135,1310,2.905,1311,4.135,1312,4.135,1313,4.135,1314,3.854,1315,4.135,1316,5.073,1317,3.509,1318,3.509,1319,4.135,1320,3.509,1321,3.509,1322,4.135,1323,4.135,1324,4.135,1325,2.24,1326,4.135,1327,4.135,1328,2.612,1329,3.509,1330,1.226,1331,4.135,1332,4.135,1333,4.135,1334,3.078,1335,4.135,1336,4.135,1337,4.135,1338,2.485,1339,4.135,1340,4.135,1341,4.135,1342,5.073,1343,4.135,1344,4.135,1345,3.078,1346,4.135]],["title/interfaces/Column.html",[56,0.116,1347,2.245]],["body/interfaces/Column.html",[7,0.999,8,0.016,9,0.958,10,1.455,12,0.695,14,0.069,15,0.069,16,0.105,17,2.615,18,2.083,22,0.226,24,0.408,31,2.991,34,0.668,36,1.252,38,0.372,42,0.958,46,0.503,47,2.318,48,1.38,49,2.318,52,0.147,53,0.015,54,0.013,55,0.008,56,0.08,58,0.505,65,1.657,72,1.167,74,0.14,75,0.331,76,0.621,83,0.212,84,0.565,87,0.526,88,0.39,96,1.286,97,2.59,99,0.548,100,0.591,101,0.484,110,0.975,116,0.978,117,0.621,118,1.337,119,2.22,133,0.752,144,0.191,146,0.958,147,0.999,149,0.628,153,1.385,156,0.878,157,0.819,163,0.565,164,0.339,165,1.65,167,2.297,170,1.276,171,1.031,177,0.999,181,0.505,184,0.408,185,1.083,190,1.112,195,1.737,199,0.837,230,1.813,243,1.796,248,1.767,267,0.695,270,2.694,278,0.322,284,0.621,308,2.127,319,0.815,327,1.122,329,1.385,335,1.432,336,2.111,337,1.808,340,4.195,341,1.307,343,2.379,352,1.424,359,1.65,362,0.752,369,1.38,379,1.056,398,0.693,407,0.723,409,1.098,413,0.695,416,1.316,430,1.14,432,1.142,433,0.57,450,0.919,456,1.745,463,2.22,476,2.318,481,2.318,483,3.242,484,0.695,501,0.594,503,3.518,507,2.318,512,1.996,516,1.098,530,3.518,533,0.815,539,4.266,550,1.385,572,1.14,610,0.489,612,1.09,619,1.098,620,0.594,621,0.594,627,1.867,632,1.287,638,0.695,653,1.844,671,0.958,674,0.958,676,1.179,690,0.883,738,2.353,739,1.14,740,0.999,746,2.628,750,1.252,751,1.463,760,2.413,763,1.687,765,1.758,778,2.419,782,0.883,783,1.34,785,1.455,803,0.958,805,2.19,809,1.996,816,1.9,819,2.335,821,2.445,845,1.907,900,1.767,938,2.513,959,1.09,966,1.583,976,1.55,993,2.083,996,2.317,1034,1.14,1045,1.09,1121,1.14,1193,1.09,1230,5.17,1255,2.684,1287,1.758,1293,3.242,1300,1.14,1325,2.384,1329,1.767,1330,0.938,1338,1.252,1347,4.496,1348,2.318,1349,5.891,1350,5.105,1351,2.318,1352,2.541,1353,3.518,1354,2.318,1355,1.65,1356,3.907,1357,4.907,1358,2.318,1359,2.674,1360,4.06,1361,4.06,1362,4.907,1363,4.06,1364,4.06,1365,4.06,1366,4.06,1367,4.06,1368,4.907,1369,4.907,1370,4.06,1371,4.06,1372,4.06,1373,4.06,1374,4.06,1375,2.083,1376,4.06,1377,2.674,1378,2.083,1379,5.753,1380,2.674,1381,2.674,1382,1.385,1383,1.73,1384,4.748,1385,5.479,1386,1.252,1387,2.674,1388,2.674,1389,2.674,1390,2.674,1391,2.674,1392,4.06,1393,4.06,1394,4.06,1395,4.06,1396,4.06,1397,5.584,1398,4.907,1399,2.674,1400,3.051,1401,2.674,1402,2.674,1403,1.043,1404,1.188,1405,2.674,1406,1.907,1407,5.479,1408,2.674,1409,2.674,1410,4.907,1411,2.674,1412,4.907,1413,1.767,1414,1.767,1415,2.674,1416,1.315,1417,2.674,1418,4.06,1419,2.674,1420,4.06,1421,3.62,1422,4.06,1423,2.674,1424,2.674,1425,2.895,1426,2.674,1427,2.674,1428,2.674,1429,4.907,1430,5.563,1431,3.38,1432,2.674,1433,2.674,1434,1.65,1435,2.564,1436,2.674,1437,4.06,1438,2.674,1439,2.674,1440,2.674,1441,2.895,1442,2.674,1443,4.06,1444,4.06,1445,4.06,1446,4.06,1447,2.674,1448,2.318,1449,2.674,1450,2.674,1451,2.674,1452,2.674,1453,2.674,1454,2.674,1455,4.06,1456,3.518,1457,2.318,1458,4.06,1459,2.674,1460,1.767,1461,2.674,1462,2.674,1463,2.674,1464,2.674,1465,2.674,1466,4.06,1467,2.674,1468,2.674,1469,2.674,1470,1.463,1471,2.318,1472,4.06,1473,2.674,1474,5.584,1475,2.674,1476,2.674,1477,2.674,1478,2.674,1479,2.674,1480,2.674,1481,1.65,1482,2.674,1483,4.06,1484,2.682,1485,2.674,1486,4.06,1487,2.674,1488,2.674,1489,2.674,1490,2.674,1491,4.907,1492,2.674,1493,2.674,1494,2.674,1495,2.674,1496,4.06,1497,2.674,1498,5.479,1499,2.674,1500,2.674,1501,6.444,1502,4.06,1503,4.06,1504,2.674,1505,2.674,1506,4.06,1507,2.674,1508,4.907,1509,6.201,1510,4.907,1511,4.06,1512,4.06,1513,4.06,1514,2.674,1515,2.674,1516,2.674,1517,2.674,1518,5.891,1519,4.06,1520,4.907,1521,2.674,1522,2.674,1523,2.674,1524,2.674,1525,4.06,1526,2.674,1527,2.674,1528,1.767,1529,2.674,1530,4.06,1531,2.674,1532,2.674,1533,2.674,1534,2.674,1535,2.674,1536,4.252,1537,2.674,1538,2.674,1539,4.907,1540,2.674,1541,2.674,1542,4.06,1543,4.06,1544,2.674,1545,2.674,1546,2.674,1547,4.06,1548,4.06,1549,4.907,1550,2.674,1551,2.674,1552,2.674,1553,2.674,1554,4.06,1555,2.674,1556,2.674,1557,2.674,1558,2.674,1559,4.06,1560,2.674,1561,2.674,1562,2.091,1563,2.674,1564,2.674,1565,2.674,1566,4.06,1567,2.318,1568,2.674,1569,2.674,1570,2.674,1571,2.674,1572,2.674,1573,2.674,1574,2.674,1575,2.674,1576,2.674,1577,2.674,1578,5.479,1579,2.674,1580,2.674,1581,2.674,1582,2.674,1583,2.674,1584,2.674,1585,2.318,1586,2.674,1587,2.674,1588,2.674,1589,2.674,1590,6.201,1591,2.674,1592,5.891,1593,3.518,1594,2.674,1595,2.674,1596,2.674,1597,1.463,1598,2.674,1599,2.674,1600,2.674,1601,2.674,1602,3.518,1603,2.674,1604,2.674,1605,2.674,1606,4.06,1607,2.674,1608,2.674,1609,2.674,1610,3.028,1611,2.318,1612,2.674,1613,2.674,1614,2.083,1615,4.748,1616,2.674,1617,2.674,1618,2.674,1619,3.635,1620,2.674,1621,2.318,1622,2.674,1623,2.674,1624,4.907,1625,4.06,1626,2.674,1627,2.674,1628,1.55,1629,2.674,1630,2.674,1631,2.674,1632,2.674,1633,2.674,1634,2.674,1635,1.767,1636,2.674,1637,2.22,1638,2.674,1639,2.674,1640,1.767,1641,2.674,1642,4.06,1643,2.674,1644,2.674,1645,2.674,1646,2.674,1647,2.674,1648,2.674,1649,1.385,1650,1.687,1651,2.674,1652,4.06,1653,4.06,1654,2.674,1655,2.674,1656,4.907,1657,2.674,1658,2.674,1659,2.318,1660,2.674,1661,2.674,1662,4.06,1663,3.518,1664,2.674,1665,2.674,1666,2.318,1667,2.674,1668,4.06,1669,2.674,1670,2.674,1671,2.674,1672,2.674,1673,2.674,1674,2.674,1675,2.318,1676,2.674,1677,2.674,1678,2.674,1679,2.674,1680,2.674,1681,2.674,1682,1.65,1683,2.674,1684,2.674,1685,2.674,1686,2.674,1687,2.674,1688,5.891,1689,1.767,1690,2.674,1691,2.674,1692,2.674,1693,2.674,1694,1.65,1695,2.674,1696,4.06,1697,2.674,1698,2.674,1699,2.674,1700,2.674,1701,2.674,1702,2.674,1703,2.674,1704,2.674,1705,2.674,1706,2.674,1707,2.674,1708,2.674,1709,2.674,1710,2.674,1711,2.674,1712,2.674,1713,2.674,1714,4.06,1715,2.674,1716,2.674,1717,2.674,1718,2.674,1719,2.674,1720,2.674,1721,2.674,1722,1.767,1723,1.463,1724,2.674,1725,2.674,1726,2.674,1727,2.674,1728,2.674,1729,3.38,1730,1.463,1731,2.674,1732,2.674,1733,4.06,1734,2.674,1735,2.674,1736,4.06,1737,2.674,1738,3.161,1739,2.674,1740,2.674,1741,1.907,1742,2.674,1743,2.674,1744,2.674,1745,2.674,1746,2.674,1747,1.385,1748,2.318,1749,2.674,1750,2.674,1751,2.674,1752,2.674]],["title/interfaces/CustomData.html",[56,0.116,1753,2.39]],["body/interfaces/CustomData.html",[8,0.016,14,0.078,15,0.078,16,0.078,22,0.186,38,0.42,46,0.501,52,0.202,53,0.017,54,0.008,55,0.008,56,0.185,58,0.57,60,0.996,61,1.038,63,2.301,65,1.825,66,2.144,67,1.081,70,2.079,71,3.298,72,1.174,74,0.373,75,0.474,76,0.871,77,3.359,78,2.861,79,1.772,80,3.013,81,3.343,82,0.71,83,0.419,84,0.613,87,0.593,88,0.44,89,1.034,90,1.104,91,1.703,92,1.454,93,0.849,94,0.947,95,0.957,96,1.168,100,0.44,101,0.546,102,1.733,103,1.286,104,1.744,105,1.733,110,1.267,111,2.424,112,2.43,113,2.149,114,2.301,115,1.65,116,0.983,117,0.917,118,0.593,127,2.079,128,1.128,130,1.971,131,2.37,132,2.301,133,1.25,135,1.81,141,1.286,142,1.82,144,0.317,149,0.685,150,1.981,151,1.484,153,1.563,156,0.562,157,0.861,159,1.218,162,1.081,163,0.42,164,0.849,166,1.318,167,2.74,168,3.013,169,1.177,170,0.785,171,1.286,172,2.353,175,2.468,181,0.995,184,0.46,185,0.481,186,1.857,187,1.347,188,1.177,190,1.098,192,1.959,196,1.286,199,0.848,219,1.038,227,2.185,230,1.484,242,2.353,243,1.573,244,2.885,249,1.347,253,0.863,258,1.65,264,2.056,267,1.789,278,0.747,279,2.301,284,0.937,286,2.885,289,1.65,297,1.23,300,1.65,303,2.185,304,1.81,307,0.816,309,1.08,310,1.171,311,1.65,312,1.412,313,0.849,315,2.247,327,1.27,328,1.23,330,1.128,332,0.957,333,1.65,334,1.983,335,1.026,336,1.592,337,1.068,341,0.986,352,1.371,353,0.849,354,1.286,378,1.412,398,0.562,409,1.754,410,1.484,411,1.23,414,1.81,415,1.286,416,1.267,428,2.306,431,1.484,432,0.849,433,0.947,434,1.286,436,1.813,437,2.804,438,1.862,447,1.563,450,1.528,451,0.725,453,1.484,454,1.862,455,3.59,456,2.257,457,1.862,458,3.418,459,0.919,460,1.528,461,1.286,462,1.862,463,1.65,467,2.222,468,1.563,469,1.038,474,1.23,475,1.749,512,2.185,515,1.563,517,3.139,527,1.65,528,2.479,533,0.919,535,1.347,550,1.563,663,1.484,676,1.559,809,1.484,984,1.563,996,1.128,1006,2.353,1074,1.412,1087,3.254,1197,2.742,1325,1.038,1330,1.026,1334,1.749,1355,3.59,1382,1.563,1404,1.544,1434,1.862,1481,1.862,1484,1.994,1562,1.286,1597,2.43,1640,1.994,1753,3.826,1754,1.749,1755,2.885,1756,3.168,1757,3.168,1758,2.43,1759,1.563,1760,3.585,1761,2.152,1762,1.563,1763,3.168,1764,2.576,1765,2.468,1766,2.152,1767,2.152,1768,1.412,1769,2.152,1770,2.152,1771,2.152,1772,2.152,1773,2.152,1774,2.152,1775,1.749,1776,2.576,1777,2.152,1778,1.563,1779,2.936,1780,2.152,1781,3.484,1782,2.152,1783,2.152,1784,2.936,1785,1.994,1786,2.152,1787,2.152,1788,1.994,1789,2.885,1790,1.749,1791,2.936,1792,1.749,1793,1.412,1794,2.152,1795,2.152,1796,2.152,1797,2.152,1798,1.862,1799,2.152,1800,2.152,1801,2.152,1802,3.168,1803,2.152,1804,2.152,1805,2.152,1806,2.152,1807,2.152,1808,1.862,1809,2.742,1810,2.936,1811,2.152,1812,2.152,1813,2.152,1814,3.59,1815,2.152,1816,2.152,1817,2.152,1818,3.761,1819,2.152,1820,2.152,1821,2.152,1822,2.152,1823,2.152,1824,3.168,1825,3.168,1826,3.168,1827,2.152,1828,3.168,1829,2.152,1830,1.484,1831,2.152,1832,1.862,1833,2.152,1834,3.761,1835,1.862,1836,2.152,1837,1.563,1838,2.152,1839,3.168,1840,2.152,1841,2.152,1842,1.65,1843,2.152,1844,2.152,1845,2.152,1846,2.152,1847,1.81,1848,2.152,1849,2.152,1850,1.128,1851,2.152,1852,2.152,1853,2.152,1854,2.152,1855,3.168,1856,2.152,1857,2.152,1858,2.152,1859,2.152,1860,2.152,1861,2.152,1862,2.152,1863,2.152,1864,2.152,1865,2.152,1866,1.994,1867,2.152,1868,2.152,1869,3.168,1870,2.152,1871,2.152,1872,2.152,1873,2.152,1874,2.152,1875,1.749,1876,2.152,1877,2.152,1878,2.152,1879,2.152,1880,2.152,1881,2.152,1882,2.152,1883,2.152,1884,2.152,1885,2.152,1886,3.761,1887,2.152,1888,2.152,1889,3.168,1890,2.152,1891,2.152,1892,4.148,1893,2.152,1894,3.221,1895,2.723,1896,4.148,1897,4.148,1898,2.723,1899,2.152,1900,2.152,1901,2.152,1902,4.148,1903,3.139,1904,2.152,1905,1.994,1906,3.761,1907,2.152,1908,3.761,1909,3.168,1910,3.168,1911,3.168,1912,3.168,1913,2.152,1914,2.152,1915,3.761,1916,3.761,1917,2.152,1918,2.079,1919,2.152,1920,2.152,1921,2.152,1922,2.152,1923,2.152,1924,2.152,1925,1.862,1926,1.563,1927,2.152,1928,1.749,1929,2.152,1930,2.152]],["title/components/DataModalComponent.html",[9,1.388,610,0.467]],["body/components/DataModalComponent.html",[7,1.802,8,0.016,9,2.543,10,1.728,14,0.174,15,0.125,16,0.125,17,2.712,22,0.229,24,0.735,31,1.802,36,2.257,38,0.671,46,0.559,48,2.062,52,0.145,53,0.027,54,0.013,55,0.012,66,1.357,74,0.252,75,0.5,76,0.61,79,1.868,82,0.552,83,0.397,84,0.55,87,0.948,88,0.703,89,0.61,90,0.671,96,1.219,99,0.988,100,0.703,101,0.873,116,0.814,117,0.61,144,0.481,149,0.47,163,0.671,184,0.935,185,1.239,335,1.114,337,1.159,341,1.07,372,1.595,383,2.022,385,1.411,398,0.776,399,1.308,531,1.897,610,0.813,611,1.802,612,2.499,613,1.658,614,2.226,615,1.728,616,2.152,620,1.811,621,1.808,632,2.138,638,1.595,679,4.776,689,2.613,690,2.024,691,2.392,692,2.152,693,3.167,694,2.152,698,2.737,699,2.737,700,1.802,701,2.152,702,1.881,703,2.737,704,1.592,705,3.167,706,1.728,707,1.728,708,1.881,709,1.802,710,1.658,711,1.802,712,2.152,713,2.152,714,1.728,715,1.416,716,3.009,717,2.152,718,1.881,719,1.965,720,1.802,721,2.152,722,1.802,723,2.392,724,2.152,725,1.802,726,1.802,727,2.152,728,1.658,729,1.802,730,1.802,731,1.728,732,1.304,733,2.152,734,2.152,751,3.882,819,2.055,850,3.354,904,4.455,1010,3.755,1040,3.316,1047,5.252,1121,2.874,1257,4.809,1293,5.178,1347,2.795,1350,5.844,1356,5.589,1358,4.178,1397,6.151,1400,2.497,1430,5.527,1474,4.178,1602,5.315,1611,5.315,1615,4.178,1621,4.178,1675,4.178,1931,6.103,1932,3.755,1933,6.133,1934,5.844,1935,6.744,1936,6.133,1937,6.744,1938,5.061,1939,4.822,1940,6.351,1941,6.133,1942,4.822,1943,4.822,1944,4.822,1945,4.822,1946,4.822,1947,6.133,1948,4.822,1949,4.822,1950,4.822,1951,5.315,1952,4.822,1953,4.822,1954,4.822,1955,4.822,1956,4.822,1957,3.438,1958,4.822,1959,4.822,1960,4.822]],["title/interfaces/DynamicEdge.html",[56,0.116,1961,2.559]],["body/interfaces/DynamicEdge.html",[8,0.016,14,0.104,15,0.206,16,0.104,22,0.214,38,0.559,46,0.493,52,0.199,53,0.022,54,0.014,55,0.01,56,0.212,58,0.758,60,1.325,61,1.38,70,1.879,72,0.984,74,0.21,75,0.503,82,0.46,83,0.38,84,0.443,87,0.789,88,0.585,89,1.033,90,1.087,91,2.021,92,1.359,94,1.159,95,1.273,96,1.184,97,2.765,99,0.822,100,0.585,104,1.796,105,2.578,106,1.974,110,1.588,116,0.533,121,2.426,130,2.47,131,2.512,133,1.129,135,2.814,141,1.711,142,1.804,144,0.287,146,1.439,148,1.592,149,0.601,150,2.064,156,0.836,157,0.655,162,2.209,164,0.688,166,1.359,169,1.566,170,1.044,171,1.232,172,2.751,177,2.304,181,1.303,184,0.612,185,0.639,186,1.952,188,1.566,190,1.398,192,1.668,199,0.791,219,1.38,222,2.079,223,1.566,229,2.96,230,1.735,253,0.559,255,2.816,278,0.743,284,0.508,290,1.53,292,3.152,293,1.948,297,2.216,304,2.512,307,1.086,309,1.517,310,1.207,312,1.879,313,1.129,315,2.627,319,1.223,327,1.263,328,2.216,329,2.079,334,1.791,335,0.927,336,1.439,337,0.965,341,0.891,352,1.044,353,1.129,354,1.711,356,2.079,357,1.273,358,1.879,398,0.78,407,1.086,409,1.471,428,2.12,430,2.317,431,1.974,432,1.53,433,1.159,434,2.627,437,2.216,447,2.079,448,2.121,450,2.272,456,2.185,458,1.791,459,1.223,460,1.38,469,1.38,472,1.5,478,2.863,501,0.891,512,1.974,516,1.086,533,1.223,550,2.079,626,1.273,673,2.196,676,1.307,807,2.095,832,2.477,996,2.032,997,3.805,1079,2.196,1101,1.859,1163,1.974,1325,1.38,1330,1.256,1383,1.711,1386,2.545,1404,1.592,1441,2.863,1562,1.711,1597,2.196,1694,2.477,1747,2.079,1758,3.373,1759,3.193,1760,1.879,1775,2.327,1776,2.327,1778,2.079,1847,1.636,1850,1.5,1961,4.074,1962,2.327,1963,1.974,1964,3.732,1965,2.196,1966,4.393,1967,2.652,1968,2.652,1969,2.652,1970,2.652,1971,2.652,1972,3.836,1973,2.863,1974,3.126,1975,3.126,1976,3.126,1977,3.126,1978,2.477,1979,1.636,1980,2.652,1981,2.652,1982,4.366,1983,3.592,1984,2.816,1985,2.652,1986,4.074,1987,2.652,1988,4.234,1989,2.652,1990,2.652,1991,3.126,1992,2.652,1993,2.652,1994,2.652,1995,1.791,1996,2.652,1997,4.802,1998,2.652,1999,2.652,2000,2.863,2001,4.074,2002,2.652,2003,2.196,2004,2.652,2005,1.5,2006,2.652,2007,3.126,2008,2.652,2009,2.652,2010,2.652,2011,2.652,2012,2.652,2013,2.652,2014,2.652,2015,2.652,2016,2.652,2017,4.234,2018,4.234,2019,2.652,2020,2.652,2021,2.652,2022,2.652,2023,2.652,2024,2.652,2025,4.234,2026,3.126,2027,2.477,2028,4.234,2029,3.126,2030,2.652,2031,2.079,2032,3.126,2033,3.126,2034,3.126,2035,2.652,2036,2.652,2037,2.652,2038,3.592,2039,3.592,2040,3.592,2041,3.592,2042,4.234,2043,4.234,2044,2.652,2045,4.234,2046,4.234,2047,3.592]],["title/classes/DynamicEdgeProvider.html",[53,0.021,1981,2.559]],["body/classes/DynamicEdgeProvider.html",[8,0.016,12,0.871,14,0.087,15,0.206,16,0.087,22,0.202,38,0.466,46,0.48,52,0.184,53,0.018,54,0.014,55,0.009,56,0.193,60,1.106,61,2.223,70,1.568,72,1.014,74,0.175,75,0.456,76,0.897,79,1.021,82,0.641,83,0.413,84,0.548,87,0.659,88,0.488,89,1.035,90,1.103,91,2.027,92,1.616,93,1.575,94,1.022,95,1.062,96,1.286,97,2.703,99,0.686,100,0.488,102,3.017,103,1.428,104,1.902,105,2.383,106,1.648,110,1.468,116,0.637,117,0.709,118,0.659,121,2.498,124,2.043,130,2.514,131,2.49,133,0.943,135,2.741,141,1.428,142,1.779,144,0.534,146,1.201,148,1.639,149,0.596,150,2.065,156,0.851,157,0.578,159,0.774,162,2.317,163,0.85,164,0.607,166,1.198,167,1.87,169,1.307,170,0.871,171,1.178,172,2.498,177,2.284,181,1.22,182,2.132,184,0.731,185,1.219,186,1.875,188,1.307,190,1.337,192,1.873,199,0.741,219,1.649,222,1.736,223,1.307,229,2.917,230,1.575,253,0.466,255,2.9,278,0.675,284,0.424,290,1.719,292,2.779,293,1.718,294,1.201,296,1.775,297,1.954,304,2.281,307,0.906,309,1.557,310,1.435,312,1.568,313,1.349,315,2.386,319,1.021,327,1.147,328,2.281,329,2.483,332,1.775,334,1.495,335,0.774,336,1.201,337,0.805,341,0.744,352,1.247,353,1.349,354,1.428,356,1.736,357,1.062,358,1.568,367,1.736,368,2.779,369,1.349,370,2.779,371,2.779,372,1.247,374,2.623,375,2.623,376,2.623,377,2.281,378,2.244,379,1.456,380,2.623,381,2.623,382,1.943,383,2.02,385,2.073,386,1.648,387,4.772,390,2.068,391,1.943,392,2.068,393,2.068,394,2.068,395,2.068,396,2.068,398,0.962,399,1.434,401,2.068,404,1.365,405,2.068,406,1.943,407,1.297,408,1.943,409,1.514,410,1.648,411,1.365,412,1.365,413,0.871,414,1.365,415,1.428,416,0.805,417,2.068,418,1.152,419,1.365,421,2.214,422,1.365,423,2.068,424,1.365,425,2.068,428,2.101,430,2.386,431,2.358,432,1.575,433,1.022,434,2.755,437,2.49,447,1.736,448,2.383,450,2.101,456,1.993,458,2.14,459,1.46,460,1.152,464,2.214,465,2.214,466,1.495,467,1.201,468,1.736,469,1.925,470,2.214,471,2.214,472,1.792,478,2.39,501,0.744,512,1.648,516,0.906,533,1.46,550,1.736,626,1.52,673,1.833,676,1.345,807,1.937,832,2.958,996,2.284,997,3.99,1079,1.833,1101,1.719,1163,1.648,1325,1.152,1330,1.107,1383,1.428,1386,2.86,1404,1.403,1441,3.419,1562,1.428,1597,1.833,1694,2.068,1747,2.483,1758,2.623,1759,2.9,1760,1.568,1775,1.943,1776,1.943,1778,1.736,1847,1.365,1850,1.252,1961,3.168,1962,2.779,1963,1.648,1964,3.678,1965,1.833,1966,4.449,1967,2.214,1968,2.214,1969,2.214,1970,2.214,1971,2.214,1972,3.668,1973,2.39,1974,2.61,1975,3.734,1976,3.734,1977,3.734,1978,2.958,1979,1.954,1980,3.168,1981,3.168,1982,4.037,1983,3.168,1984,2.483,1985,2.214,1986,3.699,1987,2.214,1988,4.759,1989,3.699,1990,3.699,1991,2.61,1992,2.214,1993,2.214,1994,2.214,1995,1.495,1996,2.214,1997,4.36,1998,2.214,1999,2.214,2000,2.39,2001,3.699,2002,2.214,2003,1.833,2004,2.214,2005,1.252,2006,2.214,2007,2.61,2008,2.214,2009,2.214,2010,2.214,2011,2.214,2012,2.214,2013,2.214,2014,2.214,2015,2.214,2016,2.214,2017,3.734,2018,3.734,2019,2.214,2020,2.214,2021,2.214,2022,2.214,2023,2.214,2024,2.214,2025,3.734,2026,2.61,2027,2.068,2028,3.734,2029,2.61,2030,2.214,2031,1.736,2032,2.61,2033,2.61,2034,2.61,2035,2.214,2036,2.214,2037,2.214,2038,3.168,2039,3.168,2040,3.168,2041,3.168,2042,3.734,2043,3.734,2044,2.214,2045,3.734,2046,3.734,2047,3.168,2048,3.351,2049,3.351,2050,3.351,2051,3.351,2052,2.61]],["title/interfaces/DynamicEdgeType.html",[56,0.116,1966,2.39]],["body/interfaces/DynamicEdgeType.html",[8,0.016,14,0.101,15,0.206,16,0.101,22,0.212,38,0.543,46,0.488,52,0.196,53,0.021,54,0.014,55,0.01,56,0.211,58,0.737,60,1.288,61,1.342,70,2.496,72,1.238,74,0.204,75,0.533,76,0.675,82,0.447,83,0.39,84,0.435,87,0.767,88,0.569,89,1.033,90,1.069,91,2.115,92,1.333,94,1.137,95,1.237,96,1.174,97,2.802,99,0.799,100,0.569,104,1.778,105,2.548,106,1.919,110,1.569,116,0.518,121,2.38,130,2.638,131,2.787,133,1.098,135,2.998,141,2.273,142,1.831,144,0.279,146,1.911,148,1.561,149,0.593,150,2.058,156,0.827,157,0.643,162,2.53,164,0.866,166,1.765,169,1.522,170,1.015,171,1.224,172,2.712,177,2.271,181,1.332,184,0.595,185,0.622,186,1.94,188,1.522,190,1.389,192,1.644,199,0.783,219,1.342,222,2.021,223,1.522,229,2.944,230,1.71,253,0.543,255,2.763,278,0.732,284,0.494,290,1.501,292,3.092,293,1.911,297,2.173,304,2.476,307,1.056,309,1.507,310,1.184,312,1.827,313,1.098,315,2.589,319,1.189,327,1.245,328,2.476,329,2.021,334,1.742,335,0.901,336,1.399,337,0.938,341,0.866,352,1.015,353,1.098,354,1.663,356,2.021,357,1.237,358,1.827,398,0.866,407,1.056,409,1.056,428,2.246,430,2.273,431,1.919,432,1.501,433,1.393,434,2.589,437,2.173,447,2.021,448,2.08,450,2.246,456,2.033,458,1.742,459,1.189,460,1.342,469,1.342,472,1.459,478,2.783,501,0.866,512,1.919,516,1.056,533,1.189,550,2.763,626,1.237,673,2.918,676,1.282,807,2.071,832,2.408,996,1.993,997,3.75,1079,2.135,1101,1.838,1163,1.919,1325,1.342,1330,1.232,1383,1.663,1386,2.496,1404,1.779,1441,2.783,1562,1.663,1597,2.135,1694,2.408,1747,2.021,1758,3.324,1759,2.763,1760,1.827,1775,3.092,1776,3.092,1778,2.763,1847,1.59,1850,1.459,1961,3.524,1962,2.262,1963,1.919,1964,3.803,1965,2.918,1966,4.459,1967,3.524,1968,3.524,1969,4.315,1970,3.524,1971,3.524,1972,3.865,1973,2.783,1974,3.039,1975,3.039,1976,3.039,1977,3.039,1978,2.408,1979,1.59,1980,2.578,1981,2.578,1982,4.315,1983,3.524,1984,2.763,1985,2.578,1986,4.015,1987,2.578,1988,4.154,1989,2.578,1990,2.578,1991,3.039,1992,2.578,1993,2.578,1994,2.578,1995,1.742,1996,2.578,1997,4.732,1998,2.578,1999,2.578,2000,2.783,2001,4.015,2002,2.578,2003,2.135,2004,2.578,2005,1.459,2006,2.578,2007,3.039,2008,2.578,2009,2.578,2010,2.578,2011,2.578,2012,2.578,2013,2.578,2014,2.578,2015,2.578,2016,2.578,2017,4.154,2018,4.154,2019,2.578,2020,2.578,2021,2.578,2022,2.578,2023,2.578,2024,2.578,2025,4.154,2026,3.039,2027,2.408,2028,4.154,2029,3.039,2030,2.578,2031,2.021,2032,3.039,2033,3.039,2034,3.039,2035,2.578,2036,2.578,2037,2.578,2038,3.524,2039,3.524,2040,3.524,2041,3.524,2042,4.154,2043,4.154,2044,2.578,2045,4.154,2046,4.154,2047,3.524]],["title/classes/DynamicNodeProvider.html",[53,0.021,2053,2.762]],["body/classes/DynamicNodeProvider.html",[8,0.016,12,0.889,14,0.088,15,0.192,16,0.088,22,0.209,38,0.476,46,0.44,52,0.146,53,0.019,54,0.011,55,0.009,56,0.169,60,1.129,61,2.24,66,1.368,67,2.426,72,1.116,74,0.178,75,0.462,76,0.901,79,1.041,82,0.649,83,0.401,84,0.552,87,0.672,88,0.498,89,1.039,90,1.008,92,1.629,93,1.593,94,1.037,95,1.084,96,1.276,97,2.633,99,0.7,100,0.709,101,0.619,102,3.025,103,1.457,104,1.851,105,2.208,106,1.681,110,1.36,113,1.982,116,0.454,117,0.825,118,0.672,121,2.526,124,2.073,130,2.305,131,2.513,135,2.513,137,1.982,140,1.368,141,1.457,142,1.36,143,1.907,144,0.536,149,0.601,150,2.059,156,0.825,157,0.586,159,0.79,162,2.335,163,0.858,167,1.897,171,1.184,177,2.116,181,1.164,182,2.147,184,0.741,185,1.222,186,1.91,187,2.752,188,1.334,190,1.387,192,1.884,199,0.746,219,1.672,222,1.771,223,1.334,227,1.681,229,2.899,230,1.593,242,2.17,249,3.177,253,0.788,255,2.519,278,0.785,284,0.433,290,1.735,293,1.225,294,1.225,296,1.795,297,1.393,304,2.307,307,0.925,309,1.523,310,0.759,313,1.368,315,2.412,319,1.041,327,1.159,328,1.393,332,1.795,335,0.79,336,1.225,337,0.822,341,0.759,353,1.368,354,1.457,356,1.771,357,1.084,358,1.6,367,1.771,368,2.819,369,1.368,370,2.819,371,2.819,372,1.265,374,2.66,375,2.66,376,2.66,377,2.307,378,2.276,379,1.472,380,2.66,381,2.66,382,1.982,383,2.025,385,2.084,386,1.681,387,4.785,390,2.11,391,1.982,392,2.11,393,2.11,394,2.11,395,2.11,396,2.11,398,0.95,399,1.444,401,2.11,404,1.393,405,3.001,406,1.982,407,0.925,408,1.982,409,1.315,410,1.681,411,1.393,412,1.393,413,0.889,414,1.393,415,1.457,416,0.822,417,2.11,418,1.176,419,1.393,421,2.259,422,1.393,423,2.11,424,1.393,425,2.11,428,2.395,432,1.735,433,0.729,434,2.776,436,2.395,437,2.513,448,2.405,450,2.12,453,2.392,456,2.003,458,2.17,460,1.176,464,2.259,465,2.259,466,1.526,467,1.225,468,1.771,469,1.946,470,2.259,471,2.259,472,1.818,501,0.759,516,0.925,527,3.704,533,1.481,544,2.663,545,1.681,644,1.457,673,1.87,676,1.36,807,1.955,832,3.001,997,2.11,1101,1.368,1163,1.681,1224,2.438,1325,1.176,1383,2.073,1404,1.424,1562,1.457,1694,2.11,1759,2.519,1760,3.479,1764,1.982,1778,1.771,1790,2.819,1808,2.11,1814,3.805,1850,1.278,1925,2.11,1962,2.819,1963,1.681,1964,3.723,1965,1.87,1967,2.259,1968,2.259,1969,3.74,1970,2.259,1971,2.259,1972,3.752,1978,3.001,1979,1.982,1980,3.213,1982,3.74,1983,3.213,1984,1.771,1985,2.259,1986,3.74,1987,2.259,1989,3.74,1990,3.74,1992,2.259,1993,2.259,1994,2.259,1995,1.526,1996,2.259,1998,2.259,1999,2.259,2001,3.213,2002,2.259,2003,2.66,2004,2.259,2005,1.278,2006,2.259,2008,2.259,2009,2.259,2010,2.259,2011,2.259,2012,2.259,2013,2.259,2014,3.74,2015,2.259,2016,2.259,2019,2.259,2020,2.259,2021,2.259,2022,2.259,2023,2.259,2024,2.259,2030,3.213,2031,1.771,2035,2.259,2036,2.259,2037,2.259,2038,2.259,2039,2.259,2040,2.259,2041,2.259,2044,2.259,2047,3.213,2052,2.663,2053,3.468,2054,4.906,2055,3.213,2056,4.215,2057,2.628,2058,3.574,2059,2.276,2060,3.788,2061,4.215,2062,2.519,2063,4.215,2064,4.215,2065,4.215,2066,4.397,2067,3.419,2068,2.963,2069,3.419,2070,2.963,2071,4.215,2072,4.215,2073,2.963,2074,2.963,2075,2.963,2076,2.963,2077,4.906,2078,2.963,2079,4.215,2080,2.963,2081,2.963,2082,2.963,2083,2.963,2084,2.963,2085,2.963,2086,2.963,2087,2.963,2088,2.663,2089,2.663,2090,2.963,2091,4.215,2092,2.963,2093,4.215,2094,2.963,2095,2.963,2096,2.963]],["title/interfaces/DynamicNodeType.html",[56,0.116,2066,2.762]],["body/interfaces/DynamicNodeType.html",[8,0.016,14,0.104,15,0.196,16,0.104,22,0.219,38,0.561,46,0.441,52,0.164,53,0.022,54,0.012,55,0.01,56,0.197,58,0.76,60,1.33,61,1.385,66,1.133,67,2.213,72,1.29,74,0.21,75,0.54,82,0.462,83,0.322,84,0.444,87,0.792,88,0.587,89,1.04,92,1.362,94,1.162,95,1.277,96,1.15,97,2.767,99,0.825,100,0.794,101,0.729,104,1.721,105,2.409,106,1.981,110,1.484,113,1.641,117,0.51,121,2.432,130,2.584,131,2.817,135,2.969,137,3.159,140,1.133,141,2.322,142,1.31,143,2.024,144,0.288,149,0.602,150,2.058,156,0.782,157,0.657,162,2.554,171,1.233,177,2.037,181,1.305,184,0.614,185,0.642,186,1.975,187,2.432,188,1.571,190,1.433,192,1.671,199,0.792,219,1.385,222,2.086,223,1.571,227,1.981,229,2.93,230,1.738,242,2.432,249,2.953,253,0.86,255,2.086,278,0.833,284,0.51,290,1.533,293,1.443,297,1.641,304,2.517,307,1.089,309,1.416,313,1.133,315,2.632,319,1.227,327,1.265,328,2.221,335,0.93,336,1.443,337,0.968,341,0.894,353,1.133,354,1.717,356,2.086,357,1.277,358,1.885,398,0.838,428,2.45,432,1.738,433,1.162,434,2.632,436,2.505,437,2.221,448,2.126,450,2.275,453,1.981,456,2.085,458,1.798,460,1.385,469,1.385,472,1.505,501,0.894,516,1.089,527,3.378,533,1.227,544,3.137,545,1.981,644,1.717,673,2.981,676,1.31,807,2.098,832,2.486,997,2.486,1101,1.533,1163,1.981,1224,2.872,1325,1.385,1383,2.322,1404,1.808,1562,1.717,1694,2.486,1759,2.086,1760,3.41,1764,2.335,1778,2.823,1790,2.335,1808,2.486,1814,4.083,1850,1.505,1925,2.486,1962,2.335,1963,1.981,1964,3.694,1965,2.981,1967,3.601,1968,3.601,1969,4.814,1970,3.601,1971,3.601,1972,3.933,1978,2.486,1979,1.641,1980,2.661,1982,4.081,1983,3.601,1984,2.086,1985,2.661,1986,4.081,1987,2.661,1989,2.661,1990,2.661,1992,2.661,1993,2.661,1994,2.661,1995,1.798,1996,2.661,1998,2.661,1999,2.661,2001,3.601,2002,2.661,2003,2.981,2004,2.661,2005,1.505,2006,2.661,2008,2.661,2009,2.661,2010,2.661,2011,2.661,2012,2.661,2013,2.661,2014,4.081,2015,2.661,2016,2.661,2019,2.661,2020,2.661,2021,2.661,2022,2.661,2023,2.661,2024,2.661,2030,3.601,2031,2.086,2035,2.661,2036,2.661,2037,2.661,2038,2.661,2039,2.661,2040,2.661,2041,2.661,2044,2.661,2047,3.601,2053,2.872,2054,4.723,2055,2.661,2056,3.491,2057,2.322,2058,3.159,2059,1.885,2060,3.137,2061,3.491,2062,2.086,2063,3.491,2064,3.491,2065,3.491,2066,4.404,2070,3.491,2071,4.723,2072,4.723,2073,3.491,2074,3.491,2075,3.491,2076,3.491,2077,5.353,2078,3.491,2079,4.723,2080,3.491,2081,3.491,2082,3.491,2083,3.491,2084,3.491,2085,3.491,2086,3.491,2087,3.491,2088,3.137,2089,3.137,2090,3.491,2091,4.723,2092,3.491,2093,4.723,2094,3.491,2095,3.491,2096,3.491]],["title/interfaces/Edge.html",[56,0.116,90,0.539]],["body/interfaces/Edge.html",[8,0.016,14,0.086,15,0.086,16,0.086,22,0.212,34,0.829,38,0.462,46,0.46,52,0.208,53,0.018,54,0.009,55,0.009,56,0.211,58,0.626,65,1.339,67,1.706,68,1.48,72,1.008,74,0.318,75,0.547,76,0.603,79,1.853,82,0.809,83,0.407,84,0.661,85,0.971,88,0.694,89,1.034,90,1.124,91,1.885,92,1.61,93,1.943,94,1.297,96,1.148,99,0.679,100,0.694,101,0.601,104,1.958,107,0.971,111,1.24,117,0.77,118,1.196,122,2.028,128,2.08,133,1.339,140,1.566,142,1.836,143,2.163,144,0.46,147,1.24,148,1.885,149,0.689,150,2.008,155,0.897,156,0.77,157,0.914,159,0.766,163,0.662,164,0.815,166,1.866,170,1.447,171,0.552,181,1.148,182,1.509,185,1.236,190,1.358,192,2.078,199,0.697,253,0.462,261,1.414,264,1.765,278,0.671,284,0.42,290,1.812,293,1.189,294,1.189,296,2.28,307,1.287,308,2.126,309,0.975,310,1.568,313,0.933,319,1.45,320,2.228,332,1.052,353,0.933,357,1.928,362,1.339,369,1.339,377,1.352,379,0.863,398,0.815,399,0.707,404,1.352,407,1.287,409,1.506,412,2.624,413,0.863,416,1.697,418,2.091,419,1.352,422,1.352,424,1.352,432,1.339,433,0.707,436,2.091,444,2.268,448,1.857,451,1.338,459,1.01,466,2.714,467,1.706,469,2.091,472,2.407,501,0.736,516,1.867,528,3.065,531,1.339,535,2.484,537,2.604,545,2.341,566,1.815,572,2.857,662,1.857,664,1.553,671,1.706,680,2.604,688,1.815,715,0.766,762,2.08,763,1.914,765,1.995,803,1.189,807,1.928,815,2.474,816,1.553,1041,1.631,1042,1.94,1101,1.566,1130,1.095,1211,2.465,1213,2.465,1214,1.718,1287,1.995,1304,1.553,1330,0.766,1338,1.553,1383,2.028,1386,1.553,1403,1.857,1404,1.78,1470,2.604,1650,1.141,1723,1.815,1765,3.014,1768,2.228,1793,1.553,1847,1.352,1850,1.24,1894,1.553,1895,1.553,1898,2.228,1903,1.553,1918,1.553,1995,1.48,2005,1.24,2057,2.028,2062,2.465,2097,1.718,2098,1.815,2099,2.759,2100,2.759,2101,2.478,2102,2.878,2103,1.815,2104,2.604,2105,2.028,2106,2.465,2107,1.923,2108,2.759,2109,1.857,2110,1.923,2111,1.923,2112,1.923,2113,2.759,2114,1.923,2115,1.923,2116,2.605,2117,2.759,2118,1.923,2119,1.923,2120,1.923,2121,1.923,2122,1.815,2123,1.923,2124,1.923,2125,1.923,2126,1.923,2127,1.815,2128,2.028,2129,1.923,2130,1.923,2131,1.294,2132,1.718,2133,1.923,2134,1.815,2135,1.923,2136,1.923,2137,1.923,2138,1.923,2139,1.923,2140,1.923,2141,1.923,2142,1.923,2143,1.923,2144,1.923,2145,1.923,2146,1.923,2147,1.923,2148,1.923,2149,1.923,2150,1.923,2151,1.923,2152,1.923,2153,2.759,2154,2.604,2155,1.923,2156,1.923,2157,1.923,2158,1.923,2159,1.923,2160,1.923,2161,1.923,2162,1.923,2163,1.923,2164,2.759,2165,1.923,2166,1.923,2167,1.923,2168,1.923,2169,2.759,2170,1.923,2171,1.923,2172,1.923,2173,1.923,2174,2.759,2175,2.759,2176,1.923,2177,1.923,2178,1.923,2179,1.923,2180,1.923,2181,2.759,2182,1.923,2183,1.923,2184,1.923,2185,1.923,2186,1.923,2187,3.526,2188,1.923,2189,1.923,2190,1.923,2191,1.923,2192,1.923,2193,1.923,2194,1.923,2195,1.923,2196,1.923,2197,1.923,2198,1.923,2199,1.815,2200,2.759,2201,1.923,2202,2.028,2203,1.923,2204,1.923,2205,2.759,2206,1.94,2207,1.923,2208,1.923,2209,1.923,2210,1.923,2211,2.759,2212,1.923,2213,2.759,2214,1.923,2215,2.759,2216,2.759,2217,1.923,2218,1.923,2219,1.923,2220,1.923,2221,1.923,2222,1.923,2223,1.923,2224,2.759,2225,1.923,2226,1.923,2227,2.759,2228,1.923,2229,1.923,2230,1.923,2231,1.923,2232,1.923,2233,1.923,2234,1.923,2235,1.923,2236,2.759,2237,1.923,2238,1.923,2239,1.923,2240,1.923,2241,1.923,2242,1.923,2243,1.923,2244,1.923,2245,1.923,2246,1.923,2247,1.923,2248,1.923,2249,1.923,2250,1.923,2251,1.923,2252,1.923,2253,1.923,2254,1.923,2255,1.923,2256,2.759,2257,1.923,2258,1.923,2259,1.923,2260,1.923,2261,1.923,2262,1.923,2263,1.923,2264,1.923]],["title/interfaces/EdgeType.html",[56,0.116,91,1.134]],["body/interfaces/EdgeType.html",[8,0.016,14,0.086,15,0.086,16,0.086,22,0.213,34,0.836,38,0.465,46,0.461,52,0.208,53,0.018,54,0.009,55,0.009,56,0.211,58,0.631,65,1.347,67,2.003,68,2.136,72,1.012,74,0.319,75,0.548,76,0.606,79,1.018,82,0.77,83,0.39,84,0.657,85,1.401,88,0.697,89,1.035,90,1.125,91,1.787,92,1.615,93,1.817,94,1.302,96,1.151,99,0.685,100,0.697,101,0.605,104,1.901,107,1.401,111,1.249,117,0.773,118,1.2,122,2.04,128,2.089,133,1.347,140,1.717,142,1.838,143,2.188,144,0.461,147,1.249,148,1.891,149,0.69,150,2,155,0.904,156,0.773,157,0.922,159,1.105,163,0.666,164,0.708,166,1.73,170,1.454,171,0.556,181,1.152,182,1.517,185,1.237,190,1.36,192,2.08,199,0.699,253,0.465,261,1.425,264,1.772,278,0.674,284,0.423,290,1.573,293,1.198,294,1.198,296,2.131,307,1.294,308,2.132,309,0.98,310,1.571,313,0.941,319,1.458,320,2.24,332,1.06,353,0.941,357,2.048,362,1.347,369,1.347,377,1.362,379,0.869,389,2.136,398,0.818,399,0.713,404,1.362,407,0.904,409,1.294,412,2.487,413,0.869,416,1.757,418,2.099,419,1.362,422,1.362,424,1.362,432,1.347,433,0.713,436,2.311,444,2.278,448,1.867,451,1.343,459,1.458,466,2.724,467,1.715,469,2.099,472,2.414,501,0.742,516,1.651,528,2.864,531,1.347,535,2.724,537,3.058,545,2.354,566,1.829,572,2.864,662,2.181,664,1.565,671,1.715,680,2.618,688,1.829,715,0.772,762,2.089,763,1.922,765,2.003,803,1.198,807,1.935,815,2.48,816,1.565,1041,1.644,1042,1.362,1101,1.573,1130,1.103,1211,2.479,1213,2.479,1214,1.731,1287,2.003,1304,1.565,1330,0.772,1338,1.565,1383,2.382,1386,2.24,1403,1.867,1404,1.787,1470,2.618,1650,1.149,1723,1.829,1765,3.023,1768,2.24,1793,1.565,1847,1.362,1850,1.249,1894,1.565,1895,1.565,1898,2.24,1903,1.565,1918,1.565,1995,1.492,2005,1.249,2057,2.04,2062,2.479,2097,1.731,2098,1.829,2099,1.938,2100,1.938,2101,2.278,2102,2.936,2103,1.829,2104,2.618,2105,2.382,2106,2.896,2107,1.938,2108,2.774,2109,2.181,2110,2.774,2111,3.538,2112,2.774,2113,3.744,2114,1.938,2115,1.938,2116,2.617,2117,2.774,2118,1.938,2119,1.938,2120,1.938,2121,1.938,2122,1.829,2123,1.938,2124,1.938,2125,1.938,2126,1.938,2127,1.829,2128,2.04,2129,1.938,2130,1.938,2131,1.304,2132,1.731,2133,1.938,2134,1.829,2135,1.938,2136,1.938,2137,1.938,2138,1.938,2139,1.938,2140,1.938,2141,1.938,2142,1.938,2143,1.938,2144,1.938,2145,1.938,2146,1.938,2147,1.938,2148,1.938,2149,1.938,2150,1.938,2151,1.938,2152,1.938,2153,2.774,2154,2.618,2155,1.938,2156,1.938,2157,1.938,2158,1.938,2159,1.938,2160,1.938,2161,1.938,2162,1.938,2163,1.938,2164,2.774,2165,1.938,2166,1.938,2167,1.938,2168,1.938,2169,2.774,2170,1.938,2171,1.938,2172,1.938,2173,1.938,2174,2.774,2175,2.774,2176,1.938,2177,1.938,2178,1.938,2179,1.938,2180,1.938,2181,2.774,2182,1.938,2183,1.938,2184,1.938,2185,1.938,2186,1.938,2187,3.538,2188,1.938,2189,1.938,2190,1.938,2191,1.938,2192,1.938,2193,1.938,2194,1.938,2195,1.938,2196,1.938,2197,1.938,2198,1.938,2199,1.829,2200,2.774,2201,1.938,2202,2.04,2203,1.938,2204,1.938,2205,2.774,2206,1.95,2207,1.938,2208,1.938,2209,1.938,2210,1.938,2211,2.774,2212,1.938,2213,2.774,2214,1.938,2215,2.774,2216,2.774,2217,1.938,2218,1.938,2219,1.938,2220,1.938,2221,1.938,2222,1.938,2223,1.938,2224,2.774,2225,1.938,2226,1.938,2227,2.774,2228,1.938,2229,1.938,2230,1.938,2231,1.938,2232,1.938,2233,1.938,2234,1.938,2235,1.938,2236,2.774,2237,1.938,2238,1.938,2239,1.938,2240,1.938,2241,1.938,2242,1.938,2243,1.938,2244,1.938,2245,1.938,2246,1.938,2247,1.938,2248,1.938,2249,1.938,2250,1.938,2251,1.938,2252,1.938,2253,1.938,2254,1.938,2255,1.938,2256,2.774,2257,1.938,2258,1.938,2259,1.938,2260,1.938,2261,1.938,2262,1.938,2263,1.938,2264,1.938]],["title/interfaces/FacetChartDataPoint.html",[56,0.116,2265,2.762]],["body/interfaces/FacetChartDataPoint.html",[8,0.016,14,0.11,15,0.11,16,0.11,22,0.231,24,0.649,34,1.065,38,0.593,42,1.527,46,0.483,48,2.038,52,0.17,53,0.023,54,0.014,55,0.011,56,0.127,58,0.804,74,0.332,75,0.461,81,1.994,82,0.728,83,0.295,84,0.631,85,2.062,86,3.298,87,0.838,88,0.621,96,1.287,99,0.873,100,0.824,101,0.771,110,1.527,116,0.936,117,0.95,140,1.199,143,1.656,144,0.404,146,1.527,149,0.66,155,2.139,156,0.804,157,0.953,163,0.593,171,0.709,175,1.994,176,2.095,181,0.804,182,2.014,184,0.862,195,1.351,196,1.816,199,0.847,218,2.629,243,1.53,253,0.788,267,1.108,278,0.682,288,1.901,296,1.351,299,2.33,327,1.484,335,0.984,337,1.024,341,1.256,343,1.527,349,1.994,352,1.108,369,1.199,372,1.108,379,1.471,398,0.804,413,1.108,416,1.024,433,0.909,444,1.736,484,1.108,501,0.946,508,3.318,570,1.736,610,0.682,619,1.53,620,0.946,621,1.41,638,1.108,644,1.816,653,1.844,676,1.024,714,1.527,715,1.307,737,2.974,738,3.28,746,2.525,750,1.994,751,2.33,760,3.125,765,2.277,780,3.318,782,1.406,783,1.868,785,2.028,805,2.835,815,2.791,816,1.994,817,1.994,819,1.816,820,1.994,821,1.901,845,4.035,849,2.47,850,4.043,858,3.318,877,2.207,897,3.318,933,3.28,979,2.885,1034,2.707,1039,1.994,1074,1.994,1193,1.736,1284,4.084,1287,2.277,1292,2.33,1294,3.28,1296,3.739,1297,2.815,1308,2.815,1317,2.815,1318,2.815,1320,2.815,1321,2.815,1330,0.984,1352,3.291,1403,1.662,1431,2.629,1435,1.994,1637,3.095,1650,1.465,1798,2.629,1832,2.629,1835,2.629,1837,2.207,2131,1.662,2265,4.531,2266,3.318,2267,3.038,2268,3.318,2269,3.038,2270,4.904,2271,3.692,2272,3.692,2273,3.692,2274,3.692,2275,3.692,2276,3.692,2277,3.692,2278,3.692,2279,3.692,2280,3.692,2281,2.095,2282,3.692,2283,2.815,2284,2.411,2285,2.095,2286,2.095,2287,3.692,2288,3.692,2289,3.692,2290,3.692,2291,3.692,2292,3.692,2293,4.904,2294,3.692,2295,3.692,2296,2.629,2297,3.692,2298,4.904,2299,4.904,2300,3.692,2301,3.692,2302,3.692,2303,3.692,2304,2.33,2305,3.692,2306,3.692,2307,3.692,2308,3.692,2309,3.692,2310,3.692,2311,3.692,2312,4.904,2313,3.739,2314,4.904,2315,3.692,2316,3.692,2317,3.318,2318,3.692,2319,3.692,2320,2.629,2321,3.692,2322,3.692,2323,3.692,2324,2.47,2325,3.692,2326,3.692,2327,3.692,2328,3.692,2329,3.692,2330,3.692,2331,3.692,2332,3.692,2333,3.692,2334,3.692,2335,3.692,2336,3.692,2337,3.692,2338,3.692,2339,3.692,2340,4.904,2341,3.692,2342,3.692,2343,4.904,2344,3.692,2345,3.692,2346,3.692,2347,3.692,2348,3.692,2349,3.692,2350,3.692,2351,3.692,2352,3.692,2353,2.815,2354,3.692,2355,3.692,2356,3.692,2357,4.904,2358,3.692,2359,2.629,2360,3.692,2361,3.692,2362,3.692,2363,3.692,2364,3.692,2365,3.692,2366,3.692,2367,3.692,2368,3.692,2369,3.692,2370,3.692,2371,3.692,2372,3.692,2373,3.692,2374,4.904,2375,3.692,2376,3.692,2377,3.692,2378,3.692,2379,4.904,2380,3.692,2381,3.692,2382,3.692]],["title/components/FacetNgxChart.html",[610,0.467,714,1.388]],["body/components/FacetNgxChart.html",[7,1.271,8,0.016,9,1.219,10,1.219,14,0.146,15,0.088,16,0.088,17,1.169,22,0.221,24,0.518,31,1.271,34,0.85,38,0.473,42,1.219,46,0.508,48,2.169,52,0.146,53,0.019,54,0.014,55,0.009,56,0.101,66,0.957,74,0.295,75,0.395,76,0.823,81,1.592,82,0.774,83,0.405,84,0.637,85,2.081,86,3.229,87,0.669,88,0.495,89,0.43,90,0.473,96,1.247,99,0.697,100,0.706,101,0.616,110,1.356,116,0.924,117,0.949,140,1.363,143,1.801,144,0.524,146,1.736,149,0.6,155,2.046,156,0.823,157,0.924,163,0.905,171,0.566,175,1.592,176,2.776,181,0.914,182,1.789,184,0.86,195,1.078,196,2.065,199,0.797,218,2.098,243,1.527,253,0.674,267,0.884,278,0.584,288,1.518,296,1.536,299,1.86,327,1.482,335,0.785,337,0.817,341,1.075,343,1.219,349,1.592,352,0.884,369,1.363,372,1.468,379,1.468,383,2.058,385,1.903,398,0.976,399,1.312,413,1.26,416,0.817,433,0.725,444,1.974,484,1.26,501,0.755,508,2.648,570,1.386,610,0.68,611,1.271,612,1.974,613,1.169,615,1.219,616,1.518,619,1.527,620,1.757,621,1.761,638,1.26,643,2.065,644,2.405,653,1.763,676,0.817,689,2.065,690,1.599,691,1.89,692,1.518,693,2.745,694,1.518,698,2.162,699,2.162,700,1.271,701,1.518,702,1.326,703,2.162,704,1.123,705,2.745,706,1.219,707,1.219,708,1.326,709,1.271,710,1.169,711,1.271,712,1.518,713,1.518,714,2.204,715,1.848,716,2.519,717,1.518,718,1.326,719,1.386,720,1.271,721,1.518,722,1.271,723,1.89,724,1.518,725,1.271,726,1.271,727,1.518,728,1.169,729,1.271,730,1.271,731,1.219,732,0.92,733,1.518,734,1.518,737,2.879,738,3.272,746,2.745,749,4.199,750,2.879,751,3.365,758,2.99,759,2.947,760,3.324,765,2.492,780,3.773,782,1.599,783,2.031,785,2.33,800,2.648,805,2.519,815,2.687,816,1.592,817,1.592,819,1.449,820,1.592,821,1.518,845,4.387,849,1.971,850,3.804,858,2.648,877,1.761,897,2.648,933,3.566,979,2.771,1034,2.621,1039,1.592,1074,1.592,1193,1.386,1284,4.121,1287,2.492,1292,1.86,1294,3.272,1296,4.064,1297,3.201,1300,2.065,1308,2.247,1317,2.247,1318,2.247,1320,2.247,1321,3.729,1330,0.785,1345,2.809,1352,3.602,1403,1.326,1431,2.098,1435,1.592,1637,3.365,1650,1.169,1798,2.098,1832,2.098,1835,2.098,1837,1.761,2131,1.89,2265,4.025,2266,6.179,2267,5.658,2268,2.648,2269,2.425,2270,5.331,2271,4.199,2272,2.947,2273,4.891,2274,4.199,2275,4.891,2276,4.199,2277,4.891,2278,2.947,2279,2.947,2280,2.947,2281,1.672,2282,2.947,2283,2.247,2284,2.405,2285,1.672,2286,1.672,2287,2.947,2288,2.947,2289,2.947,2290,2.947,2291,2.947,2292,2.947,2293,4.199,2294,2.947,2295,2.947,2296,2.098,2297,2.947,2298,4.199,2299,4.199,2300,4.199,2301,5.331,2302,4.199,2303,2.947,2304,1.86,2305,2.947,2306,2.947,2307,4.199,2308,5.331,2309,2.947,2310,2.947,2311,2.947,2312,4.199,2313,3.201,2314,4.199,2315,2.947,2316,2.947,2317,2.648,2318,2.947,2319,2.947,2320,2.098,2321,2.947,2322,2.947,2323,2.947,2324,1.971,2325,2.947,2326,2.947,2327,2.947,2328,2.947,2329,2.947,2330,2.947,2331,2.947,2332,2.947,2333,2.947,2334,2.947,2335,2.947,2336,2.947,2337,2.947,2338,2.947,2339,2.947,2340,4.199,2341,2.947,2342,2.947,2343,4.199,2344,2.947,2345,2.947,2346,2.947,2347,2.947,2348,2.947,2349,2.947,2350,2.947,2351,2.947,2352,2.947,2353,3.201,2354,4.199,2355,4.199,2356,4.199,2357,4.199,2358,2.947,2359,2.098,2360,2.947,2361,2.947,2362,2.947,2363,2.947,2364,2.947,2365,2.947,2366,2.947,2367,4.199,2368,2.947,2369,2.947,2370,2.947,2371,2.947,2372,2.947,2373,4.199,2374,4.199,2375,2.947,2376,2.947,2377,2.947,2378,2.947,2379,4.199,2380,2.947,2381,5.331,2382,2.947,2383,4.845,2384,3.401,2385,3.401,2386,3.401,2387,3.401,2388,3.401,2389,3.401,2390,3.401,2391,3.401,2392,3.401,2393,3.401,2394,3.401,2395,3.401,2396,3.401,2397,3.401,2398,3.401,2399,3.401,2400,3.401,2401,3.401,2402,3.401,2403,3.401,2404,3.401,2405,3.401,2406,3.401]],["title/components/FacetWrapperComponent.html",[10,1.388,610,0.467]],["body/components/FacetWrapperComponent.html",[7,1.644,8,0.016,9,1.576,10,2.456,14,0.167,15,0.114,16,0.114,17,2.756,22,0.224,24,0.67,31,2.412,42,1.576,46,0.314,48,2.266,52,0.132,53,0.024,54,0.014,55,0.011,66,1.238,74,0.23,75,0.471,76,0.817,82,0.853,83,0.395,84,0.596,85,2.139,87,0.865,88,0.641,89,0.557,90,0.612,99,0.901,100,0.842,101,0.796,116,0.767,118,0.865,144,0.54,156,0.732,157,0.921,159,1.491,190,1.443,199,0.739,264,1.832,267,1.782,308,1.908,318,1.716,349,2.705,372,1.503,383,2.072,385,1.889,398,0.901,399,1.376,416,1.711,539,3.425,610,0.778,611,1.644,612,2.355,613,1.987,614,2.13,615,1.576,616,3.324,620,1.798,621,1.812,623,2.412,627,2.046,689,2.463,690,1.908,691,2.254,692,1.963,693,3.059,694,1.963,698,2.579,699,2.579,700,1.644,701,1.963,702,1.716,703,2.579,704,1.452,705,3.059,706,1.576,707,1.576,708,1.716,709,1.644,710,1.512,711,1.644,712,1.963,713,1.963,714,1.576,715,1.335,716,2.88,717,1.963,718,1.716,719,1.792,720,1.644,721,1.963,722,1.644,723,2.254,724,1.963,725,1.644,726,1.644,727,1.963,728,1.512,729,1.644,730,1.644,731,1.576,732,1.19,733,1.963,734,1.963,758,3.566,760,3.501,765,2.551,855,3.812,873,3.983,901,6.334,958,2.88,1158,5.594,1160,5.594,1161,5.594,1304,2.705,1375,3.425,1378,4.5,1379,5.941,1384,3.812,1400,2.278,1421,2.906,1430,4.5,1567,5.008,1619,4.51,2407,6.904,2408,3.812,2409,6.455,2410,6.455,2411,4.603,2412,6.455,2413,7.309,2414,6.455,2415,5.779,2416,5.779,2417,6.855,2418,6.855,2419,5.779,2420,5.779,2421,7.309,2422,4.399,2423,5.779,2424,6.855,2425,4.399,2426,4.399,2427,4.399,2428,5.779,2429,4.399,2430,4.399,2431,4.399,2432,4.399,2433,4.399,2434,4.399,2435,4.399,2436,4.399,2437,4.399,2438,4.399,2439,2.906,2440,4.399,2441,4.399,2442,4.399,2443,4.399,2444,4.399,2445,4.399,2446,4.399,2447,4.399,2448,4.399,2449,5.779,2450,4.399,2451,4.399,2452,6.855,2453,4.399,2454,4.399,2455,4.399,2456,4.399,2457,4.399,2458,4.399,2459,4.399,2460,4.399,2461,4.399,2462,4.399,2463,4.399,2464,2.714,2465,4.399,2466,3.161,2467,4.399,2468,4.399,2469,4.399]],["title/modules/FinanceModule.html",[0,1.905,2470,2.762]],["body/modules/FinanceModule.html",[2,2.624,3,3.09,8,0.016,11,2.381,12,1.529,13,2.396,14,0.152,15,0.152,16,0.152,20,3.587,21,3.587,22,0.24,23,3.587,24,0.896,25,3.587,26,3.046,33,3.587,34,1.47,35,4.273,36,2.752,37,4.273,38,0.818,50,3.587,52,0.177,53,0.032,54,0.013,55,0.013,722,3.038,723,2.701,725,3.038,1187,4.848,1248,5.096,1249,3.216,2470,5.797,2471,5.096,2472,5.096,2473,5.881,2474,5.096,2475,5.881,2476,4.579,2477,4.579,2478,5.881]],["title/modules/FusionChartsModule.html",[0,1.905,2479,2.762]],["body/modules/FusionChartsModule.html",[2,3.085,3,3.085,8,0.016,11,2.377,12,1.525,13,2.389,14,0.152,15,0.152,16,0.152,20,3.581,21,3.581,22,0.244,23,3.581,24,0.894,25,3.581,26,3.037,32,3.874,33,3.581,34,1.466,35,4.266,36,2.744,50,3.037,52,0.176,53,0.032,54,0.013,55,0.013,284,0.742,718,3.17,719,2.389,938,2.697,965,2.389,966,2.287,979,2.499,1192,4.568,1193,2.389,1292,3.782,2269,4.181,2479,5.695,2480,5.082,2481,5.082,2482,5.082,2483,5.864,2484,6.914,2485,6.581,2486,5.082,2487,5.864,2488,6.914,2489,5.864,2490,6.914,2491,5.864,2492,5.864,2493,5.864,2494,5.864]],["title/modules/GoogleMapsModule.html",[0,1.905,2495,2.762]],["body/modules/GoogleMapsModule.html",[2,2.677,3,3.127,8,0.016,11,2.409,12,1.56,13,2.445,14,0.155,15,0.155,16,0.155,20,3.629,21,3.629,22,0.241,23,3.629,24,0.914,25,3.629,26,3.107,33,3.629,34,1.5,37,4.324,38,0.835,41,4.997,42,2.15,50,3.107,52,0.18,53,0.033,54,0.013,55,0.013,720,3.045,1192,4.63,1193,2.445,2495,5.678,2496,5.2,2497,5.2,2498,5.2,2499,6,2500,7.008,2501,4.672,2502,6]],["title/interfaces/HeatmapItem.html",[56,0.116,952,2.762]],["body/interfaces/HeatmapItem.html",[8,0.016,14,0.115,15,0.115,16,0.115,22,0.175,24,0.679,32,2.945,46,0.51,52,0.175,53,0.025,54,0.011,55,0.011,56,0.133,58,0.841,72,0.807,74,0.233,75,0.475,76,0.738,82,0.819,83,0.383,84,0.639,107,1.706,116,0.863,117,0.872,140,1.254,149,0.569,151,2.192,155,1.577,160,2.751,164,0.97,166,1.722,171,1.081,184,0.679,199,0.886,229,1.739,243,1.206,253,0.62,267,1.859,278,0.703,288,1.989,307,1.206,308,1.924,330,1.666,343,2.328,352,1.159,385,2.017,413,1.159,443,2.584,451,1.071,461,1.9,474,1.816,484,1.159,531,1.254,533,1.776,570,2.647,610,0.703,613,1.533,619,1.577,620,0.989,621,0.989,623,1.666,625,2.179,626,2.06,627,1.413,632,1.413,638,1.159,643,2.768,653,1.894,662,1.739,674,1.597,676,1.071,690,1.471,706,1.597,709,2.179,740,1.666,778,2.274,785,1.597,815,1.597,850,3.189,906,3.472,907,3.379,908,3.863,909,3.863,910,3.863,911,3.379,912,3.379,913,3.863,914,2.584,915,2.584,916,2.584,917,2.584,918,2.584,919,2.584,921,4.443,922,2.584,923,4.394,924,2.584,925,5.052,927,3.379,931,3.863,932,5.052,933,2.584,934,3.863,935,1.9,936,5.052,937,5.052,938,1.739,939,5.052,941,3.863,942,3.863,944,3.389,946,2.584,948,3.472,950,3.863,952,5.231,954,2.584,955,2.729,958,1.989,959,2.376,960,3.195,961,1.989,965,2.376,966,1.739,968,2.584,971,2.534,974,3.863,976,3.379,977,3.863,978,3.379,979,2.484,980,3.863,981,5.052,982,3.863,983,3.365,984,2.309,985,3.273,986,2.584,987,3.863,988,3.863,989,5.052,993,3.472,996,2.179,1000,3.863,1001,3.863,1002,3.863,1004,3.863,1005,2.945,1006,1.989,1007,5.052,1026,5.366,1028,3.379,1032,2.534,1033,2.867,1034,2.936,1035,3.863,1036,3.863,1037,2.192,1038,3.863,1039,2.086,1040,2.867,1041,2.192,1042,2.376,1043,2.584,1044,2.584,1045,2.376,1046,2.945,1047,3.472,1048,3.863,1049,5.052,1050,5.052,1051,3.863,1052,3.863,1053,3.863,1054,3.863,1055,3.863,1056,3.863,1057,3.863,1058,3.863,1059,3.863,1060,2.584,1061,3.863,1062,3.379,1063,3.766,1064,2.584,1065,2.584,1066,2.584,1067,3.863,1068,2.584,1069,2.584,1070,2.584,1071,3.863,1072,3.863,1073,3.863,1074,2.086,1075,2.309,1076,2.584,1077,3.863,1078,2.945,1079,2.438,1080,2.945,1081,2.584,1082,2.584,1083,2.584,1084,2.584,1085,2.584,1086,3.863,1087,2.751,1088,2.751,1089,3.863,1090,3.863,1091,3.863,1092,3.863,1093,3.852,1094,3.863,1095,3.863,1096,3.863,1097,3.863,1098,3.863,1099,3.863,1100,3.863,1101,1.64,1102,3.019,1103,3.863,1104,3.863,1105,2.945,1106,3.472,1107,3.472,1108,3.863,1109,2.945,1110,2.751,1111,5.052,1112,5.052,1113,2.602,1114,5.052,1115,3.863,1116,3.863,1117,2.584,1118,3.863,1119,3.863,1120,2.584,1121,1.9,1122,3.189,1123,2.584,1124,2.584,1125,3.379,1126,3.379,1127,3.379,1128,2.584,1129,2.584,1130,1.471,1131,2.584,1132,2.584,1133,3.863,1134,3.863,1135,5.63,1136,5.052,1137,5.052,1138,3.863,1139,3.472,1140,3.863,1141,3.863,1142,3.863,1143,3.863]],["title/components/MapComponent.html",[610,0.467,720,1.448]],["body/components/MapComponent.html",[7,1.413,8,0.016,9,1.355,10,1.355,14,0.181,15,0.098,16,0.098,17,1.3,22,0.219,24,0.576,31,1.413,38,0.526,42,1.355,46,0.27,48,2.016,52,0.114,53,0.021,54,0.015,55,0.01,65,1.064,66,1.064,74,0.197,75,0.426,76,0.907,82,0.598,83,0.416,84,0.525,87,0.744,88,0.551,89,0.479,90,0.526,96,1.233,98,1.611,99,0.775,100,0.551,110,1.254,116,0.502,117,0.885,118,0.744,119,2.855,140,1.468,144,0.558,149,0.583,156,0.661,163,0.997,164,0.856,184,0.795,185,1.181,190,1.216,196,1.611,199,0.775,228,3.448,253,0.526,278,0.456,284,0.479,307,1.023,309,1.069,327,1.224,335,1.205,336,1.355,337,1.254,341,1.158,352,1.357,372,1.357,383,2.083,385,1.979,386,1.86,398,0.856,399,1.442,407,1.023,413,1.357,416,1.549,428,2.216,433,1.113,456,2.179,484,1.357,610,0.72,611,1.413,612,2.127,613,1.3,614,1.723,615,1.355,616,1.687,619,1.617,620,1.775,621,1.771,626,1.199,632,2.144,638,1.357,640,3.338,643,2.224,644,2.224,653,1.722,671,1.87,689,2.224,690,1.723,691,2.036,692,1.687,693,2.876,694,1.687,698,2.329,699,2.329,700,1.413,701,1.687,702,1.475,703,2.329,704,1.248,705,2.876,706,1.355,707,1.355,708,1.475,709,1.413,710,1.3,711,1.413,712,1.687,713,1.687,714,1.355,715,1.205,716,2.667,717,1.687,718,1.475,719,1.541,720,2.409,721,1.687,722,1.413,723,2.036,724,1.687,725,1.413,726,1.413,727,1.687,728,1.3,729,1.413,730,1.413,731,1.355,732,1.023,733,1.687,734,1.687,737,2.797,746,1.687,758,3.221,760,3.689,762,2.804,763,2.548,778,2.926,782,1.248,783,1.973,785,1.355,800,2.945,803,1.355,807,2.5,817,1.77,819,1.611,820,1.77,821,1.687,940,4.065,965,2.626,966,2.514,971,2.331,986,3.026,996,2.409,1032,2.036,1034,1.611,1037,2.567,1041,1.86,1130,1.248,1163,2.939,1259,6.06,1403,1.475,1404,1.528,1434,2.333,1435,1.77,1585,4.523,1649,1.959,1650,1.3,1809,3.221,1810,3.448,2199,2.855,2202,2.224,2281,2.939,2284,1.611,2285,1.86,2286,1.86,2317,2.945,2501,2.945,2503,3.277,2504,5.22,2505,5.22,2506,7.303,2507,5.978,2508,5.978,2509,5.978,2510,5.978,2511,5.978,2512,6.445,2513,5.22,2514,5.22,2515,5.22,2516,5.978,2517,5.978,2518,5.18,2519,3.782,2520,5.22,2521,5.22,2522,3.782,2523,5.22,2524,6.763,2525,3.782,2526,6.445,2527,6.445,2528,6.763,2529,3.782,2530,3.782,2531,4.523,2532,5.22,2533,3.782,2534,3.782,2535,5.22,2536,3.782,2537,5.22,2538,5.22,2539,3.782,2540,3.782,2541,5.22,2542,6.763,2543,3.782,2544,5.22,2545,3.782,2546,5.22,2547,6.445,2548,6.993,2549,3.782,2550,3.782,2551,3.782,2552,3.782,2553,3.782,2554,3.782,2555,5.22,2556,3.782,2557,5.22,2558,5.22,2559,3.782,2560,5.22,2561,5.22,2562,3.782,2563,5.18,2564,6.445,2565,3.782,2566,3.782,2567,4.065,2568,3.782,2569,3.221,2570,3.782,2571,2.855,2572,3.782,2573,3.782,2574,2.498,2575,5.22,2576,3.782,2577,3.782,2578,3.782,2579,5.22,2580,3.782,2581,3.782,2582,3.782,2583,3.782,2584,5.22,2585,3.782,2586,3.782,2587,5.978,2588,3.782,2589,3.782,2590,3.782,2591,3.782,2592,5.22,2593,5.978,2594,5.22,2595,5.22,2596,3.277,2597,3.782,2598,5.22,2599,6.445,2600,3.782,2601,5.22,2602,3.782,2603,3.782,2604,3.782,2605,3.782,2606,5.22,2607,3.782,2608,3.782,2609,3.782,2610,3.782,2611,3.782]],["title/interfaces/MoneyCloudDatum.html",[56,0.116,2612,3.017]],["body/interfaces/MoneyCloudDatum.html",[8,0.016,14,0.101,15,0.101,16,0.101,22,0.224,24,0.597,38,0.545,42,1.405,46,0.382,52,0.161,53,0.022,54,0.013,55,0.01,56,0.117,58,0.74,71,1.927,72,0.71,74,0.205,75,0.436,82,0.449,83,0.369,84,0.627,85,1.566,86,2.387,87,0.771,88,0.571,96,1.176,98,1.67,99,0.803,100,0.779,101,0.71,107,1.147,110,0.942,116,0.809,117,0.965,144,0.28,149,0.594,155,1.06,156,0.828,157,0.825,164,0.99,166,1.636,179,2.418,184,0.597,185,1.091,186,1.701,199,0.907,210,1.465,221,1.67,253,0.744,266,2.03,270,1.927,278,0.734,299,3.579,318,1.529,327,1.247,335,0.905,337,0.942,341,0.87,398,0.496,451,0.942,474,1.597,484,1.019,517,1.834,531,1.103,570,1.597,610,0.645,615,1.917,619,1.06,620,0.87,621,0.87,623,1.465,625,1.999,626,1.931,627,1.243,632,1.243,634,2.795,638,1.019,653,1.832,676,1.463,690,1.294,722,1.465,723,2.873,737,2.504,740,1.465,745,2.795,762,2.276,763,2.094,782,1.294,783,1.766,803,1.405,807,1.696,810,3.052,815,1.405,817,1.834,819,1.67,820,1.834,821,1.749,850,2.926,877,2.03,907,2.272,911,2.272,912,2.272,914,2.272,915,2.272,916,2.272,917,2.272,918,2.272,919,2.272,921,4.098,922,3.101,923,3.793,924,3.101,927,3.101,935,1.67,938,1.529,944,3.368,946,2.272,955,1.834,958,1.749,961,1.749,965,2.18,966,1.529,978,3.101,983,3.547,985,2.387,1006,1.749,1024,2.418,1026,4.166,1028,3.101,1033,1.927,1042,2.482,1043,2.272,1044,2.272,1045,2.18,1060,2.272,1062,3.101,1063,3.53,1064,2.272,1065,2.272,1066,2.272,1068,2.272,1069,2.272,1070,2.272,1076,3.53,1081,2.272,1082,2.272,1083,2.272,1084,2.272,1085,2.272,1101,1.505,1102,3.154,1113,2.387,1117,3.53,1120,2.272,1121,1.67,1122,2.926,1123,2.272,1124,2.272,1125,3.101,1126,3.101,1127,3.101,1128,2.272,1129,2.272,1130,1.294,1131,2.272,1132,2.272,1179,2.795,1181,1.749,1193,1.597,1217,2.795,1310,2.926,1314,2.926,1330,1.235,1347,3.53,1352,3.154,1356,4.343,1416,1.927,1435,1.834,1610,3.301,1628,2.272,1637,2.144,1649,2.771,1650,1.348,1659,3.397,1682,2.418,1729,2.418,1830,1.927,1837,2.771,1926,2.03,1938,2.795,1951,4.636,1957,2.795,1979,2.18,2027,2.418,2058,3.101,2059,1.834,2128,1.67,2131,1.529,2202,1.67,2281,1.927,2284,1.67,2285,1.927,2286,1.927,2304,2.144,2464,2.418,2466,2.144,2477,3.052,2571,2.144,2612,5.634,2613,3.052,2614,3.397,2615,6.849,2616,6.126,2617,5.935,2618,2.771,2619,5.35,2620,3.92,2621,3.92,2622,3.397,2623,3.92,2624,3.92,2625,3.397,2626,3.92,2627,3.92,2628,3.397,2629,3.397,2630,3.92,2631,2.771,2632,3.397,2633,2.03,2634,3.92,2635,3.92,2636,3.534,2637,6.091,2638,3.815,2639,4.636,2640,2.589,2641,2.589,2642,3.301,2643,3.397,2644,4.636,2645,3.534,2646,3.397,2647,3.397,2648,3.397,2649,2.03,2650,3.92,2651,5.35,2652,2.418,2653,2.589,2654,2.589,2655,2.589,2656,4.024,2657,5.35,2658,4.636,2659,2.589,2660,3.397,2661,3.397,2662,3.397,2663,3.397,2664,2.589,2665,2.589,2666,3.534,2667,2.589,2668,2.589,2669,3.534,2670,3.397,2671,2.589,2672,3.397,2673,2.589,2674,2.589,2675,2.589,2676,2.589,2677,2.589,2678,2.589,2679,2.589,2680,2.589,2681,2.589,2682,2.589,2683,2.589,2684,3.397,2685,2.589,2686,3.397,2687,3.397,2688,3.397,2689,3.397,2690,5.278,2691,3.92,2692,3.397,2693,3.397,2694,3.92,2695,5.35,2696,3.92,2697,3.92,2698,3.397,2699,3.397,2700,3.397,2701,3.397,2702,3.92,2703,3.92,2704,3.92,2705,3.92,2706,3.92,2707,3.92,2708,3.397,2709,3.92,2710,2.589,2711,3.397,2712,3.397,2713,3.397,2714,3.92,2715,3.397,2716,3.397,2717,3.397,2718,3.92,2719,3.92,2720,3.92,2721,3.92,2722,3.397,2723,3.397,2724,3.397,2725,3.92,2726,3.92,2727,2.795,2728,3.92,2729,3.92,2730,3.92,2731,3.92,2732,3.92,2733,2.589,2734,3.534,2735,2.589,2736,3.397,2737,3.397,2738,2.589,2739,2.589,2740,2.589,2741,3.397,2742,2.589,2743,2.589,2744,2.589,2745,2.589,2746,2.589,2747,2.589,2748,2.589,2749,2.589,2750,2.589,2751,2.589,2752,2.589,2753,3.92,2754,2.589,2755,3.397,2756,2.589,2757,2.589,2758,2.589,2759,2.589,2760,2.589,2761,2.589,2762,3.397,2763,3.92,2764,3.397,2765,2.418,2766,3.397,2767,3.92,2768,3.92,2769,3.397,2770,3.397,2771,3.92,2772,3.92,2773,3.397,2774,3.397,2775,2.589]],["title/interfaces/MoneyDatum.html",[56,0.116,2776,3.017]],["body/interfaces/MoneyDatum.html",[8,0.016,14,0.099,15,0.099,16,0.099,22,0.223,24,0.584,38,0.533,42,1.373,46,0.485,52,0.158,53,0.021,54,0.013,55,0.01,56,0.114,58,0.723,71,1.884,72,0.694,74,0.2,75,0.429,78,1.884,82,0.439,83,0.366,84,0.586,85,1.541,87,0.753,88,0.558,96,1.168,98,1.632,99,1.079,100,0.877,101,0.694,107,1.121,110,0.92,116,0.799,117,0.86,118,0.753,144,0.273,148,1.121,149,0.587,156,0.91,157,0.819,164,0.976,166,1.698,171,1.001,179,2.364,184,0.584,185,0.958,186,1.685,194,2.095,199,0.898,210,1.432,221,1.632,253,0.533,267,0.996,270,1.884,278,0.635,288,1.709,299,2.095,309,1.079,318,1.494,327,1.233,335,0.885,337,0.92,341,0.85,352,0.996,398,0.485,407,1.036,451,0.92,456,2.154,474,1.561,484,0.996,531,1.078,610,0.725,615,1.887,619,1.036,620,0.85,621,0.85,623,1.432,625,1.968,626,1.908,627,1.214,632,1.214,638,0.996,653,1.84,676,1.557,690,1.264,723,2.987,725,1.432,732,1.424,737,2.465,739,3.121,740,1.432,745,2.732,762,2.249,763,2.069,782,1.264,783,1.738,803,1.373,807,1.214,810,2.983,815,1.373,817,1.793,819,1.632,820,1.793,821,1.709,850,2.88,877,1.984,907,2.22,911,2.22,912,2.22,914,2.22,915,2.22,916,2.22,917,2.22,918,2.22,919,2.22,921,3.938,922,3.053,923,3.756,924,3.053,927,3.053,935,1.632,938,1.494,944,3.341,946,2.22,954,2.22,955,1.793,958,1.709,961,1.709,965,2.146,966,1.494,968,2.22,971,2.054,978,3.053,979,1.632,983,3.519,985,2.35,1006,1.709,1024,2.364,1028,3.053,1032,2.054,1033,1.884,1042,2.452,1043,2.22,1044,2.22,1045,2.768,1060,2.22,1062,2.22,1063,3.488,1064,2.22,1065,2.22,1066,2.22,1068,2.22,1069,2.22,1070,2.22,1076,3.488,1081,2.22,1082,2.22,1083,2.22,1084,2.22,1085,2.22,1101,1.693,1102,3.356,1113,2.685,1117,3.488,1120,2.22,1121,1.632,1122,2.88,1123,2.22,1124,2.22,1125,3.053,1126,3.053,1127,3.053,1128,2.22,1129,2.22,1130,1.264,1131,2.22,1132,2.22,1155,2.22,1181,1.709,1217,2.732,1310,2.88,1314,2.88,1347,3.488,1356,4.291,1416,1.884,1435,1.793,1610,3.249,1628,2.22,1637,2.095,1649,2.727,1650,1.317,1682,2.364,1729,2.364,1738,2.983,1830,1.884,1837,2.727,1926,1.984,1938,2.732,1957,2.732,1979,2.146,2027,2.364,2058,3.053,2059,2.465,2088,2.983,2128,1.632,2131,1.494,2202,1.632,2281,1.884,2284,2.244,2285,1.884,2286,1.884,2304,2.095,2324,2.22,2464,2.364,2466,2.095,2476,2.983,2518,3.32,2571,2.095,2613,2.983,2616,5.888,2617,5.888,2618,2.727,2622,3.32,2625,3.32,2628,3.32,2629,3.32,2631,2.727,2632,3.32,2633,1.984,2636,2.531,2639,4.564,2640,2.531,2641,2.531,2642,3.249,2643,3.32,2644,4.564,2645,3.479,2646,3.32,2647,3.32,2648,3.32,2649,1.984,2652,2.364,2653,2.531,2654,2.531,2655,2.531,2656,3.479,2658,4.564,2659,2.531,2660,3.32,2661,3.32,2662,3.32,2663,3.32,2664,2.531,2665,2.531,2666,3.479,2667,2.531,2668,2.531,2669,3.479,2670,3.32,2671,2.531,2672,3.32,2673,2.531,2674,2.531,2675,2.531,2676,2.531,2677,2.531,2678,2.531,2679,2.531,2680,2.531,2681,2.531,2682,2.531,2683,2.531,2684,3.32,2685,2.531,2686,3.32,2687,3.32,2688,3.32,2689,3.32,2690,6.084,2692,3.32,2693,3.32,2698,3.32,2699,3.32,2700,3.32,2701,4.564,2708,3.32,2710,2.531,2711,3.32,2712,4.564,2713,3.32,2715,3.32,2716,3.32,2717,3.32,2722,3.32,2723,3.32,2724,3.32,2733,2.531,2734,3.479,2735,2.531,2736,3.32,2737,3.32,2738,2.531,2739,2.531,2740,2.531,2741,3.32,2742,2.531,2743,2.531,2744,2.531,2745,2.531,2746,2.531,2747,2.531,2748,2.531,2749,2.531,2750,2.531,2751,2.531,2752,2.531,2754,2.531,2755,3.32,2756,2.531,2757,2.531,2758,2.531,2759,2.531,2760,3.479,2761,2.531,2762,3.32,2764,3.32,2765,2.364,2766,3.32,2769,3.32,2770,3.32,2773,3.32,2774,3.32,2775,2.531,2776,5.704,2777,2.22,2778,2.095,2779,2.095,2780,5.266,2781,3.831,2782,3.32,2783,2.732,2784,2.732,2785,2.732,2786,2.732,2787,2.732,2788,3.831,2789,3.831,2790,2.732,2791,3.831,2792,3.831,2793,3.831,2794,3.831,2795,3.831,2796,3.831,2797,3.831,2798,3.831,2799,3.831,2800,3.831,2801,3.831,2802,2.732,2803,3.831,2804,2.732,2805,2.732,2806,3.831,2807,3.831,2808,3.831,2809,3.831,2810,3.755,2811,2.732,2812,4.291,2813,3.831,2814,2.095,2815,3.831,2816,3.831,2817,3.831,2818,3.831,2819,3.831,2820,2.732,2821,3.831,2822,3.831,2823,3.831,2824,3.831]],["title/interfaces/NetworkContext.html",[56,0.116,93,1.09]],["body/interfaces/NetworkContext.html",[8,0.016,14,0.085,15,0.085,16,0.085,22,0.212,34,0.825,38,0.459,46,0.478,52,0.207,53,0.018,54,0.009,55,0.009,56,0.21,58,0.623,65,1.334,67,1.699,68,1.472,72,1.005,74,0.317,75,0.545,76,0.418,79,1.005,82,0.767,83,0.398,84,0.657,85,0.966,88,0.809,89,1.035,90,1.125,91,1.624,92,1.606,93,1.882,94,1.37,96,1.147,99,0.676,100,0.691,101,0.597,104,1.896,107,0.966,111,1.233,117,0.702,118,1.091,122,2.02,128,2.074,133,1.334,140,1.561,142,1.863,143,2.16,144,0.52,147,1.233,148,1.776,149,0.688,150,2.024,155,0.892,156,0.768,157,0.914,159,0.762,163,0.66,164,0.702,166,1.723,170,1.443,171,0.549,181,1.145,182,1.503,185,1.235,190,1.356,192,2.114,195,1.503,199,0.695,253,0.459,261,1.406,264,1.759,278,0.669,284,0.418,290,1.561,293,1.182,294,1.182,296,2.121,307,1.282,308,2.121,309,0.971,310,1.565,313,0.928,319,1.444,320,2.219,332,1.046,353,0.928,357,1.923,362,1.334,369,1.334,372,1.233,377,1.344,379,0.858,383,0.858,385,0.966,386,2.332,398,0.847,399,1.011,404,1.344,407,0.892,409,1.282,412,2.472,413,0.858,416,1.608,418,2.086,419,1.344,422,1.344,424,1.344,432,1.334,433,0.703,436,2.086,444,2.261,448,1.849,451,1.458,459,1.005,466,2.707,467,1.699,469,2.086,472,2.402,501,0.732,516,1.641,528,2.851,531,1.334,535,2.476,537,2.593,545,2.332,566,1.804,572,2.851,662,1.849,664,2.839,671,1.699,680,2.593,688,1.804,715,0.762,762,2.636,763,2.425,765,2.528,803,1.182,807,1.923,815,2.47,816,1.544,1041,2.332,1042,1.344,1101,1.561,1130,1.089,1211,2.455,1213,2.455,1214,1.709,1287,2.528,1304,1.544,1330,0.762,1338,1.544,1383,2.02,1386,1.544,1403,1.849,1404,1.776,1470,2.593,1650,1.134,1723,2.593,1765,3.008,1768,2.219,1793,1.544,1847,1.344,1850,1.233,1894,1.544,1895,1.544,1898,2.219,1903,1.544,1918,1.544,1995,1.472,2005,1.233,2057,2.02,2062,2.455,2097,2.455,2098,1.804,2099,1.912,2100,1.912,2101,2.261,2102,2.874,2103,1.804,2104,3.318,2105,2.02,2106,2.455,2107,1.912,2108,2.748,2109,1.849,2110,1.912,2111,1.912,2112,1.912,2113,2.748,2114,1.912,2115,1.912,2116,2.597,2117,2.748,2118,1.912,2119,1.912,2120,1.912,2121,1.912,2122,1.804,2123,1.912,2124,1.912,2125,1.912,2126,1.912,2127,1.804,2128,2.02,2129,1.912,2130,1.912,2131,1.849,2132,2.455,2133,2.748,2134,2.593,2135,1.912,2136,1.912,2137,1.912,2138,1.912,2139,1.912,2140,1.912,2141,1.912,2142,1.912,2143,1.912,2144,1.912,2145,1.912,2146,1.912,2147,1.912,2148,1.912,2149,1.912,2150,1.912,2151,1.912,2152,1.912,2153,2.748,2154,2.593,2155,1.912,2156,1.912,2157,1.912,2158,1.912,2159,1.912,2160,1.912,2161,1.912,2162,1.912,2163,1.912,2164,2.748,2165,1.912,2166,1.912,2167,1.912,2168,1.912,2169,2.748,2170,1.912,2171,1.912,2172,1.912,2173,1.912,2174,2.748,2175,2.748,2176,1.912,2177,1.912,2178,1.912,2179,1.912,2180,1.912,2181,2.748,2182,1.912,2183,1.912,2184,1.912,2185,1.912,2186,1.912,2187,3.517,2188,1.912,2189,1.912,2190,1.912,2191,1.912,2192,1.912,2193,1.912,2194,1.912,2195,1.912,2196,1.912,2197,1.912,2198,1.912,2199,1.804,2200,2.748,2201,1.912,2202,2.02,2203,1.912,2204,1.912,2205,2.748,2206,1.932,2207,1.912,2208,1.912,2209,1.912,2210,1.912,2211,2.748,2212,1.912,2213,2.748,2214,1.912,2215,2.748,2216,2.748,2217,1.912,2218,1.912,2219,1.912,2220,1.912,2221,1.912,2222,1.912,2223,1.912,2224,2.748,2225,1.912,2226,1.912,2227,2.748,2228,1.912,2229,1.912,2230,1.912,2231,1.912,2232,1.912,2233,1.912,2234,1.912,2235,1.912,2236,2.748,2237,1.912,2238,1.912,2239,1.912,2240,1.912,2241,1.912,2242,1.912,2243,1.912,2244,1.912,2245,1.912,2246,1.912,2247,1.912,2248,1.912,2249,1.912,2250,1.912,2251,1.912,2252,1.912,2253,1.912,2254,1.912,2255,1.912,2256,2.748,2257,1.912,2258,1.912,2259,1.912,2260,1.912,2261,1.912,2262,1.912,2263,1.912,2264,1.912,2825,3.299]],["title/classes/NetworkDataset.html",[53,0.021,92,0.968]],["body/classes/NetworkDataset.html",[8,0.016,14,0.075,15,0.075,16,0.075,22,0.205,34,0.727,38,0.405,46,0.436,52,0.199,53,0.016,54,0.008,55,0.008,56,0.203,65,1.217,67,1.55,68,1.298,72,0.935,74,0.298,75,0.522,76,0.921,79,0.886,82,0.811,83,0.398,84,0.663,85,0.852,88,0.63,89,1.035,90,1.124,91,1.511,92,1.739,93,1.718,94,1.219,96,1.102,99,0.596,100,0.63,101,0.527,104,1.841,107,0.852,111,1.087,117,0.653,118,1.015,122,2.2,128,2.136,133,1.608,140,1.452,142,1.891,143,2.103,144,0.541,147,1.087,148,1.673,149,0.664,150,2.041,155,1.17,156,0.81,157,0.894,159,0.672,163,0.718,164,0.653,166,1.702,170,1.588,171,0.484,181,1.208,182,1.371,185,1.296,190,1.411,192,2.105,199,0.655,253,0.405,261,1.24,264,1.636,278,0.622,284,0.547,290,1.452,293,1.043,294,1.043,296,2.029,307,1.17,308,2.016,309,0.886,310,1.614,313,0.819,319,1.317,320,2.416,332,0.922,353,0.819,357,1.812,362,1.608,367,1.507,369,1.217,372,1.124,377,1.185,379,0.756,383,1.991,385,2.129,386,1.431,398,0.999,399,1.413,404,1.185,407,0.787,409,1.17,412,2.608,413,0.756,416,1.538,418,1.965,419,1.185,422,1.185,424,1.185,432,1.452,433,0.62,436,1.965,444,2.103,448,1.687,451,1.24,459,0.886,466,2.55,467,1.85,469,2.279,472,2.392,501,0.646,516,1.915,528,2.965,531,1.217,535,2.303,537,2.366,545,2.127,566,1.591,572,2.728,662,1.687,664,1.362,671,1.55,680,2.366,688,1.591,715,0.672,762,1.929,763,1.775,765,1.85,803,1.043,807,1.812,815,2.375,816,1.362,1041,1.431,1042,1.185,1101,1.718,1130,0.96,1211,2.24,1213,2.24,1214,1.507,1287,1.85,1304,1.362,1330,0.672,1338,1.362,1383,1.843,1386,1.362,1403,2.013,1404,1.94,1470,3.126,1650,1.965,1723,1.591,1765,2.858,1768,2.024,1793,2.024,1847,1.185,1850,1.087,1894,1.362,1895,1.362,1898,2.024,1903,1.362,1918,1.362,1995,1.298,2005,1.087,2057,1.843,2062,2.24,2097,3.985,2098,1.591,2099,1.686,2100,1.686,2101,2.103,2102,2.835,2103,1.591,2104,2.366,2105,1.843,2106,2.24,2107,1.686,2108,2.992,2109,1.687,2110,1.686,2111,1.686,2112,1.686,2113,2.992,2114,1.686,2115,1.686,2116,2.675,2117,2.507,2118,1.686,2119,1.686,2120,1.686,2121,1.686,2122,1.591,2123,1.686,2124,1.686,2125,1.686,2126,1.686,2127,1.591,2128,1.843,2129,1.686,2130,1.686,2131,1.135,2132,1.507,2133,1.686,2134,1.591,2135,1.686,2136,1.686,2137,2.507,2138,1.686,2139,2.507,2140,1.686,2141,2.507,2142,1.686,2143,2.507,2144,1.686,2145,3.313,2146,1.686,2147,3.313,2148,1.686,2149,3.313,2150,1.686,2151,1.686,2152,3.313,2153,2.507,2154,3.341,2155,3.313,2156,1.686,2157,3.313,2158,1.686,2159,1.686,2160,1.686,2161,2.507,2162,1.686,2163,1.686,2164,2.507,2165,1.686,2166,2.507,2167,1.686,2168,1.686,2169,2.507,2170,1.686,2171,1.686,2172,2.992,2173,1.686,2174,2.507,2175,2.507,2176,1.686,2177,1.686,2178,2.507,2179,1.686,2180,1.686,2181,3.54,2182,2.507,2183,2.507,2184,2.507,2185,1.686,2186,1.686,2187,3.842,2188,1.686,2189,1.686,2190,1.686,2191,1.686,2192,1.686,2193,2.507,2194,2.507,2195,2.507,2196,2.507,2197,1.686,2198,1.686,2199,2.366,2200,2.992,2201,2.507,2202,2.435,2203,2.507,2204,2.507,2205,2.507,2206,1.762,2207,1.686,2208,1.686,2209,1.686,2210,1.686,2211,2.507,2212,1.686,2213,2.507,2214,1.686,2215,2.507,2216,2.507,2217,1.686,2218,1.686,2219,1.686,2220,1.686,2221,1.686,2222,1.686,2223,1.686,2224,2.507,2225,1.686,2226,1.686,2227,2.507,2228,1.686,2229,1.686,2230,1.686,2231,1.686,2232,1.686,2233,1.686,2234,1.686,2235,1.686,2236,2.507,2237,1.686,2238,1.686,2239,1.686,2240,1.686,2241,1.686,2242,1.686,2243,2.507,2244,2.507,2245,1.686,2246,1.686,2247,1.686,2248,1.686,2249,1.686,2250,1.686,2251,1.686,2252,1.686,2253,1.686,2254,1.686,2255,1.686,2256,2.507,2257,1.686,2258,1.686,2259,1.686,2260,1.686,2261,1.686,2262,1.686,2263,1.686,2264,1.686,2826,4.325,2827,4.325,2828,4.325,2829,4.325,2830,4.325,2831,4.325,2832,4.325,2833,4.325,2834,4.325,2835,4.325,2836,2.909,2837,2.909,2838,2.909,2839,2.909,2840,2.909,2841,2.909,2842,2.909,2843,2.909,2844,2.909,2845,2.909,2846,2.909,2847,2.909,2848,2.909,2849,2.909,2850,2.909,2851,2.909,2852,2.909,2853,2.909,2854,2.909]],["title/modules/NetworkModule.html",[0,1.905,2855,2.762]],["body/modules/NetworkModule.html",[2,2.562,3,3.047,8,0.016,11,2.348,12,1.493,13,2.34,14,0.188,15,0.148,16,0.148,20,3.537,21,3.537,22,0.244,23,3.537,24,0.875,25,3.537,26,2.974,27,4.869,28,4.869,29,3.543,33,3.537,34,1.435,35,4.213,36,2.687,37,4.213,38,0.799,41,4.869,42,2.057,50,2.974,52,0.173,53,0.032,54,0.013,55,0.013,89,0.727,90,0.799,611,3.03,707,2.905,715,1.326,726,3.03,2102,2.34,2855,5.798,2856,4.976,2857,4.976,2858,4.976,2859,5.742,2860,6.829,2861,5.742,2862,5.918,2863,5.742,2864,6.829]],["title/interfaces/NetworkProvider.html",[56,0.116,290,1.09]],["body/interfaces/NetworkProvider.html",[8,0.016,14,0.08,15,0.08,16,0.08,22,0.208,34,0.774,38,0.431,46,0.483,52,0.203,53,0.017,54,0.009,55,0.009,56,0.207,58,0.584,65,1.274,67,1.623,68,1.382,72,0.969,74,0.307,75,0.534,76,0.856,79,0.943,82,0.794,83,0.399,84,0.654,85,0.906,88,0.78,89,1.036,90,1.125,91,1.567,92,1.768,93,1.989,94,1.442,96,1.237,99,0.634,100,0.66,101,0.561,104,1.999,107,0.906,111,1.157,117,0.678,118,1.053,122,1.93,124,1.93,128,2.001,133,1.274,140,1.506,142,1.827,143,2.132,144,0.543,147,1.157,148,1.834,149,0.676,150,1.999,155,0.837,156,0.877,157,0.904,159,0.715,163,0.63,164,0.678,166,1.69,170,1.531,171,0.515,181,1.235,182,1.436,185,1.224,190,1.39,192,2.119,199,0.675,253,0.431,261,1.32,264,1.697,278,0.645,284,0.392,290,1.657,293,1.623,294,1.623,296,2.309,307,1.225,308,2.372,309,1.206,310,1.539,313,1.274,319,1.379,320,2.119,332,1.867,353,1.274,357,1.867,362,1.274,369,1.842,372,1.177,374,2.477,375,2.477,376,2.477,377,2.4,378,2.119,379,1.531,380,2.477,381,2.477,383,1.869,385,1.979,398,0.963,399,0.66,404,1.845,407,0.837,409,1.225,412,2.4,413,1.177,416,1.573,418,2.325,419,1.845,422,1.845,424,1.845,432,1.506,433,0.66,436,2.025,444,2.667,448,2.297,451,1.415,459,0.943,466,2.628,467,1.623,469,2.025,472,2.527,501,0.687,516,1.593,528,2.789,531,1.274,535,2.628,537,2.477,545,2.227,566,1.694,572,2.789,662,1.766,664,1.449,671,2.111,680,2.477,688,1.694,715,0.715,762,2.001,763,1.841,765,1.918,803,1.11,807,1.867,815,2.423,816,2.119,1041,1.523,1042,1.262,1101,1.506,1130,1.022,1211,2.345,1213,2.345,1214,1.604,1287,1.918,1304,2.119,1330,0.715,1338,2.119,1383,1.93,1386,1.449,1403,2.088,1404,1.724,1470,2.477,1650,1.065,1723,1.694,1765,2.933,1768,2.119,1793,1.449,1847,1.262,1850,1.157,1894,1.449,1895,1.449,1898,2.119,1903,1.449,1918,1.449,1995,1.382,2005,1.157,2057,1.93,2062,3.051,2097,3.772,2098,1.694,2099,1.795,2100,1.795,2101,2.181,2102,2.881,2103,1.694,2104,2.477,2105,1.93,2106,2.345,2107,1.795,2108,2.625,2109,1.766,2110,1.795,2111,1.795,2112,1.795,2113,2.625,2114,1.795,2115,1.795,2116,2.505,2117,2.625,2118,1.795,2119,2.625,2120,2.625,2121,2.625,2122,2.477,2123,2.625,2124,1.795,2125,1.795,2126,1.795,2127,2.477,2128,2.51,2129,2.625,2130,2.625,2131,1.208,2132,1.604,2133,1.795,2134,1.694,2135,1.795,2136,1.795,2137,1.795,2138,1.795,2139,1.795,2140,1.795,2141,1.795,2142,1.795,2143,1.795,2144,1.795,2145,1.795,2146,1.795,2147,1.795,2148,1.795,2149,1.795,2150,1.795,2151,1.795,2152,1.795,2153,2.625,2154,2.477,2155,1.795,2156,1.795,2157,1.795,2158,1.795,2159,1.795,2160,1.795,2161,1.795,2162,1.795,2163,1.795,2164,2.625,2165,1.795,2166,1.795,2167,1.795,2168,1.795,2169,2.625,2170,1.795,2171,1.795,2172,1.795,2173,1.795,2174,2.625,2175,2.625,2176,1.795,2177,1.795,2178,1.795,2179,1.795,2180,1.795,2181,2.625,2182,1.795,2183,1.795,2184,1.795,2185,1.795,2186,1.795,2187,3.414,2188,1.795,2189,1.795,2190,1.795,2191,1.795,2192,1.795,2193,1.795,2194,1.795,2195,1.795,2196,1.795,2197,1.795,2198,1.795,2199,1.694,2200,2.625,2201,1.795,2202,1.93,2203,1.795,2204,1.795,2205,2.625,2206,1.845,2207,1.795,2208,1.795,2209,1.795,2210,1.795,2211,2.625,2212,1.795,2213,2.625,2214,1.795,2215,2.625,2216,2.625,2217,1.795,2218,1.795,2219,1.795,2220,1.795,2221,1.795,2222,1.795,2223,1.795,2224,2.625,2225,1.795,2226,1.795,2227,2.625,2228,1.795,2229,1.795,2230,1.795,2231,1.795,2232,1.795,2233,1.795,2234,1.795,2235,1.795,2236,2.625,2237,1.795,2238,1.795,2239,1.795,2240,1.795,2241,1.795,2242,1.795,2243,1.795,2244,1.795,2245,1.795,2246,1.795,2247,1.795,2248,1.795,2249,1.795,2250,1.795,2251,1.795,2252,1.795,2253,1.795,2254,1.795,2255,1.795,2256,2.625,2257,1.795,2258,1.795,2259,1.795,2260,1.795,2261,1.795,2262,1.795,2263,1.795,2264,1.795,2865,3.097,2866,3.097,2867,3.097,2868,3.097,2869,3.097,2870,3.097,2871,3.097,2872,3.097,2873,3.097,2874,3.097]],["title/components/NgxChart.html",[610,0.467,728,1.332]],["body/components/NgxChart.html",[7,1.632,8,0.016,9,1.565,10,1.565,14,0.166,15,0.113,16,0.113,17,1.501,22,0.219,24,0.665,31,1.632,34,1.091,36,2.043,46,0.488,48,1.998,52,0.193,53,0.024,54,0.012,55,0.011,56,0.172,66,1.228,74,0.228,75,0.469,76,0.814,82,0.659,83,0.414,84,0.628,89,0.553,90,0.608,100,0.636,101,0.791,116,0.854,117,0.899,143,1.882,144,0.521,149,0.426,155,1.555,157,0.856,163,0.895,164,0.553,167,2.243,184,0.876,186,1.135,195,2.039,284,0.865,372,1.495,379,1.672,383,2.082,385,1.882,398,0.923,399,1.555,459,2.082,484,1.495,501,0.969,528,1.861,570,2.343,610,0.775,611,1.632,612,2.343,613,1.501,614,1.441,615,1.565,616,1.948,619,1.739,620,1.797,621,1.8,627,1.384,632,1.384,638,1.495,643,2.451,644,2.451,653,1.545,689,2.451,690,1.898,691,2.243,692,1.948,693,3.05,694,1.948,698,2.566,699,2.566,700,1.632,701,1.948,702,1.703,703,2.566,704,1.441,705,3.05,706,1.565,707,1.565,708,1.703,709,1.632,710,1.501,711,1.632,712,1.948,713,1.948,714,1.565,715,1.873,716,2.87,717,1.948,718,1.703,719,1.779,720,1.632,721,1.948,722,1.632,723,2.243,724,1.948,725,1.632,726,1.632,727,1.948,728,2.35,729,1.632,730,1.632,731,1.565,732,1.181,733,1.948,734,1.948,738,3.728,740,2.149,750,3.199,751,3.739,758,3.549,782,1.898,783,2.256,785,1.565,805,2.87,815,2.061,933,3.962,940,4.479,944,3.163,959,1.779,971,2.666,979,3.108,1010,5.008,1032,1.703,1033,2.147,1039,2.692,1184,2.531,1284,3.962,1285,3.113,1286,5.008,1287,2.614,1288,5.008,1289,5.008,1290,4.479,1291,2.885,1292,3.146,1293,4.913,1294,3.728,1295,3.4,1296,2.885,1297,3.8,1298,5.008,1299,3.4,1300,2.74,1301,3.4,1302,3.4,1303,3.413,1304,3.199,1305,3.4,1306,5.008,1307,3.4,1308,4.249,1309,3.4,1310,3.739,1311,3.4,1312,3.4,1313,3.4,1314,3.518,1315,3.4,1316,4.479,1317,2.885,1318,2.885,1319,3.4,1320,2.885,1321,4.249,1322,3.4,1323,3.4,1324,3.4,1325,1.977,1326,3.4,1327,3.4,1328,2.147,1329,2.885,1330,1.008,1331,3.4,1332,3.4,1333,3.4,1334,2.531,1335,3.4,1336,3.4,1337,3.4,1338,2.043,1339,3.4,1340,3.4,1341,5.323,1342,4.479,1343,3.4,1344,3.4,1345,2.531,1346,3.4,1934,3.784,2875,5.751,2876,4.366,2877,5.751,2878,4.366,2879,4.366,2880,4.366,2881,4.366,2882,4.366,2883,4.366,2884,4.366,2885,4.366,2886,4.366,2887,4.366,2888,4.366,2889,4.366,2890,4.366,2891,4.366,2892,4.366,2893,4.366,2894,4.366,2895,4.366,2896,4.366,2897,4.366,2898,4.366,2899,4.366,2900,5.751,2901,5.751,2902,5.751,2903,4.984,2904,4.366]],["title/modules/NgxChartsModule.html",[0,1.905,2905,2.762]],["body/modules/NgxChartsModule.html",[2,3.083,3,3.083,8,0.016,11,2.375,12,1.522,13,2.386,14,0.151,15,0.151,16,0.151,20,3.578,21,3.578,22,0.24,23,3.578,24,0.892,25,3.578,26,3.033,33,3.578,34,1.464,35,4.263,36,2.74,48,1.647,50,3.033,52,0.176,53,0.032,54,0.013,55,0.013,714,2.912,715,1.595,728,2.794,979,2.495,1192,4.564,1193,2.386,1291,3.869,1292,3.779,2267,4.175,2269,4.175,2905,5.754,2906,5.074,2907,5.074,2908,5.074,2909,5.856,2910,5.856,2911,6.909,2912,6.909,2913,6.909,2914,6.909,2915,6.909,2916,6.909]],["title/interfaces/Node.html",[56,0.116,89,0.49]],["body/interfaces/Node.html",[8,0.016,14,0.086,15,0.086,16,0.086,22,0.212,34,0.828,38,0.461,46,0.459,52,0.207,53,0.018,54,0.009,55,0.009,56,0.211,58,0.625,65,1.337,67,1.703,68,1.477,72,1.1,74,0.317,75,0.546,76,0.602,79,1.008,82,0.809,83,0.403,84,0.658,85,0.969,88,0.693,89,1.036,90,1.12,91,1.628,92,1.609,93,1.941,94,1.296,96,1.148,99,0.678,100,0.693,101,0.599,104,1.957,107,0.969,111,1.237,117,0.704,118,1.094,122,2.026,128,2.078,133,1.337,140,1.71,142,1.846,143,2.162,144,0.459,147,1.237,148,1.779,149,0.689,150,1.997,155,0.895,156,0.769,157,0.914,159,0.765,163,0.662,164,0.873,166,1.846,170,1.446,171,0.551,181,1.147,182,1.507,185,1.236,190,1.357,192,2.088,199,0.696,253,0.461,261,2.026,264,1.763,278,0.67,284,0.419,290,1.811,293,1.186,294,1.186,296,2.279,307,1.286,308,2.124,309,0.974,310,1.567,313,0.932,319,1.448,320,2.225,332,1.05,353,0.932,357,2.188,362,1.337,369,1.337,377,1.349,379,0.861,398,0.815,399,0.706,404,1.349,407,0.895,409,1.504,412,2.622,413,0.861,416,1.61,418,2.089,419,1.349,422,1.349,424,1.349,432,1.337,433,1.014,436,2.303,444,2.266,448,1.854,451,1.336,459,1.008,466,2.712,467,1.703,469,2.089,472,2.405,501,0.735,516,1.866,528,3.064,531,1.71,535,2.481,537,2.6,545,2.338,566,1.811,572,2.855,662,1.854,664,1.55,671,1.703,680,2.6,688,1.811,715,0.765,762,2.078,763,1.912,765,1.993,803,1.186,807,1.927,815,2.473,816,1.55,1041,1.628,1042,1.349,1101,1.565,1130,1.569,1211,2.462,1213,2.462,1214,1.715,1287,1.993,1304,1.55,1330,0.765,1338,1.55,1383,2.026,1386,1.55,1403,1.854,1404,1.779,1470,2.6,1650,1.138,1723,1.811,1765,3.415,1768,2.225,1793,1.55,1847,1.349,1850,1.237,1894,1.55,1895,1.55,1898,2.225,1903,1.55,1918,1.55,1995,1.477,2005,1.237,2057,2.026,2062,2.462,2097,1.715,2098,1.811,2099,1.919,2100,1.919,2101,2.266,2102,2.877,2103,1.811,2104,2.6,2105,2.026,2106,2.462,2107,1.919,2108,2.755,2109,1.854,2110,1.919,2111,1.919,2112,1.919,2113,2.755,2114,2.755,2115,2.755,2116,3.012,2117,3.223,2118,2.755,2119,1.919,2120,1.919,2121,1.919,2122,1.811,2123,1.919,2124,1.919,2125,1.919,2126,1.919,2127,1.811,2128,2.026,2129,1.919,2130,1.919,2131,1.291,2132,1.715,2133,1.919,2134,1.811,2135,1.919,2136,1.919,2137,1.919,2138,1.919,2139,1.919,2140,1.919,2141,1.919,2142,1.919,2143,1.919,2144,1.919,2145,1.919,2146,1.919,2147,1.919,2148,1.919,2149,1.919,2150,1.919,2151,1.919,2152,1.919,2153,2.755,2154,2.6,2155,1.919,2156,1.919,2157,1.919,2158,1.919,2159,1.919,2160,1.919,2161,1.919,2162,1.919,2163,1.919,2164,2.755,2165,1.919,2166,1.919,2167,1.919,2168,1.919,2169,2.755,2170,1.919,2171,1.919,2172,1.919,2173,1.919,2174,2.755,2175,2.755,2176,1.919,2177,1.919,2178,1.919,2179,1.919,2180,1.919,2181,2.755,2182,1.919,2183,1.919,2184,1.919,2185,1.919,2186,1.919,2187,3.523,2188,1.919,2189,1.919,2190,1.919,2191,1.919,2192,1.919,2193,1.919,2194,1.919,2195,1.919,2196,1.919,2197,1.919,2198,1.919,2199,1.811,2200,2.755,2201,1.919,2202,2.026,2203,1.919,2204,1.919,2205,2.755,2206,1.937,2207,1.919,2208,1.919,2209,1.919,2210,1.919,2211,2.755,2212,1.919,2213,2.755,2214,1.919,2215,2.755,2216,2.755,2217,1.919,2218,1.919,2219,1.919,2220,1.919,2221,1.919,2222,1.919,2223,1.919,2224,2.755,2225,1.919,2226,1.919,2227,2.755,2228,1.919,2229,1.919,2230,1.919,2231,1.919,2232,1.919,2233,1.919,2234,1.919,2235,1.919,2236,2.755,2237,1.919,2238,1.919,2239,1.919,2240,1.919,2241,1.919,2242,1.919,2243,1.919,2244,1.919,2245,1.919,2246,1.919,2247,1.919,2248,1.919,2249,1.919,2250,1.919,2251,1.919,2252,1.919,2253,1.919,2254,1.919,2255,1.919,2256,2.755,2257,1.919,2258,1.919,2259,1.919,2260,1.919,2261,1.919,2262,1.919,2263,1.919,2264,1.919]],["title/interfaces/NodeData.html",[56,0.116,1198,2.762]],["body/interfaces/NodeData.html",[8,0.016,14,0.195,15,0.137,16,0.137,22,0.195,24,0.806,46,0.378,52,0.195,53,0.029,54,0.012,55,0.012,56,0.158,58,0.998,74,0.276,75,0.53,76,0.823,82,0.745,83,0.383,84,0.431,89,1.039,90,0.736,94,1.386,95,1.677,116,0.934,118,1.04,142,1.562,144,0.378,156,0.67,157,0.848,162,1.896,164,0.929,166,1.998,195,1.677,199,0.841,219,1.819,243,1.431,278,0.884,284,0.89,288,2.361,298,2.254,327,1.083,352,1.375,357,1.677,362,1.488,433,1.128,451,1.271,467,1.896,484,1.375,516,1.431,610,0.783,614,1.746,618,3.772,619,1.758,620,1.174,621,1.174,622,5.061,623,1.977,624,4.12,625,1.977,626,1.677,627,2.06,628,4.12,629,4.12,630,4.12,631,5.061,632,1.677,633,3.066,634,3.772,635,3.495,636,3.495,637,4.12,638,1.375,639,4.12,640,2.74,641,3.772,643,2.254,646,4.12,653,1.562,654,4.12,655,4.12,660,4.12,661,4.12,662,2.063,663,2.602,664,2.476,665,4.12,666,4.12,667,4.12,668,4.12,669,5.061,670,4.12,671,1.896,672,4.12,673,2.894,674,1.896,675,4.12,676,1.271,677,3.772,707,1.896,1196,4.12,1197,4.01,1198,5.467,1204,4.585,1205,4.585,1206,4.585,1207,4.585,1208,4.585,1209,4.585,1210,4.585,1211,3.643,1212,6.096,1213,3.366,1214,2.74,1215,4.585,1216,4.585,1217,3.772,1218,4.585,1219,4.585,1220,4.585,1221,4.12,1222,4.585,1223,4.585,1224,3.772,1225,4.585,1226,4.585,1227,4.585,1228,4.585,1229,4.585,1230,4.12,1231,4.585,1232,4.585,1233,4.585,1234,4.585,1235,4.585,1236,4.585]],["title/interfaces/NodeType.html",[56,0.116,436,1.332]],["body/interfaces/NodeType.html",[8,0.016,14,0.087,15,0.087,16,0.087,22,0.213,34,0.84,38,0.468,46,0.462,52,0.208,53,0.018,54,0.009,55,0.009,56,0.211,58,0.634,65,1.351,67,1.721,68,1.499,72,1.015,74,0.319,75,0.549,76,0.608,79,1.023,82,0.771,83,0.387,84,0.659,85,0.983,88,0.7,89,1.036,90,1.121,91,1.641,92,1.618,93,1.821,94,1.304,96,1.153,99,0.688,100,0.7,101,0.608,104,1.903,107,0.983,111,1.255,117,0.774,118,1.203,122,2.047,128,2.095,133,1.351,140,1.721,142,1.839,143,2.19,144,0.506,147,1.255,148,1.894,149,0.691,150,2.001,155,0.909,156,0.774,157,0.916,159,0.776,163,0.668,164,0.71,166,1.732,170,1.458,171,0.559,181,1.155,182,1.523,185,1.238,190,1.362,192,2.082,199,0.701,253,0.468,261,1.432,264,1.777,278,0.676,284,0.425,290,1.577,293,1.204,294,1.204,296,2.134,307,1.299,308,2.136,309,0.984,310,1.573,313,0.945,319,1.463,320,2.248,332,1.065,353,0.945,357,2.052,362,1.351,369,1.351,377,1.369,379,0.873,389,2.143,398,0.819,399,0.716,404,1.369,407,0.909,409,1.299,412,2.493,413,0.873,416,1.759,418,2.103,419,1.369,422,1.369,424,1.369,432,1.351,433,0.716,436,2.225,444,2.284,448,1.873,451,1.347,459,1.023,466,2.73,467,1.721,469,2.103,472,2.419,501,0.746,516,1.655,528,2.869,531,1.351,535,2.73,537,3.066,545,2.362,566,1.837,572,2.869,662,2.187,664,1.572,671,1.721,680,2.627,688,1.837,715,0.776,762,2.095,763,1.928,765,2.009,803,1.204,807,1.939,815,2.483,816,1.572,1041,1.652,1042,1.369,1101,1.577,1130,1.109,1211,2.488,1213,2.488,1214,1.74,1287,2.009,1304,1.572,1330,0.776,1338,1.572,1383,2.389,1386,1.572,1403,1.873,1404,1.791,1470,2.627,1650,1.155,1723,1.837,1765,3.029,1768,2.248,1793,1.572,1847,1.369,1850,1.255,1894,1.572,1895,1.572,1898,2.248,1903,1.572,1918,1.572,1995,1.499,2005,1.255,2057,2.047,2062,2.488,2097,1.74,2098,1.837,2099,1.947,2100,1.947,2101,2.284,2102,2.94,2103,1.837,2104,2.627,2105,2.389,2106,2.903,2107,2.784,2108,3.751,2109,2.187,2110,1.947,2111,1.947,2112,1.947,2113,2.784,2114,1.947,2115,1.947,2116,2.624,2117,2.784,2118,1.947,2119,1.947,2120,1.947,2121,1.947,2122,1.837,2123,1.947,2124,1.947,2125,1.947,2126,1.947,2127,1.837,2128,2.047,2129,1.947,2130,1.947,2131,1.31,2132,1.74,2133,1.947,2134,1.837,2135,1.947,2136,1.947,2137,1.947,2138,1.947,2139,1.947,2140,1.947,2141,1.947,2142,1.947,2143,1.947,2144,1.947,2145,1.947,2146,1.947,2147,1.947,2148,1.947,2149,1.947,2150,1.947,2151,1.947,2152,1.947,2153,2.784,2154,2.627,2155,1.947,2156,1.947,2157,1.947,2158,1.947,2159,1.947,2160,1.947,2161,1.947,2162,1.947,2163,1.947,2164,2.784,2165,1.947,2166,1.947,2167,1.947,2168,1.947,2169,2.784,2170,1.947,2171,1.947,2172,1.947,2173,1.947,2174,2.784,2175,2.784,2176,1.947,2177,1.947,2178,1.947,2179,1.947,2180,1.947,2181,2.784,2182,1.947,2183,1.947,2184,1.947,2185,1.947,2186,1.947,2187,3.546,2188,1.947,2189,1.947,2190,1.947,2191,1.947,2192,1.947,2193,1.947,2194,1.947,2195,1.947,2196,1.947,2197,1.947,2198,1.947,2199,1.837,2200,2.784,2201,1.947,2202,2.047,2203,1.947,2204,1.947,2205,2.784,2206,1.957,2207,1.947,2208,1.947,2209,1.947,2210,1.947,2211,2.784,2212,1.947,2213,2.784,2214,1.947,2215,2.784,2216,2.784,2217,1.947,2218,1.947,2219,1.947,2220,1.947,2221,1.947,2222,1.947,2223,1.947,2224,2.784,2225,1.947,2226,1.947,2227,2.784,2228,1.947,2229,1.947,2230,1.947,2231,1.947,2232,1.947,2233,1.947,2234,1.947,2235,1.947,2236,2.784,2237,1.947,2238,1.947,2239,1.947,2240,1.947,2241,1.947,2242,1.947,2243,1.947,2244,1.947,2245,1.947,2246,1.947,2247,1.947,2248,1.947,2249,1.947,2250,1.947,2251,1.947,2252,1.947,2253,1.947,2254,1.947,2255,1.947,2256,2.784,2257,1.947,2258,1.947,2259,1.947,2260,1.947,2261,1.947,2262,1.947,2263,1.947,2264,1.947]],["title/interfaces/RecordNode.html",[56,0.116,1760,1.813]],["body/interfaces/RecordNode.html",[8,0.016,14,0.079,15,0.079,16,0.079,22,0.188,38,0.426,46,0.493,52,0.203,53,0.017,54,0.009,55,0.009,56,0.195,58,0.578,60,1.012,61,1.054,63,1.587,65,1.835,66,2.149,67,1.098,70,1.434,71,3.207,72,1.13,74,0.374,75,0.478,76,0.388,77,2.756,78,1.507,79,0.933,80,1.587,81,3.052,82,0.61,83,0.416,84,0.549,87,0.603,88,0.446,89,1.036,90,1.103,91,1.715,92,1.465,93,0.862,94,0.958,95,0.971,96,1.173,100,0.446,101,0.555,102,1.753,103,1.306,104,1.752,105,2.076,110,1.408,111,2.437,112,2.458,113,2.168,114,2.327,115,1.676,116,0.986,117,0.92,118,0.603,127,2.103,128,1.145,130,1.989,131,2.388,132,2.327,133,1.264,135,1.831,141,1.306,142,1.813,144,0.321,149,0.688,150,1.974,151,1.507,153,1.587,156,0.569,157,0.864,159,1.229,162,1.098,163,0.426,164,0.853,166,1.33,167,2.751,168,3.035,169,1.195,170,0.797,171,1.288,172,2.375,175,2.49,181,1.004,184,0.467,185,0.488,186,1.864,187,1.367,188,1.195,190,1.106,192,1.966,196,1.306,199,0.851,219,1.054,227,2.21,230,1.497,242,2.375,243,1.585,244,2.911,249,1.367,253,0.868,258,1.676,264,2.068,267,1.797,278,0.752,279,2.327,284,0.94,286,2.911,289,1.676,297,1.249,300,1.676,303,2.21,304,1.831,307,0.829,309,1.09,310,0.997,311,1.676,312,1.434,313,0.862,315,2.268,327,1.278,328,1.249,330,1.145,332,0.971,333,1.676,334,2.005,335,1.038,336,1.61,337,1.08,341,0.997,352,1.384,353,0.862,354,1.306,378,1.434,398,0.569,409,1.688,410,1.507,411,1.249,414,1.831,415,1.306,416,1.279,428,2.317,431,1.507,432,0.862,433,1.135,434,1.306,436,1.83,437,2.816,438,1.891,447,1.587,450,1.545,451,0.736,453,1.507,454,1.891,455,3.616,456,2.275,457,1.891,458,3.408,459,0.933,460,1.545,461,1.306,462,1.891,463,1.676,467,2.236,468,1.587,469,1.054,474,1.249,475,1.776,512,2.21,515,1.587,517,3.154,527,1.676,528,2.497,533,0.933,535,1.367,550,1.587,663,1.507,676,1.567,809,1.507,984,1.587,996,1.145,1006,2.375,1074,1.434,1087,3.283,1197,2.773,1325,1.054,1330,1.038,1334,1.776,1355,3.616,1382,1.587,1404,1.315,1434,1.891,1481,1.891,1484,2.025,1562,1.306,1597,2.458,1640,2.025,1753,3.616,1754,1.776,1755,2.458,1756,2.185,1757,2.185,1758,2.911,1759,2.327,1760,3.61,1761,2.185,1762,1.587,1763,3.205,1764,2.605,1765,2.49,1766,2.185,1767,2.185,1768,1.434,1769,2.185,1770,2.185,1771,2.185,1772,2.185,1773,2.185,1774,2.185,1775,1.776,1776,2.605,1777,2.185,1778,1.587,1779,2.969,1780,2.185,1781,3.516,1782,2.185,1783,2.185,1784,2.969,1785,2.025,1786,2.185,1787,2.185,1788,2.025,1789,2.911,1790,1.776,1791,2.969,1792,1.776,1793,1.434,1794,2.185,1795,2.185,1796,2.185,1797,2.185,1798,1.891,1799,2.185,1800,2.185,1801,2.185,1802,3.205,1803,2.185,1804,2.185,1805,2.185,1806,2.185,1807,2.185,1808,1.891,1809,2.773,1810,2.969,1811,2.185,1812,2.185,1813,2.185,1814,3.616,1815,2.185,1816,2.185,1817,2.185,1818,3.795,1819,2.185,1820,2.185,1821,2.185,1822,2.185,1823,2.185,1824,3.205,1825,3.205,1826,3.205,1827,2.185,1828,3.205,1829,2.185,1830,1.507,1831,2.185,1832,1.891,1833,2.185,1834,3.795,1835,1.891,1836,2.185,1837,1.587,1838,2.185,1839,3.205,1840,2.185,1841,2.185,1842,1.676,1843,2.185,1844,2.185,1845,2.185,1846,2.185,1847,1.831,1848,2.185,1849,2.185,1850,1.145,1851,2.185,1852,2.185,1853,2.185,1854,2.185,1855,3.205,1856,2.185,1857,2.185,1858,2.185,1859,2.185,1860,2.185,1861,2.185,1862,2.185,1863,2.185,1864,2.185,1865,2.185,1866,2.025,1867,2.185,1868,2.185,1869,3.205,1870,2.185,1871,2.185,1872,2.185,1873,2.185,1874,2.185,1875,1.776,1876,2.185,1877,2.185,1878,2.185,1879,2.185,1880,2.185,1881,2.185,1882,2.185,1883,2.185,1884,2.185,1885,2.185,1886,3.795,1887,2.185,1888,2.185,1889,3.205,1890,2.185,1891,2.185,1892,4.179,1893,2.185,1894,3.235,1895,2.743,1896,4.179,1897,4.179,1898,2.743,1899,2.185,1900,2.185,1901,2.185,1902,4.179,1903,3.154,1904,2.185,1905,2.025,1906,3.795,1907,2.185,1908,3.795,1909,3.205,1910,3.205,1911,3.205,1912,3.205,1913,2.185,1914,2.185,1915,3.795,1916,3.795,1917,2.185,1918,2.103,1919,2.185,1920,2.185,1921,2.185,1922,2.185,1923,2.185,1924,2.185,1925,1.891,1926,1.587,1927,2.185,1928,1.776,1929,2.185,1930,2.185]],["title/classes/RecordsProvider.html",[53,0.021,434,1.651]],["body/classes/RecordsProvider.html",[8,0.016,12,0.696,14,0.069,15,0.069,16,0.069,22,0.177,38,0.373,46,0.474,52,0.194,53,0.015,54,0.008,55,0.008,56,0.176,60,0.884,61,1.885,63,1.387,65,1.745,66,2.104,67,0.96,70,1.253,71,3.051,72,1.123,74,0.362,75,0.447,76,0.861,77,2.543,78,1.317,79,1.238,80,1.387,81,2.904,82,0.563,83,0.419,84,0.575,87,0.527,88,0.39,89,1.035,90,1.108,91,1.605,92,1.611,93,1.542,94,1.047,95,0.849,96,1.252,100,0.39,101,0.485,102,2.967,103,1.732,104,1.858,105,1.585,110,1.317,111,2.409,112,2.223,113,2.234,114,2.105,115,1.465,116,0.97,117,0.933,118,0.799,124,1.732,127,2.566,128,1.001,130,2.049,131,2.234,132,2.105,133,1.143,135,1.656,141,1.732,142,1.836,144,0.516,149,0.676,150,2.003,151,1.317,153,1.387,156,0.694,157,0.836,159,1.266,162,0.96,163,0.863,164,0.816,166,1.227,167,2.82,168,2.839,169,1.044,170,0.696,171,1.265,172,2.191,175,2.298,181,0.927,182,1.967,184,0.619,185,1.174,186,1.803,187,2.191,188,1.044,190,1.035,192,1.993,196,1.732,199,0.828,219,0.921,227,1.998,230,1.382,242,2.191,243,1.483,244,2.686,249,1.813,253,0.82,258,1.465,264,1.967,267,1.727,278,0.71,279,2.105,284,0.915,286,2.686,289,1.465,294,0.96,296,1.557,297,1.091,300,1.465,303,2.415,304,1.656,307,0.724,309,1.36,310,1.09,311,1.465,312,1.253,313,1.143,315,2.093,327,1.32,328,1.091,330,1.519,332,1.738,333,1.465,334,1.813,335,0.938,336,1.456,337,0.976,341,0.902,352,1.425,353,1.143,354,1.141,367,1.387,368,2.355,369,1.143,370,2.355,371,2.355,372,1.057,374,2.223,375,2.223,376,2.223,377,2.001,378,2.298,379,1.277,380,2.223,381,2.223,382,1.552,383,1.957,385,1.944,386,1.317,387,4.615,390,1.652,391,1.552,392,1.652,393,1.652,394,1.652,395,1.652,396,1.652,398,0.904,399,1.323,401,1.652,404,1.091,405,1.652,406,1.552,407,0.724,408,1.552,409,1.744,410,1.998,411,1.656,412,1.091,413,0.696,414,2.001,415,2.093,416,1.317,417,1.652,418,0.921,419,1.091,421,1.769,422,1.091,423,1.652,424,1.091,425,1.652,428,2.384,431,1.317,432,0.753,433,0.867,434,1.732,436,2.217,437,2.826,438,3.03,447,1.387,450,1.397,451,0.643,452,2.085,453,1.998,454,2.507,455,3.828,456,2.257,457,2.507,458,3.41,459,1.238,460,1.688,461,1.732,462,2.507,463,2.223,464,1.769,465,1.769,466,1.195,467,2.223,468,2.105,469,1.688,470,1.769,471,1.769,472,1.001,473,2.085,474,1.656,475,2.355,512,1.998,515,1.387,517,3.108,527,2.223,528,2.336,533,0.816,535,1.195,550,1.387,663,1.317,676,1.491,809,1.317,984,1.387,996,1.001,1006,2.191,1074,1.253,1087,3.03,1197,2.507,1325,0.921,1330,0.938,1334,1.552,1355,3.383,1382,1.387,1404,1.189,1434,1.652,1481,1.652,1484,1.769,1562,1.141,1597,2.223,1640,1.769,1753,3.383,1754,2.355,1755,2.686,1756,1.909,1757,1.909,1758,2.223,1759,1.387,1760,3.522,1761,1.909,1762,1.387,1763,2.898,1764,2.355,1765,2.298,1766,1.909,1767,1.909,1768,1.253,1769,1.909,1770,1.909,1771,1.909,1772,1.909,1773,1.909,1774,1.909,1775,1.552,1776,2.355,1777,1.909,1778,1.387,1779,2.685,1780,1.909,1781,3.244,1782,1.909,1783,1.909,1784,2.685,1785,1.769,1786,1.909,1787,2.898,1788,2.685,1789,3.224,1790,2.355,1791,3.622,1792,2.355,1793,1.253,1794,1.909,1795,1.909,1796,1.909,1797,1.909,1798,1.652,1799,1.909,1800,1.909,1801,1.909,1802,2.898,1803,1.909,1804,1.909,1805,1.909,1806,1.909,1807,1.909,1808,1.652,1809,2.507,1810,2.685,1811,1.909,1812,1.909,1813,1.909,1814,3.383,1815,1.909,1816,1.909,1817,1.909,1818,3.502,1819,1.909,1820,1.909,1821,1.909,1822,1.909,1823,1.909,1824,2.898,1825,2.898,1826,2.898,1827,1.909,1828,2.898,1829,1.909,1830,1.317,1831,1.909,1832,1.652,1833,1.909,1834,3.502,1835,1.652,1836,1.909,1837,1.387,1838,1.909,1839,2.898,1840,1.909,1841,1.909,1842,1.465,1843,1.909,1844,1.909,1845,1.909,1846,1.909,1847,1.656,1848,1.909,1849,1.909,1850,1.001,1851,1.909,1852,1.909,1853,1.909,1854,1.909,1855,2.898,1856,1.909,1857,1.909,1858,1.909,1859,1.909,1860,1.909,1861,1.909,1862,1.909,1863,1.909,1864,1.909,1865,1.909,1866,1.769,1867,1.909,1868,1.909,1869,2.898,1870,1.909,1871,1.909,1872,1.909,1873,1.909,1874,1.909,1875,1.552,1876,1.909,1877,1.909,1878,1.909,1879,1.909,1880,1.909,1881,1.909,1882,1.909,1883,1.909,1884,1.909,1885,1.909,1886,3.502,1887,1.909,1888,1.909,1889,2.898,1890,1.909,1891,1.909,1892,3.909,1893,1.909,1894,3.108,1895,2.566,1896,3.909,1897,3.909,1898,2.566,1899,1.909,1900,1.909,1901,1.909,1902,3.909,1903,3.017,1904,1.909,1905,1.769,1906,3.502,1907,1.909,1908,3.502,1909,2.898,1910,2.898,1911,2.898,1912,2.898,1913,1.909,1914,1.909,1915,3.502,1916,3.502,1917,1.909,1918,1.902,1919,1.909,1920,1.909,1921,1.909,1922,1.909,1923,1.909,1924,1.909,1925,1.652,1926,1.387,1927,1.909,1928,1.552,1929,1.909,1930,1.909,2052,2.085,2917,2.678,2918,2.678]],["title/components/ResultTimeline.html",[610,0.467,729,1.448]],["body/components/ResultTimeline.html",[7,1.576,8,0.016,9,1.511,10,1.511,14,0.163,15,0.109,16,0.109,17,1.45,22,0.203,24,0.643,31,1.576,46,0.301,48,1.976,52,0.169,53,0.023,54,0.012,55,0.011,66,1.186,74,0.22,75,0.515,76,0.711,83,0.408,84,0.515,87,0.829,88,0.614,89,0.534,90,0.587,107,1.973,116,0.56,117,0.948,143,1.85,144,0.526,149,0.411,155,1.141,163,1.042,164,0.948,184,0.643,185,0.895,199,0.905,253,0.977,278,0.677,284,0.711,372,1.461,383,2.061,385,1.645,398,0.8,399,1.348,456,2.032,484,1.461,516,1.899,569,3.258,610,0.762,611,1.576,612,2.29,613,1.45,615,1.511,616,1.882,619,1.71,620,1.792,621,1.788,638,1.461,643,2.395,644,2.395,653,1.84,674,2.416,689,2.395,690,1.855,691,2.192,692,1.882,693,3.29,694,1.882,698,2.508,699,2.508,700,1.576,701,1.882,702,1.645,703,2.508,704,1.392,705,3.008,706,1.511,707,1.511,708,1.645,709,1.576,710,1.45,711,1.576,712,1.882,713,1.882,714,1.511,715,1.46,716,2.821,717,1.882,718,1.645,719,1.718,720,1.576,721,1.882,722,1.576,723,2.192,724,1.882,725,1.576,726,1.576,727,1.882,728,1.45,729,2.519,730,2.624,731,1.511,732,1.953,733,1.882,734,1.882,739,3.191,767,3.9,782,1.392,783,2.087,785,1.511,863,3.655,935,1.797,959,2.29,983,2.184,1110,3.468,1221,3.284,1255,3.074,1762,2.911,2102,3.269,2919,5.835,2920,3.284,2921,5.62,2922,6.322,2923,7.583,2924,6.742,2925,6.742,2926,3.688,2927,6.322,2928,6.322,2929,6.322,2930,6.322,2931,4.217,2932,5.62,2933,7.022,2934,4.217,2935,4.217,2936,4.217,2937,5.62,2938,4.217,2939,4.217,2940,4.217,2941,4.217,2942,5.843,2943,4.508,2944,4.217,2945,4.217,2946,4.217,2947,4.217,2948,4.217,2949,4.217,2950,6.322,2951,4.217,2952,3.655,2953,3.655,2954,3.655,2955,3.655,2956,4.217,2957,4.217,2958,4.217,2959,4.217,2960,4.217,2961,4.217,2962,5.62,2963,4.217,2964,2.786,2965,4.217,2966,4.217,2967,4.217,2968,5.62,2969,4.217,2970,4.217,2971,4.217,2972,4.217,2973,4.217,2974,4.217,2975,5.62,2976,4.217,2977,4.217,2978,4.176,2979,5.62,2980,4.217,2981,4.217,2982,4.217,2983,4.217,2984,5.62,2985,5.62,2986,5.62,2987,5.62,2988,5.62,2989,4.217,2990,4.217,2991,5.62,2992,4.217,2993,4.217,2994,4.217,2995,4.217,2996,4.217,2997,4.217,2998,4.217,2999,5.62,3000,4.217,3001,5.62,3002,4.217,3003,4.217,3004,4.217,3005,4.217,3006,4.217,3007,4.217,3008,4.217,3009,4.217,3010,4.217,3011,4.217,3012,4.217,3013,4.217,3014,4.217,3015,4.217,3016,4.217,3017,4.217,3018,4.217,3019,4.217,3020,4.217,3021,4.217,3022,4.217,3023,4.217,3024,4.217,3025,4.217,3026,4.217,3027,4.217]],["title/classes/SelectedRecordsProvider.html",[53,0.021,3028,3.017]],["body/classes/SelectedRecordsProvider.html",[8,0.016,12,1.16,14,0.115,15,0.115,16,0.115,22,0.215,52,0.134,53,0.025,54,0.011,55,0.011,56,0.133,60,1.472,61,2.37,72,0.808,74,0.233,75,0.475,76,0.96,79,1.359,83,0.415,84,0.562,87,0.877,88,0.65,89,1.007,90,1.067,92,1.624,93,2.012,94,0.951,95,1.414,96,1.275,102,3.122,103,1.901,104,1.792,105,2.275,106,2.868,110,1.401,116,0.592,117,0.872,118,0.877,124,2.485,127,2.73,130,1.667,142,1.561,144,0.56,146,2.09,148,1.707,149,0.435,150,1.908,156,0.738,159,1.03,163,0.995,167,2.688,182,2.326,184,0.889,185,1.266,186,1.792,187,3.075,188,1.74,190,0.842,192,1.864,196,2.485,199,0.511,242,2.602,284,0.565,290,1.255,294,2.09,295,2.44,296,2.185,303,2.193,309,1.465,310,0.99,313,1.255,327,1.194,329,2.31,330,1.667,332,2.06,352,1.16,353,1.255,367,2.31,368,3.381,369,1.641,370,3.381,371,3.381,372,1.516,374,3.19,375,3.19,376,3.19,377,2.648,378,2.73,379,1.792,380,3.19,381,3.19,382,2.585,383,2.092,385,2.219,386,2.193,387,4.939,390,2.752,391,2.585,392,2.752,393,2.752,394,2.752,395,2.752,396,2.752,398,0.979,399,1.564,401,2.752,404,1.817,405,2.752,406,2.585,407,1.206,408,2.585,409,1.577,410,2.193,411,1.817,412,1.817,413,1.16,414,1.817,415,2.485,416,1.072,417,2.752,418,1.534,419,1.817,422,1.817,423,2.752,424,1.817,425,2.752,428,2.696,430,2.485,431,3.389,434,3.048,436,2.607,437,2.808,438,4.253,452,3.473,453,2.193,454,2.752,455,3.599,456,2.064,457,2.752,458,2.602,459,1.359,460,1.534,461,2.769,462,2.752,463,2.44,464,2.947,465,2.947,466,1.99,467,1.598,468,2.31,469,2.005,470,2.947,471,2.947,472,1.667,473,3.473,474,1.817,475,2.585,501,0.99,533,1.776,805,3.075,1034,2.937,1193,1.817,1351,3.865,1352,4.062,1456,3.865,1457,3.865,2068,3.865,2105,2.485,2154,3.19,3028,4.542,3029,5.632,3030,4.159,3031,5.054,3032,5.054,3033,5.832,3034,5.832,3035,5.832,3036,6.499,3037,5.832,3038,4.461,3039,4.461,3040,2.31,3041,5.832,3042,4.461,3043,4.461,3044,4.461,3045,4.461,3046,4.461,3047,4.461]],["title/interfaces/StructuralEdgeType.html",[56,0.116,437,1.578]],["body/interfaces/StructuralEdgeType.html",[8,0.016,14,0.076,15,0.076,16,0.076,22,0.184,38,0.407,46,0.487,52,0.2,53,0.016,54,0.008,55,0.008,56,0.191,58,0.552,60,0.965,61,1.006,63,1.515,65,1.868,66,2.156,67,1.048,70,1.369,71,3.487,72,1.235,74,0.37,75,0.499,76,0.775,77,2.682,78,1.438,79,0.891,80,1.515,81,3.261,82,0.593,83,0.417,84,0.568,87,0.575,88,0.426,89,1.033,90,1.103,91,1.877,92,1.432,93,0.823,94,0.926,95,0.927,96,1.196,100,0.426,101,0.53,102,1.693,103,1.246,104,1.773,105,2.02,110,1.377,111,2.397,112,2.375,113,2.11,114,2.249,115,1.6,116,0.977,117,0.922,118,0.575,127,2.032,128,1.623,130,1.935,131,2.705,132,2.249,133,1.222,135,1.769,141,1.246,142,1.822,144,0.37,149,0.68,150,1.983,151,1.438,153,1.515,156,0.55,157,0.854,159,1.196,162,2.053,163,0.407,164,0.897,166,1.66,167,2.806,168,3.17,169,1.141,170,0.76,171,1.281,172,2.311,175,2.423,181,0.977,184,0.446,185,0.466,186,1.843,187,1.305,188,1.141,190,1.081,192,1.99,196,1.246,199,0.843,219,1.006,227,2.135,230,1.612,242,2.311,243,1.55,244,3.134,249,1.305,253,0.852,258,1.6,264,2.033,267,1.931,278,0.773,279,2.249,284,0.954,286,2.832,289,1.6,297,1.192,300,1.6,303,2.135,304,1.769,307,0.791,309,1.061,310,0.964,311,2.375,312,1.369,313,0.823,315,2.207,327,1.254,328,1.769,330,1.093,332,0.927,333,1.6,334,1.937,335,1.003,336,1.556,337,1.043,341,0.964,352,1.592,353,0.823,354,1.246,378,2.032,398,0.55,409,1.656,410,1.438,411,1.192,414,1.769,415,1.246,416,1.639,428,2.283,431,1.438,432,0.823,433,0.926,434,1.246,436,1.78,437,2.839,438,1.805,447,1.515,450,1.493,451,1.043,453,1.438,454,1.805,455,3.536,456,2.263,457,1.805,458,3.403,459,0.891,460,1.493,461,1.246,462,1.805,463,1.6,467,2.194,468,2.249,469,1.006,474,1.192,475,1.695,512,2.135,515,1.515,517,3.192,527,1.6,528,2.442,533,0.891,535,1.305,550,2.249,663,1.438,676,1.541,809,2.135,984,2.249,996,1.623,1006,2.862,1074,2.032,1087,3.195,1197,2.679,1325,1.006,1330,1.323,1334,2.517,1355,4.208,1382,1.515,1404,1.271,1434,1.805,1481,1.805,1484,1.932,1562,1.246,1597,2.375,1640,1.932,1753,3.536,1754,1.695,1755,2.375,1756,2.086,1757,2.086,1758,2.832,1759,1.515,1760,3.569,1761,3.096,1762,2.249,1763,4.086,1764,3.321,1765,3.002,1766,3.096,1767,3.096,1768,2.032,1769,3.096,1770,3.096,1771,3.096,1772,3.096,1773,3.096,1774,3.096,1775,2.517,1776,3.321,1777,3.096,1778,2.249,1779,3.786,1780,3.096,1781,3.786,1782,3.096,1783,3.096,1784,3.786,1785,1.932,1786,2.086,1787,2.086,1788,1.932,1789,2.832,1790,1.695,1791,2.869,1792,1.695,1793,1.369,1794,2.086,1795,2.086,1796,2.086,1797,2.086,1798,1.805,1799,2.086,1800,2.086,1801,2.086,1802,3.096,1803,2.086,1804,2.086,1805,2.086,1806,2.086,1807,2.086,1808,1.805,1809,2.679,1810,2.869,1811,2.086,1812,2.086,1813,2.086,1814,3.536,1815,2.086,1816,2.086,1817,2.086,1818,3.692,1819,2.086,1820,2.086,1821,2.086,1822,2.086,1823,2.086,1824,3.096,1825,3.096,1826,3.096,1827,2.086,1828,3.096,1829,2.086,1830,1.438,1831,2.086,1832,1.805,1833,2.086,1834,3.692,1835,1.805,1836,2.086,1837,1.515,1838,2.086,1839,3.096,1840,2.086,1841,2.086,1842,1.6,1843,2.086,1844,2.086,1845,2.086,1846,2.086,1847,1.769,1848,2.086,1849,2.086,1850,1.093,1851,2.086,1852,2.086,1853,2.086,1854,2.086,1855,3.096,1856,2.086,1857,2.086,1858,2.086,1859,2.086,1860,2.086,1861,2.086,1862,2.086,1863,2.086,1864,2.086,1865,2.086,1866,1.932,1867,2.086,1868,2.086,1869,3.096,1870,2.086,1871,2.086,1872,2.086,1873,2.086,1874,2.086,1875,1.695,1876,2.086,1877,2.086,1878,2.086,1879,2.086,1880,2.086,1881,2.086,1882,2.086,1883,2.086,1884,2.086,1885,2.086,1886,3.692,1887,2.086,1888,2.086,1889,3.096,1890,2.086,1891,2.086,1892,4.086,1893,2.086,1894,3.192,1895,2.682,1896,4.086,1897,4.086,1898,2.682,1899,2.086,1900,2.086,1901,2.086,1902,4.086,1903,3.107,1904,2.086,1905,1.932,1906,3.692,1907,2.086,1908,3.692,1909,3.096,1910,3.096,1911,3.096,1912,3.096,1913,2.086,1914,2.086,1915,3.692,1916,3.692,1917,2.086,1918,2.032,1919,2.086,1920,2.086,1921,2.086,1922,2.086,1923,2.086,1924,2.086,1925,1.805,1926,1.515,1927,2.086,1928,1.695,1929,2.086,1930,2.086]],["title/interfaces/TimelineAggregation.html",[56,0.116,3048,2.245]],["body/interfaces/TimelineAggregation.html",[8,0.016,11,1.659,12,0.677,13,1.62,14,0.067,15,0.067,16,0.067,22,0.218,24,0.397,38,0.362,42,0.933,46,0.438,48,1.52,52,0.192,53,0.014,54,0.012,55,0.008,56,0.161,58,0.491,65,1.119,72,0.978,74,0.136,75,0.324,76,0.777,82,0.703,83,0.371,84,0.626,85,2.325,86,2.738,87,0.512,88,0.379,96,1.095,97,1.425,98,2.056,99,0.533,100,0.579,101,0.471,107,1.581,110,0.625,113,1.061,116,0.641,118,0.512,144,0.438,145,1.348,146,1.425,147,2.386,148,0.762,149,0.683,155,1.726,156,0.964,157,0.947,158,1.161,163,0.752,164,0.833,171,1.297,176,2.657,177,1.486,181,1.02,184,0.397,185,1.017,190,1.242,191,1.695,195,1.713,199,0.876,202,1.348,203,1.348,204,1.348,207,1.424,210,0.973,221,1.109,223,1.015,230,1.358,233,1.424,234,1.424,237,1.424,243,1.305,253,0.752,264,1.261,265,1.424,266,3.178,267,1.255,278,0.843,284,0.503,298,1.695,309,0.533,310,0.883,318,1.015,319,0.793,327,1.107,335,0.601,337,0.625,341,0.578,349,2.259,362,1.52,369,1.119,372,1.034,389,2.411,398,0.503,399,0.555,407,1.076,409,0.704,411,1.061,413,0.677,414,1.061,416,1.16,418,1.858,428,1.659,430,1.109,432,1.52,433,0.555,444,1.061,449,3.188,450,1.367,451,0.956,456,1.852,460,0.895,461,2.056,484,0.677,501,0.578,515,1.348,516,1.076,517,1.861,531,1.637,533,0.793,554,3.188,572,2.72,610,0.582,614,1.921,619,1.076,620,0.578,621,0.578,623,0.973,625,0.973,626,0.825,627,1.53,632,1.261,638,0.677,640,1.348,653,1.858,674,2.418,676,1.534,704,0.859,732,1.944,735,1.509,737,1.861,739,3.412,740,0.973,746,3.168,747,3.492,760,2.373,762,1.803,763,1.659,765,1.729,767,2.978,778,2.27,782,0.859,783,1.313,785,1.425,790,5.153,798,2.302,803,0.933,807,0.825,808,1.72,809,1.28,817,1.218,819,1.109,820,1.218,821,1.161,838,3.183,849,1.509,868,1.72,869,5.051,870,1.72,873,2.454,874,3.356,875,1.72,876,1.72,877,1.348,878,1.72,879,1.72,881,1.72,883,1.72,884,1.72,935,1.109,938,1.015,954,1.509,955,1.218,958,1.161,959,1.62,960,1.28,961,1.161,965,1.62,966,1.015,971,1.551,985,1.775,986,1.509,996,2.019,1006,1.161,1032,1.551,1034,2.615,1037,1.956,1039,1.218,1040,1.956,1045,1.061,1075,1.348,1088,1.606,1101,1.119,1113,2.153,1121,1.109,1130,2.025,1181,1.161,1193,1.061,1249,1.424,1250,1.72,1255,1.424,1300,1.695,1303,2.988,1325,2.32,1328,1.28,1330,1.248,1352,2.499,1400,1.348,1404,0.762,1413,1.72,1414,1.72,1416,1.28,1435,1.218,1460,1.72,1528,2.627,1619,1.606,1628,1.509,1635,1.72,1649,2.06,1650,0.895,1722,2.627,1730,1.424,1762,2.06,1789,1.424,1963,1.28,1964,1.28,1972,1.348,1979,1.061,1984,1.348,2005,0.973,2031,1.348,2059,1.218,2101,1.62,2109,1.551,2116,1.218,2206,1.061,2281,1.28,2284,2.933,2285,1.28,2286,1.28,2296,1.606,2304,1.424,2320,1.606,2324,1.509,2359,1.606,2439,2.627,2466,1.424,2571,2.64,2574,1.72,2618,2.06,2631,2.499,2633,1.348,2642,1.606,2649,1.348,2652,1.606,2765,1.606,2777,1.509,2778,1.424,2779,1.424,2814,1.424,2926,2.175,2964,1.72,2978,1.72,3040,1.348,3048,3.911,3049,3.374,3050,3.374,3051,4.694,3052,3.852,3053,2.836,3054,1.856,3055,2.499,3056,3.139,3057,2.175,3058,3.374,3059,3.852,3060,1.509,3061,2.836,3062,1.856,3063,3.557,3064,3.132,3065,1.856,3066,1.856,3067,2.627,3068,2.627,3069,1.509,3070,1.509,3071,1.509,3072,1.509,3073,1.856,3074,2.797,3075,1.856,3076,2.836,3077,1.856,3078,1.856,3079,1.509,3080,1.509,3081,1.509,3082,1.509,3083,1.509,3084,2.305,3085,1.509,3086,1.509,3087,1.856,3088,1.606,3089,1.348,3090,1.856,3091,1.856,3092,1.856,3093,1.856,3094,1.606,3095,1.856,3096,1.856,3097,3.852,3098,2.305,3099,1.856,3100,1.856,3101,1.856,3102,1.856,3103,1.856,3104,2.836,3105,1.856,3106,1.856,3107,1.856,3108,1.509,3109,1.856,3110,1.856,3111,1.509,3112,2.836,3113,1.856,3114,1.856,3115,4.15,3116,1.856,3117,1.509,3118,1.856,3119,2.836,3120,1.509,3121,1.856,3122,1.856,3123,1.856,3124,1.856,3125,1.856,3126,2.836,3127,1.856,3128,1.856,3129,1.856,3130,1.856,3131,1.856,3132,1.856,3133,1.856,3134,1.856,3135,2.836,3136,2.305,3137,1.856,3138,1.856,3139,1.509,3140,1.856,3141,1.856,3142,1.856,3143,1.856,3144,1.856,3145,1.856,3146,1.856,3147,1.856,3148,2.836,3149,1.856,3150,1.856,3151,1.856,3152,1.856,3153,1.856,3154,1.856,3155,1.856,3156,1.856,3157,1.856,3158,1.856,3159,1.509,3160,2.836,3161,1.856,3162,3.441,3163,2.836,3164,4.15,3165,1.856,3166,2.836,3167,5.179,3168,1.856,3169,1.856,3170,1.856,3171,2.836,3172,3.852,3173,1.856,3174,2.836,3175,2.836,3176,1.856,3177,2.836,3178,1.856,3179,3.441,3180,3.441,3181,2.836,3182,1.509,3183,1.856,3184,1.856,3185,1.856,3186,1.856,3187,1.856,3188,1.856,3189,1.856,3190,1.856,3191,1.856,3192,1.856,3193,2.836,3194,2.836,3195,1.856,3196,2.836,3197,2.836,3198,1.856,3199,1.856,3200,1.856,3201,1.856,3202,1.856,3203,1.856,3204,2.836,3205,1.856,3206,4.375,3207,2.797,3208,3.852,3209,1.856,3210,2.836,3211,4.375,3212,1.856,3213,1.856,3214,1.856,3215,1.856,3216,1.856,3217,1.856,3218,2.836,3219,1.856,3220,1.856,3221,1.856,3222,1.856,3223,1.856,3224,1.856,3225,1.856,3226,1.856,3227,1.509,3228,1.856,3229,1.856,3230,3.441,3231,1.856,3232,1.856,3233,1.856,3234,1.856,3235,1.856,3236,1.856,3237,1.856,3238,1.856,3239,2.836,3240,1.856,3241,1.856,3242,1.856,3243,1.856,3244,1.856,3245,1.856,3246,1.509,3247,1.856,3248,1.856,3249,1.856,3250,1.856,3251,1.856,3252,1.856,3253,1.856,3254,1.856,3255,1.856,3256,2.836,3257,1.856,3258,1.856,3259,1.856,3260,1.856,3261,1.856,3262,1.856,3263,1.856,3264,1.856,3265,1.856,3266,1.856,3267,1.856,3268,1.856,3269,1.856,3270,1.856,3271,1.856,3272,1.856,3273,1.856,3274,1.856,3275,3.441,3276,1.856,3277,1.856,3278,1.856,3279,3.014,3280,1.856,3281,1.856,3282,1.856,3283,1.856,3284,1.856,3285,1.856,3286,1.856,3287,1.856,3288,1.856,3289,1.856,3290,1.856,3291,1.856,3292,1.856,3293,1.856,3294,1.509,3295,1.856,3296,1.856,3297,1.509,3298,1.856,3299,4.15,3300,1.856,3301,1.856,3302,1.509,3303,1.856,3304,1.856,3305,1.856,3306,1.856,3307,1.856,3308,1.856,3309,1.856,3310,1.72,3311,1.856,3312,1.856,3313,1.856,3314,1.856,3315,1.856,3316,1.856,3317,1.856,3318,1.856,3319,1.856,3320,1.856,3321,1.856,3322,2.836,3323,4.694,3324,3.852,3325,2.836,3326,2.836,3327,2.836,3328,2.836,3329,1.856,3330,1.856,3331,1.856,3332,1.856,3333,1.856,3334,1.856,3335,2.836,3336,1.856,3337,1.856,3338,1.856,3339,1.856,3340,2.836,3341,1.856,3342,2.454,3343,1.856]],["title/interfaces/TimelineCombinedAggregations.html",[56,0.116,3058,2.245]],["body/interfaces/TimelineCombinedAggregations.html",[8,0.016,11,1.664,12,0.68,13,1.626,14,0.068,15,0.068,16,0.068,22,0.218,24,0.399,38,0.364,42,0.937,46,0.439,48,1.524,52,0.192,53,0.014,54,0.012,55,0.008,56,0.162,58,0.494,65,1.123,72,0.981,74,0.137,75,0.325,76,0.505,82,0.62,83,0.334,84,0.615,85,2.314,86,2.743,87,0.514,88,0.381,96,1.097,97,1.43,98,2.062,99,0.536,100,0.581,101,0.473,107,1.585,110,0.628,113,1.066,116,0.643,118,0.514,144,0.345,145,1.354,146,1.43,147,2.39,148,0.765,149,0.683,155,1.729,156,0.964,157,0.947,158,1.167,163,0.89,164,0.872,171,1.298,176,3.144,177,1.492,181,1.022,184,0.399,185,1.018,190,1.244,191,1.701,195,1.717,199,0.876,202,1.354,203,1.354,204,1.354,207,1.43,210,0.977,221,1.114,223,1.02,230,1.362,233,1.43,234,1.43,237,1.43,243,1.309,253,0.754,264,1.265,265,1.43,266,3.184,267,1.258,278,0.844,284,0.505,298,1.701,309,0.536,310,0.886,318,1.02,319,0.796,327,1.109,335,0.604,337,0.628,341,0.58,349,2.265,362,1.524,369,1.123,372,1.038,398,0.505,399,0.558,407,1.079,409,0.707,411,1.066,413,0.68,414,1.066,416,1.163,418,1.862,428,1.664,430,1.114,432,1.524,433,0.558,444,1.066,449,3.198,450,1.372,451,0.959,456,1.855,460,0.899,461,2.062,484,0.68,501,0.58,515,1.354,516,1.079,517,1.868,531,1.641,533,0.796,554,3.198,572,2.725,610,0.583,614,1.925,619,1.079,620,0.58,621,0.58,623,0.977,625,0.977,626,0.829,627,1.534,632,1.265,638,0.68,640,1.354,653,1.859,674,2.421,676,1.536,704,0.863,732,1.946,735,1.516,737,1.868,739,3.413,740,0.977,746,3.172,747,3.497,760,2.38,762,1.809,763,1.664,765,1.734,767,2.986,778,2.275,782,0.863,783,1.317,785,1.43,790,5.156,798,2.308,803,0.937,807,0.829,808,1.728,809,1.286,817,1.224,819,1.114,820,1.224,821,1.167,838,3.19,849,1.516,868,1.728,869,5.054,870,1.728,873,2.463,874,2.647,875,1.728,876,1.728,877,1.354,878,1.728,879,1.728,881,1.728,883,1.728,884,1.728,935,1.114,938,1.02,954,1.516,955,1.224,958,1.167,959,1.626,960,1.286,961,1.167,965,1.626,966,1.02,971,1.557,985,1.781,986,1.516,996,2.024,1006,1.167,1032,1.557,1034,2.62,1037,1.963,1039,1.224,1040,1.963,1045,1.066,1075,1.354,1088,1.614,1101,1.123,1113,2.16,1121,1.114,1130,2.029,1181,1.167,1193,1.066,1249,1.43,1250,1.728,1255,1.43,1300,1.701,1303,2.992,1325,2.323,1328,1.286,1330,1.251,1352,2.507,1400,1.354,1404,0.765,1413,1.728,1414,1.728,1416,1.286,1435,1.224,1460,1.728,1528,2.637,1619,1.614,1628,1.516,1635,1.728,1649,2.067,1650,0.899,1722,2.637,1730,1.43,1762,2.067,1789,1.43,1963,1.286,1964,1.286,1972,1.354,1979,1.066,1984,1.354,2005,0.977,2031,1.354,2059,1.224,2101,1.626,2109,1.557,2116,1.224,2206,1.066,2281,1.286,2284,3.065,2285,1.286,2286,1.286,2296,1.614,2304,1.43,2320,1.614,2324,1.516,2359,1.614,2439,2.637,2466,1.43,2571,2.647,2574,1.728,2618,2.067,2631,2.507,2633,1.354,2642,1.614,2649,1.354,2652,1.614,2765,1.614,2777,1.516,2778,1.43,2779,1.43,2814,1.43,2926,2.183,2964,1.728,2978,1.728,3040,1.354,3048,4.214,3049,2.313,3050,2.313,3051,4.701,3052,3.862,3053,2.846,3054,1.865,3055,2.507,3056,3.144,3057,2.183,3058,3.563,3059,4.56,3060,1.516,3061,2.846,3062,1.865,3063,3.563,3064,3.139,3065,1.865,3066,1.865,3067,2.637,3068,2.637,3069,1.516,3070,1.516,3071,1.516,3072,1.516,3073,1.865,3074,2.805,3075,1.865,3076,2.846,3077,1.865,3078,1.865,3079,1.516,3080,1.516,3081,1.516,3082,1.516,3083,1.516,3084,2.313,3085,1.516,3086,1.516,3087,1.865,3088,1.614,3089,1.354,3090,1.865,3091,1.865,3092,1.865,3093,1.865,3094,1.614,3095,1.865,3096,1.865,3097,3.862,3098,2.313,3099,1.865,3100,1.865,3101,1.865,3102,1.865,3103,1.865,3104,2.846,3105,1.865,3106,1.865,3107,1.865,3108,1.516,3109,1.865,3110,1.865,3111,1.516,3112,2.846,3113,1.865,3114,1.865,3115,4.159,3116,1.865,3117,1.516,3118,1.865,3119,2.846,3120,1.516,3121,1.865,3122,1.865,3123,1.865,3124,1.865,3125,1.865,3126,2.846,3127,1.865,3128,1.865,3129,1.865,3130,1.865,3131,1.865,3132,1.865,3133,1.865,3134,1.865,3135,2.846,3136,2.313,3137,1.865,3138,1.865,3139,1.516,3140,1.865,3141,1.865,3142,1.865,3143,1.865,3144,1.865,3145,1.865,3146,1.865,3147,1.865,3148,2.846,3149,1.865,3150,1.865,3151,1.865,3152,1.865,3153,1.865,3154,1.865,3155,1.865,3156,1.865,3157,1.865,3158,1.865,3159,1.516,3160,2.846,3161,1.865,3162,3.451,3163,2.846,3164,4.159,3165,1.865,3166,2.846,3167,5.184,3168,1.865,3169,1.865,3170,1.865,3171,2.846,3172,3.862,3173,1.865,3174,2.846,3175,2.846,3176,1.865,3177,2.846,3178,1.865,3179,3.451,3180,3.451,3181,2.846,3182,1.516,3183,1.865,3184,1.865,3185,1.865,3186,1.865,3187,1.865,3188,1.865,3189,1.865,3190,1.865,3191,1.865,3192,1.865,3193,2.846,3194,2.846,3195,1.865,3196,2.846,3197,2.846,3198,1.865,3199,1.865,3200,1.865,3201,1.865,3202,1.865,3203,1.865,3204,2.846,3205,1.865,3206,4.384,3207,2.805,3208,3.862,3209,1.865,3210,2.846,3211,4.384,3212,1.865,3213,1.865,3214,1.865,3215,1.865,3216,1.865,3217,1.865,3218,2.846,3219,1.865,3220,1.865,3221,1.865,3222,1.865,3223,1.865,3224,1.865,3225,1.865,3226,1.865,3227,1.516,3228,1.865,3229,1.865,3230,3.451,3231,1.865,3232,1.865,3233,1.865,3234,1.865,3235,1.865,3236,1.865,3237,1.865,3238,1.865,3239,2.846,3240,1.865,3241,1.865,3242,1.865,3243,1.865,3244,1.865,3245,1.865,3246,1.516,3247,1.865,3248,1.865,3249,1.865,3250,1.865,3251,1.865,3252,1.865,3253,1.865,3254,1.865,3255,1.865,3256,2.846,3257,1.865,3258,1.865,3259,1.865,3260,1.865,3261,1.865,3262,1.865,3263,1.865,3264,1.865,3265,1.865,3266,1.865,3267,1.865,3268,1.865,3269,1.865,3270,1.865,3271,1.865,3272,1.865,3273,1.865,3274,1.865,3275,3.451,3276,1.865,3277,1.865,3278,1.865,3279,3.021,3280,1.865,3281,1.865,3282,1.865,3283,1.865,3284,1.865,3285,1.865,3286,1.865,3287,1.865,3288,1.865,3289,1.865,3290,1.865,3291,1.865,3292,1.865,3293,1.865,3294,1.516,3295,1.865,3296,1.865,3297,1.516,3298,1.865,3299,4.159,3300,1.865,3301,1.865,3302,1.516,3303,1.865,3304,1.865,3305,1.865,3306,1.865,3307,1.865,3308,1.865,3309,1.865,3310,1.728,3311,1.865,3312,1.865,3313,1.865,3314,1.865,3315,1.865,3316,1.865,3317,1.865,3318,1.865,3319,1.865,3320,1.865,3321,1.865,3322,2.846,3323,4.701,3324,3.862,3325,2.846,3326,2.846,3327,2.846,3328,2.846,3329,1.865,3330,1.865,3331,1.865,3332,1.865,3333,1.865,3334,1.865,3335,2.846,3336,1.865,3337,1.865,3338,1.865,3339,1.865,3340,2.846,3341,1.865,3342,2.463,3343,1.865]],["title/interfaces/TimelineDate.html",[56,0.116,3055,2.006]],["body/interfaces/TimelineDate.html",[8,0.016,11,2.176,12,0.661,14,0.066,15,0.066,16,0.066,22,0.173,24,0.387,34,0.635,46,0.51,52,0.16,53,0.014,54,0.007,55,0.007,56,0.142,58,0.48,74,0.204,75,0.318,82,0.696,83,0.248,84,0.469,87,0.5,88,0.37,116,0.868,117,0.675,133,0.715,134,1.39,140,0.715,144,0.181,149,0.562,156,0.866,157,0.879,159,1.509,164,0.979,169,0.991,170,0.661,171,1.087,181,0.48,184,0.387,186,1.897,190,0.897,191,2.274,194,1.39,199,0.915,210,0.95,219,0.874,221,1.083,229,0.991,230,1.098,243,1.056,251,1.473,253,0.743,267,1.236,270,1.25,278,0.871,284,0.675,298,1.083,308,1.289,310,1.055,318,1.854,330,0.95,343,1.704,362,1.098,379,1.015,383,0.661,398,0.494,415,1.083,430,1.083,443,1.473,450,1.342,451,0.611,456,1.338,460,0.874,474,1.035,483,1.679,484,0.661,501,0.564,516,0.687,531,1.781,533,1.625,553,2.784,569,2.263,610,0.47,613,0.874,614,0.839,615,1.704,619,1.056,620,0.564,621,0.564,623,1.459,625,1.459,626,1.507,627,0.806,632,0.806,633,1.473,638,0.661,643,1.083,653,1.804,662,0.991,663,1.25,671,0.911,674,2.53,676,1.672,690,0.839,691,1.523,710,0.874,730,0.95,732,0.687,739,3.047,740,0.95,746,3.283,747,2.136,750,1.189,778,2.668,782,0.839,783,1.289,785,2.063,798,2.453,805,1.742,814,3.39,838,1.39,874,2.136,900,1.679,907,2.263,911,2.263,912,2.263,914,1.473,915,1.473,916,1.473,917,1.473,918,1.473,919,2.263,921,4.326,922,1.473,923,3.787,924,2.263,927,3.093,935,1.083,938,0.991,944,2.831,946,1.473,955,1.189,958,1.134,959,1.937,960,1.25,961,1.742,965,1.591,966,0.991,968,1.473,971,2.081,976,1.473,978,3.093,979,1.083,983,3.383,984,1.316,985,1.742,1005,1.679,1024,1.568,1028,3.093,1032,2.081,1033,1.92,1037,1.25,1040,1.92,1042,2.477,1043,1.473,1044,1.473,1045,2.346,1046,1.679,1060,3.093,1062,1.473,1063,2.756,1064,2.263,1065,1.473,1066,1.473,1068,1.473,1069,1.473,1070,1.473,1074,1.189,1075,1.316,1076,3.093,1078,1.679,1079,1.39,1080,1.679,1081,1.473,1082,1.473,1083,1.473,1084,1.473,1085,1.473,1093,1.679,1101,1.338,1102,2.982,1105,1.679,1109,1.679,1110,1.568,1113,2.825,1117,2.263,1120,1.473,1121,1.083,1122,2.136,1123,1.473,1124,1.473,1125,2.263,1126,2.263,1127,2.263,1128,1.473,1129,1.473,1130,2.258,1131,1.473,1132,1.473,1155,1.473,1163,1.25,1181,1.134,1184,2.263,1185,2.934,1253,3.805,1287,1.704,1300,1.083,1303,2.225,1310,2.601,1314,2.136,1328,1.25,1330,0.587,1345,1.473,1382,1.316,1403,0.991,1406,1.812,1416,1.25,1421,1.679,1425,1.812,1431,4.502,1562,1.083,1610,2.409,1637,1.39,1682,1.568,1689,1.679,1729,2.409,1730,1.39,1741,2.784,1747,1.316,1755,1.39,1792,1.473,1830,1.25,1842,1.39,1875,1.473,1926,1.316,1928,2.263,1965,1.39,1979,1.591,2003,1.39,2055,2.58,2057,1.083,2058,1.473,2059,1.827,2101,1.035,2105,1.083,2109,0.991,2128,1.083,2131,0.991,2202,1.083,2206,1.035,2283,1.679,2284,2.026,2313,1.679,2353,1.679,2411,2.784,2464,2.409,2569,1.568,2618,2.022,2631,2.022,2633,1.316,2636,3.141,2638,2.784,2640,3.525,2641,2.58,2645,3.141,2649,1.316,2653,1.679,2654,1.679,2655,1.679,2656,4.016,2659,1.679,2664,1.679,2665,1.679,2666,2.58,2667,1.679,2668,1.679,2669,3.525,2671,1.679,2673,1.679,2674,1.679,2675,1.679,2676,1.679,2677,1.679,2678,1.679,2679,1.679,2680,1.679,2681,1.679,2682,1.679,2683,3.804,2685,1.679,2710,1.679,2727,1.812,2733,1.679,2734,2.58,2735,1.679,2738,1.679,2739,1.679,2740,1.679,2742,1.679,2743,1.679,2744,3.525,2745,1.679,2746,1.679,2747,1.679,2748,1.679,2749,1.679,2750,1.679,2751,1.679,2752,1.679,2754,1.679,2756,1.679,2757,1.679,2758,1.679,2759,3.141,2760,2.58,2761,1.679,2775,3.141,2778,1.39,2779,1.39,2783,2.784,2784,1.812,2785,3.39,2786,1.812,2787,1.812,2790,1.812,2802,1.812,2804,1.812,2805,2.784,2810,2.784,2811,1.812,2812,4.106,2814,2.136,2820,1.812,2926,2.136,3030,1.812,3040,1.316,3049,1.473,3050,1.473,3055,2.462,3056,3.295,3060,2.263,3069,1.473,3070,1.473,3071,1.473,3072,1.473,3074,1.473,3079,1.473,3080,1.473,3081,1.473,3082,1.473,3083,1.473,3084,1.473,3085,1.473,3086,1.473,3089,2.462,3098,1.473,3108,3.093,3111,1.473,3117,1.473,3120,1.473,3136,1.473,3139,1.473,3159,2.263,3182,1.473,3207,1.473,3227,1.473,3246,1.473,3279,1.316,3294,1.473,3297,1.473,3302,2.756,3344,1.812,3345,3.04,3346,1.812,3347,2.784,3348,1.979,3349,1.979,3350,1.979,3351,1.979,3352,1.979,3353,1.979,3354,1.979,3355,1.979,3356,3.04,3357,3.04,3358,3.04,3359,3.04,3360,1.979,3361,1.979,3362,1.979,3363,1.979,3364,1.979,3365,3.703,3366,1.979,3367,1.979,3368,5.419,3369,4.155,3370,1.979,3371,1.979,3372,1.979,3373,1.979,3374,1.979,3375,1.979,3376,1.979,3377,1.979,3378,1.979,3379,4.155,3380,1.979,3381,3.04,3382,3.04,3383,3.04,3384,1.979,3385,1.979,3386,3.04,3387,1.979,3388,1.979,3389,1.979,3390,1.979,3391,3.04,3392,4.929,3393,1.979,3394,3.04,3395,1.979,3396,3.04,3397,1.979,3398,1.979,3399,1.979,3400,3.04,3401,3.04,3402,3.04,3403,3.703,3404,1.979,3405,1.979,3406,1.979,3407,1.979,3408,1.979,3409,5.326,3410,3.04,3411,3.04,3412,1.979,3413,1.979,3414,1.979,3415,1.979,3416,1.979,3417,1.979,3418,3.04,3419,1.979,3420,1.979,3421,3.04,3422,1.979,3423,3.703,3424,1.979,3425,1.979,3426,1.979,3427,1.979,3428,1.979,3429,3.04,3430,1.979,3431,1.979,3432,4.155,3433,1.979,3434,1.979,3435,3.04,3436,3.04,3437,3.04,3438,1.979,3439,1.979,3440,1.979,3441,1.979,3442,3.703,3443,1.979,3444,1.979,3445,1.979,3446,1.979,3447,1.979,3448,1.979,3449,1.979,3450,1.979,3451,1.979,3452,1.979,3453,3.04,3454,1.979,3455,1.979,3456,1.979,3457,1.979,3458,1.979,3459,1.979,3460,1.979,3461,1.979,3462,3.04,3463,1.979,3464,1.979,3465,1.979,3466,1.979,3467,1.979,3468,1.979,3469,1.979,3470,4.155,3471,3.703,3472,1.979,3473,1.979,3474,1.979,3475,1.979,3476,1.979,3477,1.979,3478,1.979,3479,1.979,3480,1.979,3481,1.979,3482,3.04,3483,1.979,3484,1.979,3485,1.979,3486,3.703,3487,1.979,3488,1.979,3489,1.979,3490,3.04,3491,1.979,3492,1.979,3493,1.979,3494,1.979,3495,1.979,3496,1.979,3497,1.979,3498,1.979,3499,1.979,3500,3.04,3501,1.979,3502,1.979,3503,1.979,3504,1.979,3505,1.979,3506,1.979,3507,1.979,3508,1.979,3509,1.979,3510,1.979,3511,1.979,3512,1.979,3513,1.979,3514,1.979,3515,1.979,3516,1.979,3517,1.979,3518,4.929,3519,4.929,3520,3.04,3521,3.04,3522,1.979,3523,1.979,3524,3.04,3525,3.04,3526,3.04,3527,3.04,3528,3.04,3529,3.04,3530,3.04,3531,3.04,3532,3.04,3533,1.979,3534,1.979,3535,3.703,3536,1.979,3537,1.979,3538,1.979,3539,1.979,3540,1.979,3541,1.979,3542,3.04,3543,1.979,3544,1.979,3545,1.979,3546,1.979,3547,1.979,3548,1.979,3549,1.979,3550,1.979,3551,1.979,3552,4.484,3553,1.979,3554,1.979,3555,3.04,3556,1.979,3557,1.979,3558,3.04,3559,1.979,3560,1.979,3561,1.979,3562,3.703,3563,1.979,3564,1.979,3565,1.979,3566,1.979,3567,1.979,3568,1.979,3569,1.979,3570,3.04,3571,1.979,3572,1.979,3573,1.979,3574,1.979,3575,1.979,3576,1.979,3577,1.979,3578,1.979,3579,1.979,3580,1.979,3581,1.979,3582,1.979,3583,3.703,3584,1.979,3585,1.979,3586,1.979,3587,1.979,3588,1.979,3589,1.979,3590,1.979,3591,3.04,3592,1.979,3593,1.979,3594,1.979,3595,1.979,3596,1.979,3597,1.979,3598,1.979,3599,1.979,3600,1.979,3601,3.04,3602,1.979,3603,1.979,3604,3.04,3605,1.979,3606,1.979,3607,1.979,3608,1.979,3609,1.979,3610,1.979,3611,1.979,3612,1.979,3613,1.979,3614,1.979,3615,3.04,3616,1.979,3617,1.979,3618,3.04,3619,1.979,3620,1.979,3621,1.979,3622,1.979,3623,1.979,3624,1.979,3625,3.703,3626,1.979,3627,3.703,3628,1.979,3629,3.04,3630,3.04,3631,1.979,3632,1.812,3633,1.979,3634,1.979,3635,1.812,3636,1.979,3637,1.979,3638,1.979,3639,1.979,3640,1.979,3641,1.979,3642,3.04,3643,4.929,3644,1.979,3645,1.979,3646,1.979,3647,1.812,3648,4.733,3649,3.703,3650,4.929,3651,1.979,3652,1.979,3653,3.04,3654,1.979,3655,1.979,3656,1.979,3657,1.979,3658,1.979,3659,3.04,3660,1.979]],["title/interfaces/TimelineEvent.html",[56,0.116,3056,1.905]],["body/interfaces/TimelineEvent.html",[8,0.016,11,2.166,12,0.652,14,0.065,15,0.065,16,0.065,22,0.172,24,0.382,34,0.627,46,0.509,52,0.159,53,0.014,54,0.007,55,0.007,56,0.141,58,0.473,74,0.202,75,0.315,76,0.823,82,0.693,83,0.356,84,0.544,87,0.493,88,0.365,116,0.864,117,0.317,133,0.705,134,1.371,140,0.705,144,0.179,149,0.558,156,0.863,157,0.877,159,1.502,164,0.983,169,0.978,170,0.652,171,1.082,181,0.473,184,0.382,186,1.892,190,0.89,191,2.257,194,1.371,199,0.914,210,0.937,219,0.862,221,1.068,229,0.978,230,1.087,243,1.045,251,1.453,253,0.737,267,1.572,270,1.233,278,0.869,284,0.67,298,1.068,308,1.275,310,1.046,318,1.839,330,0.937,343,1.689,362,1.087,379,1.005,383,0.652,389,1.724,398,0.489,415,1.068,430,1.068,443,1.453,450,1.328,451,0.602,456,1.83,460,0.862,474,1.021,483,1.656,484,0.652,501,0.556,516,1.433,531,1.917,533,1.613,553,2.755,569,2.239,610,0.466,613,0.862,614,1.748,615,1.689,619,1.045,620,0.556,621,0.556,623,1.444,625,1.444,626,1.494,627,0.795,632,0.795,633,1.453,638,0.652,643,1.068,653,1.8,662,0.978,663,1.233,671,0.898,674,2.522,676,1.666,690,0.827,691,1.507,710,0.862,730,0.937,732,0.678,739,3.038,740,0.937,746,3.275,747,2.113,750,1.173,778,2.658,782,0.827,783,1.275,785,2.05,798,2.438,805,1.724,814,3.361,838,1.371,874,2.113,900,1.656,907,2.239,911,2.239,912,2.239,914,1.453,915,1.453,916,1.453,917,1.453,918,1.453,919,2.239,921,4.316,922,1.453,923,3.77,924,2.239,927,3.07,935,1.068,938,0.978,944,2.814,946,1.453,955,1.173,958,1.119,959,1.921,960,1.233,961,1.724,965,1.574,966,0.978,968,1.453,971,2.066,976,1.453,978,3.07,979,1.068,983,3.368,984,1.298,985,1.724,1005,1.656,1024,1.547,1028,3.07,1032,2.066,1033,1.9,1037,1.233,1040,1.9,1042,2.463,1043,1.453,1044,1.453,1045,2.331,1046,1.656,1060,3.07,1062,1.453,1063,2.732,1064,2.239,1065,1.453,1066,1.453,1068,1.453,1069,1.453,1070,1.453,1074,1.173,1075,1.298,1076,3.07,1078,1.656,1079,1.371,1080,1.656,1081,1.453,1082,1.453,1083,1.453,1084,1.453,1085,1.453,1093,1.656,1101,1.326,1102,2.963,1105,1.656,1109,1.656,1110,1.547,1113,2.811,1117,2.239,1120,1.453,1121,1.068,1122,2.113,1123,1.453,1124,1.453,1125,2.239,1126,2.239,1127,2.239,1128,1.453,1129,1.453,1130,2.249,1131,1.453,1132,1.453,1155,1.453,1163,1.233,1181,1.119,1184,2.239,1185,2.909,1253,3.777,1287,1.689,1300,1.068,1303,2.206,1310,2.578,1314,2.113,1328,1.233,1330,0.579,1345,1.453,1382,1.298,1403,0.978,1406,1.787,1416,1.233,1421,1.656,1425,1.787,1431,4.49,1562,1.068,1610,2.384,1637,1.371,1682,1.547,1689,1.656,1729,2.384,1730,1.371,1741,2.755,1747,1.298,1755,1.371,1792,1.453,1830,1.233,1842,1.371,1875,1.453,1926,1.298,1928,2.239,1965,1.371,1979,1.574,2003,1.371,2055,2.552,2057,1.068,2058,1.453,2059,1.808,2101,1.021,2105,1.068,2109,0.978,2128,1.068,2131,0.978,2202,1.068,2206,1.021,2283,1.656,2284,2.009,2313,1.656,2353,1.656,2411,2.755,2464,2.384,2569,1.547,2618,2.001,2631,2.001,2633,1.298,2636,3.114,2638,2.755,2640,3.5,2641,2.552,2645,3.114,2649,1.298,2653,1.656,2654,1.656,2655,1.656,2656,3.994,2659,1.656,2664,1.656,2665,1.656,2666,2.552,2667,1.656,2668,1.656,2669,3.5,2671,1.656,2673,1.656,2674,1.656,2675,1.656,2676,1.656,2677,1.656,2678,1.656,2679,1.656,2680,1.656,2681,1.656,2682,1.656,2683,3.78,2685,1.656,2710,1.656,2727,1.787,2733,1.656,2734,2.552,2735,1.656,2738,1.656,2739,1.656,2740,1.656,2742,1.656,2743,1.656,2744,3.5,2745,1.656,2746,1.656,2747,1.656,2748,1.656,2749,1.656,2750,1.656,2751,1.656,2752,1.656,2754,1.656,2756,1.656,2757,1.656,2758,1.656,2759,3.114,2760,2.552,2761,1.656,2775,3.114,2778,1.371,2779,1.371,2783,2.755,2784,1.787,2785,3.361,2786,1.787,2787,1.787,2790,1.787,2802,1.787,2804,1.787,2805,2.755,2810,2.755,2811,1.787,2812,4.08,2814,2.113,2820,1.787,2926,2.113,3030,1.787,3040,1.298,3049,1.453,3050,1.453,3055,2.001,3056,3.351,3060,2.239,3069,1.453,3070,1.453,3071,1.453,3072,1.453,3074,1.453,3079,1.453,3080,1.453,3081,1.453,3082,1.453,3083,1.453,3084,1.453,3085,1.453,3086,1.453,3089,2.441,3098,1.453,3108,3.07,3111,1.453,3117,1.453,3120,1.453,3136,1.453,3139,1.453,3159,2.239,3182,1.453,3207,1.453,3227,1.453,3246,1.453,3279,1.298,3294,1.453,3297,1.453,3302,2.732,3344,1.787,3345,3.009,3346,1.787,3347,2.755,3348,4.125,3349,1.952,3350,1.952,3351,1.952,3352,1.952,3353,1.952,3354,1.952,3355,1.952,3356,3.009,3357,3.009,3358,3.009,3359,3.009,3360,1.952,3361,1.952,3362,1.952,3363,1.952,3364,1.952,3365,3.671,3366,1.952,3367,1.952,3368,5.4,3369,4.125,3370,1.952,3371,1.952,3372,1.952,3373,1.952,3374,1.952,3375,1.952,3376,1.952,3377,1.952,3378,1.952,3379,4.125,3380,1.952,3381,3.009,3382,3.009,3383,3.009,3384,1.952,3385,1.952,3386,3.009,3387,1.952,3388,1.952,3389,1.952,3390,1.952,3391,3.009,3392,4.905,3393,1.952,3394,3.009,3395,1.952,3396,3.009,3397,1.952,3398,1.952,3399,1.952,3400,3.009,3401,3.009,3402,3.009,3403,3.671,3404,1.952,3405,1.952,3406,1.952,3407,1.952,3408,1.952,3409,5.307,3410,3.009,3411,3.009,3412,1.952,3413,1.952,3414,1.952,3415,1.952,3416,1.952,3417,1.952,3418,3.009,3419,1.952,3420,1.952,3421,3.009,3422,1.952,3423,3.671,3424,1.952,3425,1.952,3426,1.952,3427,1.952,3428,1.952,3429,3.009,3430,1.952,3431,1.952,3432,4.125,3433,1.952,3434,1.952,3435,3.009,3436,3.009,3437,3.009,3438,1.952,3439,1.952,3440,1.952,3441,1.952,3442,3.671,3443,1.952,3444,1.952,3445,1.952,3446,1.952,3447,1.952,3448,1.952,3449,1.952,3450,1.952,3451,1.952,3452,1.952,3453,3.009,3454,1.952,3455,1.952,3456,1.952,3457,1.952,3458,1.952,3459,1.952,3460,1.952,3461,1.952,3462,3.009,3463,1.952,3464,1.952,3465,1.952,3466,1.952,3467,1.952,3468,1.952,3469,1.952,3470,4.125,3471,3.671,3472,1.952,3473,1.952,3474,1.952,3475,1.952,3476,1.952,3477,1.952,3478,1.952,3479,1.952,3480,1.952,3481,1.952,3482,3.009,3483,1.952,3484,1.952,3485,1.952,3486,3.671,3487,1.952,3488,1.952,3489,1.952,3490,3.009,3491,1.952,3492,1.952,3493,1.952,3494,1.952,3495,1.952,3496,1.952,3497,1.952,3498,1.952,3499,1.952,3500,3.009,3501,1.952,3502,1.952,3503,1.952,3504,1.952,3505,1.952,3506,1.952,3507,1.952,3508,1.952,3509,1.952,3510,1.952,3511,1.952,3512,1.952,3513,1.952,3514,1.952,3515,1.952,3516,1.952,3517,1.952,3518,4.905,3519,4.905,3520,3.009,3521,3.009,3522,1.952,3523,1.952,3524,3.009,3525,3.009,3526,3.009,3527,3.009,3528,3.009,3529,3.009,3530,3.009,3531,3.009,3532,3.009,3533,1.952,3534,1.952,3535,3.671,3536,1.952,3537,1.952,3538,1.952,3539,1.952,3540,1.952,3541,1.952,3542,3.009,3543,1.952,3544,1.952,3545,1.952,3546,1.952,3547,1.952,3548,1.952,3549,1.952,3550,1.952,3551,1.952,3552,4.456,3553,1.952,3554,1.952,3555,3.009,3556,1.952,3557,1.952,3558,3.009,3559,1.952,3560,1.952,3561,1.952,3562,3.671,3563,1.952,3564,1.952,3565,1.952,3566,1.952,3567,1.952,3568,1.952,3569,1.952,3570,3.009,3571,1.952,3572,1.952,3573,1.952,3574,1.952,3575,1.952,3576,1.952,3577,1.952,3578,1.952,3579,1.952,3580,1.952,3581,1.952,3582,1.952,3583,3.671,3584,1.952,3585,1.952,3586,1.952,3587,1.952,3588,1.952,3589,1.952,3590,1.952,3591,3.009,3592,1.952,3593,1.952,3594,1.952,3595,1.952,3596,1.952,3597,1.952,3598,1.952,3599,1.952,3600,1.952,3601,3.009,3602,1.952,3603,1.952,3604,3.009,3605,1.952,3606,1.952,3607,1.952,3608,1.952,3609,1.952,3610,1.952,3611,1.952,3612,1.952,3613,1.952,3614,1.952,3615,3.009,3616,1.952,3617,1.952,3618,3.009,3619,1.952,3620,1.952,3621,1.952,3622,1.952,3623,1.952,3624,1.952,3625,3.671,3626,1.952,3627,3.671,3628,1.952,3629,3.009,3630,3.009,3631,1.952,3632,1.787,3633,1.952,3634,1.952,3635,1.787,3636,1.952,3637,1.952,3638,1.952,3639,1.952,3640,1.952,3641,1.952,3642,3.009,3643,4.905,3644,1.952,3645,1.952,3646,1.952,3647,1.787,3648,4.707,3649,3.671,3650,4.905,3651,1.952,3652,1.952,3653,3.009,3654,1.952,3655,1.952,3656,1.952,3657,1.952,3658,1.952,3659,3.009,3660,1.952]],["title/interfaces/TimelineEventAggregation.html",[56,0.116,3064,2.245]],["body/interfaces/TimelineEventAggregation.html",[8,0.016,11,1.662,12,0.678,13,1.623,14,0.067,15,0.067,16,0.067,22,0.218,24,0.398,38,0.363,42,0.935,46,0.438,48,1.522,52,0.192,53,0.014,54,0.012,55,0.008,56,0.161,58,0.492,65,1.121,72,0.979,74,0.136,75,0.325,76,0.685,82,0.62,83,0.344,84,0.621,85,2.325,86,2.741,87,0.513,88,0.38,96,1.096,97,1.428,98,2.06,99,0.534,100,0.581,101,0.472,107,1.583,110,0.627,113,1.063,116,0.642,118,0.513,144,0.345,145,1.351,146,1.428,147,2.388,148,0.764,149,0.683,155,1.728,156,0.964,157,0.947,158,1.164,163,0.753,164,0.872,171,1.298,176,2.66,177,1.489,181,1.021,184,0.398,185,1.018,190,1.243,191,1.698,195,1.715,199,0.876,202,1.351,203,1.351,204,1.351,207,1.427,210,0.975,221,1.112,223,1.018,230,1.36,233,1.427,234,1.427,237,1.427,243,1.307,253,0.753,264,1.263,265,1.427,266,3.181,267,1.257,278,0.844,284,0.504,298,1.698,309,0.534,310,0.884,318,1.018,319,0.795,327,1.108,335,0.603,337,0.627,341,0.579,349,2.262,362,1.522,369,1.121,372,1.036,389,1.778,398,0.504,399,0.556,407,1.078,409,0.706,411,1.063,413,0.678,414,1.063,416,1.161,418,1.86,428,1.662,430,1.112,432,1.522,433,0.556,444,1.063,449,3.193,450,1.37,451,0.957,456,1.853,460,0.897,461,2.06,484,0.678,501,0.579,515,1.351,516,1.078,517,1.865,531,1.853,533,0.795,554,3.193,572,2.723,610,0.582,614,2.175,619,1.078,620,0.579,621,0.579,623,0.975,625,0.975,626,0.827,627,1.532,632,1.263,638,0.678,640,1.351,653,1.858,674,2.419,676,1.535,704,0.861,732,1.945,735,1.513,737,1.865,739,3.412,740,0.975,746,3.17,747,3.495,760,2.377,762,1.806,763,1.662,765,1.732,767,2.982,778,2.273,782,0.861,783,1.315,785,1.428,790,5.154,798,2.305,803,0.935,807,0.827,808,1.724,809,1.283,817,1.221,819,1.112,820,1.221,821,1.164,838,3.187,849,1.513,868,1.724,869,5.053,870,1.724,873,2.458,874,2.644,875,1.724,876,1.724,877,1.351,878,1.724,879,1.724,881,1.724,883,1.724,884,1.724,935,1.112,938,1.018,954,1.513,955,1.221,958,1.164,959,1.623,960,1.283,961,1.164,965,1.623,966,1.018,971,1.554,985,1.778,986,1.513,996,2.022,1006,1.164,1032,1.554,1034,2.617,1037,1.959,1039,1.221,1040,1.959,1045,1.063,1075,1.351,1088,1.61,1101,1.121,1113,2.157,1121,1.112,1130,2.027,1181,1.164,1193,1.063,1249,1.427,1250,1.724,1255,1.427,1300,1.698,1303,2.99,1325,2.321,1328,1.283,1330,1.249,1352,2.503,1400,1.351,1404,0.764,1413,1.724,1414,1.724,1416,1.283,1435,1.221,1460,1.724,1528,2.632,1619,1.61,1628,1.513,1635,1.724,1649,2.064,1650,0.897,1722,2.632,1730,1.427,1762,2.064,1789,1.427,1963,1.283,1964,1.283,1972,1.351,1979,1.063,1984,1.351,2005,0.975,2031,1.351,2059,1.221,2101,1.623,2109,1.554,2116,1.221,2206,1.063,2281,1.283,2284,2.935,2285,1.283,2286,1.283,2296,1.61,2304,1.427,2320,1.61,2324,1.513,2359,1.61,2439,2.632,2466,1.427,2571,2.644,2574,1.724,2618,2.064,2631,2.503,2633,1.351,2642,1.61,2649,1.351,2652,1.61,2765,1.61,2777,1.513,2778,1.427,2779,1.427,2814,1.427,2926,2.179,2964,1.724,2978,1.724,3040,1.351,3048,3.819,3049,2.31,3050,2.31,3051,4.698,3052,3.858,3053,2.841,3054,1.861,3055,2.503,3056,3.142,3057,2.179,3058,3.377,3059,3.858,3060,1.513,3061,2.841,3062,1.861,3063,3.56,3064,3.377,3065,3.858,3066,3.858,3067,2.632,3068,2.632,3069,1.513,3070,1.513,3071,1.513,3072,1.513,3073,1.861,3074,2.802,3075,1.861,3076,2.841,3077,1.861,3078,1.861,3079,1.513,3080,1.513,3081,1.513,3082,1.513,3083,1.513,3084,2.31,3085,1.513,3086,1.513,3087,1.861,3088,1.61,3089,1.351,3090,1.861,3091,1.861,3092,1.861,3093,1.861,3094,1.61,3095,1.861,3096,1.861,3097,3.858,3098,2.31,3099,1.861,3100,1.861,3101,1.861,3102,1.861,3103,1.861,3104,2.841,3105,1.861,3106,1.861,3107,1.861,3108,1.513,3109,1.861,3110,1.861,3111,1.513,3112,2.841,3113,1.861,3114,1.861,3115,4.155,3116,1.861,3117,1.513,3118,1.861,3119,2.841,3120,1.513,3121,1.861,3122,1.861,3123,1.861,3124,1.861,3125,1.861,3126,2.841,3127,1.861,3128,1.861,3129,1.861,3130,1.861,3131,1.861,3132,1.861,3133,1.861,3134,1.861,3135,2.841,3136,2.31,3137,1.861,3138,1.861,3139,1.513,3140,1.861,3141,1.861,3142,1.861,3143,1.861,3144,1.861,3145,1.861,3146,1.861,3147,1.861,3148,2.841,3149,1.861,3150,1.861,3151,1.861,3152,1.861,3153,1.861,3154,1.861,3155,1.861,3156,1.861,3157,1.861,3158,1.861,3159,1.513,3160,2.841,3161,1.861,3162,3.447,3163,2.841,3164,4.155,3165,1.861,3166,2.841,3167,5.182,3168,1.861,3169,1.861,3170,1.861,3171,2.841,3172,3.858,3173,1.861,3174,2.841,3175,2.841,3176,1.861,3177,2.841,3178,1.861,3179,3.447,3180,3.447,3181,2.841,3182,1.513,3183,1.861,3184,1.861,3185,1.861,3186,1.861,3187,1.861,3188,1.861,3189,1.861,3190,1.861,3191,1.861,3192,1.861,3193,2.841,3194,2.841,3195,1.861,3196,2.841,3197,2.841,3198,1.861,3199,1.861,3200,1.861,3201,1.861,3202,1.861,3203,1.861,3204,2.841,3205,1.861,3206,4.38,3207,2.802,3208,3.858,3209,1.861,3210,2.841,3211,4.38,3212,1.861,3213,1.861,3214,1.861,3215,1.861,3216,1.861,3217,1.861,3218,2.841,3219,1.861,3220,1.861,3221,1.861,3222,1.861,3223,1.861,3224,1.861,3225,1.861,3226,1.861,3227,1.513,3228,1.861,3229,1.861,3230,3.447,3231,1.861,3232,1.861,3233,1.861,3234,1.861,3235,1.861,3236,1.861,3237,1.861,3238,1.861,3239,2.841,3240,1.861,3241,1.861,3242,1.861,3243,1.861,3244,1.861,3245,1.861,3246,1.513,3247,1.861,3248,1.861,3249,1.861,3250,1.861,3251,1.861,3252,1.861,3253,1.861,3254,1.861,3255,1.861,3256,2.841,3257,1.861,3258,1.861,3259,1.861,3260,1.861,3261,1.861,3262,1.861,3263,1.861,3264,1.861,3265,1.861,3266,1.861,3267,1.861,3268,1.861,3269,1.861,3270,1.861,3271,1.861,3272,1.861,3273,1.861,3274,1.861,3275,3.447,3276,1.861,3277,1.861,3278,1.861,3279,3.018,3280,1.861,3281,1.861,3282,1.861,3283,1.861,3284,1.861,3285,1.861,3286,1.861,3287,1.861,3288,1.861,3289,1.861,3290,1.861,3291,1.861,3292,1.861,3293,1.861,3294,1.513,3295,1.861,3296,1.861,3297,1.513,3298,1.861,3299,4.155,3300,1.861,3301,1.861,3302,1.513,3303,1.861,3304,1.861,3305,1.861,3306,1.861,3307,1.861,3308,1.861,3309,1.861,3310,1.724,3311,1.861,3312,1.861,3313,1.861,3314,1.861,3315,1.861,3316,1.861,3317,1.861,3318,1.861,3319,1.861,3320,1.861,3321,1.861,3322,2.841,3323,4.698,3324,3.858,3325,2.841,3326,2.841,3327,2.841,3328,2.841,3329,1.861,3330,1.861,3331,1.861,3332,1.861,3333,1.861,3334,1.861,3335,2.841,3336,1.861,3337,1.861,3338,1.861,3339,1.861,3340,2.841,3341,1.861,3342,2.458,3343,1.861]],["title/interfaces/TimelineEventType.html",[56,0.116,3057,2.119]],["body/interfaces/TimelineEventType.html",[8,0.016,14,0.152,15,0.152,16,0.152,22,0.208,24,0.896,46,0.42,52,0.208,53,0.032,54,0.013,55,0.013,56,0.175,58,1.11,74,0.307,75,0.565,76,0.877,83,0.397,84,0.6,144,0.553,158,2.624,159,1.358,164,0.744,389,3.09,531,1.654,570,2.396,610,0.835,613,2.022,614,2.559,620,1.305,621,1.305,627,1.864,653,1.888,674,2.107,689,2.506,731,2.107,732,1.59,778,2.294,798,2.951,904,3.885,1102,3.046,1172,4.579,1179,4.193,1181,3.285,1182,4.579,1185,3.628,1249,3.216,1257,4.193,1266,4.579,1400,3.046,2569,3.628,3057,4.027,3088,3.628,3089,3.587,3094,3.628,3279,3.587,3342,4.273,3661,4.579,3662,4.579,3663,5.096,3664,5.096,3665,5.096,3666,5.096,3667,5.096,3668,5.096,3669,5.096,3670,5.096]],["title/components/TimelineLegendComponent.html",[610,0.467,731,1.388]],["body/components/TimelineLegendComponent.html",[7,1.864,8,0.016,9,1.787,10,1.787,14,0.177,15,0.129,16,0.129,17,1.715,22,0.188,24,0.76,31,1.864,46,0.513,48,2.083,52,0.188,53,0.027,54,0.013,55,0.012,56,0.149,66,1.403,74,0.26,83,0.394,84,0.407,89,0.631,90,0.694,117,0.793,144,0.539,158,2.796,159,1.582,163,0.872,164,0.793,383,1.925,389,2.225,531,1.927,570,2.791,610,0.825,611,1.864,612,2.553,613,2.154,614,2.372,615,1.787,616,2.225,620,1.815,621,1.813,627,2.171,644,2.67,653,1.815,674,2.455,689,3.062,690,2.068,691,2.444,692,2.225,693,3.206,694,2.225,698,2.796,699,2.796,700,1.864,701,2.225,702,1.945,703,2.796,704,1.646,705,3.206,706,1.787,707,1.787,708,1.945,709,1.864,710,1.715,711,1.864,712,2.225,713,2.225,714,1.787,715,1.447,716,3.057,717,2.225,718,1.945,719,2.032,720,1.864,721,2.225,722,1.864,723,2.444,724,2.225,725,1.864,726,1.864,727,2.225,728,1.715,729,1.864,730,1.864,731,2.575,732,1.853,733,2.225,734,2.225,778,2.672,798,2.919,904,4.525,1102,3.548,1172,5.334,1179,4.885,1181,3.491,1182,5.334,1185,4.227,1249,2.728,1257,4.885,1266,5.334,1347,2.891,1400,3.548,2569,4.227,3057,3.747,3088,4.227,3089,3.245,3094,3.077,3279,3.913,3342,4.662,3661,5.883,3662,3.884,3663,5.936,3664,5.936,3665,5.936,3666,5.936,3667,5.936,3668,5.936,3669,5.936,3670,5.936,3671,4.987,3672,4.987,3673,4.987,3674,4.987,3675,4.987]],["title/interfaces/TimelineRecords.html",[56,0.116,3063,2.245]],["body/interfaces/TimelineRecords.html",[8,0.016,11,1.661,12,0.678,13,1.622,14,0.067,15,0.067,16,0.067,22,0.218,24,0.397,38,0.363,42,0.934,46,0.438,48,1.521,52,0.192,53,0.014,54,0.012,55,0.008,56,0.161,58,0.492,65,1.12,72,1.112,74,0.136,75,0.325,76,0.777,82,0.619,83,0.352,84,0.621,85,2.313,86,2.74,87,0.513,88,0.38,96,1.095,97,1.427,98,2.058,99,0.534,100,0.58,101,0.472,107,1.583,110,0.626,113,1.062,116,0.641,118,0.513,144,0.345,145,1.35,146,1.427,147,2.387,148,0.763,149,0.683,155,1.727,156,0.964,157,0.947,158,1.163,163,0.752,164,0.872,171,1.298,176,2.659,177,1.488,181,1.02,184,0.397,185,1.017,190,1.243,191,1.697,195,1.714,199,0.876,202,1.35,203,1.35,204,1.35,207,1.426,210,0.974,221,1.111,223,1.017,230,1.359,233,1.426,234,1.426,237,1.426,243,1.306,253,0.752,264,1.262,265,1.426,266,3.18,267,1.596,278,0.844,284,0.504,298,1.697,309,0.534,310,0.884,318,1.017,319,0.794,327,1.107,335,0.602,337,0.626,341,0.579,349,2.261,362,1.521,369,1.12,372,1.035,389,1.777,398,0.504,399,0.556,407,1.077,409,0.705,411,1.062,413,0.678,414,1.062,416,1.475,418,1.859,428,1.661,430,1.111,432,1.521,433,0.556,444,1.062,449,3.191,450,1.369,451,0.957,456,1.853,460,0.896,461,2.058,484,0.678,501,0.579,515,1.35,516,1.077,517,1.863,531,1.853,533,0.794,554,3.191,572,2.722,610,0.582,614,2.174,619,1.077,620,0.579,621,0.579,623,0.974,625,0.974,626,0.826,627,1.531,632,1.262,638,0.678,640,1.35,653,1.858,674,2.419,676,1.535,704,0.86,732,1.944,735,1.511,737,1.863,739,3.412,740,0.974,746,3.169,747,3.493,760,2.375,762,1.805,763,1.661,765,1.731,767,2.981,778,2.272,782,0.86,783,1.314,785,1.427,790,5.154,798,2.304,803,0.934,807,0.826,808,1.722,809,1.282,817,1.22,819,1.111,820,1.22,821,1.163,838,3.186,849,1.511,868,1.722,869,5.052,870,1.722,873,2.457,874,2.642,875,1.722,876,1.722,877,1.35,878,1.722,879,1.722,881,1.722,883,1.722,884,1.722,935,1.111,938,1.017,954,1.511,955,1.22,958,1.163,959,1.622,960,1.282,961,1.163,965,1.622,966,1.017,971,1.553,985,1.777,986,1.511,996,2.021,1006,1.163,1032,1.553,1034,2.616,1037,1.958,1039,1.22,1040,1.958,1045,1.062,1075,1.35,1088,1.609,1101,1.12,1113,2.155,1121,1.111,1130,2.027,1181,1.163,1193,1.062,1249,1.426,1250,1.722,1255,1.426,1300,1.697,1303,2.989,1325,2.321,1328,1.282,1330,1.249,1352,2.502,1400,1.35,1404,0.763,1413,1.722,1414,1.722,1416,1.282,1435,1.22,1460,1.722,1528,2.63,1619,1.609,1628,1.511,1635,1.722,1649,2.062,1650,0.896,1722,2.63,1730,1.426,1762,2.062,1789,1.426,1963,1.282,1964,1.282,1972,1.35,1979,1.062,1984,1.35,2005,0.974,2031,1.35,2059,1.22,2101,1.622,2109,1.553,2116,1.22,2206,1.062,2281,1.282,2284,2.934,2285,1.282,2286,1.282,2296,1.609,2304,1.426,2320,1.609,2324,1.511,2359,1.609,2439,2.63,2466,1.426,2571,2.642,2574,1.722,2618,2.062,2631,2.502,2633,1.35,2642,1.609,2649,1.35,2652,1.609,2765,1.609,2777,1.511,2778,1.426,2779,1.426,2814,1.426,2926,2.178,2964,1.722,2978,1.722,3040,1.35,3048,3.818,3049,2.308,3050,2.308,3051,4.696,3052,3.856,3053,2.839,3054,1.859,3055,2.502,3056,3.141,3057,2.178,3058,3.376,3059,3.856,3060,1.511,3061,2.839,3062,1.859,3063,3.702,3064,3.134,3065,1.859,3066,1.859,3067,2.63,3068,2.63,3069,1.511,3070,1.511,3071,1.511,3072,1.511,3073,1.859,3074,2.8,3075,1.859,3076,2.839,3077,1.859,3078,1.859,3079,1.511,3080,1.511,3081,1.511,3082,1.511,3083,1.511,3084,2.308,3085,1.511,3086,1.511,3087,1.859,3088,1.609,3089,1.35,3090,1.859,3091,1.859,3092,1.859,3093,1.859,3094,1.609,3095,1.859,3096,1.859,3097,3.856,3098,2.308,3099,1.859,3100,1.859,3101,1.859,3102,1.859,3103,1.859,3104,2.839,3105,1.859,3106,1.859,3107,1.859,3108,1.511,3109,1.859,3110,1.859,3111,1.511,3112,2.839,3113,1.859,3114,1.859,3115,4.153,3116,1.859,3117,1.511,3118,1.859,3119,2.839,3120,1.511,3121,1.859,3122,1.859,3123,1.859,3124,1.859,3125,1.859,3126,2.839,3127,1.859,3128,1.859,3129,1.859,3130,1.859,3131,1.859,3132,1.859,3133,1.859,3134,1.859,3135,2.839,3136,2.308,3137,1.859,3138,1.859,3139,1.511,3140,1.859,3141,1.859,3142,1.859,3143,1.859,3144,1.859,3145,1.859,3146,1.859,3147,1.859,3148,2.839,3149,1.859,3150,1.859,3151,1.859,3152,1.859,3153,1.859,3154,1.859,3155,1.859,3156,1.859,3157,1.859,3158,1.859,3159,1.511,3160,2.839,3161,1.859,3162,3.445,3163,2.839,3164,4.153,3165,1.859,3166,2.839,3167,5.181,3168,1.859,3169,1.859,3170,1.859,3171,2.839,3172,3.856,3173,1.859,3174,2.839,3175,2.839,3176,1.859,3177,2.839,3178,1.859,3179,3.445,3180,3.445,3181,2.839,3182,1.511,3183,1.859,3184,1.859,3185,1.859,3186,1.859,3187,1.859,3188,1.859,3189,1.859,3190,1.859,3191,1.859,3192,1.859,3193,2.839,3194,2.839,3195,1.859,3196,2.839,3197,2.839,3198,1.859,3199,1.859,3200,1.859,3201,1.859,3202,1.859,3203,1.859,3204,2.839,3205,1.859,3206,4.378,3207,2.8,3208,3.856,3209,1.859,3210,2.839,3211,4.378,3212,1.859,3213,1.859,3214,1.859,3215,1.859,3216,1.859,3217,1.859,3218,2.839,3219,1.859,3220,1.859,3221,1.859,3222,1.859,3223,1.859,3224,1.859,3225,1.859,3226,1.859,3227,1.511,3228,1.859,3229,1.859,3230,3.445,3231,1.859,3232,1.859,3233,1.859,3234,1.859,3235,1.859,3236,1.859,3237,1.859,3238,1.859,3239,2.839,3240,1.859,3241,1.859,3242,1.859,3243,1.859,3244,1.859,3245,1.859,3246,1.511,3247,1.859,3248,1.859,3249,1.859,3250,1.859,3251,1.859,3252,1.859,3253,1.859,3254,1.859,3255,1.859,3256,2.839,3257,1.859,3258,1.859,3259,1.859,3260,1.859,3261,1.859,3262,1.859,3263,1.859,3264,1.859,3265,1.859,3266,1.859,3267,1.859,3268,1.859,3269,1.859,3270,1.859,3271,1.859,3272,1.859,3273,1.859,3274,1.859,3275,3.445,3276,1.859,3277,1.859,3278,1.859,3279,3.016,3280,1.859,3281,1.859,3282,1.859,3283,1.859,3284,1.859,3285,1.859,3286,1.859,3287,1.859,3288,1.859,3289,1.859,3290,1.859,3291,1.859,3292,1.859,3293,1.859,3294,1.511,3295,1.859,3296,1.859,3297,1.511,3298,1.859,3299,4.153,3300,1.859,3301,1.859,3302,1.511,3303,1.859,3304,1.859,3305,1.859,3306,1.859,3307,1.859,3308,1.859,3309,1.859,3310,1.722,3311,1.859,3312,1.859,3313,1.859,3314,1.859,3315,1.859,3316,1.859,3317,1.859,3318,1.859,3319,1.859,3320,1.859,3321,1.859,3322,2.839,3323,4.696,3324,3.856,3325,2.839,3326,2.839,3327,2.839,3328,2.839,3329,1.859,3330,1.859,3331,1.859,3332,1.859,3333,1.859,3334,1.859,3335,2.839,3336,1.859,3337,1.859,3338,1.859,3339,1.859,3340,2.839,3341,1.859,3342,2.457,3343,1.859]],["title/interfaces/TimelineSeries.html",[56,0.116,798,1.651]],["body/interfaces/TimelineSeries.html",[8,0.016,11,2.169,12,0.655,14,0.065,15,0.065,16,0.065,22,0.172,24,0.384,34,0.63,46,0.509,52,0.16,53,0.014,54,0.007,55,0.007,56,0.141,58,0.475,74,0.202,75,0.316,76,0.672,82,0.746,83,0.356,84,0.514,87,0.495,88,0.367,116,0.865,117,0.319,133,0.709,134,1.378,140,0.709,144,0.379,149,0.559,156,0.864,157,0.878,159,1.504,164,0.971,169,0.982,170,0.655,171,1.083,181,0.475,184,0.384,186,1.894,190,0.892,191,2.263,194,1.378,199,0.914,210,0.941,219,0.866,221,1.073,229,0.982,230,1.091,243,1.049,251,1.46,253,0.739,267,1.229,270,1.239,278,0.869,284,0.672,298,1.073,308,1.28,310,1.049,318,1.844,330,0.941,343,1.694,362,1.091,379,1.008,383,0.655,389,2.37,398,0.491,415,1.073,430,1.073,443,1.46,450,1.333,451,0.605,456,1.33,460,0.866,474,1.026,483,1.664,484,0.655,501,0.559,516,0.681,531,1.775,533,1.617,553,2.765,569,2.248,610,0.467,613,0.866,614,0.831,615,1.694,619,1.049,620,0.559,621,0.559,623,1.449,625,1.449,626,1.499,627,0.798,632,0.798,633,1.46,638,0.655,643,1.073,653,1.802,662,0.982,663,1.239,671,0.903,674,2.525,676,1.668,690,0.831,691,1.513,710,0.866,730,0.941,732,0.681,739,2.776,740,0.941,746,3.278,747,2.121,750,1.179,778,2.661,782,0.831,783,1.28,785,2.055,798,2.581,805,1.73,814,3.372,838,1.378,874,3.137,900,1.664,907,2.248,911,2.248,912,2.248,914,1.46,915,1.46,916,1.46,917,1.46,918,1.46,919,2.248,921,4.32,922,1.46,923,3.776,924,2.248,927,3.078,935,1.073,938,0.982,944,2.82,946,1.46,955,1.179,958,1.124,959,1.927,960,1.239,961,1.73,965,1.58,966,0.982,968,1.46,971,2.071,976,1.46,978,3.078,979,1.073,983,3.374,984,1.305,985,1.73,1005,1.664,1024,1.554,1028,3.078,1032,2.071,1033,1.907,1037,1.239,1040,1.907,1042,2.468,1043,1.46,1044,1.46,1045,2.337,1046,1.664,1060,3.078,1062,1.46,1063,2.741,1064,2.248,1065,1.46,1066,1.46,1068,1.46,1069,1.46,1070,1.46,1074,1.179,1075,1.305,1076,3.078,1078,1.664,1079,1.378,1080,1.664,1081,1.46,1082,1.46,1083,1.46,1084,1.46,1085,1.46,1093,1.664,1101,1.33,1102,2.97,1105,1.664,1109,1.664,1110,1.554,1113,2.816,1117,2.248,1120,1.46,1121,1.073,1122,2.121,1123,1.46,1124,1.46,1125,2.248,1126,2.248,1127,2.248,1128,1.46,1129,1.46,1130,2.252,1131,1.46,1132,1.46,1155,1.46,1163,1.239,1181,1.124,1184,2.248,1185,2.918,1253,3.787,1287,1.694,1300,1.073,1303,2.213,1310,2.586,1314,2.121,1328,1.239,1330,0.582,1345,1.46,1382,1.305,1403,0.982,1406,1.796,1416,1.239,1421,1.664,1425,1.796,1431,4.495,1562,1.073,1610,2.393,1637,1.378,1682,1.554,1689,1.664,1729,2.393,1730,1.378,1741,2.765,1747,1.305,1755,1.378,1792,1.46,1830,1.239,1842,1.378,1875,1.46,1926,1.305,1928,2.248,1965,1.378,1979,1.58,2003,1.378,2055,2.562,2057,1.073,2058,1.46,2059,1.815,2101,1.026,2105,1.073,2109,0.982,2128,1.073,2131,0.982,2202,1.073,2206,1.026,2283,1.664,2284,2.015,2313,1.664,2353,1.664,2411,2.765,2464,2.393,2569,1.554,2618,2.008,2631,2.008,2633,1.305,2636,3.124,2638,2.765,2640,3.509,2641,2.562,2645,3.124,2649,1.305,2653,1.664,2654,1.664,2655,1.664,2656,4.001,2659,1.664,2664,1.664,2665,1.664,2666,2.562,2667,1.664,2668,1.664,2669,3.509,2671,1.664,2673,1.664,2674,1.664,2675,1.664,2676,1.664,2677,1.664,2678,1.664,2679,1.664,2680,1.664,2681,1.664,2682,1.664,2683,3.789,2685,1.664,2710,1.664,2727,1.796,2733,1.664,2734,2.562,2735,1.664,2738,1.664,2739,1.664,2740,1.664,2742,1.664,2743,1.664,2744,3.509,2745,1.664,2746,1.664,2747,1.664,2748,1.664,2749,1.664,2750,1.664,2751,1.664,2752,1.664,2754,1.664,2756,1.664,2757,1.664,2758,1.664,2759,3.124,2760,2.562,2761,1.664,2775,3.124,2778,1.378,2779,1.378,2783,2.765,2784,1.796,2785,3.372,2786,1.796,2787,1.796,2790,1.796,2802,1.796,2804,1.796,2805,2.765,2810,2.765,2811,1.796,2812,4.089,2814,2.121,2820,1.796,2926,3.137,3030,1.796,3040,1.305,3049,3.078,3050,3.078,3055,2.75,3056,3.286,3060,2.248,3069,1.46,3070,1.46,3071,1.46,3072,1.46,3074,1.46,3079,1.46,3080,1.46,3081,1.46,3082,1.46,3083,1.46,3084,1.46,3085,1.46,3086,1.46,3089,2.449,3098,1.46,3108,3.078,3111,1.46,3117,1.46,3120,1.46,3136,1.46,3139,1.46,3159,2.248,3182,1.46,3207,1.46,3227,1.46,3246,1.46,3279,1.305,3294,1.46,3297,1.46,3302,2.741,3344,1.796,3345,3.02,3346,1.796,3347,2.765,3348,1.961,3349,1.961,3350,1.961,3351,1.961,3352,1.961,3353,1.961,3354,1.961,3355,1.961,3356,3.02,3357,3.02,3358,3.02,3359,3.02,3360,1.961,3361,1.961,3362,1.961,3363,1.961,3364,1.961,3365,3.682,3366,1.961,3367,1.961,3368,5.407,3369,4.136,3370,1.961,3371,1.961,3372,1.961,3373,1.961,3374,1.961,3375,1.961,3376,1.961,3377,1.961,3378,1.961,3379,4.136,3380,1.961,3381,3.02,3382,3.02,3383,3.02,3384,1.961,3385,1.961,3386,3.02,3387,1.961,3388,1.961,3389,1.961,3390,1.961,3391,3.02,3392,4.914,3393,1.961,3394,3.02,3395,1.961,3396,3.02,3397,1.961,3398,1.961,3399,1.961,3400,3.02,3401,3.02,3402,3.02,3403,3.682,3404,1.961,3405,1.961,3406,1.961,3407,1.961,3408,1.961,3409,5.314,3410,3.02,3411,3.02,3412,1.961,3413,1.961,3414,1.961,3415,1.961,3416,1.961,3417,1.961,3418,3.02,3419,1.961,3420,1.961,3421,3.02,3422,1.961,3423,3.682,3424,1.961,3425,1.961,3426,1.961,3427,1.961,3428,1.961,3429,3.02,3430,1.961,3431,1.961,3432,4.136,3433,1.961,3434,1.961,3435,3.02,3436,3.02,3437,3.02,3438,1.961,3439,1.961,3440,1.961,3441,1.961,3442,3.682,3443,1.961,3444,1.961,3445,1.961,3446,1.961,3447,1.961,3448,1.961,3449,1.961,3450,1.961,3451,1.961,3452,1.961,3453,3.02,3454,1.961,3455,1.961,3456,1.961,3457,1.961,3458,1.961,3459,1.961,3460,1.961,3461,1.961,3462,3.02,3463,1.961,3464,1.961,3465,1.961,3466,1.961,3467,1.961,3468,1.961,3469,1.961,3470,4.136,3471,3.682,3472,1.961,3473,1.961,3474,1.961,3475,1.961,3476,1.961,3477,1.961,3478,1.961,3479,1.961,3480,1.961,3481,1.961,3482,3.02,3483,1.961,3484,1.961,3485,1.961,3486,3.682,3487,1.961,3488,1.961,3489,1.961,3490,3.02,3491,1.961,3492,1.961,3493,1.961,3494,1.961,3495,1.961,3496,1.961,3497,1.961,3498,1.961,3499,1.961,3500,3.02,3501,1.961,3502,1.961,3503,1.961,3504,1.961,3505,1.961,3506,1.961,3507,1.961,3508,1.961,3509,1.961,3510,1.961,3511,1.961,3512,1.961,3513,1.961,3514,1.961,3515,1.961,3516,1.961,3517,1.961,3518,4.914,3519,4.914,3520,3.02,3521,3.02,3522,1.961,3523,1.961,3524,3.02,3525,3.02,3526,3.02,3527,3.02,3528,3.02,3529,3.02,3530,3.02,3531,3.02,3532,3.02,3533,1.961,3534,1.961,3535,3.682,3536,1.961,3537,1.961,3538,1.961,3539,1.961,3540,1.961,3541,1.961,3542,3.02,3543,1.961,3544,1.961,3545,1.961,3546,1.961,3547,1.961,3548,1.961,3549,1.961,3550,1.961,3551,1.961,3552,4.466,3553,1.961,3554,1.961,3555,3.02,3556,1.961,3557,1.961,3558,3.02,3559,1.961,3560,1.961,3561,1.961,3562,3.682,3563,1.961,3564,1.961,3565,1.961,3566,1.961,3567,1.961,3568,1.961,3569,1.961,3570,3.02,3571,1.961,3572,1.961,3573,1.961,3574,1.961,3575,1.961,3576,1.961,3577,1.961,3578,1.961,3579,1.961,3580,1.961,3581,1.961,3582,1.961,3583,3.682,3584,1.961,3585,1.961,3586,1.961,3587,1.961,3588,1.961,3589,1.961,3590,1.961,3591,3.02,3592,1.961,3593,1.961,3594,1.961,3595,1.961,3596,1.961,3597,1.961,3598,1.961,3599,1.961,3600,1.961,3601,3.02,3602,1.961,3603,1.961,3604,3.02,3605,1.961,3606,1.961,3607,1.961,3608,1.961,3609,1.961,3610,1.961,3611,1.961,3612,1.961,3613,1.961,3614,1.961,3615,3.02,3616,1.961,3617,1.961,3618,3.02,3619,1.961,3620,1.961,3621,1.961,3622,1.961,3623,1.961,3624,1.961,3625,3.682,3626,1.961,3627,3.682,3628,1.961,3629,3.02,3630,3.02,3631,1.961,3632,1.796,3633,1.961,3634,1.961,3635,1.796,3636,1.961,3637,1.961,3638,1.961,3639,1.961,3640,1.961,3641,1.961,3642,3.02,3643,4.914,3644,1.961,3645,1.961,3646,1.961,3647,1.796,3648,4.716,3649,3.682,3650,4.914,3651,1.961,3652,1.961,3653,3.02,3654,1.961,3655,1.961,3656,1.961,3657,1.961,3658,1.961,3659,3.02,3660,1.961]],["title/interfaces/VisEvent.html",[56,0.116,3676,3.017]],["body/interfaces/VisEvent.html",[8,0.016,11,1.186,14,0.126,15,0.089,16,0.089,22,0.23,24,0.526,29,2.128,34,0.862,38,0.48,42,1.236,46,0.499,48,1.377,52,0.171,53,0.019,54,0.013,55,0.009,56,0.146,58,0.651,61,1.186,63,2.535,74,0.18,75,0.464,81,2.662,82,0.561,83,0.341,84,0.554,87,0.678,88,0.503,89,0.973,90,1.055,92,1.547,93,1.377,94,1.617,95,1.093,96,1.251,99,0.706,100,0.713,101,0.624,104,1.272,107,1.812,110,0.829,116,0.978,117,0.437,124,1.47,132,1.786,140,1.377,142,1.678,143,2.125,144,0.406,145,1.786,146,1.754,149,0.757,150,1.888,157,0.842,158,1.539,162,2.218,163,0.792,164,0.827,167,1.345,170,0.897,171,0.946,175,1.614,180,2.279,182,1.093,184,0.526,185,1.112,186,1.61,191,2.085,192,1.768,195,1.093,199,0.853,210,1.289,229,1.345,230,1.6,243,0.933,253,0.681,278,0.416,284,0.619,290,1.377,295,1.886,296,1.551,307,1.324,308,1.878,309,1.165,310,0.765,327,1.508,328,1.405,335,1.314,336,1.754,337,1.367,341,1.374,343,1.236,352,1.272,359,3.02,362,1.839,369,0.97,379,1.272,443,1.999,447,1.786,448,2.831,451,0.829,463,2.677,468,1.786,472,1.829,474,1.405,484,0.897,501,0.765,512,1.696,610,0.685,613,1.186,619,1.324,620,0.765,621,0.765,632,1.093,635,2.279,636,3.233,638,0.897,640,2.535,653,1.632,664,2.897,671,1.236,674,2.218,676,1.678,677,2.459,715,1.13,726,1.289,737,2.662,739,1.47,745,4.056,750,1.614,761,4.93,762,2.443,763,2.248,765,2.343,778,2.724,782,1.138,783,1.615,792,2.989,794,4.241,803,1.236,805,2.184,817,1.614,819,1.47,820,1.614,821,1.539,829,2.989,830,2.989,959,2.318,968,1.999,971,2.219,996,2.443,1032,2.219,1034,2.085,1113,1.539,1155,1.999,1171,5.365,1255,1.886,1287,2.343,1300,2.085,1303,2.29,1329,2.279,1353,4.241,1354,2.989,1355,4.479,1403,1.345,1435,2.29,1448,2.989,1471,4.93,1536,2.989,1593,2.989,1649,1.786,1650,1.683,1663,4.241,1666,4.241,1689,2.279,1738,4.821,1747,2.535,1764,1.999,1830,1.696,1842,1.886,1866,2.279,1905,2.279,1938,2.459,1957,4.056,1963,2.407,1978,2.128,2000,2.459,2027,2.128,2089,3.811,2102,2.664,2103,1.886,2104,2.677,2105,1.47,2106,2.535,2122,1.886,2127,1.886,2131,1.345,2132,2.946,2134,1.886,2281,1.696,2284,1.47,2285,1.696,2286,1.696,2466,3.111,2486,2.989,2563,4.93,2571,1.886,2943,3.49,3040,2.946,3346,2.459,3347,4.056,3632,2.459,3635,4.056,3647,2.459,3676,4.43,3677,2.686,3678,4.894,3679,4.241,3680,2.989,3681,3.449,3682,3.449,3683,3.449,3684,3.449,3685,3.449,3686,4.894,3687,4.894,3688,3.449,3689,4.894,3690,4.894,3691,3.449,3692,3.449,3693,3.449,3694,3.449,3695,3.449,3696,3.449,3697,3.449,3698,3.449,3699,6.984,3700,3.449,3701,3.449,3702,3.449,3703,3.449,3704,3.449,3705,6.537,3706,3.449,3707,3.449,3708,3.449,3709,3.449,3710,5.689,3711,6.191,3712,5.689,3713,3.449,3714,3.449,3715,3.449,3716,3.449,3717,4.894,3718,4.894,3719,3.449,3720,4.894,3721,3.449,3722,3.449,3723,3.449,3724,3.449,3725,3.449,3726,3.449,3727,3.449,3728,3.449,3729,3.449,3730,3.449,3731,3.449,3732,3.449,3733,3.449,3734,4.894,3735,4.894,3736,3.449,3737,6.191,3738,3.449,3739,3.449,3740,2.989,3741,3.449,3742,3.449,3743,3.449,3744,3.449,3745,3.449,3746,3.449,3747,4.894,3748,4.894,3749,3.449,3750,3.449,3751,3.449,3752,3.449,3753,3.449,3754,4.894,3755,3.449,3756,3.449,3757,3.449,3758,3.449,3759,3.449,3760,3.449,3761,3.449,3762,3.449,3763,3.449,3764,3.449,3765,3.449,3766,3.449,3767,3.449,3768,3.449,3769,3.449,3770,4.894,3771,5.689,3772,3.449,3773,3.449,3774,3.449,3775,3.449,3776,3.449,3777,3.449,3778,3.449,3779,3.449,3780,3.449,3781,3.449,3782,3.449,3783,3.449,3784,3.449,3785,3.449,3786,3.449,3787,3.449,3788,3.449,3789,3.449,3790,3.449,3791,3.449,3792,3.449,3793,3.449,3794,3.449,3795,3.449,3796,3.449,3797,3.449,3798,3.449,3799,3.449,3800,3.449,3801,3.449,3802,3.449,3803,3.449,3804,3.449,3805,3.449,3806,3.449,3807,3.449,3808,3.449,3809,3.449,3810,3.449,3811,3.449,3812,4.894,3813,3.449,3814,4.894,3815,3.449,3816,4.894,3817,3.449,3818,4.894,3819,3.449,3820,4.894,3821,3.449,3822,3.449,3823,3.449,3824,6.191,3825,6.191,3826,6.191,3827,3.449,3828,6.537,3829,6.791,3830,3.449,3831,4.894,3832,3.449,3833,3.449,3834,3.449,3835,3.449,3836,3.449,3837,3.449,3838,3.449,3839,3.449,3840,3.449,3841,3.449,3842,3.449,3843,6.537,3844,3.449,3845,3.449,3846,3.449,3847,3.449,3848,3.449,3849,6.537,3850,3.449,3851,3.449,3852,3.449,3853,3.449,3854,3.449]],["title/modules/VisTimelineModule.html",[0,1.905,3855,2.762]],["body/modules/VisTimelineModule.html",[2,2.719,3,3.155,8,0.016,11,2.431,12,1.584,13,2.482,14,0.157,15,0.157,16,0.157,20,3.662,21,3.662,22,0.235,23,3.662,24,0.928,25,3.662,26,3.155,33,3.662,34,1.523,50,3.155,52,0.183,53,0.034,54,0.013,55,0.013,715,1.407,729,3.05,730,2.277,732,1.912,2102,2.881,2862,6.127,2919,4.345,3855,5.695,3856,5.28,3857,5.28,3858,5.28,3859,6.093,3860,6.093]],["title/coverage.html",[3861,4.599]],["body/coverage.html",[7,1.551,8,0.016,9,1.488,10,1.488,14,0.162,16,0.107,17,2.566,18,4.331,31,2.078,53,0.042,54,0.011,55,0.011,56,0.243,57,2.562,59,4.049,60,2.637,72,1.438,73,2.406,83,0.217,89,0.794,90,0.972,91,1.215,92,1.038,93,1.168,102,1.619,109,2.562,149,0.405,178,2.562,185,0.661,210,1.551,278,0.99,290,1.168,426,3.233,427,3.598,428,1.912,434,1.769,436,1.427,437,1.692,480,3.598,610,0.968,611,1.551,617,3.598,618,4.472,635,4.426,700,1.551,702,1.619,704,1.37,706,1.488,707,1.488,708,1.619,709,1.551,710,1.427,711,1.551,714,1.488,715,1.613,718,1.619,720,1.551,722,1.551,725,1.551,726,1.551,728,1.427,729,1.551,731,1.488,735,4.168,736,3.598,798,1.769,906,4.331,952,2.96,959,3.279,960,2.735,961,1.853,1107,3.233,1139,3.233,1196,4.331,1198,2.96,1252,3.598,1280,3.233,1284,2.406,1285,4.472,1294,2.406,1347,2.406,1348,4.82,1378,3.233,1748,3.598,1753,2.562,1754,4.049,1760,1.943,1931,3.233,1932,3.233,1961,2.743,1962,4.168,1966,2.562,1981,2.743,2053,2.96,2066,2.96,2097,4.158,2098,4.017,2102,2.266,2265,2.96,2266,4.331,2267,3.966,2268,4.331,2407,3.598,2408,3.598,2476,4.331,2477,4.331,2503,3.598,2531,3.598,2567,3.233,2612,3.233,2613,5.217,2614,4.82,2776,3.233,2777,4.257,2919,4.777,2920,4.331,2943,3.966,3028,3.233,3029,3.598,3048,2.406,3055,2.15,3056,2.042,3057,2.271,3058,2.406,3063,2.406,3064,2.406,3344,4.777,3661,4.331,3662,4.331,3676,3.233,3677,4.884,3740,6.883,3861,3.598,3862,4.152,3863,4.152,3864,4.152,3865,4.152,3866,6.986,3867,4.152,3868,3.598,3869,4.152,3870,4.152,3871,4.152,3872,5.435,3873,3.598,3874,7.914,3875,3.598,3876,3.598,3877,5.435,3878,3.598,3879,3.598,3880,3.598,3881,4.152,3882,6.272,3883,4.152,3884,4.152,3885,4.82,3886,5.562,3887,4.152,3888,3.598,3889,3.598,3890,3.598,3891,4.152,3892,5.435,3893,3.598,3894,3.598,3895,3.598,3896,4.152,3897,4.152,3898,4.152,3899,4.152,3900,4.152,3901,4.152,3902,4.152,3903,4.152,3904,6.986,3905,5.435,3906,3.598,3907,3.598,3908,3.598,3909,6.272,3910,4.152,3911,4.152,3912,4.152,3913,4.152,3914,4.152,3915,4.152,3916,4.152,3917,4.152,3918,4.152,3919,4.152,3920,4.152,3921,6.8,3922,6.8,3923,3.598,3924,7.968,3925,3.598,3926,3.598,3927,3.598,3928,3.598,3929,3.598,3930,3.598,3931,3.598,3932,3.598,3933,3.598,3934,3.598,3935,3.598,3936,3.598,3937,3.598,3938,4.152,3939,6.272,3940,6.272,3941,4.152,3942,4.152,3943,4.152,3944,4.152,3945,4.152,3946,3.598,3947,4.152,3948,4.152,3949,4.152,3950,4.152,3951,6.272,3952,6.272,3953,5.562,3954,4.152,3955,3.598,3956,4.152,3957,4.152,3958,4.152,3959,3.598,3960,3.598,3961,4.152,3962,4.152,3963,3.598,3964,4.152,3965,5.562,3966,6.272,3967,4.152,3968,4.152,3969,4.152,3970,3.598,3971,3.598,3972,4.152,3973,4.152,3974,4.152,3975,4.152,3976,4.152,3977,4.152]],["title/dependencies.html",[3,2.081,3978,3.225]],["body/dependencies.html",[3,3.182,8,0.016,17,2.452,31,2.665,32,4.712,46,0.441,54,0.014,55,0.014,94,1.319,715,1.428,732,1.672,985,2.759,1291,4.085,1292,3.382,1375,4.815,2102,3.2,2485,6.18,2501,4.815,3979,6.184,3980,6.184,3981,6.184,3982,6.184,3983,6.184,3984,6.184,3985,6.184,3986,6.184,3987,6.184,3988,6.184,3989,6.184,3990,7.132,3991,6.184,3992,6.184,3993,6.184,3994,7.132]],["title/miscellaneous/functions.html",[1614,3.632,3995,1.99]],["body/miscellaneous/functions.html",[8,0.016,54,0.01,55,0.01,59,2.346,60,2.356,61,2.723,66,1.742,68,3.185,69,5.137,73,3.17,74,0.211,76,1.002,78,2.689,80,2.832,83,0.421,85,1.812,89,0.784,90,1.058,91,2.136,94,1.682,97,2.376,104,2.033,114,2.096,121,2.959,122,1.725,137,2.346,142,1.664,144,0.565,146,2.482,149,0.533,150,2.087,158,2.44,163,0.563,169,2.415,170,1.61,172,2.763,173,2.674,177,2.314,181,1.169,189,2.674,190,1.4,196,2.639,230,1.538,246,4.82,247,4.091,249,2.763,260,4.091,261,2.33,267,1.897,290,2.2,293,1.451,309,0.829,335,1.43,343,1.451,352,1.724,357,1.733,385,2.318,398,1.006,407,1.873,428,2.723,431,2.689,432,1.538,437,1.649,453,3.845,456,2.174,458,2.763,459,1.886,461,1.725,517,3.616,527,2.214,569,3.17,641,2.887,763,2.747,785,1.959,976,2.346,1034,3.041,1325,2.129,1382,2.096,1481,2.498,1614,3.152,1747,2.832,1754,2.346,1755,2.991,1758,2.214,1785,2.674,1788,4.82,1790,4.301,1791,2.674,1809,4.092,1837,2.832,1962,2.346,1964,3.261,1966,3.374,1973,2.887,2057,2.33,2060,4.258,2097,2.096,2109,1.579,2128,1.725,2596,5.747,2782,3.508,2903,3.508,3031,3.508,3032,3.508,3310,2.674,3921,6.809,3922,6.809,3923,4.739,3925,4.739,3926,4.739,3927,4.739,3928,4.739,3929,4.739,3930,4.739,3931,4.739,3932,4.739,3933,4.739,3934,4.739,3935,4.739,3936,4.739,3937,4.739,3946,4.739,3955,4.739,3960,7.116,3963,4.739,3995,2.498,3996,7.819,3997,3.508,3998,4.048,3999,3.508,4000,4.048,4001,6.192,4002,4.048,4003,6.631,4004,6.192,4005,7.819,4006,4.048,4007,7.991,4008,7.727,4009,4.048,4010,4.048,4011,4.048,4012,5.468,4013,4.048,4014,4.048,4015,4.048,4016,4.048,4017,5.468,4018,4.048,4019,4.048,4020,4.048,4021,5.468,4022,5.468,4023,6.192,4024,5.468,4025,4.048,4026,4.048,4027,4.048,4028,4.048,4029,4.048,4030,4.048,4031,4.048,4032,5.468,4033,5.468,4034,5.468,4035,4.048,4036,4.048,4037,4.048,4038,4.048,4039,4.048,4040,4.048,4041,4.048,4042,4.048,4043,4.048,4044,4.048,4045,4.048,4046,6.192,4047,4.048,4048,4.048]],["title/index.html",[74,0.202,4049,3.357]],["body/index.html",[1,5.618,2,2.318,3,2.867,4,4.501,5,4.501,6,4.501,7,2.891,8,0.016,9,2.5,10,2.5,11,2.209,12,1.35,13,2.116,54,0.012,55,0.012,58,0.98,253,0.723,367,2.69,611,2.891,612,2.116,700,2.891,702,3.017,704,2.553,706,2.772,707,2.772,708,3.017,710,2.66,711,2.891,714,2.772,718,3.017,720,2.891,722,2.891,725,2.891,726,2.891,728,2.66,729,2.891,731,2.772,948,5.004,1187,5.003,1188,4.501,1189,4.501,1190,4.501,1242,5.781,1243,4.501,1244,4.501,1246,4.501,1280,4.045,2470,5.655,2471,4.501,2472,4.501,2474,4.501,2479,5.342,2480,4.501,2481,4.501,2482,4.501,2495,5.342,2496,4.501,2497,4.501,2498,4.501,2855,5.685,2856,4.501,2857,4.501,2858,4.501,2905,5.573,2906,4.501,2907,4.501,2908,4.501,3855,5.342,3856,4.501,3857,4.501,3858,4.501,3959,4.501,4049,4.501,4050,5.194]],["title/modules.html",[2,2.368]],["body/modules.html",[1,4.439,2,2.778,8,0.014,54,0.014,55,0.014,134,4.433,1122,4.433,1187,3.841,1242,4.439,2470,4.439,2479,4.439,2495,4.439,2855,4.439,2905,4.439,3855,4.439,4051,8.105,4052,8.105]],["title/miscellaneous/typealiases.html",[3995,1.99,4053,4.665]],["body/miscellaneous/typealiases.html",[8,0.016,15,0.182,17,2.636,54,0.013,55,0.013,59,3.501,60,2.577,74,0.315,83,0.389,89,0.89,118,1.383,119,3.303,120,3.99,121,2.695,122,2.573,123,3.99,124,2.573,125,3.99,126,3.726,127,2.826,128,2.257,129,4.647,130,2.629,131,2.866,135,2.461,168,3.128,389,3.139,735,3.501,798,2.573,1754,3.501,1779,4.647,1781,3.99,1784,4.647,1931,4.703,1932,5.478,1940,6.096,2777,4.315,3048,3.501,3056,2.97,3058,3.501,3063,3.501,3064,3.501,3067,4.647,3068,4.647,3868,5.234,3995,3.726,3997,5.234,3999,6.096,4054,6.039,4055,6.039,4056,6.039,4057,7.035]],["title/miscellaneous/variables.html",[3995,1.99,4058,4.042]],["body/miscellaneous/variables.html",[8,0.016,17,2.384,54,0.011,55,0.011,74,0.236,83,0.362,94,0.966,117,1.015,143,1.724,155,1.225,156,0.573,163,1.119,185,0.938,253,0.63,433,0.966,569,3.414,570,3.322,632,1.436,719,1.845,935,1.93,938,1.766,983,2.345,1106,3.527,2102,2.4,2105,1.93,2106,2.345,2132,2.345,2567,4.587,2919,4.2,2920,4.587,2942,3.925,2943,4.943,2952,3.925,2953,3.925,2954,3.925,2955,3.925,3677,3.527,3679,3.925,3680,3.925,3872,3.925,3873,5.105,3875,5.105,3876,5.105,3877,3.925,3878,5.105,3879,5.105,3880,5.105,3885,3.925,3888,5.105,3889,3.925,3890,5.105,3892,3.925,3893,5.105,3894,5.105,3895,5.105,3905,3.925,3906,5.105,3907,5.105,3908,5.105,3970,5.105,3971,5.105,3995,2.794,4058,3.925,4059,4.529,4060,4.529,4061,4.529,4062,4.529,4063,6.547,4064,6.547,4065,6.547,4066,6.547,4067,8.153,4068,7.502,4069,8.153,4070,6.933,4071,7.606,4072,4.529,4073,7.187,4074,4.529,4075,8.119,4076,4.529,4077,6.933,4078,5.891,4079,4.529,4080,4.529,4081,4.529,4082,4.529,4083,4.529,4084,4.529,4085,6.547,4086,6.547,4087,5.891,4088,4.529,4089,5.891,4090,5.891,4091,4.529,4092,6.547,4093,4.529,4094,5.891,4095,6.933,4096,4.529,4097,4.529,4098,4.529,4099,5.891,4100,4.529,4101,4.529,4102,4.529,4103,5.891,4104,4.529,4105,4.529,4106,4.529,4107,4.529,4108,7.86,4109,4.529,4110,5.891,4111,4.529,4112,5.891,4113,4.529,4114,5.891,4115,4.529,4116,4.529,4117,4.529,4118,4.529,4119,4.529,4120,4.529,4121,4.529,4122,4.529,4123,4.529,4124,4.529,4125,4.529,4126,4.529,4127,4.529,4128,4.529,4129,4.529]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":278,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["0(n",{"_index":2195,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["0.0.1",{"_index":3980,"title":{},"body":{"dependencies.html":{}}}],["0.02",{"_index":2599,"title":{},"body":{"components/MapComponent.html":{}}}],["0.25rem!important",{"_index":2413,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["0.2s",{"_index":1175,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.3",{"_index":563,"title":{},"body":{"classes/BaseProvider.html":{}}}],["0.5",{"_index":1179,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["0.8",{"_index":1186,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.9",{"_index":1173,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0/1",{"_index":3874,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3867,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":3871,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":3965,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3969,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":3972,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3866,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3966,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3904,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3882,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3909,"title":{},"body":{"coverage.html":{}}}],["023e58",{"_index":4085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0f5132",{"_index":898,"title":{},"body":{"components/BsFacetDate.html":{}}}],["0s",{"_index":1177,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1",{"_index":253,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1).split",{"_index":2972,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1.0",{"_index":1145,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1.5em",{"_index":631,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["1/1",{"_index":3924,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3953,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3944,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3940,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":210,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["10/21",{"_index":3942,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":959,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["1000",{"_index":968,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["10000",{"_index":2937,"title":{},"body":{"components/ResultTimeline.html":{}}}],["10px",{"_index":1180,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["11",{"_index":3975,"title":{},"body":{"coverage.html":{}}}],["11/26",{"_index":3870,"title":{},"body":{"coverage.html":{}}}],["11/60",{"_index":3903,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":3327,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["12/24",{"_index":3891,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":1257,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["13/45",{"_index":3884,"title":{},"body":{"coverage.html":{}}}],["13/56",{"_index":3898,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":3984,"title":{},"body":{"dependencies.html":{}}}],["14/15",{"_index":3917,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2631,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["15/60",{"_index":3974,"title":{},"body":{"coverage.html":{}}}],["150px",{"_index":2953,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3939,"title":{},"body":{"coverage.html":{}}}],["16rem",{"_index":2904,"title":{},"body":{"components/NgxChart.html":{}}}],["17",{"_index":3967,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1262,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["18",{"_index":3902,"title":{},"body":{"coverage.html":{}}}],["187",{"_index":3667,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["19/20",{"_index":3911,"title":{},"body":{"coverage.html":{}}}],["1950",{"_index":2983,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1].date",{"_index":3313,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["1a3646",{"_index":4074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d2c4d",{"_index":4070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":159,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["2).split",{"_index":2704,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["2*size",{"_index":3660,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2/10",{"_index":3912,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3920,"title":{},"body":{"coverage.html":{}}}],["2/9",{"_index":3919,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":960,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["200",{"_index":1416,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["2000",{"_index":3853,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["200px",{"_index":2409,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["2020",{"_index":3318,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["206",{"_index":3668,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["21",{"_index":1280,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{},"index.html":{}}}],["22",{"_index":3918,"title":{},"body":{"coverage.html":{}}}],["222222",{"_index":4104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["23",{"_index":3886,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":3481,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["25",{"_index":3973,"title":{},"body":{"coverage.html":{}}}],["25.2.0",{"_index":3994,"title":{},"body":{"dependencies.html":{}}}],["255763",{"_index":4097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["28",{"_index":3883,"title":{},"body":{"coverage.html":{}}}],["283d6a",{"_index":4087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c6675",{"_index":4096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2px",{"_index":3343,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3",{"_index":158,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["3*24",{"_index":3330,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3*size/2",{"_index":3659,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["3.0.0",{"_index":3982,"title":{},"body":{"dependencies.html":{}}}],["3.0.4",{"_index":3985,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":3988,"title":{},"body":{"dependencies.html":{}}}],["3.15.1",{"_index":3986,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3956,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3914,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2632,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["30/33",{"_index":3961,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":2521,"title":{},"body":{"components/MapComponent.html":{}}}],["304a7d",{"_index":4093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["31",{"_index":3949,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":4050,"title":{},"body":{"index.html":{}}}],["33",{"_index":3943,"title":{},"body":{"coverage.html":{}}}],["334e87",{"_index":4083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["35",{"_index":1107,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["350px",{"_index":2955,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["36",{"_index":3951,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":3083,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["3a4762",{"_index":4102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c7680",{"_index":4091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":3647,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["4.0.0",{"_index":3992,"title":{},"body":{"dependencies.html":{}}}],["4/10",{"_index":3915,"title":{},"body":{"coverage.html":{}}}],["4/23",{"_index":3968,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":3954,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":961,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["42",{"_index":3869,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":3947,"title":{},"body":{"coverage.html":{}}}],["45/61",{"_index":3865,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":3941,"title":{},"body":{"coverage.html":{}}}],["4b6878",{"_index":4078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e6d70",{"_index":4105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4px",{"_index":902,"title":{},"body":{"components/BsFacetDate.html":{}}}],["5",{"_index":569,"title":{},"body":{"classes/BaseProvider.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["5.15.1",{"_index":3993,"title":{},"body":{"dependencies.html":{}}}],["5/46",{"_index":3881,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3945,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":635,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["500px",{"_index":3680,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["50vh",{"_index":1935,"title":{},"body":{"components/DataModalComponent.html":{}}}],["5px",{"_index":624,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["6",{"_index":3207,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["6)*2",{"_index":3655,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["6.5.1",{"_index":3989,"title":{},"body":{"dependencies.html":{}}}],["6/19",{"_index":3950,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3962,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":3482,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["600",{"_index":955,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["600px",{"_index":1389,"title":{},"body":{"interfaces/Column.html":{}}}],["600x400",{"_index":1339,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["64779e",{"_index":4080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["69420",{"_index":2625,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["6f9ba5",{"_index":4088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6px",{"_index":903,"title":{},"body":{"components/BsFacetDate.html":{}}}],["7",{"_index":1277,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["7.3.4",{"_index":3990,"title":{},"body":{"dependencies.html":{}}}],["7/19",{"_index":3952,"title":{},"body":{"coverage.html":{}}}],["7/20",{"_index":3964,"title":{},"body":{"coverage.html":{}}}],["7/63",{"_index":3976,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":3864,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3913,"title":{},"body":{"coverage.html":{}}}],["7aa3e5",{"_index":2271,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7acce5",{"_index":2276,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7c7c7c",{"_index":3669,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["7rem",{"_index":905,"title":{},"body":{"components/BsFacetDate.html":{}}}],["8",{"_index":3646,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8/38",{"_index":3938,"title":{},"body":{"coverage.html":{}}}],["8/39",{"_index":3899,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":628,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["808080",{"_index":571,"title":{},"body":{"classes/BaseProvider.html":{}}}],["84",{"_index":3329,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["86400000",{"_index":3503,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8ec3b9",{"_index":4072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8px",{"_index":1258,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["9",{"_index":948,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"index.html":{}}}],["9/20",{"_index":3948,"title":{},"body":{"coverage.html":{}}}],["9/38",{"_index":3887,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1139,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["90px",{"_index":1025,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["93",{"_index":3916,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":3910,"title":{},"body":{"coverage.html":{}}}],["98a5be",{"_index":4094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_action",{"_index":3739,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_actions",{"_index":3691,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_datapoint",{"_index":2374,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.$item",{"_index":2379,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.name",{"_index":2376,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.value",{"_index":2377,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_definance",{"_index":4109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degooglemaps",{"_index":4115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degrid",{"_index":4118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_deheatmap",{"_index":4121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enfinance",{"_index":4111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engooglemaps",{"_index":4116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engrid",{"_index":4119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enheatmap",{"_index":4124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_filterinput",{"_index":1437,"title":{},"body":{"interfaces/Column.html":{}}}],["_frfinance",{"_index":4113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgooglemaps",{"_index":4117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgrid",{"_index":4120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frheatmap",{"_index":4127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_items",{"_index":3304,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["_networkinitialized",{"_index":3688,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_queries",{"_index":2019,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["_selectededge",{"_index":3690,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_selectednode",{"_index":3689,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["a.count",{"_index":1236,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["a.date.gettime",{"_index":3611,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["a.name",{"_index":1659,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["above",{"_index":1390,"title":{},"body":{"interfaces/Column.html":{}}}],["absolute",{"_index":1256,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["absolutely",{"_index":1156,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["abstract",{"_index":2380,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["abstractfacet",{"_index":737,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["abstractions",{"_index":988,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["access",{"_index":662,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessible",{"_index":3446,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessor",{"_index":3846,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["accessors",{"_index":758,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["accordingly",{"_index":1980,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["account",{"_index":2230,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["accumulates",{"_index":534,"title":{},"body":{"classes/BaseProvider.html":{}}}],["act",{"_index":457,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["action",{"_index":96,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["action.children",{"_index":2292,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.icon",{"_index":507,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["action.selected",{"_index":1539,"title":{},"body":{"interfaces/Column.html":{}}}],["action.text",{"_index":508,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions",{"_index":327,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actions.length",{"_index":856,"title":{},"body":{"components/BsFacetDate.html":{}}}],["actions.push(new",{"_index":334,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["actions.push(this.clearfilters",{"_index":2304,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["actions.push(this.clearfiltersaction",{"_index":857,"title":{},"body":{"components/BsFacetDate.html":{}}}],["actions.push(this.createexpandaction(types[0",{"_index":355,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["actions.push(this.selectfield",{"_index":2306,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions.unshift(new",{"_index":2094,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["activateaction",{"_index":368,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["activated",{"_index":1783,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["active",{"_index":369,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actual",{"_index":1425,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["actual_component",{"_index":734,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["actually",{"_index":976,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["actualwidth",{"_index":1127,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["adapted",{"_index":3171,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["add",{"_index":133,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["add/replace",{"_index":3250,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["addaggregationnodes",{"_index":373,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["addaggregationnodes(item",{"_index":256,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["addcustomedge(recordnode",{"_index":1867,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adddynamicedges(sourcenodes",{"_index":2029,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["added",{"_index":122,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["addedge(edge",{"_index":2254,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addedges",{"_index":2826,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addedges(edges",{"_index":2166,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addition",{"_index":1874,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["additional",{"_index":137,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["additionally",{"_index":1788,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["addnode(node",{"_index":2251,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addnodes",{"_index":2827,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addnodes(nodes",{"_index":2161,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addrecordnodes(records",{"_index":1799,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adds",{"_index":244,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledge(dataset",{"_index":1845,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledges(node",{"_index":1812,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adjacent",{"_index":412,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["adjust",{"_index":474,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["adjusts",{"_index":465,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["administrative.country",{"_index":4076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.land_parcel",{"_index":4079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.province",{"_index":4081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advancedservice",{"_index":764,"title":{},"body":{"components/BsFacetDate.html":{}}}],["afterviewinit",{"_index":907,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ag",{"_index":17,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["agdatecolumnfilter",{"_index":1525,"title":{},"body":{"interfaces/Column.html":{}}}],["agg",{"_index":349,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregate",{"_index":203,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation",{"_index":85,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["aggregation.items",{"_index":234,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.items.foreach(item",{"_index":240,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.length",{"_index":239,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.map(item",{"_index":3288,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.name",{"_index":237,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationdata",{"_index":57,"title":{"interfaces/AggregationData.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedge",{"_index":109,"title":{"interfaces/AggregationEdge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedgetype",{"_index":73,"title":{"interfaces/AggregationEdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["aggregationedgetype).aggregation",{"_index":174,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationitem",{"_index":86,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationname",{"_index":873,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationprovider",{"_index":178,"title":{"classes/AggregationProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregations",{"_index":176,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregations.foreach(aggregation",{"_index":232,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationtriggertype",{"_index":129,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["aggridmodule",{"_index":1,"title":{"modules/AgGridModule.html":{}},"body":{"modules/AgGridModule.html":{},"index.html":{},"modules.html":{}}}],["aggridviewcomponent",{"_index":7,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["aginit",{"_index":2415,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aginit(params",{"_index":2420,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["agm/core",{"_index":2501,"title":{},"body":{"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"dependencies.html":{}}}],["agmcoremodule",{"_index":2500,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["agminfowindow",{"_index":2548,"title":{},"body":{"components/MapComponent.html":{}}}],["agmodule",{"_index":30,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agmodule.withcomponents([facetwrappercomponent",{"_index":51,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agnumbercolumnfilter",{"_index":1519,"title":{},"body":{"interfaces/Column.html":{}}}],["algorithm",{"_index":3598,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["alias",{"_index":2449,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aliases",{"_index":4054,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1281,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["all_dates",{"_index":2966,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.indexof(dateobj.display",{"_index":2997,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.push(cooc[1",{"_index":2990,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids",{"_index":2965,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.indexof(id",{"_index":2987,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.push(id",{"_index":2991,"title":{},"body":{"components/ResultTimeline.html":{}}}],["allcolumns",{"_index":1670,"title":{},"body":{"interfaces/Column.html":{}}}],["allen",{"_index":4045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["allow",{"_index":126,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"miscellaneous/typealiases.html":{}}}],["allowcustomrange",{"_index":753,"title":{},"body":{"components/BsFacetDate.html":{}}}],["allowed",{"_index":813,"title":{},"body":{"components/BsFacetDate.html":{}}}],["allowing",{"_index":329,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["allows",{"_index":550,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["allprimarydates",{"_index":3457,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["allprimarydates.length",{"_index":3467,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["along",{"_index":3143,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alpine",{"_index":1412,"title":{},"body":{"interfaces/Column.html":{}}}],["already",{"_index":319,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alt",{"_index":512,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["alternative",{"_index":1165,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["alternatively",{"_index":410,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["always",{"_index":1074,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["amount",{"_index":2701,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["amount.split",{"_index":2706,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["anchor",{"_index":1109,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["and/or",{"_index":454,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["angular",{"_index":32,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsHeatmapComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"dependencies.html":{}}}],["angular/common",{"_index":26,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["angular/forms",{"_index":29,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{},"interfaces/VisEvent.html":{}}}],["angular/modules/components/selection.html#selection",{"_index":3035,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["animation",{"_index":669,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["another",{"_index":2199,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["any).getmodelfromui",{"_index":1735,"title":{},"body":{"interfaces/Column.html":{}}}],["anymore",{"_index":2012,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["api",{"_index":1429,"title":{},"body":{"interfaces/Column.html":{}}}],["api.ts",{"_index":3970,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":3682,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appear",{"_index":3428,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["append(\"g",{"_index":3434,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["apple/steve",{"_index":271,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["apply",{"_index":483,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["applycolumnstateparams",{"_index":1376,"title":{},"body":{"interfaces/Column.html":{}}}],["applyorder",{"_index":1665,"title":{},"body":{"interfaces/Column.html":{}}}],["appropriate",{"_index":3772,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appservice",{"_index":765,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["april",{"_index":3319,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["area",{"_index":2569,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["areachartmodule",{"_index":2911,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["areastyles",{"_index":3049,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["around",{"_index":2595,"title":{},"body":{"components/MapComponent.html":{}}}],["array",{"_index":1227,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["array.from(new",{"_index":1049,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["array.from(this.edgeidx.keys",{"_index":2158,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.edgeidx.values",{"_index":2148,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.keys",{"_index":2156,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.values",{"_index":2146,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(edges",{"_index":2167,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(ids",{"_index":2174,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(nodes",{"_index":2162,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["arrow",{"_index":552,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsTooltipComponent.html":{}}}],["arrows",{"_index":1597,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["articles",{"_index":4037,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asks",{"_index":4028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associate",{"_index":2532,"title":{},"body":{"components/MapComponent.html":{}}}],["assume",{"_index":252,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assumed",{"_index":245,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assuming",{"_index":269,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["async",{"_index":3632,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["asynchronous",{"_index":442,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["asynchronously",{"_index":293,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsprovider",{"_index":426,"title":{"classes/AsyncRecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["asyncrecordsproviderdemo",{"_index":3923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsproviderdemo(providerfactory",{"_index":4000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attach",{"_index":255,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["attached",{"_index":459,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["attr(\"class",{"_index":3435,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"d",{"_index":3439,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"display",{"_index":3437,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"text",{"_index":3441,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"transform",{"_index":1105,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"x",{"_index":3443,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"y",{"_index":3444,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["audit",{"_index":3109,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditeventtype",{"_index":3054,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditwebservice",{"_index":3053,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auto",{"_index":1121,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["automatically",{"_index":151,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["autoresize",{"_index":1683,"title":{},"body":{"interfaces/Column.html":{}}}],["autosize",{"_index":1394,"title":{},"body":{"interfaces/Column.html":{}}}],["available",{"_index":1694,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["avoid",{"_index":307,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["avoiding",{"_index":1335,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["axes",{"_index":978,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axis",{"_index":983,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["axis.clickable",{"_index":1166,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["axis/scales",{"_index":1038,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclickable",{"_index":931,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclicked",{"_index":941,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["b",{"_index":3564,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b.count",{"_index":1235,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["b.date.gettime",{"_index":3612,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b0d5ce",{"_index":4098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["background",{"_index":895,"title":{},"body":{"components/BsFacetDate.html":{}}}],["balham",{"_index":1410,"title":{},"body":{"interfaces/Column.html":{}}}],["ballmer",{"_index":4043,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bar",{"_index":2272,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["barack",{"_index":4029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["barchartmodule",{"_index":2912,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["barhorizontalcomponent",{"_index":1290,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["barverticalcomponent",{"_index":1289,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["base",{"_index":103,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["basechartcomponent",{"_index":1288,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["based",{"_index":2101,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["baseprovider",{"_index":102,"title":{"classes/BaseProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["baseprovider:13",{"_index":440,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:15",{"_index":394,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:151",{"_index":417,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:159",{"_index":420,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:16",{"_index":392,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:163",{"_index":425,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:171",{"_index":423,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:18",{"_index":395,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:190",{"_index":2051,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:195",{"_index":400,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:199",{"_index":2069,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["baseprovider:202",{"_index":2050,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:21",{"_index":390,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:211",{"_index":405,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:219",{"_index":403,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:22",{"_index":3038,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:23",{"_index":396,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:241",{"_index":402,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:245",{"_index":421,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:25",{"_index":393,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:265",{"_index":2052,"title":{},"body":{"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:278",{"_index":401,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:305",{"_index":473,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:328",{"_index":464,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:340",{"_index":452,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:38",{"_index":441,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:42",{"_index":2068,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:48",{"_index":3039,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:61",{"_index":2049,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:68",{"_index":388,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:77",{"_index":2918,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["become",{"_index":4033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":1075,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["behavior",{"_index":3490,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["behaviors",{"_index":3359,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bellow",{"_index":3408,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["belong",{"_index":218,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["below",{"_index":3298,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["benefit",{"_index":987,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bestaggregation",{"_index":3242,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["beta.0",{"_index":3983,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":1164,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["between",{"_index":517,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["bill",{"_index":249,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["bin",{"_index":3591,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["black",{"_index":897,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["block",{"_index":1158,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["border",{"_index":633,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["both",{"_index":415,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bottom",{"_index":958,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["bounds",{"_index":2506,"title":{},"body":{"components/MapComponent.html":{}}}],["bracket",{"_index":3317,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["break",{"_index":1520,"title":{},"body":{"interfaces/Column.html":{}}}],["briefly",{"_index":1336,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["browse",{"_index":4052,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4051,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":3368,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brush's",{"_index":3548,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushbehavior",{"_index":3360,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushing",{"_index":3372,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushselection",{"_index":3364,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bsactionmodule",{"_index":37,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsadvancedmodule",{"_index":1251,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["bsedgeinfocard",{"_index":611,"title":{"components/BsEdgeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetdate",{"_index":700,"title":{"components/BsFacetDate.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetheatmapcomponent",{"_index":702,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetmodule",{"_index":41,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsfacettimelinecomponent",{"_index":704,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"index.html":{}}}],["bsfacettimelinecomponent.createaggregationevents(config",{"_index":3200,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.createtimeseries(config",{"_index":3195,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.defaultrecordstyle(r.$selected",{"_index":3212,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsheatmapcomponent",{"_index":706,"title":{"components/BsHeatmapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsheatmapmodule",{"_index":1187,"title":{"modules/BsHeatmapModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["bsmodalmodule",{"_index":39,"title":{},"body":{"modules/AgGridModule.html":{}}}],["bsnodeinfocard",{"_index":707,"title":{"components/BsNodeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsresultsheatmapview",{"_index":708,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsselectionmodule",{"_index":1192,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NgxChartsModule.html":{}}}],["bstimelinecomponent",{"_index":710,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"index.html":{}}}],["bstimelinecomponent.counter",{"_index":3378,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bstimelinemodule",{"_index":1242,"title":{"modules/BsTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["bstooltipcomponent",{"_index":711,"title":{"components/BsTooltipComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["buckets",{"_index":932,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bugs",{"_index":3760,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["build",{"_index":981,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart",{"_index":925,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart(update",{"_index":974,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["builds",{"_index":977,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["built",{"_index":2280,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["button",{"_index":1441,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["buttons",{"_index":1439,"title":{},"body":{"interfaces/Column.html":{}}}],["c",{"_index":2643,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["c.field",{"_index":1656,"title":{},"body":{"interfaces/Column.html":{}}}],["c.hide",{"_index":1662,"title":{},"body":{"interfaces/Column.html":{}}}],["c3e6cb",{"_index":2274,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["cache",{"_index":1986,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["call",{"_index":443,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["call(d3.axisleft(this.y).ticksize(0",{"_index":1096,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(d3.axistop(this.x).ticksize(0",{"_index":1092,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(this.brushbehavior",{"_index":3425,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["call(this.zoombehavior",{"_index":3511,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["callback",{"_index":1688,"title":{},"body":{"interfaces/Column.html":{}}}],["callbacks",{"_index":3246,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["called",{"_index":308,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["calling",{"_index":2678,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["calls",{"_index":3839,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["cancel",{"_index":2130,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["candy",{"_index":2493,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["candytheme",{"_index":2490,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["capture",{"_index":1724,"title":{},"body":{"interfaces/Column.html":{}}}],["card",{"_index":622,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card'},{'name",{"_index":699,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["card.component",{"_index":2864,"title":{},"body":{"modules/NetworkModule.html":{}}}],["card.component.html",{"_index":639,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card.component.ts",{"_index":618,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["card.component.ts:24",{"_index":645,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:26",{"_index":649,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:27",{"_index":650,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:29",{"_index":651,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:30",{"_index":652,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:31",{"_index":1201,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:32",{"_index":648,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:34",{"_index":1203,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:36",{"_index":1202,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:38",{"_index":1200,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:40",{"_index":647,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:70",{"_index":1199,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["cards",{"_index":677,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["case",{"_index":1325,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["catch",{"_index":3004,"title":{},"body":{"components/ResultTimeline.html":{}}}],["categories",{"_index":2634,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["category",{"_index":2615,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cause",{"_index":3631,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["caused",{"_index":2677,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ccaggregation",{"_index":869,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ccaggregation?.mask",{"_index":3284,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cccolumn",{"_index":1350,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cdref",{"_index":2649,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["cell",{"_index":1615,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cell's",{"_index":1625,"title":{},"body":{"interfaces/Column.html":{}}}],["celldoubleclickedevent",{"_index":1366,"title":{},"body":{"interfaces/Column.html":{}}}],["cellrenderer",{"_index":1482,"title":{},"body":{"interfaces/Column.html":{}}}],["center",{"_index":3091,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["centered",{"_index":2594,"title":{},"body":{"components/MapComponent.html":{}}}],["change",{"_index":3409,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.currentvalue",{"_index":3628,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.previousvalue",{"_index":3626,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changed",{"_index":1729,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changedetectorref",{"_index":2618,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["changes",{"_index":785,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["changes.events",{"_index":3123,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.results",{"_index":849,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.toolbaractions",{"_index":1468,"title":{},"body":{"interfaces/Column.html":{}}}],["changes[\"data",{"_index":3416,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"events",{"_index":3153,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"results",{"_index":2670,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["changes[\"selection",{"_index":3411,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"timeseries",{"_index":3146,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"width",{"_index":3420,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes['dates",{"_index":2959,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['events",{"_index":2960,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['providers",{"_index":3708,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["chart",{"_index":979,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["chart's",{"_index":2789,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["chart'},{'name",{"_index":716,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["chart.html",{"_index":1297,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["chart.scss",{"_index":1298,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chart.ts",{"_index":2268,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["chart.ts:112",{"_index":2396,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:189",{"_index":2405,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:204",{"_index":2401,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:21",{"_index":2391,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:215",{"_index":2399,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:22",{"_index":2385,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:23",{"_index":2386,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:230",{"_index":2400,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:235",{"_index":2393,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:24",{"_index":2387,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:25",{"_index":2389,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:251",{"_index":2397,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:255",{"_index":2394,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:26",{"_index":2388,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:264",{"_index":2398,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:27",{"_index":2390,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:28",{"_index":2392,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:31",{"_index":2402,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:34",{"_index":2403,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:35",{"_index":2404,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:46",{"_index":2384,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:91",{"_index":2395,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:98",{"_index":2406,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart/chart",{"_index":2269,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/NgxChartsModule.html":{}}}],["chart/facet",{"_index":2267,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/NgxChartsModule.html":{},"coverage.html":{}}}],["chartcomponent",{"_index":2875,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type",{"_index":2881,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type:string",{"_index":1323,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chartdatapoint",{"_index":1284,"title":{"interfaces/ChartDataPoint.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["chartoptions",{"_index":1294,"title":{"interfaces/ChartOptions.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts",{"_index":1292,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["charts.module.ts",{"_index":2910,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charts/chart/chart.ts",{"_index":1285,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts/chart/chart.ts:28",{"_index":2879,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:29",{"_index":2878,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:30",{"_index":2880,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:31",{"_index":2895,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:32",{"_index":2893,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:33",{"_index":2889,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:34",{"_index":2890,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:35",{"_index":2877,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:43",{"_index":2887,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:49",{"_index":2886,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:57",{"_index":2885,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:62",{"_index":2897,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:66",{"_index":2882,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:75",{"_index":2899,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:79",{"_index":2884,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:83",{"_index":2883,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:92",{"_index":2891,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/facet",{"_index":2266,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["charts/ngx",{"_index":2909,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charttype",{"_index":1321,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["check",{"_index":1610,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["checkbox",{"_index":1530,"title":{},"body":{"interfaces/Column.html":{}}}],["checkboxes",{"_index":1405,"title":{},"body":{"interfaces/Column.html":{}}}],["checkdatachanges(change",{"_index":3624,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["children",{"_index":359,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["choice",{"_index":1409,"title":{},"body":{"interfaces/Column.html":{}}}],["circle",{"_index":339,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["circular",{"_index":629,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["class",{"_index":53,"title":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["class=\"me",{"_index":686,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["classes",{"_index":367,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"index.html":{}}}],["clause",{"_index":1575,"title":{},"body":{"interfaces/Column.html":{}}}],["clean",{"_index":1446,"title":{},"body":{"interfaces/Column.html":{}}}],["cleanremovenode",{"_index":2172,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["cleanremovenode(nodeid",{"_index":2184,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["clear",{"_index":1650,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfilters",{"_index":2281,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfiltersaction",{"_index":743,"title":{},"body":{"components/BsFacetDate.html":{}}}],["clearing",{"_index":2570,"title":{},"body":{"components/MapComponent.html":{}}}],["clearly",{"_index":3637,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["clears",{"_index":1793,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["click",{"_index":1300,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["click(datapoint",{"_index":2367,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["clicked",{"_index":309,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["clicks",{"_index":997,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["clientside",{"_index":1444,"title":{},"body":{"interfaces/Column.html":{}}}],["clipboard",{"_index":1675,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["close",{"_index":1928,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closed",{"_index":640,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/MapComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["closeness",{"_index":3593,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closetooltip",{"_index":3275,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["closewindow",{"_index":2512,"title":{},"body":{"components/MapComponent.html":{}}}],["cloud",{"_index":2619,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud'},{'name",{"_index":724,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["cloud.component",{"_index":2478,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cloud.component.html",{"_index":2620,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.scss",{"_index":2621,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.ts",{"_index":2614,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["cloud/money",{"_index":2477,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["clunky",{"_index":1333,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["cluster_aggridmodule",{"_index":4,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_declarations",{"_index":5,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_exports",{"_index":6,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule",{"_index":1188,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_declarations",{"_index":1190,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_exports",{"_index":1189,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule",{"_index":1243,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_declarations",{"_index":1246,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_exports",{"_index":1244,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_imports",{"_index":1245,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["cluster_financemodule",{"_index":2471,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_declarations",{"_index":2474,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_exports",{"_index":2472,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_imports",{"_index":2473,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cluster_fusionchartsmodule",{"_index":2480,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_declarations",{"_index":2481,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_exports",{"_index":2482,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule",{"_index":2496,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_declarations",{"_index":2497,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_exports",{"_index":2498,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_networkmodule",{"_index":2856,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_declarations",{"_index":2857,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_exports",{"_index":2858,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule",{"_index":2906,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_declarations",{"_index":2908,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_exports",{"_index":2907,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule",{"_index":3856,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_declarations",{"_index":3858,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_exports",{"_index":3857,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["clustering",{"_index":3600,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["col",{"_index":539,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["col.$column",{"_index":1494,"title":{},"body":{"interfaces/Column.html":{}}}],["col.$column?.label",{"_index":1499,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrenderer",{"_index":1503,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrendererframework",{"_index":1504,"title":{},"body":{"interfaces/Column.html":{}}}],["col.checkboxselection",{"_index":1533,"title":{},"body":{"interfaces/Column.html":{}}}],["col.field",{"_index":1501,"title":{},"body":{"interfaces/Column.html":{}}}],["col.filter",{"_index":1518,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headername",{"_index":1498,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headertooltip",{"_index":1502,"title":{},"body":{"interfaces/Column.html":{}}}],["col.hide",{"_index":1510,"title":{},"body":{"interfaces/Column.html":{}}}],["col.sortable",{"_index":1506,"title":{},"body":{"interfaces/Column.html":{}}}],["col.tooltipvaluegetter",{"_index":1496,"title":{},"body":{"interfaces/Column.html":{}}}],["col.width",{"_index":1511,"title":{},"body":{"interfaces/Column.html":{}}}],["coldef",{"_index":1349,"title":{},"body":{"interfaces/Column.html":{}}}],["coldefs",{"_index":1428,"title":{},"body":{"interfaces/Column.html":{}}}],["colid",{"_index":1578,"title":{},"body":{"interfaces/Column.html":{}}}],["collapsed",{"_index":470,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["collapsemodule",{"_index":2860,"title":{},"body":{"modules/NetworkModule.html":{}}}],["collapsing",{"_index":455,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["color",{"_index":570,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":2270,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["colorscheme",{"_index":933,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{}}}],["column",{"_index":1347,"title":{"interfaces/Column.html":{}},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["column's",{"_index":1442,"title":{},"body":{"interfaces/Column.html":{}}}],["column).$column",{"_index":1705,"title":{},"body":{"interfaces/Column.html":{}}}],["columnapi",{"_index":1363,"title":{},"body":{"interfaces/Column.html":{}}}],["columns",{"_index":1385,"title":{},"body":{"interfaces/Column.html":{}}}],["columnsaction",{"_index":1443,"title":{},"body":{"interfaces/Column.html":{}}}],["columnvisibility",{"_index":1392,"title":{},"body":{"interfaces/Column.html":{}}}],["combination",{"_index":3099,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combined",{"_index":3074,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["combinelastest",{"_index":3100,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest",{"_index":1963,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["combinelatest(sourceproviders.map(p",{"_index":1992,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["combinelatest(this.events$).pipe",{"_index":3156,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest(this.timeseries",{"_index":3150,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["come",{"_index":1978,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["comes",{"_index":251,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["commonmodule",{"_index":25,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["community",{"_index":1375,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"dependencies.html":{}}}],["community/dist/lib/columncontroller/columnapi",{"_index":1377,"title":{},"body":{"interfaces/Column.html":{}}}],["companies",{"_index":4022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["company",{"_index":4008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compare",{"_index":3641,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["compares",{"_index":3272,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["compatible",{"_index":1763,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["completed",{"_index":3295,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["complexity",{"_index":138,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["component",{"_index":610,"title":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["component_template",{"_index":694,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["components",{"_index":612,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"index.html":{}}}],["compress",{"_index":1922,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["compute",{"_index":194,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["computed",{"_index":2628,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["computes",{"_index":2088,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyDatum.html":{}}}],["concretely",{"_index":1975,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["config",{"_index":3167,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.aggregations.length",{"_index":3234,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.areastyles",{"_index":3286,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.current",{"_index":3172,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.default",{"_index":3173,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display",{"_index":3214,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display(r",{"_index":3215,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item",{"_index":3290,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item).toutcstring()+\"|\"+config.getdisplay(item",{"_index":3289,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdisplay(item",{"_index":3293,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.linestyles",{"_index":3285,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.foreach((maxnmonths",{"_index":3240,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.length",{"_index":3233,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.name",{"_index":3281,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.primary",{"_index":3282,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size",{"_index":3206,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(item",{"_index":3291,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(r",{"_index":3209,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles",{"_index":3211,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(item",{"_index":3292,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(r",{"_index":3213,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configs.ts",{"_index":3922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":147,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configure",{"_index":1417,"title":{},"body":{"interfaces/Column.html":{}}}],["configured",{"_index":3033,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["conflicts",{"_index":1872,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["connected",{"_index":320,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["connectednodes",{"_index":321,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["connectednodes.length",{"_index":326,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["console.error('invalid",{"_index":3468,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["console.error(config",{"_index":3235,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["console.log",{"_index":2982,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"aginit",{"_index":2467,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["console.log(\"cooc1:\",data_date[i+2",{"_index":2974,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"date:\",data_date[i+1",{"_index":2994,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"no",{"_index":3023,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('event",{"_index":3011,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('selected",{"_index":3009,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(cooc",{"_index":2977,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(data",{"_index":3002,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(properties",{"_index":3013,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(regdate.test(date",{"_index":2981,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(this.items.get(properties.items[0",{"_index":3016,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(year",{"_index":2980,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.warn(`aggregation",{"_index":220,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["const",{"_index":199,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constant",{"_index":3831,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constant',true",{"_index":3844,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constructed",{"_index":108,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["constructor",{"_index":184,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constructor(el",{"_index":943,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["constructor(facetservice",{"_index":759,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{}}}],["constructor(intlservice",{"_index":2876,"title":{},"body":{"components/NgxChart.html":{}}}],["constructor(model",{"_index":1939,"title":{},"body":{"components/DataModalComponent.html":{}}}],["constructor(name",{"_index":382,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["constructor(public",{"_index":2956,"title":{},"body":{"components/ResultTimeline.html":{}}}],["constructor(searchservice",{"_index":2519,"title":{},"body":{"components/MapComponent.html":{}}}],["constructor(vistimelineservice",{"_index":2931,"title":{},"body":{"components/ResultTimeline.html":{}}}],["contain",{"_index":1481,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["contained",{"_index":1809,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":1123,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["containing",{"_index":1382,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":1755,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1255,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["contentchild",{"_index":3346,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["contentchild(\"edgetpl",{"_index":3695,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"nodetpl",{"_index":3693,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"tooltiptpl",{"_index":3351,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["context",{"_index":296,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["convenience",{"_index":62,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["convert",{"_index":1124,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["converted",{"_index":152,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["cooc",{"_index":2970,"title":{},"body":{"components/ResultTimeline.html":{}}}],["cooc[0",{"_index":2989,"title":{},"body":{"components/ResultTimeline.html":{}}}],["coocaggregationdemo",{"_index":3925,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocaggregationdemo(providerfactory",{"_index":4006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cooccurrence",{"_index":68,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo",{"_index":3926,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo(providerfactory",{"_index":4009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cool",{"_index":1332,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["coordinate",{"_index":1125,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["coordinates",{"_index":3656,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["copy",{"_index":1602,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["copyaction",{"_index":1937,"title":{},"body":{"components/DataModalComponent.html":{}}}],["copyselection",{"_index":1395,"title":{},"body":{"interfaces/Column.html":{}}}],["copytoclipboard",{"_index":1676,"title":{},"body":{"interfaces/Column.html":{}}}],["corresponding",{"_index":227,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["count",{"_index":166,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["counter",{"_index":900,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["counts",{"_index":299,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["counts.get(d.category",{"_index":2696,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["counts.get(money.value",{"_index":2796,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["counts.set(item.value.tostring",{"_index":2792,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["cover",{"_index":637,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["coverage",{"_index":3861,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":243,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["createactions",{"_index":1584,"title":{},"body":{"interfaces/Column.html":{}}}],["createaggregationevents(config",{"_index":3287,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createchartoptions",{"_index":2334,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["createcolumns",{"_index":1490,"title":{},"body":{"interfaces/Column.html":{}}}],["created",{"_index":411,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createdatapoints(items",{"_index":3300,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createedge(type",{"_index":555,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createexpandaction(type",{"_index":365,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["createnode(type",{"_index":536,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createrows",{"_index":1545,"title":{},"body":{"interfaces/Column.html":{}}}],["creates",{"_index":453,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["createtimeseries(config",{"_index":3280,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cross",{"_index":246,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo",{"_index":3927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo(providerfactory",{"_index":4013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo",{"_index":3928,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo(providerfactory",{"_index":4014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["csv",{"_index":1668,"title":{},"body":{"interfaces/Column.html":{}}}],["csvexportparams",{"_index":1369,"title":{},"body":{"interfaces/Column.html":{}}}],["cur",{"_index":3728,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["currency",{"_index":2616,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["current",{"_index":2284,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["currently",{"_index":1163,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentrange",{"_index":3104,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["currentselection",{"_index":3365,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue",{"_index":3627,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue.length",{"_index":3640,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cursor",{"_index":1170,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["curve(d3[this.curvetype",{"_index":3381,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["curvemonotonex",{"_index":3086,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["curvetype",{"_index":3085,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["customdata",{"_index":1753,"title":{"interfaces/CustomData.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["customprops",{"_index":529,"title":{},"body":{"classes/BaseProvider.html":{}}}],["d",{"_index":1113,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["d.aggregation",{"_index":3196,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.category",{"_index":2719,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.ccaggregation",{"_index":3197,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.count",{"_index":2713,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d.currency",{"_index":2725,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.date",{"_index":2802,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.i",{"_index":2695,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.record.id",{"_index":2808,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d.type",{"_index":3442,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.value",{"_index":2710,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1e7dd",{"_index":899,"title":{},"body":{"components/BsFacetDate.html":{}}}],["d3",{"_index":985,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"dependencies.html":{}}}],["d3.area",{"_index":3357,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.axisbottom(this.x",{"_index":2736,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.axisleft(this.y",{"_index":2752,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushbehavior",{"_index":3361,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushselection(this.gbrush.nativeelement",{"_index":3559,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushx",{"_index":3390,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.countabletimeinterval",{"_index":3334,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.extent(allprimarydates",{"_index":3461,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.extent(this.data",{"_index":2712,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.line",{"_index":3358,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(data",{"_index":3463,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(s.dates",{"_index":3465,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.gbrush.nativeelement)[0",{"_index":3581,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.overlay.nativeelement)[0",{"_index":2813,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d3.scaleband",{"_index":1026,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["d3.scalelinear",{"_index":2638,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scalelog",{"_index":2658,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalelogarithmic",{"_index":2639,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scaleordinal",{"_index":2644,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalequantile",{"_index":1007,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.scaletime",{"_index":2783,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scaleutc",{"_index":2785,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(nodes[i",{"_index":1134,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.select(this.gbrush.nativeelement",{"_index":3424,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gx.nativeelement",{"_index":1082,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gy.nativeelement",{"_index":1084,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.overlay.nativeelement",{"_index":2672,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.selection",{"_index":1028,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.timeday",{"_index":3335,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeday.offset(date",{"_index":3331,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeformat(\"%y",{"_index":3107,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timehour.offset(date",{"_index":3326,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth",{"_index":3337,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.count(range[0",{"_index":3231,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.offset(date",{"_index":3332,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeweek",{"_index":3336,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeyear",{"_index":3338,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.transition",{"_index":1090,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.transition().duration(this.transition",{"_index":1089,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.zoom",{"_index":3505,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoombehavior",{"_index":3363,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomidentity",{"_index":3498,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomtransform(this.brush$.node",{"_index":3574,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["damping",{"_index":3824,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol",{"_index":3816,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol.value",{"_index":3833,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingpref",{"_index":3851,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dark",{"_index":966,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["darkgrey",{"_index":1182,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["darkstyle",{"_index":2567,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{}}}],["data([{type",{"_index":3431,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.addedges(this.createedge(type",{"_index":285,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["data.addnodes(node",{"_index":1831,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed",{"_index":1878,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed[i",{"_index":1879,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.fieldvalue",{"_index":1881,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.filter(s",{"_index":3454,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.length",{"_index":1150,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.relations",{"_index":1876,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.relations[i",{"_index":1877,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.values.length",{"_index":1869,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data/peer/esm/vis",{"_index":2103,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["data[0",{"_index":3456,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data_date",{"_index":2968,"title":{},"body":{"components/ResultTimeline.html":{}}}],["data_date.substring(1,data_date.length",{"_index":2971,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datafiltered",{"_index":910,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["datafiltered.length",{"_index":1148,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["dataitem",{"_index":2950,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datamodalcomponent",{"_index":9,"title":{"components/DataModalComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["datamodel",{"_index":1940,"title":{},"body":{"components/DataModalComponent.html":{},"miscellaneous/typealiases.html":{}}}],["datapoint",{"_index":1345,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datapoint.name",{"_index":2343,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoint.value",{"_index":2378,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoints",{"_index":2277,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["dataset",{"_index":192,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["dataset.addedges(edge",{"_index":1865,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addedges(this.createedge(type",{"_index":1880,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(node",{"_index":1861,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(recordnode",{"_index":1873,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.foreach(dataset",{"_index":1994,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["dataset.getadjacentedges(neighbor.id",{"_index":1900,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getadjacentedges(node.id",{"_index":1888,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getedges().foreach(edge",{"_index":2220,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.getnode(node.id",{"_index":1893,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getnodes().foreach(node",{"_index":1995,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.updatedatasets(this.context.nodes",{"_index":3732,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasets",{"_index":472,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["datasets.reduce((prev",{"_index":3727,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasource",{"_index":1379,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["date",{"_index":739,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["date'},{'name",{"_index":701,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["date(cooc[1",{"_index":2973,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date(parsedexpr.values[0",{"_index":3132,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(parsedexpr.values[1",{"_index":3133,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(this.selection[0].gettime",{"_index":3140,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(this.selection[1].gettime()+interval*0.1",{"_index":3142,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date.getfullyear",{"_index":2979,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date.html",{"_index":742,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.scss",{"_index":741,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts",{"_index":736,"title":{},"body":{"components/BsFacetDate.html":{},"coverage.html":{}}}],["date.ts:108",{"_index":784,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:119",{"_index":786,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:123",{"_index":801,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:133",{"_index":779,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:225",{"_index":789,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:231",{"_index":781,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:30",{"_index":772,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:31",{"_index":773,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:32",{"_index":768,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:33",{"_index":771,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:34",{"_index":776,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:35",{"_index":774,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:36",{"_index":770,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:37",{"_index":769,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:38",{"_index":775,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:40",{"_index":791,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:41",{"_index":796,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:43",{"_index":795,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:44",{"_index":793,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:46",{"_index":799,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:47",{"_index":797,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:50",{"_index":766,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:71",{"_index":787,"title":{},"body":{"components/BsFacetDate.html":{}}}],["dateobj.display",{"_index":2996,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.locations.split(\",\")[0",{"_index":2995,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datepickers",{"_index":811,"title":{},"body":{"components/BsFacetDate.html":{}}}],["daterange",{"_index":831,"title":{},"body":{"components/BsFacetDate.html":{}}}],["daterangecontrol",{"_index":744,"title":{},"body":{"components/BsFacetDate.html":{}}}],["dates",{"_index":2926,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dates.foreach(dateobj",{"_index":2992,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date|undefined",{"_index":814,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datum",{"_index":2690,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["datum.currency",{"_index":2818,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["datum.rawvalue",{"_index":2764,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["day",{"_index":3081,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["days",{"_index":3227,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dd",{"_index":3325,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["deactivate",{"_index":3513,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["deal)#(usd",{"_index":2624,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["debounce",{"_index":3837,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncesync",{"_index":3840,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncetime",{"_index":806,"title":{},"body":{"components/BsFacetDate.html":{}}}],["debouncetime(500",{"_index":843,"title":{},"body":{"components/BsFacetDate.html":{}}}],["decimal",{"_index":2527,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":20,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["declare",{"_index":1953,"title":{},"body":{"components/DataModalComponent.html":{}}}],["decoration",{"_index":1168,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["decorators",{"_index":1010,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["decreasing",{"_index":1231,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["deep",{"_index":1161,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["defacet",{"_index":4110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":163,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultchart",{"_index":3888,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultcoldef",{"_index":1423,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultcolumnwidth",{"_index":1415,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultoptions",{"_index":2943,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultrecordstyle(selected",{"_index":3339,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["defaults",{"_index":1387,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultstate",{"_index":1653,"title":{},"body":{"interfaces/Column.html":{}}}],["definance",{"_index":3878,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":161,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["defined",{"_index":383,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["defines",{"_index":1778,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["definition",{"_index":1422,"title":{},"body":{"interfaces/Column.html":{}}}],["definitions",{"_index":1384,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["degooglemaps",{"_index":3893,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["degrid",{"_index":3873,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deheatmap",{"_index":3906,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["delay",{"_index":3758,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["delete",{"_index":1642,"title":{},"body":{"interfaces/Column.html":{}}}],["denser",{"_index":1411,"title":{},"body":{"interfaces/Column.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{},"index.html":{}}}],["depending",{"_index":1883,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["deprecated",{"_index":1162,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["deresultsview",{"_index":4122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derived",{"_index":1426,"title":{},"body":{"interfaces/Column.html":{}}}],["deriving",{"_index":1479,"title":{},"body":{"interfaces/Column.html":{}}}],["description",{"_index":61,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["desearch",{"_index":4123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desired",{"_index":2523,"title":{},"body":{"components/MapComponent.html":{}}}],["destroy",{"_index":1447,"title":{},"body":{"interfaces/Column.html":{}}}],["detail",{"_index":3265,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determined",{"_index":3201,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determines",{"_index":2115,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["diff",{"_index":3476,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["difference",{"_index":3630,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["different",{"_index":219,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["dimensional",{"_index":254,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["dimensions",{"_index":1340,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["directed",{"_index":77,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["directive",{"_index":692,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["directives",{"_index":733,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["directly",{"_index":430,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["disabled",{"_index":345,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["discarded",{"_index":2129,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["display",{"_index":267,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["display=existingnodes",{"_index":1767,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["display=paginate",{"_index":1844,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["displaycheckbox",{"_index":1408,"title":{},"body":{"interfaces/Column.html":{}}}],["displayed",{"_index":352,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["displayemptydistributionintervals",{"_index":754,"title":{},"body":{"components/BsFacetDate.html":{}}}],["displays",{"_index":78,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["distribution",{"_index":247,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["distributions",{"_index":260,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["div.pb",{"_index":2412,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doc",{"_index":3024,"title":{},"body":{"components/ResultTimeline.html":{}}}],["docheck",{"_index":1286,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["document",{"_index":2317,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["document.body.contains(this.wrapper.nativeelement",{"_index":1344,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["documentation",{"_index":3862,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":196,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["doesfilterpass",{"_index":2416,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesfilterpass(params",{"_index":2423,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesn't",{"_index":1531,"title":{},"body":{"interfaces/Column.html":{}}}],["dom",{"_index":615,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain",{"_index":2641,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain([0",{"_index":2720,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["domain(this.datafiltered.map(item",{"_index":1072,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(this.x.domain",{"_index":3538,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(this.xt.domain",{"_index":3540,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(xlabels",{"_index":1061,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(ylabels",{"_index":1067,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain[0].gettime",{"_index":3608,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain[1].gettime",{"_index":3607,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["don't",{"_index":1328,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["double",{"_index":1697,"title":{},"body":{"interfaces/Column.html":{}}}],["download",{"_index":1606,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadcsv",{"_index":1680,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadselection",{"_index":1396,"title":{},"body":{"interfaces/Column.html":{}}}],["draw",{"_index":2681,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawevents(events",{"_index":3657,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawn",{"_index":553,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["draws",{"_index":2734,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawxaxis",{"_index":2735,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawyaxis",{"_index":2739,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["due",{"_index":3355,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["duplicate",{"_index":1855,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["duplicates",{"_index":2200,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dynamic",{"_index":1964,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["dynamicedge",{"_index":1961,"title":{"interfaces/DynamicEdge.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgeprovider",{"_index":1981,"title":{"classes/DynamicEdgeProvider.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgetype",{"_index":1966,"title":{"interfaces/DynamicEdgeType.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dynamicedgetype).getquery",{"_index":1974,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["dynamicnodeprovider",{"_index":2053,"title":{"classes/DynamicNodeProvider.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["dynamicnodetype",{"_index":2066,"title":{"interfaces/DynamicNodeType.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["e",{"_index":3111,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["e.count",{"_index":1216,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["e.from",{"_index":1211,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.to",{"_index":1213,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.value",{"_index":276,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["e.visible",{"_index":1918,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["each",{"_index":230,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["each(this.wrap",{"_index":1111,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ease",{"_index":1176,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["east",{"_index":2597,"title":{},"body":{"components/MapComponent.html":{}}}],["edge",{"_index":90,"title":{"interfaces/Edge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge.context.name",{"_index":593,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.from",{"_index":585,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.to",{"_index":587,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.query.addselect(expr",{"_index":592,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.search",{"_index":594,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.count",{"_index":680,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge.fieldvalue",{"_index":590,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.from",{"_index":1895,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.id",{"_index":1898,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.provider",{"_index":588,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.to",{"_index":1894,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type",{"_index":1890,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type['trigger",{"_index":1907,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.visible",{"_index":1903,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge[\"arrows",{"_index":561,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"font",{"_index":568,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"label",{"_index":566,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge[\"labels",{"_index":567,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"labels\"].foreach(label",{"_index":2232,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge['aggregation'].name",{"_index":682,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge['record']['title",{"_index":684,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'aggregation\\'].name",{"_index":695,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'record\\'][\\'title",{"_index":696,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edgeclicked",{"_index":3687,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgeidx",{"_index":2136,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeoptions",{"_index":2113,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges",{"_index":142,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["edges.foreach(edge",{"_index":2168,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.remove(edges.get().filter(e",{"_index":2247,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.update(this.getvisibleedges",{"_index":2250,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeseparator",{"_index":370,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["edgetpl",{"_index":3696,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgetype",{"_index":91,"title":{"interfaces/EdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edgetype.nodetypes[1",{"_index":1991,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["edgetypes",{"_index":187,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["effect",{"_index":3247,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eg",{"_index":111,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["el",{"_index":946,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["element",{"_index":691,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementref",{"_index":944,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elements",{"_index":2645,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementtype",{"_index":4067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elusive",{"_index":3759,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["email",{"_index":1858,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["emitevent",{"_index":837,"title":{},"body":{"components/BsFacetDate.html":{}}}],["emits",{"_index":228,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/MapComponent.html":{}}}],["emitted",{"_index":3678,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["emitter",{"_index":2537,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":2120,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["enabled",{"_index":564,"title":{},"body":{"classes/BaseProvider.html":{}}}],["end",{"_index":1184,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enfacet",{"_index":4112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enfinance",{"_index":3879,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enforce",{"_index":3470,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enginetype",{"_index":1359,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.csv",{"_index":1527,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.date",{"_index":1521,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.dates",{"_index":1522,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetime",{"_index":1523,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetimes",{"_index":1524,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.double",{"_index":1515,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.float",{"_index":1516,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.integer",{"_index":1517,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.string",{"_index":1526,"title":{},"body":{"interfaces/Column.html":{}}}],["engooglemaps",{"_index":3894,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["engrid",{"_index":3875,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enheatmap",{"_index":3907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enresultsview",{"_index":4125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enrich",{"_index":2056,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["enriched",{"_index":2060,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["ensearch",{"_index":4126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":3433,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["entities",{"_index":69,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["entity",{"_index":1837,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entityitem",{"_index":2933,"title":{},"body":{"components/ResultTimeline.html":{}}}],["err",{"_index":3180,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error",{"_index":3179,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(\"column",{"_index":2457,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(\"maxnmonths",{"_index":3236,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`aggregation",{"_index":265,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`an",{"_index":2463,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(`edge",{"_index":2256,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`inconsistent",{"_index":1815,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`missing",{"_index":1897,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`node",{"_index":2253,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`wrong",{"_index":1870,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["errors",{"_index":2676,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["especially",{"_index":3475,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["essentially",{"_index":3584,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["et",{"_index":172,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["etc",{"_index":2109,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["even",{"_index":3418,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event",{"_index":778,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["event.api",{"_index":1692,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef",{"_index":1704,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.field",{"_index":1702,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.headername",{"_index":1701,"title":{},"body":{"interfaces/Column.html":{}}}],["event.columnapi",{"_index":1693,"title":{},"body":{"interfaces/Column.html":{}}}],["event.data",{"_index":1700,"title":{},"body":{"interfaces/Column.html":{}}}],["event.display",{"_index":2969,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.filterinstance",{"_index":1734,"title":{},"body":{"interfaces/Column.html":{}}}],["event.filterinstance.getmodel",{"_index":1732,"title":{},"body":{"interfaces/Column.html":{}}}],["event.locations.split(\",\")[0",{"_index":2976,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.name",{"_index":3664,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["event.nodes.length",{"_index":3780,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["event.preventdefault",{"_index":861,"title":{},"body":{"components/BsFacetDate.html":{}}}],["event.stoppropagation",{"_index":1544,"title":{},"body":{"interfaces/Column.html":{}}}],["event.type",{"_index":1455,"title":{},"body":{"interfaces/Column.html":{}}}],["event.value",{"_index":1703,"title":{},"body":{"interfaces/Column.html":{}}}],["eventclicked",{"_index":3096,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eventdata",{"_index":3773,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[0",{"_index":3775,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[1",{"_index":3776,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventemitter",{"_index":971,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events",{"_index":674,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events.foreach(event",{"_index":2967,"title":{},"body":{"components/ResultTimeline.html":{}}}],["events.push([event",{"_index":3615,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].size",{"_index":3653,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].sizeopened",{"_index":3654,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[events.length",{"_index":3617,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["eventsize(events",{"_index":3651,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["example",{"_index":2058,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exanding",{"_index":1913,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["except",{"_index":3414,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exclusion",{"_index":2307,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["execute",{"_index":1967,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["executed",{"_index":1970,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["exist",{"_index":221,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["existing",{"_index":128,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["existingedge",{"_index":2224,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.count",{"_index":2226,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.from",{"_index":2237,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.to].map(id",{"_index":2238,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type",{"_index":2241,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions",{"_index":2236,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions(nodes",{"_index":2240,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.visible",{"_index":2227,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"label",{"_index":2234,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"labels\"].push(label",{"_index":2235,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode",{"_index":466,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["existingnode.count",{"_index":2214,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.precedence",{"_index":2210,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type",{"_index":2218,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions",{"_index":2216,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions(existingnode",{"_index":2217,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.visible",{"_index":2215,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnodes",{"_index":168,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1470,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["expand",{"_index":312,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["expandable",{"_index":4017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expanded",{"_index":641,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"miscellaneous/functions.html":{}}}],["expanding",{"_index":127,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["expected",{"_index":3415,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["export",{"_index":52,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["exporting",{"_index":1667,"title":{},"body":{"interfaces/Column.html":{}}}],["exports",{"_index":21,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["exportvaluegetter",{"_index":1626,"title":{},"body":{"interfaces/Column.html":{}}}],["expr",{"_index":98,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["expr.operands.map(e",{"_index":275,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["expr.value",{"_index":888,"title":{},"body":{"components/BsFacetDate.html":{}}}],["expr.values",{"_index":887,"title":{},"body":{"components/BsFacetDate.html":{}}}],["exprbuilder",{"_index":762,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["expression",{"_index":2675,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exprfrom",{"_index":603,"title":{},"body":{"classes/BaseProvider.html":{}}}],["exproperator",{"_index":804,"title":{},"body":{"components/BsFacetDate.html":{}}}],["exprs",{"_index":3255,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprs.push(this.exprbuilder.makerangeexpr(ccaggregation.column",{"_index":3260,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprto",{"_index":606,"title":{},"body":{"classes/BaseProvider.html":{}}}],["extends",{"_index":110,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["extension",{"_index":105,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["extent([[0",{"_index":3391,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["external",{"_index":1452,"title":{},"body":{"interfaces/Column.html":{}}}],["extract",{"_index":2686,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["f8f9fa",{"_index":896,"title":{},"body":{"components/BsFacetDate.html":{}}}],["fa",{"_index":337,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facet",{"_index":48,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facetactive",{"_index":1567,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["facetchartdatapoint",{"_index":2265,"title":{"interfaces/FacetChartDataPoint.html":{}},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["facetname",{"_index":2362,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["facetngxchart",{"_index":714,"title":{"components/FacetNgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["facets",{"_index":1565,"title":{},"body":{"interfaces/Column.html":{}}}],["facetservice",{"_index":760,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["facetwrappercomponent",{"_index":10,"title":{"components/FacetWrapperComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fact",{"_index":1725,"title":{},"body":{"interfaces/Column.html":{}}}],["factory",{"_index":4005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":3958,"title":{},"body":{"coverage.html":{}}}],["false",{"_index":284,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["far",{"_index":819,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["fas",{"_index":336,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["fcmodule",{"_index":2484,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fcmodule.fcroot(fusioncharts",{"_index":2494,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["features",{"_index":482,"title":{},"body":{"classes/BaseProvider.html":{}}}],["featuretype",{"_index":4075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetch",{"_index":165,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["fetchaggregation(aggregation",{"_index":3220,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fetchaggregations(types",{"_index":198,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["fetched",{"_index":121,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fetches",{"_index":189,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["fetching",{"_index":1984,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["field",{"_index":416,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fields",{"_index":1789,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fieldvalue",{"_index":79,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["fill",{"_index":1181,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["fills",{"_index":226,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter",{"_index":118,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["filter(e",{"_index":1210,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["filter(edge",{"_index":1889,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["filter(item",{"_index":3311,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(node",{"_index":323,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter(r",{"_index":3203,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(record",{"_index":2321,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filter(tick",{"_index":2742,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["filter(v",{"_index":2294,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filterarea",{"_index":2507,"title":{},"body":{"components/MapComponent.html":{}}}],["filterchangedevent",{"_index":1372,"title":{},"body":{"interfaces/Column.html":{}}}],["filterdatum(datum",{"_index":2762,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["filtered",{"_index":413,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteredcolor",{"_index":2273,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filtering",{"_index":1635,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteritem",{"_index":748,"title":{},"body":{"components/BsFacetDate.html":{}}}],["filteritem(item",{"_index":777,"title":{},"body":{"components/BsFacetDate.html":{}}}],["filtermodifiedevent",{"_index":1373,"title":{},"body":{"interfaces/Column.html":{}}}],["filters",{"_index":1435,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["filtertype",{"_index":1570,"title":{},"body":{"interfaces/Column.html":{}}}],["finally",{"_index":1560,"title":{},"body":{"interfaces/Column.html":{}}}],["finance/.../index.ts",{"_index":4063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finance/finance.module.ts",{"_index":2475,"title":{},"body":{"modules/FinanceModule.html":{}}}],["finance/messages/index.ts",{"_index":3877,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finance/money",{"_index":2613,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["financemodule",{"_index":2470,"title":{"modules/FinanceModule.html":{}},"body":{"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["find",{"_index":3237,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["find(a",{"_index":2688,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fire",{"_index":3579,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["first",{"_index":1406,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["fit",{"_index":636,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["fitbounds",{"_index":2508,"title":{},"body":{"components/MapComponent.html":{}}}],["fitnetwork",{"_index":3761,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["fitting",{"_index":2557,"title":{},"body":{"components/MapComponent.html":{}}}],["flag",{"_index":1740,"title":{},"body":{"interfaces/Column.html":{}}}],["flags",{"_index":1433,"title":{},"body":{"interfaces/Column.html":{}}}],["focus",{"_index":665,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["focusnode",{"_index":642,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["focusnode(node",{"_index":646,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["following",{"_index":3297,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["font",{"_index":904,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["for(let",{"_index":1562,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach",{"_index":3273,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["foreach(edge",{"_index":1892,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(event",{"_index":3613,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach(item",{"_index":1217,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["foreach(list",{"_index":1233,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["foreach(node",{"_index":1887,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(record",{"_index":2323,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["forget",{"_index":2011,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["form",{"_index":745,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["format",{"_index":270,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["formatcontent",{"_index":1397,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["formatdayrequest",{"_index":3106,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formating",{"_index":3105,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formatservice",{"_index":1356,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["formatted",{"_index":248,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{}}}],["formatter",{"_index":537,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["formatting",{"_index":2310,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["formbuilder",{"_index":761,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/VisEvent.html":{}}}],["formcontrol",{"_index":792,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/VisEvent.html":{}}}],["formcontrol([undefined",{"_index":826,"title":{},"body":{"components/BsFacetDate.html":{}}}],["formcontrol(this.dampingpref",{"_index":3817,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.gravitypref",{"_index":3821,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.repulsionpref",{"_index":3819,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springconstantpref",{"_index":3815,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springlengthpref",{"_index":3813,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formgroup",{"_index":794,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/VisEvent.html":{}}}],["formsmodule",{"_index":27,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["forwarded",{"_index":1401,"title":{},"body":{"interfaces/Column.html":{}}}],["found",{"_index":2201,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["foundid",{"_index":1718,"title":{},"body":{"interfaces/Column.html":{}}}],["foundrow",{"_index":1712,"title":{},"body":{"interfaces/Column.html":{}}}],["fractional",{"_index":2351,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["frame",{"_index":3738,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["frameworkcomponents",{"_index":1438,"title":{},"body":{"interfaces/Column.html":{}}}],["frfacet",{"_index":4114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frfinance",{"_index":3880,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgooglemaps",{"_index":3895,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgrid",{"_index":3876,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frheatmap",{"_index":3908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fromnode",{"_index":548,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["fromnode.id",{"_index":557,"title":{},"body":{"classes/BaseProvider.html":{}}}],["frresultsview",{"_index":4128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frsearch",{"_index":4129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fulltext",{"_index":1138,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["function",{"_index":72,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["functionality",{"_index":1419,"title":{},"body":{"interfaces/Column.html":{}}}],["functions",{"_index":1614,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Column.html":{},"miscellaneous/functions.html":{}}}],["fusion",{"_index":719,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["fusionchart",{"_index":718,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fusioncharts",{"_index":2485,"title":{},"body":{"modules/FusionChartsModule.html":{},"dependencies.html":{}}}],["fusioncharts.options.creditlabel",{"_index":2492,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/.../chart.ts",{"_index":4060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/chart/chart.ts",{"_index":3885,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/fusioncharts.charts",{"_index":2487,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.module.ts",{"_index":2483,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.candy",{"_index":2491,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.fusion",{"_index":2489,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusionchartsmodule",{"_index":2479,"title":{"modules/FusionChartsModule.html":{}},"body":{"modules/FusionChartsModule.html":{},"index.html":{},"modules.html":{}}}],["fusiontheme",{"_index":2488,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fw",{"_index":340,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["gain",{"_index":661,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["gate",{"_index":2061,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["gates",{"_index":527,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["gates)#(ceo)#(microsoft",{"_index":4024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gates/microsoft",{"_index":250,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["gaugemodule",{"_index":2916,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["gaxis",{"_index":2680,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gbrush",{"_index":3367,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["general",{"_index":2122,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["generate",{"_index":141,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generated",{"_index":1759,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generates",{"_index":175,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["generating",{"_index":1787,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generic",{"_index":4004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":2596,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["geolocated",{"_index":2561,"title":{},"body":{"components/MapComponent.html":{}}}],["geometry",{"_index":4068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.fill",{"_index":4090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.stroke",{"_index":4077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georecords",{"_index":2509,"title":{},"body":{"components/MapComponent.html":{}}}],["getactions",{"_index":800,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["getadjacentedges",{"_index":2828,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getadjacentedges(nodeid",{"_index":2194,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getaggregation",{"_index":2439,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregation(aggregationname",{"_index":875,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getappservice",{"_index":2441,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getcharttype",{"_index":2896,"title":{},"body":{"components/NgxChart.html":{}}}],["getcolorscheme",{"_index":2898,"title":{},"body":{"components/NgxChart.html":{}}}],["getconnectednodes",{"_index":2829,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getconnectednodes(nodeid",{"_index":2196,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getd3timeinterval(resolution",{"_index":3333,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdata",{"_index":124,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"miscellaneous/typealiases.html":{}}}],["getdata(context",{"_index":294,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getdatasource",{"_index":2435,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getdate",{"_index":3065,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdisplay",{"_index":3066,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getedge",{"_index":2830,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getedge(id",{"_index":2143,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedgeactions",{"_index":376,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeactions(edge",{"_index":404,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeid(node1",{"_index":518,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getedgeids",{"_index":2157,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedges",{"_index":2147,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["geteventaggregation(config",{"_index":3198,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getexportparams",{"_index":1669,"title":{},"body":{"interfaces/Column.html":{}}}],["getfacetservice",{"_index":2443,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getitem",{"_index":2383,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["getitem(datapoint",{"_index":2373,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getitemcolor",{"_index":1295,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["getlegend",{"_index":926,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["getmaxdate",{"_index":3118,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmindate",{"_index":3114,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmodel",{"_index":2417,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getname",{"_index":2301,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getnode",{"_index":2831,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getnode(id",{"_index":2141,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodeactions",{"_index":374,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getnodeactions(node",{"_index":353,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getnodeid(type",{"_index":523,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getnodeids",{"_index":2155,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodes",{"_index":2145,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodevalue(node",{"_index":525,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getprovider",{"_index":377,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getprovideractions",{"_index":332,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getquery",{"_index":1969,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["getrecordsasevents(config",{"_index":3202,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getresults",{"_index":2437,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getrows",{"_index":1634,"title":{},"body":{"interfaces/Column.html":{}}}],["gets",{"_index":3310,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["getstyle",{"_index":1272,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["gettimeseries(config",{"_index":3191,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getvisibleedges",{"_index":2152,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getvisiblenodes",{"_index":2149,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["given",{"_index":181,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":1640,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["google",{"_index":114,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["google.maps.latlngbounds",{"_index":2542,"title":{},"body":{"components/MapComponent.html":{}}}],["google.maps.latlngboundsliteral",{"_index":2555,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps",{"_index":2504,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps'},{'name",{"_index":721,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["googlemaps/.../dark",{"_index":4059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/.../index.ts",{"_index":4064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/dark",{"_index":3889,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps/googlemaps.module.ts",{"_index":2499,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["googlemaps/map.component.ts",{"_index":2503,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["googlemaps/map.component.ts:102",{"_index":2540,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:134",{"_index":2539,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:144",{"_index":2545,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:148",{"_index":2549,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:154",{"_index":2543,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:19",{"_index":2530,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:21",{"_index":2533,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:23",{"_index":2522,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:25",{"_index":2525,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:27",{"_index":2529,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:29",{"_index":2534,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:31",{"_index":2536,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:34",{"_index":2559,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:36",{"_index":2556,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:39",{"_index":2554,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:40",{"_index":2551,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:43",{"_index":2550,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:45",{"_index":2562,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:48",{"_index":2520,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:51",{"_index":2565,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:52",{"_index":2553,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:53",{"_index":2552,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:91",{"_index":2566,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/messages/index.ts",{"_index":3892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemapsmodule",{"_index":2495,"title":{"modules/GoogleMapsModule.html":{}},"body":{"modules/GoogleMapsModule.html":{},"index.html":{},"modules.html":{}}}],["goup",{"_index":3426,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graph",{"_index":3445,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graphical",{"_index":1035,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["gravity",{"_index":3826,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol",{"_index":3820,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol.value",{"_index":3835,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitypref",{"_index":3854,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["green",{"_index":3341,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["grid",{"_index":31,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{}}}],["grid.module.ts",{"_index":19,"title":{},"body":{"modules/AgGridModule.html":{}}}],["grid/.../data",{"_index":4055,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../datasource.ts",{"_index":4056,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../index.ts",{"_index":4065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grid/ag",{"_index":18,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{},"coverage.html":{}}}],["grid/data",{"_index":1931,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/datasource.ts",{"_index":3868,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/facet",{"_index":2407,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["grid/messages/index.ts",{"_index":3872,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gridactions",{"_index":1440,"title":{},"body":{"interfaces/Column.html":{}}}],["gridapi",{"_index":1362,"title":{},"body":{"interfaces/Column.html":{}}}],["gridcolumnapi",{"_index":1432,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreadyevent",{"_index":1364,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreset",{"_index":1393,"title":{},"body":{"interfaces/Column.html":{}}}],["grip",{"_index":3436,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripheight",{"_index":3643,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grips",{"_index":3369,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripwidth",{"_index":3648,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["group",{"_index":2411,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupedevents",{"_index":3353,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupevents(pixperevent",{"_index":3602,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grouping",{"_index":3486,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["guess",{"_index":3134,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["gx",{"_index":911,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gy",{"_index":912,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["h",{"_index":1598,"title":{},"body":{"interfaces/Column.html":{}}}],["hack",{"_index":660,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["handled",{"_index":2125,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["handling",{"_index":1830,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["happens",{"_index":4034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hascollapsededge",{"_index":1916,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasedge",{"_index":2832,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasedge(id",{"_index":2139,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["hasexpandededge",{"_index":1915,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasfiltered",{"_index":2308,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["hasn't",{"_index":1730,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["hasnode",{"_index":2833,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasnode(id",{"_index":2137,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["header",{"_index":1486,"title":{},"body":{"interfaces/Column.html":{}}}],["heatmap",{"_index":709,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["heatmap'},{'name",{"_index":703,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["heatmap.component",{"_index":1195,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap.component.html",{"_index":909,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.scss",{"_index":908,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.ts",{"_index":3897,"title":{},"body":{"coverage.html":{}}}],["heatmap/.../index.ts",{"_index":4066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heatmap/bootstrap/facet",{"_index":3896,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts",{"_index":906,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:108",{"_index":991,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:123",{"_index":975,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:160",{"_index":1003,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:189",{"_index":999,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:200",{"_index":995,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:209",{"_index":990,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:23",{"_index":953,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:230",{"_index":1021,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:26",{"_index":956,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:27",{"_index":970,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:28",{"_index":962,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:29",{"_index":969,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:32",{"_index":957,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:33",{"_index":947,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:36",{"_index":949,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:37",{"_index":951,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:38",{"_index":963,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:39",{"_index":964,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:40",{"_index":967,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:43",{"_index":973,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:44",{"_index":972,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:47",{"_index":1027,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:48",{"_index":1030,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:49",{"_index":1008,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:52",{"_index":1012,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:53",{"_index":1014,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:54",{"_index":1029,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:55",{"_index":1031,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:58",{"_index":1009,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:61",{"_index":1015,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:62",{"_index":1017,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:63",{"_index":1019,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:64",{"_index":1018,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:65",{"_index":1016,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:68",{"_index":1020,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:69",{"_index":945,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:78",{"_index":992,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.module.ts",{"_index":1191,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap/bootstrap/results",{"_index":3900,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts",{"_index":1252,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:37",{"_index":1268,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:38",{"_index":1267,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:39",{"_index":1269,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:40",{"_index":1271,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:41",{"_index":1270,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:43",{"_index":1273,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/messages/index.ts",{"_index":3905,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["heatmapitem",{"_index":952,"title":{"interfaces/HeatmapItem.html":{}},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["height",{"_index":632,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["hidden",{"_index":2903,"title":{},"body":{"components/NgxChart.html":{},"miscellaneous/functions.html":{}}}],["hide",{"_index":1509,"title":{},"body":{"interfaces/Column.html":{}}}],["hidepref",{"_index":1508,"title":{},"body":{"interfaces/Column.html":{}}}],["hiderecordnode",{"_index":438,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hiderecordnode=true",{"_index":4011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hides",{"_index":3517,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["highest",{"_index":2118,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["highlight",{"_index":2356,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["histogram",{"_index":3597,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["horizontalbar",{"_index":1326,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["host",{"_index":1157,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["hovered",{"_index":2821,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["hovers",{"_index":1004,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["html",{"_index":690,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["htmlelement",{"_index":1620,"title":{},"body":{"interfaces/Column.html":{}}}],["htmlelement).offsetwidth",{"_index":1129,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["http://localhost:4000/sba",{"_index":3034,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["https://github.com/angular/angular/issues/16982",{"_index":3633,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://github.com/d3/d3",{"_index":2756,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://stackoverflow.com/questions/13576906/d3",{"_index":2747,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://visjs.github.io/vis",{"_index":2106,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":4002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["humans",{"_index":4038,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hybrid",{"_index":1852,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["i=0",{"_index":1875,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["i=this.searchservice.query.select.length",{"_index":1645,"title":{},"body":{"interfaces/Column.html":{}}}],["i>=0",{"_index":1646,"title":{},"body":{"interfaces/Column.html":{}}}],["icellrendererfunc",{"_index":1360,"title":{},"body":{"interfaces/Column.html":{}}}],["icon",{"_index":335,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":516,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["idatasource",{"_index":1368,"title":{},"body":{"interfaces/Column.html":{}}}],["identifier",{"_index":2531,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["idoesfilterpassparams",{"_index":2424,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ids",{"_index":2154,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ids.foreach(id",{"_index":2175,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ie",{"_index":414,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!changes['record",{"_index":2958,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(!!existingedge[\"label",{"_index":2231,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!!item.value",{"_index":3306,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!this.selectfield.text",{"_index":2305,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!agg",{"_index":2462,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!changes.timeseries",{"_index":3122,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!changes[\"height",{"_index":3404,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!config.maxnmonths",{"_index":3232,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!dataset.hasedge(edge.id",{"_index":1864,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!dataset.hasnode(node.id",{"_index":1854,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!foundid",{"_index":1720,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!foundrow",{"_index":1715,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!item.display",{"_index":263,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!items",{"_index":3301,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!keepdanglingnodes",{"_index":2190,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!neighbor",{"_index":1896,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!neighbor.visible",{"_index":1909,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!node",{"_index":1803,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!previousvalue",{"_index":3638,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!record.modified",{"_index":2799,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!select",{"_index":3144,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!sourcenode",{"_index":262,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this._filterinput",{"_index":1728,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.active",{"_index":1795,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!this.context.appservice.getccaggregation(aggregation",{"_index":216,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this.currentrange",{"_index":3135,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.events",{"_index":3152,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.gridactions",{"_index":1467,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.hasedge(edge.id",{"_index":2221,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(edge.from",{"_index":2257,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(node.id",{"_index":2207,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.isfiltered(item",{"_index":2369,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!this.neighbors[type",{"_index":1225,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(!this.optionsprefs.physics",{"_index":3795,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.optionsprefs.physics.barneshut",{"_index":3797,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.params.coldef.field",{"_index":2456,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!this.permanent",{"_index":2038,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(!this.query",{"_index":1639,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.showtooltip",{"_index":2823,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!this.timeseries",{"_index":3145,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.tooltipitem",{"_index":2810,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.x",{"_index":2655,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.zoomable",{"_index":3492,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!utils.isstring(action",{"_index":1588,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!utils.isstring(parsedexpr",{"_index":3128,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!xextent[0",{"_index":2804,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!yextent[0",{"_index":2714,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if((config",{"_index":3164,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if((neighbor.visible",{"_index":1924,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if((node.precedence",{"_index":2209,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(_queries.length",{"_index":2022,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(action",{"_index":1590,"title":{},"body":{"interfaces/Column.html":{}}}],["if(action.selected",{"_index":1541,"title":{},"body":{"interfaces/Column.html":{}}}],["if(actions.length",{"_index":3747,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(agg.aggregation",{"_index":3168,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(aggregation",{"_index":233,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(array.isarray(config",{"_index":3190,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(bin",{"_index":3621,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(ccaggregation",{"_index":3218,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(changes.columns",{"_index":1463,"title":{},"body":{"interfaces/Column.html":{}}}],["if(changes.results",{"_index":1465,"title":{},"body":{"interfaces/Column.html":{}}}],["if(changes[\"events",{"_index":3422,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"height",{"_index":2664,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"width",{"_index":2667,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes['options",{"_index":3713,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['results",{"_index":3707,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['style",{"_index":2588,"title":{},"body":{"components/MapComponent.html":{}}}],["if(col.field",{"_index":1564,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col.filter",{"_index":1513,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col?.formatter",{"_index":541,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(currentvalue",{"_index":3634,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(data",{"_index":1678,"title":{},"body":{"interfaces/Column.html":{}}}],["if(datum",{"_index":2692,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["if(diff",{"_index":3483,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(directed",{"_index":560,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(edge.type.field",{"_index":589,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(event.edges.length",{"_index":3779,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.event.type",{"_index":3777,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.nodes.length",{"_index":3782,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.records.find(r",{"_index":1459,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.source",{"_index":1454,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.type",{"_index":3044,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["if(events!==this.tooltipitem",{"_index":3652,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(events.length",{"_index":3614,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(existingedge[\"labels\"].indexof(label",{"_index":2233,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(exprs.length",{"_index":3261,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(formatcontent",{"_index":1473,"title":{},"body":{"interfaces/Column.html":{}}}],["if(hascollapsededge",{"_index":1919,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(hasexpandededge",{"_index":1921,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(i",{"_index":1528,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(isnan(value",{"_index":2709,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(item.node",{"_index":1218,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(maxnmonths",{"_index":3241,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(neighborsneighbors.length",{"_index":1901,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(node.data?.$selected",{"_index":1750,"title":{},"body":{"interfaces/Column.html":{}}}],["if(node.visible",{"_index":1996,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(nodefrom",{"_index":595,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(opened",{"_index":3811,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(parsedexpr.values",{"_index":3131,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(properties.items.length>0",{"_index":3014,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(query",{"_index":2036,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(query.orderby",{"_index":1577,"title":{},"body":{"interfaces/Column.html":{}}}],["if(range",{"_index":3221,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(recorddata",{"_index":1820,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(recordnode.id",{"_index":1849,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(relation",{"_index":565,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(relativex",{"_index":1132,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(results.records.length",{"_index":2082,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(select",{"_index":3125,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(selection",{"_index":3252,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(sourcenode",{"_index":211,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this._filterinput",{"_index":1743,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this._networkinitialized",{"_index":3734,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectededge",{"_index":3749,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectednode",{"_index":3745,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.active",{"_index":304,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(this.aggregations",{"_index":2290,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.allowcustomrange",{"_index":847,"title":{},"body":{"components/BsFacetDate.html":{}}}],["if(this.checkselectionchange(this.currentselection",{"_index":3567,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.currentselection",{"_index":3524,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.data",{"_index":2313,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.edgetype.trigger",{"_index":2007,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["if(this.events",{"_index":3603,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.facetservice.hasfiltered(this.name",{"_index":2574,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.formatcontent",{"_index":1621,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["if(this.georecords.length",{"_index":2592,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.gridapi",{"_index":1546,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.gridapi?.getselectedrows().length",{"_index":1673,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.hasedge(edge.id",{"_index":2255,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.hasfiltered",{"_index":2303,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.hasnode(node.id",{"_index":2252,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.initdone",{"_index":3025,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.items.length",{"_index":2999,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.maxdate",{"_index":3474,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.mindate",{"_index":3472,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.nodecache.has(node.id",{"_index":2037,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.nodetype.trigger",{"_index":2070,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.openedwindow",{"_index":2604,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.orientation",{"_index":1274,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["if(this.providerssubscription",{"_index":3717,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.results",{"_index":1628,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.breadcrumbs",{"_index":3742,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.searchservice.query.findselect(this.name",{"_index":2652,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.query.select?.length",{"_index":1644,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.searchservice.query.select[i].facet.startswith(\"grid",{"_index":1647,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.selectedvalues.has(utils.tosqlvalue(item.value).tolowercase",{"_index":2346,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.skips[type.aggregation+node.id",{"_index":317,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this.tooltipitem",{"_index":2775,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.viewinit",{"_index":1076,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.zoombehavior",{"_index":3494,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(type",{"_index":238,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(type.display",{"_index":1886,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.field",{"_index":538,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(type.nodetypes.length",{"_index":1868,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.nodetypes[0",{"_index":1813,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.parse",{"_index":258,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(typeof",{"_index":545,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(types.length",{"_index":316,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(update",{"_index":1087,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(recorddata",{"_index":1824,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(val",{"_index":2329,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(recorddata",{"_index":1833,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isstring(this.record.modified",{"_index":3005,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(utils.isstring(v",{"_index":2331,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(val",{"_index":2327,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(value",{"_index":1836,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isundefined(x",{"_index":2771,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(val",{"_index":2326,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(value[\"value",{"_index":1838,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(values.length",{"_index":277,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(visibilityaction",{"_index":1660,"title":{},"body":{"interfaces/Column.html":{}}}],["if(year",{"_index":2985,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ifilterparams",{"_index":2421,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ignore",{"_index":1741,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ignored",{"_index":3073,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["image",{"_index":630,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["implementation",{"_index":481,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["implemented",{"_index":1769,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["implements",{"_index":484,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["importance",{"_index":532,"title":{},"body":{"classes/BaseProvider.html":{}}}],["important",{"_index":3405,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["improved",{"_index":3599,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["inactive",{"_index":2119,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["incl",{"_index":2698,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["include",{"_index":1758,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["includes",{"_index":406,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["including",{"_index":1798,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individually",{"_index":331,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["infinite",{"_index":1421,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["influence",{"_index":1843,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["information",{"_index":2065,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["infowindow",{"_index":2547,"title":{},"body":{"components/MapComponent.html":{}}}],["inherited",{"_index":387,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["initdone",{"_index":2922,"title":{},"body":{"components/ResultTimeline.html":{}}}],["initial",{"_index":3069,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialization",{"_index":1585,"title":{},"body":{"interfaces/Column.html":{},"components/MapComponent.html":{}}}],["initialize",{"_index":298,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialized",{"_index":1689,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["inject",{"_index":1950,"title":{},"body":{"components/DataModalComponent.html":{}}}],["inject(modal_model",{"_index":1947,"title":{},"body":{"components/DataModalComponent.html":{}}}],["injectable",{"_index":3959,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["innerheight",{"_index":2654,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["innerwidth",{"_index":2653,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["input",{"_index":653,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["inputs",{"_index":644,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["insert",{"_index":2043,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["inserted",{"_index":1747,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["inside",{"_index":1024,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instance",{"_index":663,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instanceof",{"_index":3307,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["instead",{"_index":431,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["integer",{"_index":2745,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["integers",{"_index":2750,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["interaction",{"_index":1037,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interactions",{"_index":1041,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interface",{"_index":56,"title":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":58,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{}}}],["intermediate",{"_index":462,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["internally",{"_index":2126,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interval",{"_index":3136,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interval*0.1",{"_index":3141,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["intervals",{"_index":3522,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["intlmodule",{"_index":33,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["intlservice",{"_index":1287,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["intlsubscription",{"_index":3370,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invalid/empty",{"_index":3449,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invisible",{"_index":1911,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["is(sq",{"_index":2410,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isaggregationedgetype",{"_index":3946,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isaggregationedgetype(et",{"_index":173,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype",{"_index":3955,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype(et",{"_index":1973,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isedgevisible(type",{"_index":1885,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isfilteractive",{"_index":2418,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isfiltered",{"_index":749,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{}}}],["isfiltered(item",{"_index":780,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["ishidden",{"_index":2381,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["isnan(val[1",{"_index":2800,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["isoltated",{"_index":1929,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isstructuraledgetype",{"_index":3963,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isstructuraledgetype(et",{"_index":1785,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["istree",{"_index":2414,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["it's",{"_index":2123,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["item",{"_index":155,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["item.count",{"_index":288,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["item.date",{"_index":3314,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.display!.length",{"_index":2703,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display!.substr(1",{"_index":2702,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display.split",{"_index":273,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["item.node",{"_index":1229,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.context.appservice.getplurallabel(item.node.type.field",{"_index":1220,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.field",{"_index":1219,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.name",{"_index":1223,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.start",{"_index":1144,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["item.unsubscribe",{"_index":854,"title":{},"body":{"components/BsFacetDate.html":{}}}],["item.value",{"_index":266,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.value.tostring",{"_index":3308,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item:hover",{"_index":894,"title":{},"body":{"components/BsFacetDate.html":{}}}],["itemclicked",{"_index":942,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itemclickevent",{"_index":1301,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["items",{"_index":107,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["items._data[properties.items[0]].start",{"_index":3017,"title":{},"body":{"components/ResultTimeline.html":{}}}],["itemsclickable",{"_index":934,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itimeseries",{"_index":3228,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itooltipparams",{"_index":1361,"title":{},"body":{"interfaces/Column.html":{}}}],["itself",{"_index":1853,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["j",{"_index":2031,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["jmin",{"_index":3239,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["job",{"_index":4023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jobs",{"_index":272,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["justify",{"_index":3090,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["keep",{"_index":2744,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keepdanglingnodes",{"_index":2181,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["keeping",{"_index":2560,"title":{},"body":{"components/MapComponent.html":{}}}],["kept",{"_index":2116,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key",{"_index":572,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key:string",{"_index":3089,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["keyword",{"_index":2623,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["l",{"_index":3650,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["label",{"_index":357,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["label1",{"_index":599,"title":{},"body":{"classes/BaseProvider.html":{}}}],["label2",{"_index":601,"title":{},"body":{"classes/BaseProvider.html":{}}}],["labeldisplay",{"_index":4106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels",{"_index":2228,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["labels.text.fill",{"_index":4071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels.text.stroke",{"_index":4073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.man_made",{"_index":4082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.natural",{"_index":4084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":2353,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["larry",{"_index":112,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["last",{"_index":3616,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["last.push(event",{"_index":3622,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastbin",{"_index":3618,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastnode",{"_index":286,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["latitude",{"_index":2524,"title":{},"body":{"components/MapComponent.html":{}}}],["latitudefield",{"_index":2516,"title":{},"body":{"components/MapComponent.html":{}}}],["left",{"_index":625,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["left.px",{"_index":1275,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["legend",{"_index":689,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["legend.component",{"_index":1250,"title":{},"body":{"modules/BsTimelineModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legend.component.ts",{"_index":3662,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["legend.component.ts:54",{"_index":3671,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:55",{"_index":3672,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:56",{"_index":3674,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:57",{"_index":3675,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:58",{"_index":3673,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legendevents",{"_index":3092,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legendorientation",{"_index":3093,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legendstyles",{"_index":3088,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["legendyoffset",{"_index":3095,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["length",{"_index":3635,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["lets",{"_index":1568,"title":{},"body":{"interfaces/Column.html":{}}}],["library",{"_index":2486,"title":{},"body":{"modules/FusionChartsModule.html":{},"interfaces/VisEvent.html":{}}}],["life",{"_index":2096,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["light",{"_index":965,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["lightblue",{"_index":3665,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["limit",{"_index":3572,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["limits",{"_index":1775,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["line",{"_index":1102,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["linestyles",{"_index":3050,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["link",{"_index":1782,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["linked",{"_index":4012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["links",{"_index":1927,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["list",{"_index":190,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["list.sort((a,b",{"_index":1234,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["listen",{"_index":832,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["listener",{"_index":3714,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["literal",{"_index":389,"title":{},"body":{"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/EdgeType.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/typealiases.html":{}}}],["locale",{"_index":3373,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["localechange",{"_index":1308,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["longitude",{"_index":2528,"title":{},"body":{"components/MapComponent.html":{}}}],["longitudefield",{"_index":2517,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":1558,"title":{},"body":{"interfaces/Column.html":{}}}],["lot",{"_index":2063,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["m",{"_index":3108,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["made",{"_index":3170,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["make",{"_index":1912,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["makedata",{"_index":2311,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["makedatasource",{"_index":1627,"title":{},"body":{"interfaces/Column.html":{}}}],["manage",{"_index":1434,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["manages",{"_index":2054,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["managing",{"_index":64,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["manual",{"_index":131,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["manually",{"_index":4048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":180,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/VisEvent.html":{}}}],["map",{"_index":807,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(agg",{"_index":2296,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(d",{"_index":3194,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(e",{"_index":1214,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["map(events",{"_index":3157,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(item",{"_index":3305,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(r",{"_index":3205,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(results",{"_index":3224,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(x",{"_index":3565,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["map.component",{"_index":2502,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["map.component.html",{"_index":2505,"title":{},"body":{"components/MapComponent.html":{}}}],["map.set(node.id",{"_index":1998,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mapcomponent",{"_index":720,"title":{"components/MapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["mapstyles",{"_index":2510,"title":{},"body":{"components/MapComponent.html":{}}}],["margin",{"_index":935,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["marker",{"_index":2538,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":2558,"title":{},"body":{"components/MapComponent.html":{}}}],["marks",{"_index":2749,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["matching",{"_index":55,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(event.date.gettime",{"_index":3620,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(last[0].date.gettime",{"_index":3619,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(this.innerwidth",{"_index":3605,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.max((this.innerheight",{"_index":3645,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.min(10",{"_index":3644,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.round(this.height",{"_index":3545,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.round(this.width",{"_index":3543,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max",{"_index":1040,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["max_dates",{"_index":2927,"title":{},"body":{"components/ResultTimeline.html":{}}}],["max_year",{"_index":2928,"title":{},"body":{"components/ResultTimeline.html":{}}}],["maxaggregationdate",{"_index":3078,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxdate",{"_index":3072,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxheight",{"_index":2954,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":3060,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxlat",{"_index":2577,"title":{},"body":{"components/MapComponent.html":{}}}],["maxlng",{"_index":2581,"title":{},"body":{"components/MapComponent.html":{}}}],["maxnmonths",{"_index":3059,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxx",{"_index":936,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxy",{"_index":937,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxzoomdays",{"_index":3082,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["meaning",{"_index":4032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["means",{"_index":120,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["measured",{"_index":3594,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["menu",{"_index":2279,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["merge",{"_index":469,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["merge(dataset",{"_index":2204,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["merged",{"_index":535,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["mergedatasets(datasets",{"_index":3726,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["mergedevents",{"_index":3102,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mergedtimeseries",{"_index":3101,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["merges",{"_index":1866,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["merging",{"_index":2117,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["metadata",{"_index":66,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/functions.html":{}}}],["method",{"_index":362,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["methods",{"_index":372,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["microsoft",{"_index":1791,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["middle",{"_index":554,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min",{"_index":3238,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min_dates",{"_index":2929,"title":{},"body":{"components/ResultTimeline.html":{}}}],["min_year",{"_index":2930,"title":{},"body":{"components/ResultTimeline.html":{}}}],["minaggregationdate",{"_index":3077,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mindate",{"_index":3071,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["mindiff",{"_index":3479,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minheight",{"_index":2952,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":3471,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minlat",{"_index":2575,"title":{},"body":{"components/MapComponent.html":{}}}],["minlng",{"_index":2579,"title":{},"body":{"components/MapComponent.html":{}}}],["minus",{"_index":820,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["minzoomdays",{"_index":3080,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["misc",{"_index":1046,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["miscellaneous",{"_index":3995,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2259,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mistake",{"_index":217,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["mm",{"_index":3324,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modal",{"_index":1933,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal'},{'name",{"_index":713,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["modal.component",{"_index":47,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["modal.component.html",{"_index":1936,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts",{"_index":1932,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["modal.component.ts:30",{"_index":1944,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:31",{"_index":1945,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:32",{"_index":1941,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:35",{"_index":1948,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:36",{"_index":1949,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:37",{"_index":1946,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:42",{"_index":1942,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:53",{"_index":1943,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal_model",{"_index":1952,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modalservice",{"_index":1357,"title":{},"body":{"interfaces/Column.html":{}}}],["mode",{"_index":119,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":1430,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["model.defaultstate",{"_index":1582,"title":{},"body":{"interfaces/Column.html":{}}}],["model.formatcontent",{"_index":1954,"title":{},"body":{"components/DataModalComponent.html":{}}}],["model.name",{"_index":2900,"title":{},"body":{"components/NgxChart.html":{}}}],["model.state",{"_index":1581,"title":{},"body":{"interfaces/Column.html":{}}}],["model.value",{"_index":2901,"title":{},"body":{"components/NgxChart.html":{}}}],["model[col.field",{"_index":1566,"title":{},"body":{"interfaces/Column.html":{}}}],["models",{"_index":95,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["models.ts",{"_index":2098,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{}}}],["models.ts:100",{"_index":2872,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:103",{"_index":2869,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:106",{"_index":2867,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:109",{"_index":2866,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:112",{"_index":2871,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:128",{"_index":2825,"title":{},"body":{"interfaces/NetworkContext.html":{}}}],["models.ts:142",{"_index":2851,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:147",{"_index":2850,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:152",{"_index":2845,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:157",{"_index":2842,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:162",{"_index":2847,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:167",{"_index":2844,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:172",{"_index":2849,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:177",{"_index":2848,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:182",{"_index":2846,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:187",{"_index":2843,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:192",{"_index":2839,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:198",{"_index":2837,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:203",{"_index":2836,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:213",{"_index":2853,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:218",{"_index":2838,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:230",{"_index":2840,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:235",{"_index":2841,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:251",{"_index":2852,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:318",{"_index":2854,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:85",{"_index":2868,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:88",{"_index":2865,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:91",{"_index":2870,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:94",{"_index":2874,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:97",{"_index":2873,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["modelupdatedevent",{"_index":1374,"title":{},"body":{"interfaces/Column.html":{}}}],["modes",{"_index":125,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["modified",{"_index":767,"title":{},"body":{"components/BsFacetDate.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modifying",{"_index":2206,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["module",{"_index":0,"title":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{}}}],["module.ts",{"_index":3860,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["moment",{"_index":1762,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["moment(date).format('ll",{"_index":2998,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(dateobj.display).todate",{"_index":2993,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(val.length",{"_index":3309,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["money",{"_index":723,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["moneyaggregation",{"_index":2629,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["moneycloudcomponent",{"_index":722,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyclouddatum",{"_index":2612,"title":{"interfaces/MoneyCloudDatum.html":{}},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["moneycolumn",{"_index":2781,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["moneydatum",{"_index":2776,"title":{"interfaces/MoneyDatum.html":{}},"body":{"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["moneytimelinecomponent",{"_index":725,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyvaluecolumn",{"_index":2626,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["mono",{"_index":1821,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["month",{"_index":3320,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["months",{"_index":3061,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["more",{"_index":1386,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mouse",{"_index":1005,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["mouseevent",{"_index":1002,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["move",{"_index":670,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["moved",{"_index":3549,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ms",{"_index":1036,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["msg#facet.clearselects",{"_index":2286,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["msg#facet.filters.clear",{"_index":822,"title":{},"body":{"components/BsFacetDate.html":{}}}],["msg#googlemaps.filterarea",{"_index":2573,"title":{},"body":{"components/MapComponent.html":{}}}],["msg#grid.autosize",{"_index":1599,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.autosizetitle",{"_index":1600,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.columns",{"_index":1450,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copy",{"_index":1603,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copytitle",{"_index":1604,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.download",{"_index":1607,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.downloadtitle",{"_index":1608,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.formatdata",{"_index":1611,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["msg#grid.formatdatatitle",{"_index":1612,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.reset",{"_index":1594,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.resettitle",{"_index":1595,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#heatmap.showing",{"_index":1146,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#heatmap.tooltip",{"_index":1153,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#network.actions.active",{"_index":504,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.collapsemeta",{"_index":1923,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.expandmeta",{"_index":1920,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.fetchmoreall",{"_index":342,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.fetchmorealltext",{"_index":344,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.inactive",{"_index":505,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.providers",{"_index":3753,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.refresh",{"_index":3704,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.reset",{"_index":513,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.resettitle",{"_index":514,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.toggle",{"_index":506,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.infocards.aggregation",{"_index":681,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msg#network.infocards.count",{"_index":678,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["msg#network.infocards.record",{"_index":683,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msgfrom",{"_index":1859,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msgto",{"_index":1860,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multi",{"_index":1822,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multiple",{"_index":1404,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["multivalued",{"_index":2382,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["mutable",{"_index":2114,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mutate",{"_index":2077,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutatenodes(nodes",{"_index":2085,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutates",{"_index":2084,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutation",{"_index":2089,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["muted",{"_index":687,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["n.visible",{"_index":2151,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["name",{"_index":144,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":1487,"title":{},"body":{"interfaces/Column.html":{}}}],["native",{"_index":2671,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["nbins",{"_index":3604,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["necessarily",{"_index":1480,"title":{},"body":{"interfaces/Column.html":{}}}],["necessary",{"_index":1979,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["need",{"_index":318,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"modules/BsTimelineModule.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["needs",{"_index":2464,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["neighbor",{"_index":467,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbor.count",{"_index":2189,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["neighbor.key",{"_index":1237,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["neighbor.visible",{"_index":1902,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbors",{"_index":1197,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighborsneighbors",{"_index":1899,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["network",{"_index":94,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["network'},{'name",{"_index":727,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["network.component",{"_index":2863,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network.component.html",{"_index":3681,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["network/.../aggregation",{"_index":3997,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/.../dynamic",{"_index":3998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network",{"_index":3996,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network.component.ts",{"_index":4061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["network/.../records",{"_index":3999,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/docs/network",{"_index":3679,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["network/docs/network/edges.html",{"_index":2112,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/docs/network/nodes.html",{"_index":2107,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/edge",{"_index":617,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"coverage.html":{}}}],["network/network",{"_index":2097,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/network.component.ts",{"_index":3677,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["network/network.module.ts",{"_index":2859,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network/node",{"_index":1196,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["network/providers/aggregation",{"_index":59,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/async",{"_index":427,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["network/providers/base",{"_index":480,"title":{},"body":{"classes/BaseProvider.html":{},"coverage.html":{}}}],["network/providers/dynamic",{"_index":1962,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/providers/provider",{"_index":3957,"title":{},"body":{"coverage.html":{}}}],["network/providers/records",{"_index":1754,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/selected",{"_index":3029,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["networkcomponent",{"_index":726,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"index.html":{}}}],["networkcontext",{"_index":93,"title":{"interfaces/NetworkContext.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkdataset",{"_index":92,"title":{"classes/NetworkDataset.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkinitialized",{"_index":3763,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["networkinstance",{"_index":666,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.focus(node.id",{"_index":668,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.selectnodes([node.id",{"_index":672,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkmodule",{"_index":2855,"title":{"modules/NetworkModule.html":{}},"body":{"modules/NetworkModule.html":{},"index.html":{},"modules.html":{}}}],["networkprovider",{"_index":290,"title":{"interfaces/NetworkProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["networkservice",{"_index":664,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["new",{"_index":149,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["newmodel",{"_index":1733,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows",{"_index":1707,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.find(row",{"_index":1713,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.foreach(row",{"_index":1717,"title":{},"body":{"interfaces/Column.html":{}}}],["newselection",{"_index":3562,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["next",{"_index":449,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ng",{"_index":1160,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["ngafterviewinit",{"_index":927,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngdocheck",{"_index":1341,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["ngmodule",{"_index":23,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["ngonchanges",{"_index":643,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngonchanges(changes",{"_index":782,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngonchanges(changes:simplechanges",{"_index":2957,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ngondestroy",{"_index":750,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngoninit",{"_index":751,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ngx",{"_index":715,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["ngxchart",{"_index":728,"title":{"components/NgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["ngxchartsmodule",{"_index":2905,"title":{"modules/NgxChartsModule.html":{}},"body":{"modules/NgxChartsModule.html":{},"index.html":{},"modules.html":{}}}],["nmonths",{"_index":3230,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["node",{"_index":89,"title":{"interfaces/Node.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["node's",{"_index":4041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node.context.name",{"_index":582,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.networkservice['networks'][node.context.name",{"_index":667,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.context.searchservice.query.addselect(expr",{"_index":581,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.searchservice.search",{"_index":583,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.select(node",{"_index":675,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.count",{"_index":688,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["node.data.id",{"_index":1461,"title":{},"body":{"interfaces/Column.html":{}}}],["node.id",{"_index":1850,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.id.substr(node.type.name.length+1",{"_index":526,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.isselected",{"_index":1751,"title":{},"body":{"interfaces/Column.html":{}}}],["node.label",{"_index":358,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["node.provider",{"_index":576,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.record",{"_index":1828,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.record[type.field",{"_index":1819,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.setselected(event.type",{"_index":1462,"title":{},"body":{"interfaces/Column.html":{}}}],["node.setselected(true",{"_index":1752,"title":{},"body":{"interfaces/Column.html":{}}}],["node.type",{"_index":315,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type.field",{"_index":577,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.visible",{"_index":1847,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node1.id",{"_index":520,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2",{"_index":519,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2.id",{"_index":522,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node['icon']['code",{"_index":685,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["node[\\'icon\\'][\\'code",{"_index":697,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["nodecache",{"_index":1987,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["nodeclicked",{"_index":3686,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodedata",{"_index":1198,"title":{"interfaces/NodeData.html":{}},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["nodedata.count",{"_index":1240,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node.label",{"_index":1239,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node['icon']['code",{"_index":1238,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node[\\'icon\\'][\\'code",{"_index":1241,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodefrom",{"_index":584,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.label",{"_index":600,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.type.field",{"_index":596,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeid",{"_index":2187,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeidx",{"_index":2135,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeoptions",{"_index":2108,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes",{"_index":150,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["nodes.foreach(node",{"_index":2163,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.remove(nodes.get().filter(n",{"_index":2245,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.update(this.getvisiblenodes",{"_index":2249,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes/edges",{"_index":1856,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["nodes[i].getcomputedtextlength",{"_index":1136,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["nodeto",{"_index":586,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.label",{"_index":602,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.type.field",{"_index":597,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodetpl",{"_index":3694,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodetype",{"_index":436,"title":{"interfaces/NodeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["nodetypes",{"_index":2111,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodetypes[1",{"_index":154,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["none",{"_index":1185,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["normalize",{"_index":2697,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["north",{"_index":2600,"title":{},"body":{"components/MapComponent.html":{}}}],["note",{"_index":533,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["nothing",{"_index":3623,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["notify",{"_index":1738,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["now",{"_index":3765,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nticks",{"_index":3542,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null",{"_index":1431,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null/undefined",{"_index":3629,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number",{"_index":164,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["number.isinteger(tick",{"_index":2743,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.max_value",{"_index":3519,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.min_value",{"_index":3518,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["numbercardmodule",{"_index":2915,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["numerical",{"_index":2699,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["o(n",{"_index":2193,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["obama",{"_index":4030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":433,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":2205,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["object.keys(query.aggregations).foreach(aggregation",{"_index":215,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["object.values(this.neighbors",{"_index":1232,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["objects",{"_index":1383,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["observable",{"_index":3051,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["observables",{"_index":3097,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["obtain",{"_index":1968,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["obtained",{"_index":1079,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["occurrences",{"_index":810,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["of({aggregation",{"_index":3217,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["oldmodel",{"_index":1731,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows",{"_index":1709,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.find(id",{"_index":1719,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.foreach(id",{"_index":1711,"title":{},"body":{"interfaces/Column.html":{}}}],["on(\"click",{"_index":1112,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["on(\"end",{"_index":1093,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousedown.zoom",{"_index":3512,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousemove",{"_index":2673,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mouseout",{"_index":2786,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"start",{"_index":3393,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchend.zoom",{"_index":3516,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchmove.zoom",{"_index":3515,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchstart.zoom",{"_index":3514,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"zoom",{"_index":3508,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('brush",{"_index":3395,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('end",{"_index":3397,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on/off",{"_index":3586,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onafterviewinit",{"_index":1078,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onaxisclicked",{"_index":928,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onaxisclicked(value",{"_index":994,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onboundschange",{"_index":2513,"title":{},"body":{"components/MapComponent.html":{}}}],["onboundschange(bounds",{"_index":2541,"title":{},"body":{"components/MapComponent.html":{}}}],["onbrush",{"_index":3557,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onbrushend",{"_index":3561,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["once",{"_index":330,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oncelldoubleclicked(event",{"_index":1698,"title":{},"body":{"interfaces/Column.html":{}}}],["onchange",{"_index":3684,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onchanges",{"_index":619,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onchanges,afterviewinit",{"_index":2622,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onclick",{"_index":130,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["ondatasetsmerged",{"_index":378,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["ondatasetsmerged(dataset",{"_index":419,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ondestroy",{"_index":379,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["one",{"_index":310,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onedgeclicked",{"_index":380,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onedgeclicked(edge",{"_index":422,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ones",{"_index":1930,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["oneventclick(event",{"_index":3587,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oneventclicked(event",{"_index":3276,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onfilterchanged",{"_index":1726,"title":{},"body":{"interfaces/Column.html":{}}}],["onfilterchanged(event",{"_index":1739,"title":{},"body":{"interfaces/Column.html":{}}}],["onfiltermodified(event",{"_index":1727,"title":{},"body":{"interfaces/Column.html":{}}}],["ongridready(event",{"_index":1690,"title":{},"body":{"interfaces/Column.html":{}}}],["oninit",{"_index":738,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["oninsert",{"_index":135,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["onitemclicked",{"_index":929,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onitemclicked(item",{"_index":998,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["only/56821215",{"_index":2751,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmapclick",{"_index":2514,"title":{},"body":{"components/MapComponent.html":{}}}],["onmapclick(event",{"_index":2544,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick",{"_index":2515,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick(event",{"_index":2546,"title":{},"body":{"components/MapComponent.html":{}}}],["onmodelupdated(event",{"_index":1749,"title":{},"body":{"interfaces/Column.html":{}}}],["onmouseenterdatum(datum",{"_index":2766,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onmousemove",{"_index":2761,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseout",{"_index":2820,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseover",{"_index":930,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onmouseover(item",{"_index":1001,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["onnetworkclick(eventdata",{"_index":3774,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onnodeclicked",{"_index":375,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodeclicked(node",{"_index":313,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["onnodesinserted",{"_index":381,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodesinserted(nodes",{"_index":424,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onopensettings(opened",{"_index":3810,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onrangechange(range",{"_index":3268,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onrecordclicked(datum",{"_index":2815,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["onresize",{"_index":1313,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["onrowdatachanged(event",{"_index":1695,"title":{},"body":{"interfaces/Column.html":{}}}],["onselectionchange(selection",{"_index":3251,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onselectionchanged(event",{"_index":1706,"title":{},"body":{"interfaces/Column.html":{}}}],["onsortchanged(event",{"_index":1745,"title":{},"body":{"interfaces/Column.html":{}}}],["onzoom",{"_index":3569,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onzoomend",{"_index":3577,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ootbconfig",{"_index":3929,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ootbconfig(providerfactory",{"_index":4015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["opacity",{"_index":1172,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["open",{"_index":3521,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["opened",{"_index":2563,"title":{},"body":{"components/MapComponent.html":{},"interfaces/VisEvent.html":{}}}],["openedwindow",{"_index":2511,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":76,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":143,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["optionsprefs",{"_index":3685,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["order",{"_index":1637,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["orderby",{"_index":1574,"title":{},"body":{"interfaces/Column.html":{}}}],["ordering",{"_index":1664,"title":{},"body":{"interfaces/Column.html":{}}}],["ored",{"_index":2203,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["orientation",{"_index":1266,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["original",{"_index":2057,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["originalcount",{"_index":913,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["others",{"_index":1766,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["output",{"_index":1032,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["output(\"item",{"_index":1299,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["outputs",{"_index":940,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["outside",{"_index":3407,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["over",{"_index":1006,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overflow",{"_index":1934,"title":{},"body":{"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["overlay",{"_index":2647,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["override",{"_index":1469,"title":{},"body":{"interfaces/Column.html":{}}}],["overriden",{"_index":1414,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overview",{"_index":4049,"title":{"index.html":{}},"body":{"index.html":{}}}],["p.getdata(this.context",{"_index":3724,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getedgeactions(this._selectededge",{"_index":3750,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getnodeactions(this._selectednode",{"_index":3746,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider",{"_index":3721,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider())).subscribe(dataset",{"_index":1993,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["p.getprovideractions",{"_index":3755,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.ondatasetsmerged(dataset",{"_index":3730,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onedgeclicked(edge",{"_index":3702,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodeclicked(node",{"_index":3700,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodesinserted(this.context.nodes.get",{"_index":3736,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["package",{"_index":3978,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":901,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetWrapperComponent.html":{}}}],["page",{"_index":113,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["pages",{"_index":4035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginate",{"_index":1781,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["pagination",{"_index":1776,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["panel",{"_index":3809,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["param",{"_index":171,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["parameter",{"_index":160,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["parameters",{"_index":385,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1619,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["params.coldef",{"_index":1617,"title":{},"body":{"interfaces/Column.html":{}}}],["params.coldef.$column",{"_index":1623,"title":{},"body":{"interfaces/Column.html":{}}}],["params.onlyselected",{"_index":1674,"title":{},"body":{"interfaces/Column.html":{}}}],["params.value",{"_index":1616,"title":{},"body":{"interfaces/Column.html":{}}}],["parent",{"_index":2814,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["parse",{"_index":71,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsed",{"_index":1756,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsedexpr",{"_index":3126,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parsedexpr.operands[0",{"_index":3130,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseentity",{"_index":2700,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["parsefloat(val[1",{"_index":2801,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["parsefloat(valuestr",{"_index":2707,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["parseint(id[1",{"_index":3021,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parsing",{"_index":268,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["particular",{"_index":1965,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["passed",{"_index":2127,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["path",{"_index":3649,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["paul",{"_index":4044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":3981,"title":{},"body":{"dependencies.html":{}}}],["people",{"_index":4046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["per",{"_index":3098,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["performs",{"_index":1773,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["permanent",{"_index":1989,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["persist",{"_index":1535,"title":{},"body":{"interfaces/Column.html":{}}}],["person",{"_index":4007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["piece",{"_index":3642,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["piechartmodule",{"_index":2913,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["pipe",{"_index":842,"title":{},"body":{"components/BsFacetDate.html":{}}}],["pixel",{"_index":3595,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pixperevent",{"_index":3601,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["plus",{"_index":338,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["poi",{"_index":4086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poi.park",{"_index":4089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":1080,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pointer",{"_index":1171,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/VisEvent.html":{}}}],["points",{"_index":2355,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["populate",{"_index":1534,"title":{},"body":{"interfaces/Column.html":{}}}],["popup_extract(id[0",{"_index":3020,"title":{},"body":{"components/ResultTimeline.html":{}}}],["pos",{"_index":2975,"title":{},"body":{"components/ResultTimeline.html":{}}}],["position",{"_index":1155,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["possible",{"_index":1810,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["possibly",{"_index":1413,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["post",{"_index":468,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["potentially",{"_index":311,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pre",{"_index":1047,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["precedence",{"_index":1765,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["predefined",{"_index":892,"title":{},"body":{"components/BsFacetDate.html":{}}}],["preference",{"_index":1536,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["preferences",{"_index":1471,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["prefs",{"_index":1448,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["present",{"_index":1857,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pretty",{"_index":1222,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["prev.merge(cur",{"_index":3729,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prevent",{"_index":1926,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previous",{"_index":3493,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previously",{"_index":2039,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["previousvalue",{"_index":3625,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previousvalue.length",{"_index":3639,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primary",{"_index":874,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["primaryseries",{"_index":3453,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primitives",{"_index":2790,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["prior",{"_index":3070,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["private",{"_index":815,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["probably",{"_index":1792,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["process",{"_index":229,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["processcellcallback",{"_index":1671,"title":{},"body":{"interfaces/Column.html":{}}}],["processcellforexportparams",{"_index":1370,"title":{},"body":{"interfaces/Column.html":{}}}],["processed",{"_index":1982,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processednodes",{"_index":1983,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processes",{"_index":2076,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processing",{"_index":1770,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["processnode(node",{"_index":2035,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["produce",{"_index":3683,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["produced",{"_index":3725,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["programmatic",{"_index":1742,"title":{},"body":{"interfaces/Column.html":{}}}],["programmatically",{"_index":984,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["propagate",{"_index":1910,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["propagated",{"_index":3274,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["properties",{"_index":75,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["properties.event",{"_index":3012,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.event.target,url",{"_index":3022,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items",{"_index":3010,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items[0].split",{"_index":3015,"title":{},"body":{"components/ResultTimeline.html":{}}}],["property",{"_index":409,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["protected",{"_index":186,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["provide",{"_index":2062,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["provided",{"_index":148,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["provider",{"_index":104,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["provider.ts",{"_index":60,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["provider.ts:10",{"_index":439,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:141",{"_index":397,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:15",{"_index":488,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:151",{"_index":494,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:155",{"_index":491,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:159",{"_index":496,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:16",{"_index":487,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:163",{"_index":500,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:167",{"_index":499,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:171",{"_index":498,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:179",{"_index":495,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:18",{"_index":489,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:188",{"_index":493,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:19",{"_index":3037,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["provider.ts:21",{"_index":486,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:211",{"_index":492,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:23",{"_index":490,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:245",{"_index":497,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:25",{"_index":485,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:28",{"_index":446,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["provider.ts:39",{"_index":2067,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["provider.ts:58",{"_index":2048,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["provider.ts:65",{"_index":384,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:74",{"_index":2917,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["providerfactory",{"_index":3960,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":448,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["providersactionlist",{"_index":3751,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providerssubscription",{"_index":3697,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["provides",{"_index":1485,"title":{},"body":{"interfaces/Column.html":{}}}],["providing",{"_index":1811,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["public",{"_index":185,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["q",{"_index":2021,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["queries",{"_index":1972,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["queries.filter(q",{"_index":2020,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["query",{"_index":97,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["query.action",{"_index":202,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(`${ccaggregation.column}:[${this.formatdayrequest(range[0])}..${this.formatdayrequest(range[1",{"_index":3222,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(this.context.exprbuilder.makeexpr(sourcenode.type.field",{"_index":213,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.aggregations",{"_index":204,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.aggregations[type.aggregation",{"_index":206,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.findselect(\"grid",{"_index":1563,"title":{},"body":{"interfaces/Column.html":{}}}],["query.orderby.split",{"_index":1579,"title":{},"body":{"interfaces/Column.html":{}}}],["query.select",{"_index":3249,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query|undefined",{"_index":2030,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r",{"_index":2642,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.$selected",{"_index":3210,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.id",{"_index":1460,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.records.length",{"_index":2074,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.records[0",{"_index":2075,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.title",{"_index":3216,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r[this.latitudefield",{"_index":2586,"title":{},"body":{"components/MapComponent.html":{}}}],["r[this.moneyvaluecolumn]?.foreach((item",{"_index":2731,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["radius",{"_index":634,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NodeData.html":{}}}],["range",{"_index":790,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range([0",{"_index":1062,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range([4",{"_index":2661,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range([this.innerheight",{"_index":2659,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(d3.schemecategory10",{"_index":2663,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range(d3[this.colorscheme][this.buckets",{"_index":1073,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["range(this.x.range",{"_index":3539,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(this.xt.range",{"_index":3541,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range).pipe",{"_index":3193,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range).subscribe",{"_index":3177,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[0",{"_index":883,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[1",{"_index":884,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rangechange",{"_index":3350,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rangeinit",{"_index":3349,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["raw",{"_index":954,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rawdata",{"_index":257,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed",{"_index":282,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed[i",{"_index":283,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.fieldvalue",{"_index":287,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations",{"_index":280,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations[i",{"_index":281,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawvalue",{"_index":2617,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rawvalue.split",{"_index":2797,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["re",{"_index":2087,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reactiveformsmodule",{"_index":28,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["read",{"_index":2640,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["read/write",{"_index":2636,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["readable",{"_index":2121,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["readonly",{"_index":182,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["rebuild",{"_index":2003,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rebuilds",{"_index":2000,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["recomputed",{"_index":3075,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["recomputes",{"_index":2788,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record",{"_index":456,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["record.$selected",{"_index":2322,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["record.id",{"_index":1802,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record.title",{"_index":1805,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record?.[this.moneycolumn]?.foreach(money",{"_index":2794,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record['title",{"_index":2610,"title":{},"body":{"components/MapComponent.html":{}}}],["record[\\'title",{"_index":2611,"title":{},"body":{"components/MapComponent.html":{}}}],["record[this.appservice.getcolumnalias(this.appservice.getcolumn(this.data.column",{"_index":2325,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["recordclicked",{"_index":2518,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{}}}],["recorddata",{"_index":1818,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recorddata.foreach((value,i",{"_index":1825,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode",{"_index":1760,"title":{"interfaces/RecordNode.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordnode).record",{"_index":1925,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode.record",{"_index":1863,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records",{"_index":428,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["records.length",{"_index":1796,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records.map(record",{"_index":1800,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordsprovider",{"_index":434,"title":{"classes/RecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordsproviderdemo",{"_index":3930,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recordsproviderdemo(providerfactory",{"_index":4018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recordsproviders",{"_index":429,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["record|undefined",{"_index":2086,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["recreate",{"_index":3536,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rect",{"_index":1183,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["rectangle",{"_index":3427,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["red",{"_index":3340,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["redraw",{"_index":2759,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["redrawing",{"_index":3413,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["referencing",{"_index":197,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["reflect",{"_index":530,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["reformat",{"_index":2354,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["refresh",{"_index":3040,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["refreshaction",{"_index":3692,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["refreshed",{"_index":3031,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["refreshnodeoptions(node",{"_index":2090,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["register",{"_index":3766,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["relation",{"_index":279,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["relations",{"_index":80,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["relative",{"_index":1159,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["relativex",{"_index":1131,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["relevant",{"_index":2302,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["remaining",{"_index":2183,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["remove",{"_index":1101,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["removed",{"_index":2005,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["removeedge(id",{"_index":2263,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removeedges",{"_index":2834,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["removeedges(ids",{"_index":2178,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenode(id",{"_index":2261,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenodes(ids",{"_index":2173,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removes",{"_index":2182,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["rendercell",{"_index":1618,"title":{},"body":{"interfaces/Column.html":{}}}],["rendered",{"_index":2128,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rendering",{"_index":1338,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["reorganize",{"_index":3578,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["replaysubject",{"_index":3052,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["replaysubject(1",{"_index":3148,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["representing",{"_index":2099,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["repulsion",{"_index":3825,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol",{"_index":3818,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol.value",{"_index":3834,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsionpref",{"_index":3852,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["require",{"_index":3121,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["required",{"_index":136,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{}}}],["res",{"_index":2028,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results",{"_index":2026,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results.map(r",{"_index":2073,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AgGridModule.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["resetaction",{"_index":371,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resets",{"_index":1663,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["resetstate",{"_index":1638,"title":{},"body":{"interfaces/Column.html":{}}}],["resizable",{"_index":1424,"title":{},"body":{"interfaces/Column.html":{}}}],["resize",{"_index":1682,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["resolution",{"_index":3299,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["respond",{"_index":993,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{}}}],["responds",{"_index":3582,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rest",{"_index":980,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["result",{"_index":730,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{}}}],["resulting",{"_index":471,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resultmodule",{"_index":43,"title":{},"body":{"modules/AgGridModule.html":{}}}],["results",{"_index":54,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.aggregations[0",{"_index":881,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["results.records[0",{"_index":2083,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["resulttimeline",{"_index":729,"title":{"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"index.html":{}}}],["retrieve",{"_index":444,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["retrieves",{"_index":291,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["return",{"_index":157,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["returned",{"_index":70,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["returns",{"_index":398,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rextent",{"_index":2711,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[0",{"_index":2716,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[1",{"_index":2717,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rgb(0,0,0,0.125",{"_index":1264,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rgb(132",{"_index":3666,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["right",{"_index":626,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["right.px",{"_index":1282,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rnode",{"_index":2033,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["rnode.record",{"_index":2034,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["road",{"_index":4092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road.highway",{"_index":4095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolling",{"_index":2349,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["rotate",{"_index":1106,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":1400,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row\"|\"column",{"_index":3094,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row.id",{"_index":1714,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdata",{"_index":1445,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdatachangedevent",{"_index":1365,"title":{},"body":{"interfaces/Column.html":{}}}],["rowmodeltype",{"_index":1420,"title":{},"body":{"interfaces/Column.html":{}}}],["rows",{"_index":1407,"title":{},"body":{"interfaces/Column.html":{}}}],["rowselection",{"_index":1402,"title":{},"body":{"interfaces/Column.html":{}}}],["rxjs",{"_index":501,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["rxjs/operators",{"_index":808,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["s",{"_index":3464,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.dates",{"_index":3459,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.primary",{"_index":3455,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.unsubscribe",{"_index":1478,"title":{},"body":{"interfaces/Column.html":{}}}],["same",{"_index":460,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sample",{"_index":3921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saved",{"_index":3847,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["scale",{"_index":1130,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent",{"_index":3500,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent([scaleextent/this.maxzoomdays",{"_index":3506,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent/this.minzoomdays",{"_index":3507,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scalefactor",{"_index":562,"title":{},"body":{"classes/BaseProvider.html":{}}}],["scales",{"_index":1042,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaling",{"_index":3103,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["scheme",{"_index":1039,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["schemeblues",{"_index":950,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["scratch",{"_index":2004,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["scrollable",{"_index":1451,"title":{},"body":{"interfaces/Column.html":{}}}],["scrolling",{"_index":1418,"title":{},"body":{"interfaces/Column.html":{}}}],["search",{"_index":407,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["search?action=select&resultid=\"+resultid+\"&item=%22tag%3b\"+settings.date_column+\"%3b\"+date+\"%3b\"+date+\"%22",{"_index":3019,"title":{},"body":{"components/ResultTimeline.html":{}}}],["searches",{"_index":3225,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchinactive",{"_index":223,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchservice",{"_index":763,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["searchservice.query",{"_index":1388,"title":{},"body":{"interfaces/Column.html":{}}}],["secondaryedgetypes",{"_index":1988,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["see",{"_index":2105,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["seeing",{"_index":1337,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["select",{"_index":195,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["select(node",{"_index":2134,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["select.expression",{"_index":1572,"title":{},"body":{"interfaces/Column.html":{}}}],["selected",{"_index":1034,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["selectedcolor",{"_index":2275,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectedge(edge",{"_index":3789,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selecteditems",{"_index":2635,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["selectedrecordsprovider",{"_index":3028,"title":{"classes/SelectedRecordsProvider.html":{}},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["selectedrecordsproviderdemo",{"_index":3931,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectedrecordsproviderdemo(providerfactory",{"_index":4019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectedvalues",{"_index":2278,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectfield",{"_index":2282,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selecting",{"_index":2568,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":746,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[i",{"_index":3552,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[index",{"_index":3555,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchange",{"_index":2283,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchanged",{"_index":3410,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchangedevent",{"_index":1367,"title":{},"body":{"interfaces/Column.html":{}}}],["selectioneventtype",{"_index":1351,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.select",{"_index":1456,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.unselect",{"_index":1457,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selections",{"_index":2131,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selectionservice",{"_index":1352,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["selectionservice.events.subscribe(event",{"_index":3043,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionservice.getselecteditems",{"_index":3041,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionsubscription",{"_index":3036,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectnode(node",{"_index":3786,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selector",{"_index":620,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selects",{"_index":986,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["self",{"_index":1133,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.append('svg:title').text(fulltext",{"_index":1143,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text",{"_index":1137,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text(text",{"_index":1142,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["semantic",{"_index":2223,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["semi",{"_index":3520,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["separator",{"_index":347,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["series",{"_index":3279,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["server",{"_index":177,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":146,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":88,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["set",{"_index":1330,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["set(this.data.map(value",{"_index":1050,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["setcustomdateselect(range",{"_index":882,"title":{},"body":{"components/BsFacetDate.html":{}}}],["setdefaults",{"_index":3842,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["setmodel",{"_index":2419,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setmodel(model",{"_index":2428,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setquery",{"_index":435,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["setquery(query",{"_index":445,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["sets",{"_index":447,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["settings",{"_index":1355,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["setup",{"_index":2468,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["shapes",{"_index":3356,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["shift",{"_index":3316,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shiftdate(date",{"_index":3321,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show",{"_index":809,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show/hide",{"_index":812,"title":{},"body":{"components/BsFacetDate.html":{}}}],["showall",{"_index":1780,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["showcount",{"_index":755,"title":{},"body":{"components/BsFacetDate.html":{}}}],["showcounter",{"_index":1399,"title":{},"body":{"interfaces/Column.html":{}}}],["showcustomrange",{"_index":756,"title":{},"body":{"components/BsFacetDate.html":{}}}],["showing",{"_index":2782,"title":{},"body":{"interfaces/MoneyDatum.html":{},"miscellaneous/functions.html":{}}}],["showlegend",{"_index":3087,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shown",{"_index":475,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["shows",{"_index":2591,"title":{},"body":{"components/MapComponent.html":{}}}],["showtooltip",{"_index":2633,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["side",{"_index":3139,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simple",{"_index":2059,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechange",{"_index":3345,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechanges",{"_index":783,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["simply",{"_index":3485,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simultaneous",{"_index":1971,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sinequa",{"_index":1484,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sinequa/analytics/heatmap",{"_index":1248,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{}}}],["sinequa/components",{"_index":3979,"title":{},"body":{"dependencies.html":{}}}],["sinequa/components/action",{"_index":38,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/advanced",{"_index":802,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{}}}],["sinequa/components/collapse",{"_index":2861,"title":{},"body":{"modules/NetworkModule.html":{}}}],["sinequa/components/facet",{"_index":42,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/modal",{"_index":40,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/result",{"_index":44,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/search",{"_index":803,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/selection",{"_index":1193,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/MoneyCloudDatum.html":{},"modules/NgxChartsModule.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sinequa/components/user",{"_index":1354,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/utils",{"_index":36,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{}}}],["sinequa/core/app",{"_index":99,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/base",{"_index":101,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/intl",{"_index":34,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["sinequa/core/modal",{"_index":1358,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["sinequa/core/web",{"_index":87,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sinequacomponentsmodule",{"_index":3971,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["single",{"_index":1403,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["size",{"_index":531,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sizeopened",{"_index":3348,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["skip",{"_index":207,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["skip/count",{"_index":2124,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["skips",{"_index":183,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["slantlabel",{"_index":4107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1260,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["somehow",{"_index":3731,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sort",{"_index":1230,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/NodeData.html":{}}}],["sort((a,b",{"_index":3610,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sort((a,b)=>a",{"_index":3563,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sortchangedevent",{"_index":1371,"title":{},"body":{"interfaces/Column.html":{}}}],["sorted",{"_index":1489,"title":{},"body":{"interfaces/Column.html":{}}}],["sorting",{"_index":1636,"title":{},"body":{"interfaces/Column.html":{}}}],["sorts",{"_index":1436,"title":{},"body":{"interfaces/Column.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"miscellaneous/typealiases.html":{}}}],["sourcecsv",{"_index":1835,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sourcenode",{"_index":193,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenode.type.field",{"_index":212,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenodes",{"_index":2001,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.filter(node",{"_index":2013,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.find(node",{"_index":2010,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.map(node",{"_index":2015,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourceproviders",{"_index":1990,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcestr",{"_index":1832,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["south",{"_index":2602,"title":{},"body":{"components/MapComponent.html":{}}}],["special",{"_index":1851,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["specific",{"_index":328,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["specifically",{"_index":4001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":1977,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["specifying",{"_index":139,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["split",{"_index":2798,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["spring",{"_index":3829,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstant",{"_index":3823,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol",{"_index":3814,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol.value",{"_index":3832,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantpref",{"_index":3850,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlength",{"_index":3822,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol",{"_index":3812,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol.value",{"_index":3830,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthpref",{"_index":3848,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sq",{"_index":621,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sqdatasource",{"_index":1378,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["sqdatasource(this.results",{"_index":1629,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.filterchanged",{"_index":1744,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.sortchanged",{"_index":1746,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource.exprtomodel(filtertype",{"_index":1571,"title":{},"body":{"interfaces/Column.html":{}}}],["sqmessage",{"_index":679,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{}}}],["sqmessage:{values",{"_index":1147,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["square",{"_index":821,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sqvalue",{"_index":2902,"title":{},"body":{"components/NgxChart.html":{}}}],["sqvalue:item.$column",{"_index":893,"title":{},"body":{"components/BsFacetDate.html":{}}}],["sr.1",{"_index":3987,"title":{},"body":{"dependencies.html":{}}}],["standard",{"_index":515,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["star",{"_index":2095,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["start",{"_index":1110,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["state",{"_index":463,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["statement",{"_index":3406,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["statements",{"_index":3863,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1303,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["statistical",{"_index":2222,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["steve",{"_index":4042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stop",{"_index":3448,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["store",{"_index":106,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["stored",{"_index":2027,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["stores",{"_index":179,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["storing",{"_index":2526,"title":{},"body":{"components/MapComponent.html":{}}}],["stream",{"_index":1209,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["strength",{"_index":2100,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["string",{"_index":84,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["strings",{"_index":1023,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["stroke",{"_index":3342,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["structural",{"_index":458,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["structuraldisplaytype",{"_index":1784,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structuraledgetype",{"_index":437,"title":{"interfaces/StructuralEdgeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["structuraledgetype).display",{"_index":1891,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraledgetype).field",{"_index":1786,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraltriggertype",{"_index":1779,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structure",{"_index":63,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["structured",{"_index":2064,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["structures",{"_index":2133,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["style",{"_index":1259,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/MapComponent.html":{}}}],["style(\"text",{"_index":1108,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["style.ts",{"_index":3890,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stylers",{"_index":4069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":614,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["styleurls",{"_index":740,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["subject",{"_index":418,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.error(err",{"_index":3181,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(config",{"_index":3166,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(d",{"_index":3178,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(t",{"_index":3189,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(this.getrecordsasevents(config",{"_index":3185,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subscribe",{"_index":845,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["subscribe(datasets",{"_index":3722,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["subscribe(results",{"_index":478,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["subscription",{"_index":805,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["subscriptions",{"_index":816,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["super",{"_index":817,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["super(name",{"_index":188,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getnodeactions(node",{"_index":354,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getprovideractions",{"_index":333,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.onnodeclicked(node",{"_index":2044,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["support",{"_index":134,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["supported",{"_index":2535,"title":{},"body":{"components/MapComponent.html":{}}}],["svg",{"_index":1122,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["swap",{"_index":2212,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["swimlane/ngx",{"_index":1291,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["switch(col.$column?.etype",{"_index":1514,"title":{},"body":{"interfaces/Column.html":{}}}],["switch(resolution",{"_index":3322,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["switch(type",{"_index":1324,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["switching",{"_index":3062,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sync",{"_index":1593,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["synchronously",{"_index":292,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["syncing",{"_index":3838,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["syntax",{"_index":982,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["system",{"_index":1126,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["systematically",{"_index":123,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":1088,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["table",{"_index":1748,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3977,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1764,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["taken",{"_index":3030,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["takes",{"_index":1768,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["taking",{"_index":2229,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["talking",{"_index":4039,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":3778,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["target",{"_index":1841,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tasks",{"_index":3752,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["tell",{"_index":1569,"title":{},"body":{"interfaces/Column.html":{}}}],["tells",{"_index":1488,"title":{},"body":{"interfaces/Column.html":{}}}],["temp",{"_index":2213,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["template",{"_index":613,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateref",{"_index":3347,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateurl",{"_index":638,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["test",{"_index":1904,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tests",{"_index":169,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":343,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["text.length",{"_index":1140,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text.slice(0",{"_index":1141,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text:hover",{"_index":1167,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["textlength",{"_index":1135,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["theme",{"_index":938,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["themselves",{"_index":4010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["there's",{"_index":3636,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this._actions",{"_index":3737,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.concat(actions",{"_index":3748,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(providersactionlist",{"_index":3756,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.clearfilters",{"_index":3744,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.refreshaction",{"_index":3757,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._filterinput",{"_index":1736,"title":{},"body":{"interfaces/Column.html":{}}}],["this._networkinitialized",{"_index":3764,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectededge",{"_index":3790,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectednode",{"_index":3787,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.activateaction",{"_index":502,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.active",{"_index":346,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["this.addaggregationnodes(item",{"_index":241,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.addcustomedge(node",{"_index":1826,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.adddynamicedges([node",{"_index":2042,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.adddynamicedges(sourcenodes",{"_index":2025,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.addedge(edge",{"_index":2169,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addedge(edges",{"_index":2170,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(node",{"_index":2164,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(nodes",{"_index":2165,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addrecordnodes(records",{"_index":1797,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledge(data",{"_index":1834,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledges(node",{"_index":1808,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.advancedservice.validators.date(this.field",{"_index":828,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.advancedservice.validators.range(this.field",{"_index":827,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.aggregation",{"_index":2298,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.aggregation?.name",{"_index":2461,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregationname",{"_index":2465,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregations",{"_index":2293,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.allowcustomrange",{"_index":824,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.appservice",{"_index":1631,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getccaggregation(aggregation",{"_index":3259,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getccaggregation(aggregationname",{"_index":870,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getcolumn(a.column",{"_index":2448,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumn(col.field",{"_index":1495,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getcolumnalias(col",{"_index":2450,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumnalias(this.appservice.getcolumn(colid",{"_index":1580,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.issortable(col.field",{"_index":1507,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.istree(this.field",{"_index":2460,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.parseexpr(select.expression",{"_index":3127,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.area",{"_index":3380,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.area.y0(this.y(0",{"_index":3399,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.attached",{"_index":1342,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.autoresize",{"_index":1601,"title":{},"body":{"interfaces/Column.html":{}}}],["this.bounds",{"_index":2609,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lat",{"_index":2578,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lng",{"_index":2582,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lat",{"_index":2576,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lng",{"_index":2580,"title":{},"body":{"components/MapComponent.html":{}}}],["this.brush",{"_index":3423,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior",{"_index":3401,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior.move",{"_index":3532,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.selectall(\".grip",{"_index":3430,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior",{"_index":3389,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.extent([[0",{"_index":3400,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.move(this.brush",{"_index":3576,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushing",{"_index":3394,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection",{"_index":3558,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.buildchart",{"_index":1086,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.buildchart(!!this.transition",{"_index":1077,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.c",{"_index":2662,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.c.domain(this.data.map(d",{"_index":2724,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.categories",{"_index":2726,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.cdref.detectchanges",{"_index":2682,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.chart",{"_index":1311,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.chart.update",{"_index":1312,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.charttype",{"_index":2336,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.checkdatachanges(changes[\"data",{"_index":3417,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.checkselectionchange(this.selection",{"_index":3534,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.clearfilters",{"_index":2285,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.clearfiltersaction",{"_index":818,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.closed",{"_index":654,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.closewindow",{"_index":2587,"title":{},"body":{"components/MapComponent.html":{}}}],["this.coldefs",{"_index":1491,"title":{},"body":{"interfaces/Column.html":{}}}],["this.coldefs.map(col",{"_index":1538,"title":{},"body":{"interfaces/Column.html":{}}}],["this.color",{"_index":1071,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.colors",{"_index":2339,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors.length",{"_index":2340,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors[index",{"_index":2348,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colorscheme",{"_index":2338,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.columns",{"_index":1427,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns.map(c",{"_index":1655,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns?.map((col,i",{"_index":1492,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction",{"_index":1449,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children",{"_index":1537,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children?.find(a",{"_index":1658,"title":{},"body":{"interfaces/Column.html":{}}}],["this.context",{"_index":295,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["this.context.appservice.formatservice.formatfieldvalue({value",{"_index":542,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getcolumn(type.field",{"_index":540,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.parseexpr(item.value.tostring",{"_index":274,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.edges",{"_index":3733,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.edges.clear",{"_index":3716,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.exprbuilder.concatandexpr([exprfrom",{"_index":609,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(edge.type.field",{"_index":591,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(node.type.field",{"_index":579,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodefrom.type.field",{"_index":604,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodeto.type.field",{"_index":607,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnode",{"_index":356,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnodewith",{"_index":366,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.fetchmoreagg",{"_index":348,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch",{"_index":578,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch2",{"_index":598,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.name",{"_index":3709,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.nodes.clear",{"_index":3715,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.searchservice.getmultipleresults(_queries",{"_index":2023,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(query",{"_index":222,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(this.query",{"_index":477,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.context.searchservice.query",{"_index":201,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.copyaction",{"_index":1955,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.copytoclipboard",{"_index":1605,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createactions",{"_index":1475,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createchartoptions",{"_index":2365,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.createcolumns",{"_index":1464,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createdatapoints(aggregation.items",{"_index":3283,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.createedge(this.edgetype",{"_index":2032,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.createedge(type",{"_index":1862,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createexpandaction(type",{"_index":361,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.createnode(this.nodetype",{"_index":1804,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createnode(type.nodetypes[1",{"_index":1846,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createrows",{"_index":1466,"title":{},"body":{"interfaces/Column.html":{}}}],["this.currentrange",{"_index":3115,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[0",{"_index":3116,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[1",{"_index":3119,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentselection",{"_index":3535,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[0",{"_index":3526,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[1",{"_index":3529,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.dampingpref",{"_index":3804,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.data",{"_index":850,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data.filter(value",{"_index":1057,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.data.foreach(d",{"_index":2694,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.data.items",{"_index":2314,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.data.length",{"_index":3447,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.data.push(datum",{"_index":2693,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data?.items",{"_index":865,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.data?.items?.filter(item",{"_index":866,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.datafiltered",{"_index":1056,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.datapoints",{"_index":2312,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.find(_datapoint",{"_index":2375,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.findindex(datapoint",{"_index":2342,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.push",{"_index":2315,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.dataset",{"_index":2006,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.dataset.addnodes(node",{"_index":1807,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.clear",{"_index":297,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id",{"_index":1906,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id).foreach(e",{"_index":1917,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getconnectednodes(node.id",{"_index":322,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.dataset.getnode(node.id",{"_index":1908,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getnode(this.getnodeid(this.nodetype",{"_index":1801,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.hasnode(node.id",{"_index":2046,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.dataset.merge(data",{"_index":289,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.merge(dataset",{"_index":1882,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.datasource",{"_index":1549,"title":{},"body":{"interfaces/Column.html":{}}}],["this.datasource.appservice",{"_index":2453,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.facetservice",{"_index":2454,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.latestresults",{"_index":2446,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource?.destroy",{"_index":1641,"title":{},"body":{"interfaces/Column.html":{}}}],["this.daterangecontrol",{"_index":825,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.daterangecontrol.setvalue(value",{"_index":836,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.daterangecontrol.valuechanges",{"_index":841,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.dates",{"_index":2963,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.debouncesync",{"_index":3836,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.defaultcolumnwidth",{"_index":1512,"title":{},"body":{"interfaces/Column.html":{}}}],["this.displaycheckbox",{"_index":1529,"title":{},"body":{"interfaces/Column.html":{}}}],["this.displayemptydistributionintervals",{"_index":864,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.downloadcsv",{"_index":1609,"title":{},"body":{"interfaces/Column.html":{}}}],["this.drawgrips",{"_index":3403,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawxaxis",{"_index":2669,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawyaxis",{"_index":2666,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.edge.context.nodes.get(this.edge.from",{"_index":657,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edge.context.nodes.get(this.edge.to",{"_index":659,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edgeclicked.next",{"_index":3791,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeclicked.subscribe((edge",{"_index":3701,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeidx.clear",{"_index":2160,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.delete(id",{"_index":2264,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.get(id",{"_index":2144,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.has(id",{"_index":2140,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.set(edge.id",{"_index":2260,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeseparator",{"_index":521,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.edgetype",{"_index":2018,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.getquery(node",{"_index":2017,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.nodetypes[0",{"_index":1997,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.trigger",{"_index":2045,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetypes.filter(type",{"_index":302,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.edgetypes.foreach(type",{"_index":300,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.edgetypes.length",{"_index":1914,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.el.nativeelement",{"_index":1128,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.eventclicked.next(event",{"_index":3277,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events",{"_index":2964,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i",{"_index":3184,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i].next(this.getrecordsasevents(this.events[i",{"_index":3113,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.concat",{"_index":3609,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.events.findindex(e",{"_index":3110,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.foreach((config",{"_index":3183,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.map(_",{"_index":3154,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.expanded",{"_index":655,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.exportvaluegetter",{"_index":1672,"title":{},"body":{"interfaces/Column.html":{}}}],["this.exprbuilder.concatandexpr",{"_index":2583,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.concatorexpr(exprs",{"_index":3262,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.exprbuilder.makeexpr(this.moneycolumn",{"_index":2817,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.exprbuilder.makeexpr(this.moneyvaluecolumn",{"_index":2763,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.exprbuilder.makenumericalexpr(this.field",{"_index":886,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.exprbuilder.makenumericalexpr(this.latitudefield",{"_index":2584,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makenumericalexpr(this.longitudefield",{"_index":2585,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makerangeexpr(this.field",{"_index":885,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.facetservice",{"_index":1632,"title":{},"body":{"interfaces/Column.html":{}}}],["this.facetservice.addfiltersearch(this.getname",{"_index":2370,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.addfiltersearch(this.name",{"_index":859,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.facetservice.clearfilterssearch(this.getname",{"_index":2287,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.clearfilterssearch(this.name",{"_index":823,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.facetservice.filteredindex(this.data",{"_index":891,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.facetservice.formatvalue(item",{"_index":2316,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregation(aggregationname",{"_index":876,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.facetservice.getaggregation(this.aggregation",{"_index":2361,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationitemsfiltered(this.name",{"_index":890,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.facetservice.getaggregationlabel(agg",{"_index":2297,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationlabel(this.aggregation",{"_index":2291,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.getname",{"_index":2309,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.name",{"_index":855,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetWrapperComponent.html":{}}}],["this.facetservice.itemfiltered(this.getname",{"_index":2372,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.getname",{"_index":2371,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.name",{"_index":860,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.fetchaggregation(aggregationname",{"_index":3219,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.fetchaggregations([type",{"_index":351,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.fetchaggregations(types",{"_index":306,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.field",{"_index":2452,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.filterarea",{"_index":2572,"title":{},"body":{"components/MapComponent.html":{}}}],["this.filteredcolor",{"_index":2345,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fitbounds",{"_index":2593,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fitnetwork",{"_index":3735,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form",{"_index":829,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/VisEvent.html":{}}}],["this.form.valid",{"_index":844,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.form.valuechanges.subscribe(_",{"_index":3827,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.formatcontent",{"_index":1474,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["this.formatdayrequest(selection[0",{"_index":3253,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatdayrequest(selection[1",{"_index":3254,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatservice.formatraw(params.value",{"_index":1624,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatraw(this.model.cell",{"_index":1960,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.formatvalue(params.value",{"_index":1622,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatvalue(this.model.cell",{"_index":1958,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.moneyformatter(datum.value",{"_index":2819,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.formbuilder.group",{"_index":830,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/VisEvent.html":{}}}],["this.fromnode",{"_index":656,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.georecords[0][this.latitudefield",{"_index":2601,"title":{},"body":{"components/MapComponent.html":{}}}],["this.georecords[0][this.longitudefield",{"_index":2598,"title":{},"body":{"components/MapComponent.html":{}}}],["this.getadjacentedges(neighbor.id).length",{"_index":2191,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid",{"_index":2197,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid).foreach(edge",{"_index":2185,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getaggregation(aggregationname",{"_index":871,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.getaggregation(config.aggregation",{"_index":3192,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(config.aggregation).pipe",{"_index":3199,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(this.aggregation",{"_index":851,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.getd3timeinterval(resolution",{"_index":3303,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getdata(this.context",{"_index":509,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedge(e.id)?.visible",{"_index":2248,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedge(edge.id",{"_index":2225,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedgeid(fromnode",{"_index":556,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedges().filter(e",{"_index":2153,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.geteventaggregation(config",{"_index":3187,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getitem(datapoint",{"_index":2368,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getitem(this.datapoints[index",{"_index":2344,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getname",{"_index":2363,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getnode(e.from",{"_index":2198,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(edge.from",{"_index":2186,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(n.id)?.visible",{"_index":2246,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(node.id",{"_index":2208,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodeid(type",{"_index":543,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodes().filter(n",{"_index":2150,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodevalue(node",{"_index":580,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodefrom",{"_index":605,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodeto",{"_index":608,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(sourcenode",{"_index":214,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.getrangevalue",{"_index":835,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.gettimeseries(agg",{"_index":3176,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gettimeseries(bestaggregation",{"_index":3243,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gravitypref",{"_index":3808,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.gridactions",{"_index":1586,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(action",{"_index":1589,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(new",{"_index":1592,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(this.columnsaction",{"_index":1591,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi",{"_index":1691,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi.setdatasource(this.datasource",{"_index":1551,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.exportdataascsv(this.getexportparams",{"_index":1681,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.foreachnode(node",{"_index":1458,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getdataascsv(this.getexportparams",{"_index":1677,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getselectedrows",{"_index":1708,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.refreshcells({force",{"_index":1687,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel",{"_index":1651,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel(model",{"_index":1573,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi",{"_index":1547,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate",{"_index":1652,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate(model",{"_index":1583,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.autosizeallcolumns",{"_index":1684,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.setcolumnvisible(col.field",{"_index":1540,"title":{},"body":{"interfaces/Column.html":{}}}],["this.grips",{"_index":3429,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"path",{"_index":3438,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"text",{"_index":3440,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.attr(\"display",{"_index":3551,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall(\"path\").attr(\"d",{"_index":3402,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall('.grip",{"_index":3554,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupedevents",{"_index":3487,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupevents(5",{"_index":3488,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hasnode(edge.to",{"_index":2258,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.height",{"_index":1068,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hiderecordnode",{"_index":1806,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.initdone",{"_index":3027,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.innerheight",{"_index":3392,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.innerwidth",{"_index":2656,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.instance",{"_index":3377,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.events.subscribe(e",{"_index":3375,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatdate(this.xt.invert(selection[index",{"_index":3556,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatmessage(col.$column?.label",{"_index":1500,"title":{},"body":{"interfaces/Column.html":{}}}],["this.intlservice.formatmessage(p.name",{"_index":3754,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.intlservice.formatnumber(value",{"_index":2352,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.intlsubscription",{"_index":3374,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlsubscription.unsubscribe",{"_index":3589,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.isedgevisible(type",{"_index":1848,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.isfilteractive",{"_index":2469,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.isfiltered(item",{"_index":858,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.istree",{"_index":2459,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.itemclickevent",{"_index":1309,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.itemclickevent.emit(datapoint",{"_index":1346,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.items",{"_index":863,"title":{},"body":{"components/BsFacetDate.html":{},"components/ResultTimeline.html":{}}}],["this.items.push({id",{"_index":2988,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.splice(0",{"_index":2962,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.left",{"_index":1276,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.line",{"_index":3387,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.localechange",{"_index":1317,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.localechange.unsubscribe",{"_index":1320,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.makedata",{"_index":2357,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.makedatasource",{"_index":1550,"title":{},"body":{"interfaces/Column.html":{}}}],["this.mapstyles",{"_index":2589,"title":{},"body":{"components/MapComponent.html":{}}}],["this.margin.bottom",{"_index":1070,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.left",{"_index":1064,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.right",{"_index":1065,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.top",{"_index":1069,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.max_dates",{"_index":3001,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.maxaggregationdate",{"_index":3175,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.maxdate",{"_index":3120,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.maxx",{"_index":1052,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.maxy",{"_index":1055,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.mergedatasets(datasets.filter(d",{"_index":3723,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.mergedevents",{"_index":3155,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mergedtimeseries",{"_index":3149,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.min_dates",{"_index":3000,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.min_year",{"_index":2986,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.minaggregationdate",{"_index":3174,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mindate",{"_index":3117,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.minzoomdays",{"_index":3480,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.modalservice.open(datamodalcomponent",{"_index":1699,"title":{},"body":{"interfaces/Column.html":{}}}],["this.model.cccolumn",{"_index":1959,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.moneyaggregation",{"_index":2689,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.mutatenode(node",{"_index":2079,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.mutatenodes(sourcenodes",{"_index":2072,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.name",{"_index":2466,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.neighbors",{"_index":1207,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type",{"_index":1226,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type].push",{"_index":1228,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.networkservice.click.subscribe((eventdata",{"_index":3768,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.fit(this.name",{"_index":3762,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.off(this.name",{"_index":3792,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.on(this.name",{"_index":3767,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.setoptions(this.name",{"_index":3770,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.ngonchanges",{"_index":2299,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.node",{"_index":1205,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.edges",{"_index":1208,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.nodes.get(id",{"_index":1215,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.count",{"_index":1206,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.id",{"_index":1212,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodecache.has(node.id",{"_index":2016,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodecache[node.id",{"_index":2080,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodeclicked.next(node",{"_index":3788,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodeclicked.subscribe((node",{"_index":3698,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodedata",{"_index":1204,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodeidx.clear",{"_index":2159,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.delete(id",{"_index":2262,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.get(id",{"_index":2142,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.has(id",{"_index":2138,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.set(node.id",{"_index":2211,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx[id",{"_index":2239,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodetype",{"_index":1814,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.getquery(node",{"_index":2071,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.name",{"_index":1817,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.nodeoptions",{"_index":2091,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.nodeoptions(node",{"_index":2092,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.trigger",{"_index":2093,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.onaxisclicked(d",{"_index":1114,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.onbrush",{"_index":3396,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onbrushend",{"_index":3398,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmousemove",{"_index":2674,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmouseout",{"_index":2787,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onnetworkclick(eventdata",{"_index":3769,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onopensettings(true",{"_index":3845,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onresize",{"_index":1316,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.onzoom",{"_index":3509,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onzoomend",{"_index":3510,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.openedwindow",{"_index":2606,"title":{},"body":{"components/MapComponent.html":{}}}],["this.openedwindow.close",{"_index":2605,"title":{},"body":{"components/MapComponent.html":{}}}],["this.options",{"_index":2335,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.options.colorscheme",{"_index":1331,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.options.getitemcolor",{"_index":2341,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.optionsprefs",{"_index":3771,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics",{"_index":3796,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut",{"_index":3798,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.centralgravity",{"_index":3807,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.damping",{"_index":3803,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.gravitationalconstant",{"_index":3805,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springconstant",{"_index":3801,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springlength",{"_index":3799,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.params",{"_index":2455,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.coldef.field",{"_index":2458,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.rowmodel['datasource",{"_index":2445,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.parseentity(item",{"_index":2691,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.parseentity(money.value",{"_index":2795,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.prefs.delete(\"ag",{"_index":1542,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.delete(this.name",{"_index":3843,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.get(\"ag",{"_index":1472,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.get(this.name",{"_index":3849,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.set(\"ag",{"_index":1543,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.set(this.name",{"_index":3828,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.sync",{"_index":1666,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["this.processednodes",{"_index":2008,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.filter(id",{"_index":2009,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.indexof(node.id",{"_index":2014,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.push(node.id",{"_index":2041,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.splice(0",{"_index":2040,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processnode(node",{"_index":2047,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.provider",{"_index":575,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.provider.next(this.dataset",{"_index":242,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.providers.foreach(p",{"_index":3699,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providers.map(p",{"_index":3720,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription",{"_index":3719,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription.unsubscribe",{"_index":3718,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.query",{"_index":476,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["this.r",{"_index":2660,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r(datum.count",{"_index":2770,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r.domain(rextent",{"_index":2723,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.rangechange.next(this.xt.domain",{"_index":3580,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.rangeinit.next(this.xt.domain",{"_index":3484,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.record.id",{"_index":2984,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.record.modified.length>=10",{"_index":3006,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.recordclicked.next(datum.record",{"_index":2816,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.recordclicked.next(record",{"_index":2608,"title":{},"body":{"components/MapComponent.html":{}}}],["this.refreshaction",{"_index":3703,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.removeedge(id",{"_index":2179,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedge(ids",{"_index":2180,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedges(edge.id",{"_index":2188,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(id",{"_index":2176,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(ids",{"_index":2177,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenodes(neighbor.id",{"_index":2192,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.rendercell",{"_index":1505,"title":{},"body":{"interfaces/Column.html":{}}}],["this.repulsionpref",{"_index":3806,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.resetaction",{"_index":510,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.resetstate",{"_index":1596,"title":{},"body":{"interfaces/Column.html":{}}}],["this.results",{"_index":877,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.aggregations",{"_index":2687,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.results.aggregations.find(a",{"_index":2447,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.results.records",{"_index":2320,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.records?.foreach(record",{"_index":2793,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.results?.records",{"_index":1557,"title":{},"body":{"interfaces/Column.html":{}}}],["this.right",{"_index":1283,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.rowdata",{"_index":1556,"title":{},"body":{"interfaces/Column.html":{}}}],["this.rowmodeltype",{"_index":1548,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice",{"_index":1630,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.breadcrumbs.findselect(this.name",{"_index":3743,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.searchservice.getresults(query",{"_index":879,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query",{"_index":1554,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.addselect(expr",{"_index":2765,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.findselect(this.name",{"_index":3124,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.orderby",{"_index":1643,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(i",{"_index":1648,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(this.name",{"_index":2571,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.querystream.subscribe",{"_index":834,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.searchservice.search",{"_index":1649,"title":{},"body":{"interfaces/Column.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search(undefined",{"_index":3263,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.select(node",{"_index":3706,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedcolor",{"_index":2347,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedge",{"_index":3710,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(edge",{"_index":3785,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(this.context.edges.get(event.edges[0",{"_index":3781,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selecteditems",{"_index":2729,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selecteditems.add(item.value",{"_index":2732,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectedvalues.add(v.tolowercase",{"_index":2332,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(v.value.tolowercase",{"_index":2333,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(val.tolowercase",{"_index":2328,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.clear",{"_index":2319,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield",{"_index":2288,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield.update",{"_index":2360,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selection",{"_index":838,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selection[0].gettime",{"_index":3138,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selection[1].gettime",{"_index":3137,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionchange",{"_index":2358,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionchange.next(this.currentselection",{"_index":3568,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange.unsubscribe",{"_index":2366,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionservice",{"_index":1633,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.events.subscribe(e",{"_index":2650,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.events.subscribe(event",{"_index":2359,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionservice.getselectedids",{"_index":1710,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.getselecteditems().foreach(r",{"_index":2730,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.toggleselectedrecords(row",{"_index":1721,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.toggleselectedrecords({id",{"_index":1716,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionsubscription",{"_index":3042,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectionsubscription?.unsubscribe",{"_index":3047,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectnode",{"_index":3711,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(node",{"_index":3784,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(this.context.nodes.get(event.nodes[0",{"_index":3783,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.setcustomdateselect(range",{"_index":889,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.setcustomdateselect(value",{"_index":846,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.shiftdate(item.date",{"_index":3315,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.showtooltip",{"_index":2811,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.skips[type.aggregation",{"_index":301,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+(sourcenode?.id",{"_index":208,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+node.id",{"_index":325,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.springconstantpref",{"_index":3802,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.springlengthpref",{"_index":3800,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.style",{"_index":2590,"title":{},"body":{"components/MapComponent.html":{}}}],["this.subscriptions.foreach(s",{"_index":1477,"title":{},"body":{"interfaces/Column.html":{}}}],["this.subscriptions.map(item",{"_index":853,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.subscriptions.push",{"_index":833,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.subscriptions.push(this.selectionservice.events.subscribe(event",{"_index":1453,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tickformatter",{"_index":2337,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.timeline.addcustomtime(this.record.modified.substring(0,10",{"_index":3007,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.on('select",{"_index":3008,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.removecustomtime(\"date",{"_index":3003,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeseries",{"_index":868,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries$[i",{"_index":3163,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.foreach((config",{"_index":3162,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.map(_",{"_index":3147,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.push(bsfacettimelinecomponent.createtimeseries({aggregation",{"_index":872,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.toggleformatcontent(action",{"_index":1613,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tonode",{"_index":658,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.toolbaractions",{"_index":1587,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltipitem",{"_index":1117,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipvaluegetter",{"_index":1497,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltipx",{"_index":2812,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.top",{"_index":1279,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.turnofftooltip",{"_index":2683,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.uiservice.addelementresizelistener(this.wrapper.nativeelement",{"_index":1315,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.uiservice.copytoclipboard(data",{"_index":1679,"title":{},"body":{"interfaces/Column.html":{}}}],["this.uiservice.copytoclipboard(this.data",{"_index":1956,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.uiservice.removeelementresizelistener(this.wrapper.nativeelement",{"_index":1319,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.updateactions",{"_index":3705,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updateaxes",{"_index":2685,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatebrush",{"_index":3421,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatechart",{"_index":1314,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatecombinedaggregation(config",{"_index":3270,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatedata",{"_index":1957,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["this.updatedataset(records",{"_index":3045,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedataset(results.aggregations",{"_index":225,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.updatedataset(results.records",{"_index":479,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.updatedataset(this.selectionservice.getselecteditems",{"_index":3046,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedynamicdataset(array.from(map.values",{"_index":1999,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.updateevents",{"_index":3159,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatefilterstate(this.query",{"_index":1553,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updategrips(this.brushselection",{"_index":3560,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateitems",{"_index":852,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.updateoptions",{"_index":3712,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updatescales",{"_index":2684,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.updatescales(this.data",{"_index":3450,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateselecteditems",{"_index":2651,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.updateselectedvalues",{"_index":2364,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.updateselection",{"_index":3412,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatesortstate(this.query",{"_index":1555,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updatetimeline",{"_index":2961,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.updatetimeseries",{"_index":3151,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatetimeseries(this.timelineaggregationname",{"_index":848,"title":{},"body":{"components/BsFacetDate.html":{}}}],["this.updatexaxis",{"_index":3376,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatezoom",{"_index":3451,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.viewinit",{"_index":1085,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.vistimelineservice.setitems(this.name",{"_index":3026,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.width",{"_index":1063,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.wrapper",{"_index":1343,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.x",{"_index":1060,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x(datum.category",{"_index":2767,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x(datum.date",{"_index":2822,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x(item.x",{"_index":1118,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.x.bandwidth",{"_index":2721,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain",{"_index":2727,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(this.data.map(d",{"_index":2718,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain(this.xt.domain",{"_index":3469,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(xextent",{"_index":2807,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x.range([0",{"_index":2668,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x_inner",{"_index":2657,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x_inner(datum.i",{"_index":2768,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.xaxis",{"_index":1081,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(d3.axisbottom(this.xt).ticks(nticks",{"_index":3544,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(xaxis",{"_index":2737,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.xaxis$.selectall(\".domain\").remove",{"_index":2738,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis.call(d3.axistop(this.x).ticksize(0",{"_index":1098,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\".domain\").remove",{"_index":1100,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\"text",{"_index":1103,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall('text').each(this.wrap",{"_index":1094,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.transition(t",{"_index":1091,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xt",{"_index":3379,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(d.date",{"_index":3383,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(event[0].date",{"_index":3588,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(events[0].date",{"_index":3658,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[0",{"_index":3527,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[1",{"_index":3530,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.domain",{"_index":3606,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.invert(x",{"_index":3566,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y",{"_index":1066,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(d.value",{"_index":3386,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(datum.value",{"_index":2769,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y(item.y",{"_index":1119,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.y.domain(yextent",{"_index":2722,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.range([this.innerheight",{"_index":2665,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks(5",{"_index":2741,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.ticks(nticks",{"_index":3546,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis",{"_index":1083,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.call(yaxis",{"_index":2757,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.selectall(\".domain\").remove",{"_index":2758,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis.call(d3.axisleft(this.y).ticksize(0",{"_index":1099,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\".domain\").remove",{"_index":1115,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\"text",{"_index":1116,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall('text').each(this.wrap",{"_index":1097,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.transition(t",{"_index":1095,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.zoombehavior",{"_index":3504,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"end",{"_index":3496,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"zoom",{"_index":3495,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.transform(this.brush",{"_index":3497,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zooming",{"_index":3570,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["though",{"_index":3419,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["three",{"_index":4016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["through",{"_index":2300,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["throw",{"_index":264,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["thumbnail",{"_index":4003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tick",{"_index":2748,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(d3.format(\"~s",{"_index":3547,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(this.formatservice.moneyformatter",{"_index":2755,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tickformatter",{"_index":1296,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ticks",{"_index":2746,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ticks(5",{"_index":2809,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["ticksizeinner",{"_index":2753,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["tickvalues(yaxisticks",{"_index":2754,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tile",{"_index":1000,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["tile.clickable:hover",{"_index":1174,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tile.selected",{"_index":1178,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tilt",{"_index":1104,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["time",{"_index":461,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["timeinterval",{"_index":3302,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeinterval.offset(series[series.length",{"_index":3312,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline",{"_index":732,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{}}}],["timeline'},{'name",{"_index":705,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.component",{"_index":1249,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline.component.html",{"_index":2778,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.scss",{"_index":2779,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.ts",{"_index":2777,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline.html",{"_index":2921,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.name",{"_index":3663,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.ts",{"_index":2920,"title":{},"body":{"components/ResultTimeline.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline.ts:122",{"_index":2947,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:21",{"_index":2941,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:22",{"_index":2945,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:23",{"_index":2934,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:24",{"_index":2935,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:25",{"_index":2940,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:26",{"_index":2938,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:27",{"_index":2939,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:28",{"_index":2936,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:29",{"_index":2944,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:31",{"_index":2949,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:32",{"_index":2932,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:34",{"_index":2951,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:37",{"_index":2946,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:43",{"_index":2948,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline/.../facet",{"_index":4057,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["timeline/.../result",{"_index":4062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeline/bootstrap/facet",{"_index":735,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline/bootstrap/timeline",{"_index":3661,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.component.ts",{"_index":3344,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.module.ts",{"_index":1247,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["timeline/money",{"_index":2476,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["timeline/result",{"_index":2919,"title":{},"body":{"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline/vis",{"_index":3859,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["timelineaggregation",{"_index":3048,"title":{"interfaces/TimelineAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineaggregation).aggregation",{"_index":3256,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineaggregationname",{"_index":757,"title":{},"body":{"components/BsFacetDate.html":{}}}],["timelinecombinedaggregations",{"_index":3058,"title":{"interfaces/TimelineCombinedAggregations.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinecombinedaggregations).aggregations",{"_index":3269,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default",{"_index":3257,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default.aggregation",{"_index":3258,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinedata",{"_index":3067,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelinedate",{"_index":3055,"title":{"interfaces/TimelineDate.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timelinedate[]).concat(...primaryseries.map(s",{"_index":3458,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelineevent",{"_index":3056,"title":{"interfaces/TimelineEvent.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineevent[]).concat(...events",{"_index":3158,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation",{"_index":3064,"title":{"interfaces/TimelineEventAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventaggregation).aggregation",{"_index":3186,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation).subscribe",{"_index":3188,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventdata",{"_index":3068,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventtype",{"_index":3057,"title":{"interfaces/TimelineEventType.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["timelineinitialized",{"_index":2924,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timelinelegendcomponent",{"_index":731,"title":{"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["timelineoptions",{"_index":2942,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["timelinerecords",{"_index":3063,"title":{"interfaces/TimelineRecords.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinerecords).field",{"_index":3112,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelines",{"_index":3160,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineseries",{"_index":798,"title":{"interfaces/TimelineSeries.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineseries).dates",{"_index":3165,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["times",{"_index":1985,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["timeseries",{"_index":747,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeseries$.error(err",{"_index":3245,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeseries$.next(d",{"_index":3244,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["title",{"_index":341,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["todo",{"_index":132,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["together",{"_index":3592,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["toggle",{"_index":503,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["toggleformatcontent(action",{"_index":1686,"title":{},"body":{"interfaces/Column.html":{}}}],["toggles",{"_index":1685,"title":{},"body":{"interfaces/Column.html":{}}}],["tonode",{"_index":549,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["tonode.id",{"_index":558,"title":{},"body":{"classes/BaseProvider.html":{}}}],["toolbar",{"_index":1398,"title":{},"body":{"interfaces/Column.html":{}}}],["toolbaractions",{"_index":1391,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltip",{"_index":1045,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltip'},{'name",{"_index":712,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["tooltip.component",{"_index":1194,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["tooltip.left::after",{"_index":1265,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip.right::after",{"_index":1261,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip::after",{"_index":1254,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltipitem",{"_index":914,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipitem.count",{"_index":1154,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.display",{"_index":1151,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.value",{"_index":1152,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipleft",{"_index":915,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiporientation",{"_index":916,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipright",{"_index":917,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltips",{"_index":2648,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tooltiptemplate",{"_index":1306,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["tooltiptop",{"_index":918,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiptpl",{"_index":3352,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipvaluegetter",{"_index":1483,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltipx",{"_index":2784,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["top",{"_index":623,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["top.px",{"_index":1278,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["total",{"_index":1149,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["transfer",{"_index":2243,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["transform",{"_index":3573,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transform.rescalex(this.x",{"_index":3575,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transformed",{"_index":2055,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transforms",{"_index":3294,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["transit",{"_index":4099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.line",{"_index":4100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.station",{"_index":4101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transition",{"_index":939,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["transitions",{"_index":989,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["translate",{"_index":3553,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transparent",{"_index":1263,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["trash",{"_index":511,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tree",{"_index":616,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["treemapmodule",{"_index":2914,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["triangle",{"_index":3583,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["trigger",{"_index":162,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["trigger/display",{"_index":1761,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=onclick",{"_index":1771,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=oninsert",{"_index":1774,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["triggered",{"_index":1722,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triggers",{"_index":3267,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triple",{"_index":4021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":116,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["true}).pipe",{"_index":3223,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["true}).pipe(map(results",{"_index":880,"title":{},"body":{"components/BsFacetDate.html":{}}}],["true}).subscribe",{"_index":224,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["true}).subscribe(results",{"_index":2081,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["truncates",{"_index":1022,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["try",{"_index":1221,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{}}}],["turn",{"_index":391,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["turned",{"_index":1757,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["turning",{"_index":3585,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["two",{"_index":261,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":83,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type's",{"_index":1224,"title":{},"body":{"components/BsNodeInfoCard.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["type.aggregation",{"_index":350,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.count",{"_index":209,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.display",{"_index":1884,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.edgeoptions",{"_index":573,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.edgeoptions([fromnode",{"_index":574,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.field",{"_index":408,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["type.name}:${value",{"_index":524,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions",{"_index":546,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions(node",{"_index":547,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodetypes.length",{"_index":1871,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[0",{"_index":314,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.nodetypes[0].name",{"_index":1816,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[1",{"_index":324,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.parse!(recorddata",{"_index":1829,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse!(value",{"_index":1827,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse(item",{"_index":259,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.trigger",{"_index":303,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type:auditeventtype.search_timeline_usage",{"_index":3264,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["typealiases",{"_index":4053,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":4026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo",{"_index":3932,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo(providerfactory",{"_index":4020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo",{"_index":3933,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo(providerfactory",{"_index":4025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":3208,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["types",{"_index":67,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["types.find(type",{"_index":235,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.foreach(type",{"_index":205,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.length",{"_index":305,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.map(type",{"_index":360,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["typically",{"_index":2110,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["uiservice",{"_index":1293,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["undefined",{"_index":156,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["undefined).subscribe(res",{"_index":2024,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["underline",{"_index":1169,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["understand",{"_index":1559,"title":{},"body":{"interfaces/Column.html":{}}}],["undirected",{"_index":551,"title":{},"body":{"classes/BaseProvider.html":{}}}],["unfortunately",{"_index":2679,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["unique",{"_index":1905,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["unlimited",{"_index":1777,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["unselected",{"_index":3032,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["unsubscribe",{"_index":1476,"title":{},"body":{"interfaces/Column.html":{}}}],["until",{"_index":1772,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["up",{"_index":1329,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/NgxChart.html":{},"interfaces/VisEvent.html":{}}}],["update",{"_index":676,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["update/reset",{"_index":3489,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateactions",{"_index":3741,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updateaxes",{"_index":2733,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatebrush",{"_index":3523,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatechart",{"_index":1310,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatecombinedaggregation",{"_index":3271,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatecombinedaggregation(config",{"_index":3229,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updated",{"_index":2202,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatedata",{"_index":1938,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["updatedataset(aggregations",{"_index":231,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["updatedataset(records",{"_index":1794,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["updatedatasets",{"_index":2835,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["updatedatasets(nodes",{"_index":2244,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["updatedynamicdataset(sourcenodes",{"_index":2002,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["updateevents",{"_index":3182,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["updatefilterstate(query",{"_index":1561,"title":{},"body":{"interfaces/Column.html":{}}}],["updategrips(selection",{"_index":3550,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateitems",{"_index":862,"title":{},"body":{"components/BsFacetDate.html":{}}}],["updateoptions",{"_index":3793,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updater",{"_index":2289,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updaterange",{"_index":752,"title":{},"body":{"components/BsFacetDate.html":{}}}],["updaterange(range",{"_index":788,"title":{},"body":{"components/BsFacetDate.html":{}}}],["updates",{"_index":191,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["updatescales(data",{"_index":3452,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateselecteditems",{"_index":2728,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["updateselectedvalues",{"_index":2318,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updateselection",{"_index":3533,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatesortstate(query",{"_index":1576,"title":{},"body":{"interfaces/Column.html":{}}}],["updatetimeline",{"_index":2925,"title":{},"body":{"components/ResultTimeline.html":{}}}],["updatetimeseries",{"_index":3161,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatetimeseries(aggregationname",{"_index":867,"title":{},"body":{"components/BsFacetDate.html":{}}}],["updatexaxis",{"_index":3537,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatezoom",{"_index":3491,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updating",{"_index":3248,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["upon",{"_index":2078,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["url",{"_index":3018,"title":{},"body":{"components/ResultTimeline.html":{}}}],["usd",{"_index":2780,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["use",{"_index":451,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["used",{"_index":140,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["useful",{"_index":1723,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["user",{"_index":996,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["userpreferences",{"_index":1353,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["users",{"_index":1696,"title":{},"body":{"interfaces/Column.html":{}}}],["uses",{"_index":3596,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["using",{"_index":153,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["util",{"_index":3991,"title":{},"body":{"dependencies.html":{}}}],["utilities",{"_index":3590,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["utility",{"_index":3278,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils",{"_index":100,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["utils.copy(this.options",{"_index":3794,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.copy(this.query",{"_index":200,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.copy(this.searchservice.query",{"_index":878,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.debounce",{"_index":3841,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.eqnc(a.name",{"_index":2791,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.eqnc(alias",{"_index":2451,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["utils.eqnc(type.aggregation",{"_index":236,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.equals(oldmodel",{"_index":1737,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend",{"_index":1493,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend(edge",{"_index":559,"title":{},"body":{"classes/BaseProvider.html":{}}}],["utils.extend(existingedge",{"_index":2242,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(existingnode",{"_index":2219,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(node",{"_index":544,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["utils.isnumber(value",{"_index":2350,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["utils.isundefined(r",{"_index":2773,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x",{"_index":2824,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x_inner",{"_index":2772,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["utils.isundefined(y",{"_index":2774,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.merge",{"_index":4108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.subscribe(this.intlservice.events",{"_index":1318,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["utils.todate(r[config.field",{"_index":3204,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.tolowercase(this.options.type",{"_index":1322,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["utilsmodule",{"_index":35,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{}}}],["v!==this.aggregation",{"_index":2295,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["val",{"_index":2324,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["val.foreach(v",{"_index":2330,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["valid",{"_index":2708,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["validity",{"_index":3466,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["value",{"_index":117,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["value.x))).slice(0",{"_index":1051,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value.y))).slice(0",{"_index":1054,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value[\"display",{"_index":1840,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[\"value",{"_index":1839,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[0",{"_index":839,"title":{},"body":{"components/BsFacetDate.html":{}}}],["value[1",{"_index":840,"title":{},"body":{"components/BsFacetDate.html":{}}}],["value_amount",{"_index":2627,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valueamounts",{"_index":2630,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valued",{"_index":1823,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["valueitem",{"_index":1951,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["values",{"_index":81,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["valuestr",{"_index":2705,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["var",{"_index":693,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["variable",{"_index":3740,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["variables",{"_index":4058,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":2760,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["verticaltalbar",{"_index":1327,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["via",{"_index":432,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["view",{"_index":671,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["view'},{'name",{"_index":698,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["view.component",{"_index":45,"title":{},"body":{"modules/AgGridModule.html":{}}}],["view.component.html",{"_index":1380,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.scss",{"_index":1381,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.ts",{"_index":1348,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["view.ts",{"_index":3901,"title":{},"body":{"coverage.html":{}}}],["viewbox",{"_index":1120,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild",{"_index":1033,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"brush",{"_index":3366,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"chart",{"_index":1307,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"overlay",{"_index":2646,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["viewchild(\"tooltiptemplate",{"_index":1305,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"wrapper",{"_index":1302,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"xaxis",{"_index":1043,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"yaxis",{"_index":1044,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild('chart",{"_index":2888,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('tooltiptemplate",{"_index":2892,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('wrapper",{"_index":2894,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('xaxis",{"_index":1011,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewchild('yaxis",{"_index":1013,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewinit",{"_index":919,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["vis",{"_index":2102,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vis.js",{"_index":2132,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["visevent",{"_index":3676,"title":{"interfaces/VisEvent.html":{}},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["visibility",{"_index":167,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["visibilityaction",{"_index":1657,"title":{},"body":{"interfaces/Column.html":{}}}],["visibilityaction.selected",{"_index":1661,"title":{},"body":{"interfaces/Column.html":{}}}],["visible",{"_index":528,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["visiblity",{"_index":1654,"title":{},"body":{"interfaces/Column.html":{}}}],["vismodule",{"_index":2862,"title":{},"body":{"modules/NetworkModule.html":{},"modules/VisTimelineModule.html":{}}}],["visnetworkservice",{"_index":2104,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["vistimelinemodule",{"_index":3855,"title":{"modules/VisTimelineModule.html":{}},"body":{"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["vistimelineservice",{"_index":2923,"title":{},"body":{"components/ResultTimeline.html":{}}}],["void",{"_index":399,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["w",{"_index":3432,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["want",{"_index":450,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["warning",{"_index":673,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["water",{"_index":4103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1334,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["web",{"_index":145,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["weeks",{"_index":3226,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["well",{"_index":2171,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["west",{"_index":2603,"title":{},"body":{"components/MapComponent.html":{}}}],["whatever",{"_index":4040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["whether",{"_index":170,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["while(!parsedexpr.isleaf",{"_index":3129,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["whose",{"_index":1976,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["width",{"_index":627,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["wikiasyncconfig",{"_index":3934,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikiasyncconfig(providerfactory",{"_index":4027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynconfig",{"_index":3935,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynconfig(providerfactory",{"_index":4031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynedgeconfig",{"_index":3936,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynedgeconfig(providerfactory",{"_index":4036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikimultidynconfig",{"_index":3937,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikimultidynconfig(providerfactory",{"_index":4047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikipedia",{"_index":1790,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":2564,"title":{},"body":{"components/MapComponent.html":{}}}],["windows",{"_index":2607,"title":{},"body":{"components/MapComponent.html":{}}}],["wish",{"_index":363,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["within",{"_index":1842,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["without",{"_index":3571,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["withtext",{"_index":364,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["work",{"_index":1532,"title":{},"body":{"interfaces/Column.html":{}}}],["works",{"_index":115,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["wrap",{"_index":920,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["wrapper",{"_index":1304,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["wrapper'},{'name",{"_index":717,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["wrapper.component",{"_index":49,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["wrapper.component.ts",{"_index":2408,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["wrapper.component.ts:28",{"_index":2434,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:30",{"_index":2431,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:31",{"_index":2432,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:32",{"_index":2430,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:33",{"_index":2433,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:35",{"_index":2436,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:39",{"_index":2438,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:43",{"_index":2440,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:51",{"_index":2442,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:55",{"_index":2444,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:59",{"_index":2422,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:73",{"_index":2427,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:78",{"_index":2425,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:82",{"_index":2426,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:86",{"_index":2429,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ww",{"_index":3328,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["x",{"_index":921,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x(d",{"_index":3382,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0",{"_index":3525,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0,x1",{"_index":3531,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x1",{"_index":3528,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x_inner",{"_index":2637,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["xaxis",{"_index":922,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain",{"_index":3499,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[0].gettime",{"_index":3502,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[1].gettime",{"_index":3501,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent",{"_index":3460,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0",{"_index":3473,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0].gettime",{"_index":3478,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1",{"_index":2805,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1].gettime",{"_index":3477,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xlabels",{"_index":1048,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xlabels.includes(value.x",{"_index":1058,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xt",{"_index":3354,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y",{"_index":923,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y(d",{"_index":3388,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y0(this.y(0",{"_index":3384,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y1(d",{"_index":3385,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxis",{"_index":924,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxisticks",{"_index":2740,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["year",{"_index":2978,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["years",{"_index":3084,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["yes",{"_index":386,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["yextent",{"_index":2803,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[0",{"_index":2806,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[1",{"_index":2715,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["yielded",{"_index":1552,"title":{},"body":{"interfaces/Column.html":{}}}],["ylabels",{"_index":1053,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ylabels.includes(value.y",{"_index":1059,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ymax",{"_index":3462,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yoffset",{"_index":3670,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["yyyy",{"_index":3323,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["z",{"_index":1253,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zeros",{"_index":3296,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["zoom/selection",{"_index":3169,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoomable",{"_index":3079,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["zoombehavior",{"_index":3362,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoomed",{"_index":3076,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zooming",{"_index":3371,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zooms",{"_index":3266,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AgGridModule.html":{"url":"modules/AgGridModule.html","title":"module - AgGridModule","body":"\n                   \n\n\n\n\n    Modules\n    AgGridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_declarations\n\n\n\ncluster_AgGridModule_exports\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ag-grid/ag-grid.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AgGridViewComponent\n                        \n                        \n                            DataModalComponent\n                        \n                        \n                            FacetWrapperComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AgGridViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { AgGridModule as AGModule } from 'ag-grid-angular';\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsModalModule } from \"@sinequa/components/modal\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { ResultModule } from \"@sinequa/components/result\";\n\nimport { AgGridViewComponent } from \"./ag-grid-view.component\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n        \n        IntlModule,\n        UtilsModule,\n        BsActionModule,\n        BsModalModule,\n        ResultModule,\n        BsFacetModule,\n        \n        AGModule.withComponents([FacetWrapperComponent]),\n    ],\n    declarations: [\n        AgGridViewComponent,\n        DataModalComponent,\n        FacetWrapperComponent\n    ],\n    exports: [\n        AgGridViewComponent\n    ],\n})\nexport class AgGridModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationData.html":{"url":"interfaces/AggregationData.html","title":"interface - AggregationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Convenience structure for managing custom metadata types (like\ncooccurrence entities). AggregationData is returned by the custom\nparse() function of an AggregationEdgeType.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdge.html":{"url":"interfaces/AggregationEdge.html","title":"interface - AggregationEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to store the aggregation and\naggregation items from which the edge is constructed\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            aggregationItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:     Aggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Aggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aggregationItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregationItem:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdgeType.html":{"url":"interfaces/AggregationEdgeType.html","title":"interface - AggregationEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, specifying which aggregation is used\nto generate the Edges, and additional options.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the aggregation in the Web Service configuration\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default number of items to fetch\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         AggregationTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AggregationTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A parameter to define when the aggregation is fetched and nodes are added\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AggregationProvider.html":{"url":"classes/AggregationProvider.html","title":"class - AggregationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AggregationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                The Aggregation Provider generates nodes and edges from aggregations\nfetched from the server.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Readonly\n                                skips\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAggregationNodes\n                            \n                            \n                                getData\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeTypes: AggregationEdgeType[], query?: Query)\n                    \n                \n                        \n                            \n                                Defined in network/providers/aggregation-provider.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    AggregationEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        skips\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in network/providers/aggregation-provider.ts:65\n                        \n                    \n\n            \n                \n                    Stores how many aggregation items have been fetched from the server for a given aggregation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAggregationNodes\n                        \n                    \n                \n            \n            \n                \naddAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/aggregation-provider.ts:141\n                \n            \n\n\n            \n                \n                    Create nodes and edges for the given aggregation item and adds them\nto the dataset. By default (if the edge does not have a parse() function\nand there is no sourceNode), the aggregation is assumed to be a cross-\ndistribution, with items formatted as \"Bill Gates/Microsoft\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation item to process\n\n                                    \n                                \n                                \n                                    aggregation\n                                    \n                                            Aggregation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation from which the item comes from\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                AggregationEdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the edge corresponding to that aggregation\n\n                                    \n                                \n                                \n                                    sourceNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:195\n\n                \n            \n\n\n            \n                \n                    Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions displayed for a specific node\nwhen it is clicked on.\nWe display \"expand\" actions for the edges with a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:241\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions specific to this provider.\nWe display actions allowing to add additional data for \"source\" edges\n(either all the source edges at once, or each individually).\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:219\n\n                \n            \n\n\n            \n                \n                    Called when a node in the network is clicked.\nIf one edge has an \"onclick\" trigger we potentially expand that\nclicked node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:159\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AsyncRecordsProvider.html":{"url":"classes/AsyncRecordsProvider.html","title":"class - AsyncRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/async-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of RecordsProviders where the records are not provided\ndirectly, but instead fetched from the server via a given Query object.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                    Public\n                                setQuery\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], query: Query, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/async-records-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:38\n\n                \n            \n\n\n            \n                \n                    Updates the dataset after an asynchronous call to retrieve the records.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuery(query: Query)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:28\n                \n            \n\n\n            \n                \n                    Sets a new query to asynchronous records providers.\nIt will be used on the next call to getData()\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The query object we want to use to fetch records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of RecordsProviders where the records are not provided\n * directly, but instead fetched from the server via a given Query object.\n */\nexport class AsyncRecordsProvider extends RecordsProvider {\n\n    constructor(\n        public name: string,\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected query: Query,\n        protected hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, [], hideRecordNode);\n    }\n\n\n    /**\n     * Sets a new query to asynchronous records providers.\n     * It will be used on the next call to getData()\n     * @param query The query object we want to use to fetch records\n     */\n    public setQuery(query: Query) {\n        this.query = query;\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Updates the dataset after an asynchronous call to retrieve the records.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        // Query mode\n        this.context.searchService.getResults(this.query, undefined, {searchInactive: true})\n            .subscribe(results => {\n                this.updateDataset(results.records);\n                this.provider.next(this.dataset);\n            });\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseProvider.html":{"url":"classes/BaseProvider.html","title":"class - BaseProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/base-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Base implementation of the NetworkProvider interface with convenience\nmethods to create nodes and edges, and default features which should apply\nto all providers.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NetworkProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:21\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:23\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:211\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:188\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:179\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Node, Edge, NodeType, EdgeType, NetworkProvider, NetworkDataset, NetworkContext} from '../network-models';\nimport { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n\n/**\n * Base implementation of the NetworkProvider interface with convenience\n * methods to create nodes and edges, and default features which should apply\n * to all providers.\n */\nexport class BaseProvider implements NetworkProvider {\n\n    protected readonly provider = new Subject();\n    public dataset = new NetworkDataset();\n    public active = true;\n\n    public readonly EDGESEPARATOR = \"~~~EDGE~~~\";\n\n    /** Action to turn the provider on or off */\n    public readonly activateAction: Action;\n    /** Action to reset the provider */\n    public readonly resetAction: Action;\n\n    public context: NetworkContext;\n\n    constructor(\n        public name: string\n    ) {\n        this.activateAction = new Action({\n            icon: this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\",\n            text: this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\",\n            title: \"msg#network.actions.toggle\",\n            action: (action: Action) => {\n                this.active = !this.active\n                action.icon = this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\";\n                action.text = this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\";\n                this.getData(this.context);\n            }\n        });\n        this.resetAction = new Action({\n            icon: \"fas fa-trash-alt fa-fw\",\n            text: \"msg#network.actions.reset\",\n            title: \"msg#network.actions.resetTitle\",\n            action: () => {\n                this.dataset.clear();\n                this.getData(this.context);\n            }\n        });\n    }\n\n    /** Returns a standard ID for an edge between two given nodes */\n    protected getEdgeId(node1: Node, node2: Node): string {\n        return node1.id + this.EDGESEPARATOR + node2.id;\n    }\n    \n    /** Returns a standard ID for a node with a given type and \"value\" */\n    protected getNodeId(type: NodeType, value: string): string {\n        return `${type.name}:${value}`;\n    }\n\n    /** Retrieves the \"value\" of the node from its ID */\n    protected getNodeValue(node: Node): string {\n        return node.id.substr(node.type.name.length+1);\n    }\n\n    /**\n     * Creates a new Node object\n     * @param type The NodeType of the node\n     * @param value The \"value\" of the node (eg. \"BILL GATES\")\n     * @param label (default: display = value) The \"display value\" of the node (eg. \"Bill Gates\")\n     * @param visible (default: true) Whether the node should be visible or not\n     * @param customProps (default: {}) Custom properties to add to the node object\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the node in the network (note that the count property accumulates when nodes are merged)\n     */\n    protected createNode(type: NodeType, value: string, label?: string, visible = true, customProps = {}, count = 1): Node {\n        // Apply formatter if any\n        if(type.field) {\n            const col = this.context.appService.getColumn(type.field);\n            if(col?.formatter) {\n                label = this.context.appService.formatService.formatFieldValue({value, display: label}, col);\n            }\n        }\n        // Create node\n        const node: Node = {\n            id: this.getNodeId(type, value),\n            label: label || value,\n            type,\n            provider: this,\n            visible,\n            count,\n            context: this.context\n        }\n        Utils.extend(node, customProps);\n        let options;\n        if(typeof type.nodeOptions === \"function\") {\n            options = type.nodeOptions(node, type);\n        }\n        else {\n            options = type.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    /**\n     * Creates a new Edge object\n     * @param type The EdgeType of that Edge\n     * @param fromNode The \"from\" Node object to which this edge is attached\n     * @param toNode The \"to\" Node object to which this edge is attached\n     * @param fieldValue (default: undefined) An optional value, which, if provided, allows to filter the search with a select (\"type.field = fieldValue\")\n     * @param visible (default: true) Whether the edge should be visible or not\n     * @param customProps (default: {}) Custom properties to add to this edge\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the edge in the network (note that the count property accumulates when edges are merged)\n     * @param directed (default: false) Whether the edge is directed or undirected. If true, an arrow is drawn on the edge.\n     * @param relation (default: undefined) If provided, the \"relation\" is a label displayed in the middle of the edge\n     */\n    protected createEdge(type: EdgeType, fromNode: Node, toNode: Node, fieldValue: string | undefined = undefined, visible = true, customProps = {}, count = 1, directed = false, relation?: string): Edge {\n        const edge: Edge = {\n            id: this.getEdgeId(fromNode, toNode),\n            from: fromNode.id,\n            to: toNode.id,\n            fieldValue,\n            type,\n            visible,\n            count,\n            provider: this,\n            context: this.context\n        }\n        Utils.extend(edge, customProps);\n        if(directed) {\n            edge[\"arrows\"] = {middle: {scaleFactor: 0.3, enabled: true}};\n        }\n        if(relation) {\n            edge[\"label\"] = relation;\n            edge[\"labels\"] = [relation];\n            edge[\"font\"] = {size: 5, color: \"#808080\"};            \n        }\n        let options: {[key: string]: any};\n        if(typeof type.edgeOptions === \"function\") {\n            options = type.edgeOptions([fromNode, toNode], edge, type);\n        }\n        else {\n            options = type.edgeOptions;\n        }\n        return Utils.extend(edge, options);\n    }\n    \n\n    // Implementation of the NetworkProvider interface\n\n    getProvider(): Subject {\n        return this.provider;\n    }\n\n    getData(context: NetworkContext) {\n        this.context = context;\n    }\n\n    onDatasetsMerged(dataset: NetworkDataset) {\n        \n    }\n\n    onNodesInserted(nodes: Node[]) {\n        \n    }\n    \n    onNodeClicked(node: Node | undefined) {\n        \n    }\n\n    onEdgeClicked(edge: Edge | undefined) {\n        \n    }\n\n    /**\n     * By default, the base provider includes an action to turn the provider\n     * on or off, and an action to reset the data from this provider\n     */\n    getProviderActions(): Action[] {\n        return [this.activateAction, this.resetAction];\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * node has a \"field\" property\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions: Action[] = []\n        if(this.active && node.provider === this && node.type.field) {\n            actions.push(new Action({\n                icon: \"fas fa-filter\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: node.label}),\n                action: () => {\n                    const expr = this.context.exprBuilder.makeExpr(node.type.field!, this.getNodeValue(node), node.label);\n                    node.context.searchService.query.addSelect(expr, node.context.name);\n                    node.context.searchService.search();\n                }\n            }));\n        }\n        return actions;\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * edge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\n     * is created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\n     * property)\n     * @param edge The clicked edge\n     */\n    getEdgeActions(edge: Edge): Action[] {\n        const actions: Action[] = [];\n        const nodeFrom = edge.context.nodes.get(edge.from);\n        const nodeTo = edge.context.nodes.get(edge.to);\n        if(this.active && edge.provider === this) {\n            if(edge.type.field && edge.fieldValue) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: edge.fieldValue}),\n                    action: () => {\n                        const expr = this.context.exprBuilder.makeExpr(edge.type.field!, edge.fieldValue!);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            else if(nodeFrom && nodeTo && nodeFrom.type.field && nodeTo.type.field) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch2\", {label1: nodeFrom.label, label2: nodeTo.label}),\n                    action: () => {\n                        const exprFrom = this.context.exprBuilder.makeExpr(nodeFrom.type.field!, this.getNodeValue(nodeFrom), nodeFrom.label);\n                        const exprTo = this.context.exprBuilder.makeExpr(nodeTo.type.field!, this.getNodeValue(nodeTo), nodeTo.label);\n                        const expr = this.context.exprBuilder.concatAndExpr([exprFrom, exprTo]);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            \n        }\n        return actions;\n    }\n\n    onDestroy() {\n        \n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsEdgeInfoCard.html":{"url":"components/BsEdgeInfoCard.html","title":"component - BsEdgeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsEdgeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/edge-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-edge-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                edge-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                fromNode\n                            \n                            \n                                toNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                edge\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        edge\n                    \n                \n                \n                    \n                        Type :         Edge\n\n                    \n                \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node, Edge } from './network-models';\n\n\n@Component({\n    selector: \"sq-edge-info-card\",\n    templateUrl: \"edge-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsEdgeInfoCard implements OnChanges {\n    @Input() edge: Edge;\n\n    closed: boolean;\n    expanded: boolean;\n\n    fromNode: Node;\n    toNode: Node;\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n\n        this.fromNode = this.edge.context.nodes.get(this.edge.from) as Node;\n        this.toNode = this.edge.context.nodes.get(this.edge.to) as Node;\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            -\n            \n\n            \n                \n            \n            \n                \n            \n        \n        \n            \n                {{ 'msg#network.infocards.count' | sqMessage }}:  {{edge.count}}\n                {{ 'msg#network.infocards.aggregation' | sqMessage }}:  {{edge['aggregation'].name}}\n                {{ 'msg#network.infocards.record' | sqMessage }}:  {{edge['record']['title']}}\n            \n        \n    \n\n\n\n    \n    {{node['icon']['code']}}\n    {{node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{node.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    -                                                                                                                                        {{ \\'msg#network.infocards.count\\' | sqMessage }}:  {{edge.count}}                {{ \\'msg#network.infocards.aggregation\\' | sqMessage }}:  {{edge[\\'aggregation\\'].name}}                {{ \\'msg#network.infocards.record\\' | sqMessage }}:  {{edge[\\'record\\'][\\'title\\']}}                                {{node[\\'icon\\'][\\'code\\']}}    {{node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{node.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsEdgeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsFacetDate.html":{"url":"components/BsFacetDate.html","title":"component - BsFacetDate","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsFacetDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/facet-date.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-date\n            \n\n            \n                styleUrls\n                ./facet-date.scss\n            \n\n\n\n            \n                templateUrl\n                ./facet-date.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clearFiltersAction\n                            \n                            \n                                dateRangeControl\n                            \n                            \n                                form\n                            \n                            \n                                items\n                            \n                            \n                                selection\n                            \n                            \n                                timeSeries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterItem\n                            \n                            \n                                    Public\n                                isFiltered\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                updateRange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                allowCustomRange\n                            \n                            \n                                displayEmptyDistributionIntervals\n                            \n                            \n                                field\n                            \n                            \n                                name\n                            \n                            \n                                results\n                            \n                            \n                                showCount\n                            \n                            \n                                showCustomRange\n                            \n                            \n                                timelineAggregationName\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, formBuilder: FormBuilder, exprBuilder: ExprBuilder, searchService: SearchService, advancedService: AdvancedService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in timeline/bootstrap/facet-date.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        advancedService\n                                                  \n                                                        \n                                                                    AdvancedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Modified'\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        allowCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        displayEmptyDistributionIntervals\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'modified'\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Date'\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCount\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        timelineAggregationName\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Timeline'\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:34\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterItem\n                        \n                    \n                \n            \n            \n                \nfilterItem(item: AggregationItem, event)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isFiltered\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:231\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRange(range: Date[])\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            Date[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        clearFiltersAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateRangeControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormControl\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AggregationItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Date | undefined)[]\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeSeries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:46\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in timeline/bootstrap/facet-date.ts:123\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n  Component,\n  OnInit,\n  OnDestroy,\n  Input,\n  OnChanges,\n  SimpleChanges\n} from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { AppService, Expr, ExprBuilder, ExprOperator } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Aggregation, AggregationItem, Results } from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\nimport { debounceTime, filter, map } from \"rxjs/operators\";\nimport { BsFacetTimelineComponent, TimelineSeries } from \".\";\n\n@Component({\n  selector: \"sq-facet-date\",\n  templateUrl: \"./facet-date.html\",\n  styleUrls: [\"./facet-date.scss\"]\n})\nexport class BsFacetDate\n  extends AbstractFacet\n  implements OnInit, OnChanges, OnDestroy {\n\n  @Input() name: string = 'Date';\n  @Input() results: Results;\n  @Input() aggregation: string = 'Modified';\n  @Input() field: string = 'modified';\n  @Input() timelineAggregationName: string = 'Timeline';\n  @Input() showCount: boolean = true; // Show the number of occurrences\n  @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n  @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n  @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n\n  clearFiltersAction: Action;\n  items: AggregationItem[] = [];\n\n  form: FormGroup;\n  dateRangeControl: FormControl;\n\n  timeSeries: TimelineSeries[] = [];\n  selection: (Date|undefined)[]\n\n  private subscriptions: Subscription[] = [];\n  private data: Aggregation | undefined;\n\n  constructor(\n          private facetService: FacetService,\n          private formBuilder: FormBuilder,\n          private exprBuilder: ExprBuilder,\n          private searchService: SearchService,\n          private advancedService: AdvancedService,\n          private appService: AppService\n      ) {\n      super();\n\n      this.clearFiltersAction = new Action({\n          icon: \"far fa-minus-square\",\n          title: \"msg#facet.filters.clear\",\n          action: () => {\n              this.facetService.clearFiltersSearch(this.name, true);\n          },\n      });\n  }\n\n  ngOnInit() {\n      if (this.allowCustomRange) {\n          this.dateRangeControl = new FormControl([undefined, undefined], [\n              this.advancedService.validators.range(this.field),\n              this.advancedService.validators.date(this.field)\n          ]);\n\n          this.form = this.formBuilder.group({\n              dateRange: this.dateRangeControl\n          });\n\n          // Listen to query changes\n          this.subscriptions.push(\n              this.searchService.queryStream.subscribe(() => {\n                  const value = this.getRangeValue();\n                  this.dateRangeControl.setValue(value, {emitEvent: false});\n                  this.selection = (!value[0] && !value[1]) ? undefined : value;\n              })\n          );\n\n          // Listen to form changes\n          this.subscriptions.push(\n              this.dateRangeControl.valueChanges\n                  .pipe(\n                      debounceTime(500),\n                      filter( () => this.form.valid )\n                  )\n                  .subscribe(\n                      (value: (undefined | Date)[]) => {\n                          this.facetService.clearFiltersSearch(this.name, true);\n                          this.setCustomDateSelect(value);\n                      }\n                  )\n          );\n      }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n      if(this.allowCustomRange) {\n          this.updateTimeSeries(this.timelineAggregationName);\n      }\n\n      if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems()\n      }\n  }\n\n  ngOnDestroy() {\n      this.subscriptions.map(item => item.unsubscribe());\n  }\n\n  get actions(): Action[] {\n      const actions: Action[] = [];\n      if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n          actions.push(this.clearFiltersAction);\n      }\n      return actions;\n\n  }\n\n\n  filterItem(item: AggregationItem, event) {\n    if (!this.isFiltered(item)) {\n        this.facetService.addFilterSearch(this.name, this.data!, item);\n    } else {\n        this.facetService.removeFilterSearch(this.name, this.data!, item);\n    }\n    event.preventDefault();\n}\n\n  private updateItems() {\n    this.items = this.displayEmptyDistributionIntervals ? this.data?.items || [] : this.data?.items?.filter(item => item.count > 0) || [];\n  }\n\n  private updateTimeSeries(aggregationName: string) {\n      this.timeSeries = [];\n      const ccaggregation = this.appService.getCCAggregation(aggregationName);\n      const aggregation = this.getAggregation(aggregationName);\n      if (aggregation && ccaggregation) this.timeSeries.push(BsFacetTimelineComponent.createTimeseries({aggregation: aggregationName, primary: true}, aggregation, ccaggregation));\n  }\n\n  private getAggregation(aggregationName: string): Aggregation | undefined {\n      let aggregation = this.facetService.getAggregation(aggregationName, this.results);\n\n      if (!aggregation) {\n          const query = Utils.copy(this.searchService.query);\n          query.action = \"aggregate\";\n          query.aggregations = [aggregationName];\n\n          this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(map(results => {aggregation = results.aggregations[0]}));\n      }\n\n      return aggregation\n  }\n\n  private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n      let expr: string | undefined;\n      if (range) {\n          const from = range[0];\n          const to = range[1];\n          if (from && to) {\n              expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n          } else if (from) {\n              expr = this.exprBuilder.makeNumericalExpr(this.field, \">=\", from);\n          } else if (to) {\n              expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n          return expr.values;\n      } else {\n          return expr.value!\n      }\n  }\n\n  public updateRange(range: Date[]) {\n      if (!!range) {\n          this.setCustomDateSelect(range);\n      }\n  }\n\n  public isFiltered(item: AggregationItem): boolean {\n      const filtered = this.facetService.getAggregationItemsFiltered(this.name)\n      return this.facetService.filteredIndex(this.data, filtered, item) !== -1;\n}\n}\n\n    \n\n    \n        \n  Predefined Date Range :\n\n    \n        \n            {{item | sqValue:item.$column}}\n            {{item.count}}\n        \n    \n\n  \n      \n          \n          \n      \n      Custom Date Range :\n  \n\n  \n      \n          \n          \n      \n  \n\n  \n  \n\n\n    \n\n    \n                \n                    ./facet-date.scss\n                \n                .date-item:hover {\n    background-color: #f8f9fa;\n    color: black;\n}\n\n.active {\n    color: #0f5132;\n    background-color: #d1e7dd;\n}\n\n.counter {\n    padding-left: 4px;\n    padding-right: 6px;\n    font-size: .7rem;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Predefined Date Range :                        {{item | sqValue:item.$column}}            {{item.count}}                                                    Custom Date Range :                                          '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsFacetDate'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsHeatmapComponent.html":{"url":"components/BsHeatmapComponent.html","title":"component - BsHeatmapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsHeatmapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/heatmap.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-heatmap\n            \n\n            \n                styleUrls\n                ./heatmap.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./heatmap.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                dataFiltered\n                            \n                            \n                                gx\n                            \n                            \n                                gy\n                            \n                            \n                                originalCount\n                            \n                            \n                                    Optional\n                                tooltipItem\n                            \n                            \n                                tooltipLeft\n                            \n                            \n                                tooltipOrientation\n                            \n                            \n                                tooltipRight\n                            \n                            \n                                tooltipTop\n                            \n                            \n                                viewInit\n                            \n                            \n                                wrap\n                            \n                            \n                                x\n                            \n                            \n                                xAxis\n                            \n                            \n                                y\n                            \n                            \n                                yAxis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildChart\n                            \n                            \n                                getLegend\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onAxisClicked\n                            \n                            \n                                onItemClicked\n                            \n                            \n                                onMouseOver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClickable\n                            \n                            \n                                buckets\n                            \n                            \n                                colorScheme\n                            \n                            \n                                data\n                            \n                            \n                                height\n                            \n                            \n                                itemsClickable\n                            \n                            \n                                margin\n                            \n                            \n                                maxX\n                            \n                            \n                                maxY\n                            \n                            \n                                theme\n                            \n                            \n                                transition\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClicked\n                            \n                            \n                                itemClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        axisClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        buckets\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 9\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"schemeBlues\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:23\n                            \n                        \n                \n                    \n                        Raw data to display (will be filtered in function of maxX and maxY parameters)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemsClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        margin\n                    \n                \n                \n                    \n                        Type :     { top: number; bottom: number; left: number; right: number; }\n\n                    \n                \n                \n                    \n                        Default value : {top: 100, bottom: 20, left: 100, right: 40}\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxX\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxY\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        transition\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:27\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        axisClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:43\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildChart\n                        \n                    \n                \n            \n            \n                \nbuildChart(update?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:123\n                \n            \n\n\n            \n                \n                    buildChart() actually only builds the axes of the chart, since the\nrest is build automatically with Angular syntax in the template.\nWe build axis programmatically (with D3 selects) to benefit from the\nD3 abstractions and transitions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLegend\n                        \n                    \n                \n            \n            \n                \ngetLegend()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:209\n                \n            \n\n\n            \n                \n                    Builds the list of legend items\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:78\n                \n            \n\n\n            \n                \n                    ngOnChanges is used to respond to changes in the data (or chart parameter)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAxisClicked\n                        \n                    \n                \n            \n            \n                \nonAxisClicked(value: string, axis: \"x\" | \"y\")\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:200\n                \n            \n\n\n            \n                \n                    Called when the user clicks on an axis item\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    axis\n                                    \n                                            \"x\" | \"y\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onItemClicked\n                        \n                    \n                \n            \n            \n                \nonItemClicked(item: HeatmapItem)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:189\n                \n            \n\n\n            \n                \n                    Called when the user clicks on a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMouseOver\n                        \n                    \n                \n            \n            \n                \nonMouseOver(item: HeatmapItem, event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:160\n                \n            \n\n\n            \n                \n                    Called when the user hovers the mouse over a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleQuantile\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataFiltered\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('xAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('yAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tooltipItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeatmapItem\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipLeft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipOrientation\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipRight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipTop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:230\n                        \n                    \n\n            \n                \n                    Truncates the axis strings to fit inside 90px width\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n    \n        \n\n    \n    \n        \n            \n            \n            {{ item.start | number : '1.0-0'}}\n        \n    \n\n    \n        \n        \n\n        \n        \n\n        \n        \n        \n        \n    \n    \n    \n        {{'msg#heatmap.showing' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}\n    \n\n\n\n\n\n    {{tooltipItem.display || tooltipItem.value}}\n    {{'msg#heatmap.tooltip' | sqMessage:{values: {count: tooltipItem.count} } }}\n\n\n    \n\n    \n                \n                    ./heatmap.component.scss\n                \n                // This is required to position the tooltip absolutely\n:host {\n    display: block;\n    position: relative;\n}\n\n// Note: ::ng-deep is deprecated, but currently no better alternative\n.axis.clickable ::ng-deep text:hover {\n    text-decoration: underline;\n    cursor: pointer;\n}\n\n.tile {\n    opacity: 0.9;\n}\n\n.tile.clickable:hover {\n    cursor: pointer;\n    opacity: 1;\n    transition: opacity 0.2s ease-in 0s;\n}\n\n.tile.selected {\n    opacity: 0.5;\n}\n\n.legend {\n    font-size: 10px;\n    fill: darkgrey;\n\n    rect {\n        opacity: 0.9;\n    }\n}\n\n.bottom-legend {\n    fill: darkgrey;\n    font-size: 10px;\n    text-anchor: end;\n}\n\nsq-tooltip ::ng-deep {\n    .sq-tooltip {\n        pointer-events: none;\n        opacity: 0.8;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ item.start | number : \\'1.0-0\\'}}                                                                                                    {{\\'msg#heatmap.showing\\' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}        {{tooltipItem.display || tooltipItem.value}}    {{\\'msg#heatmap.tooltip\\' | sqMessage:{values: {count: tooltipItem.count} } }}'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsHeatmapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsHeatmapModule.html":{"url":"modules/BsHeatmapModule.html","title":"module - BsHeatmapModule","body":"\n                   \n\n\n\n\n    Modules\n    BsHeatmapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {BsTooltipComponent} from \"./tooltip.component\";\nimport {BsHeatmapComponent} from \"./heatmap.component\";\nimport {BsFacetHeatmapComponent} from \"./facet-heatmap.component\";\nimport {BsResultsHeatmapView} from \"./results-heatmap-view\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        BsSelectionModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ],\n    exports: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ]\n})\nexport class BsHeatmapModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsNodeInfoCard.html":{"url":"components/BsNodeInfoCard.html","title":"component - BsNodeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsNodeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/node-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-node-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                node-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                neighbors\n                            \n                            \n                                nodeData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                node\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        node\n                    \n                \n                \n                    \n                        Type :         Node\n\n                    \n                \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neighbors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NodeData\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            \n                \n            \n            \n                \n            \n        \n        \n            \n                \n                    {{neighbor.key | sqMessage}}\n                    \n                        \n                            \n                                \n                            \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n    {{nodeData.node['icon']['code']}}\n    {{nodeData.node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{nodeData.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                        {{neighbor.key | sqMessage}}                                                                                                                                                                                                                                {{nodeData.node[\\'icon\\'][\\'code\\']}}    {{nodeData.node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{nodeData.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsNodeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsTimelineModule.html":{"url":"modules/BsTimelineModule.html","title":"module - BsTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    BsTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_BsTimelineModule_imports\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            timeline/bootstrap/timeline.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsHeatmapModule} from \"@sinequa/analytics/heatmap\";\n\nimport {BsTimelineComponent} from \"./timeline.component\";\nimport {BsFacetTimelineComponent} from \"./facet-timeline.component\";\nimport { TimelineLegendComponent } from \"./timeline-legend.component\";\nimport { BsFacetDate } from \"./facet-date\";\nimport { BsAdvancedModule } from \"@sinequa/components/advanced\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsActionModule,\n        BsHeatmapModule, // We need the heatmap module for the tooltip component\n        BsAdvancedModule,\n        BsFacetModule\n    ],\n    declarations: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ],\n    exports: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ]\n})\nexport class BsTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsTooltipComponent.html":{"url":"components/BsTooltipComponent.html","title":"component - BsTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsTooltipComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/tooltip.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-tooltip\n            \n\n\n            \n                styles\n                \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n            \n\n            \n                template\n                \n    \n        \n    \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                left\n                            \n                            \n                                orientation\n                            \n                            \n                                right\n                            \n                            \n                                theme\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    style\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        left\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                \n                    \n                        Default value : \"right\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        right\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:40\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n\n                \n                    \n                        getstyle()\n                    \n                \n                            \n                                \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:43\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\n\n@Component({\n    selector: \"sq-tooltip\",\n    template: `\n\n    \n        \n    \n\n`,\n    styles: [`\n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    `]\n})\nexport class BsTooltipComponent {\n    @Input() orientation: \"left\" | \"right\" = \"right\";\n    @Input() left = 0;\n    @Input() right = 0;\n    @Input() top = 0;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    get style() {\n        if(this.orientation === \"right\") {\n            return {\n                'left.px': this.left + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n        else {\n            return {\n                'right.px': this.right + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n    }\n}\n    \n\n\n    \n            \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartDataPoint.html":{"url":"interfaces/ChartDataPoint.html","title":"interface - ChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartOptions.html":{"url":"interfaces/ChartOptions.html","title":"interface - ChartOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            colorScheme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            getItemColor\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tickFormatter\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colorScheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colorScheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemColor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickFormatter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tickFormatter:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Column.html":{"url":"interfaces/Column.html","title":"interface - Column","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ag-grid/ag-grid-view.component.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ColDef\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            $column\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $column:         CCColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CCColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionEventType, SelectionService } from \"@sinequa/components/selection\";\nimport { UserPreferences } from \"@sinequa/components/user-settings\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { AppService, FormatService, Query } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { ModalService } from \"@sinequa/core/modal\";\nimport { Results, Record, CCColumn, EngineType } from \"@sinequa/core/web-services\";\nimport { ICellRendererFunc, ITooltipParams, ColDef, GridApi, ColumnApi, GridReadyEvent, RowDataChangedEvent, CellDoubleClickedEvent, SelectionChangedEvent, IDatasource, CsvExportParams, ProcessCellForExportParams, SortChangedEvent, FilterChangedEvent, FilterModifiedEvent, ModelUpdatedEvent } from 'ag-grid-community';\nimport { ApplyColumnStateParams } from \"ag-grid-community/dist/lib/columnController/columnApi\";\nimport { Subscription } from \"rxjs\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { SqDatasource } from \"./datasource\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n\nexport interface Column extends ColDef {\n    field: string;\n    $column?: CCColumn;\n}\n\n\n@Component({\n    selector: 'sq-ag-grid-view',\n    templateUrl: './ag-grid-view.component.html',\n    styleUrls: ['./ag-grid-view.component.scss']\n})\nexport class AgGridViewComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Results containing the record objects displayed in this grid */\n    @Input() results?: Results;\n    /** List of column definitions for each column displayed in the grid */\n    @Input() columns: Column[];\n    /** Optional query to fetch more data from the server (defaults to searchService.query) */\n    @Input() query?: Query;\n\n    /** Width of the grid */\n    @Input() width = \"100%\";\n    /** Height of the grid */\n    @Input() height = \"600px\";\n    /** Which actions to show above the grid, if any */\n    @Input() toolbarActions: (string | Action)[] = [\"columnVisibility\", \"gridReset\", \"autosize\", \"copySelection\", \"downloadSelection\", \"formatContent\"];\n    /** Whether or not to show the results counter in the toolbar */\n    @Input() showCounter = true;\n    /** Whether or not to format the data in the grid, using the FormatService */\n    @Input() formatContent = true;\n    /** Row selection mode (forwarded to ag-grid) */\n    @Input() rowSelection: 'single' | 'multiple' | undefined = 'multiple';\n    /** Whether or not to display checkboxes in the first column of the grid to select rows */\n    @Input() displayCheckbox = false;\n    /** Choice of ag-grid theme (balham is denser) */\n    @Input() theme: \"ag-theme-balham\" | \"ag-theme-alpine\" | \"ag-theme-balham-dark\" | \"ag-theme-alpine-dark\" = \"ag-theme-alpine\";\n    /** Default column grid (possibly overriden by column definitions) */\n    @Input() defaultColumnWidth = 200;\n    /** Configure scrolling functionality */\n    @Input() rowModelType: string = 'infinite';\n\n    /** Default column definition */\n    @Input()\n    defaultColDef: ColDef = {\n        resizable: true\n    }\n    \n    /** Actual column definitions (derived from this.columns) */\n    colDefs: ColDef[] = [];\n    \n    /** ag-grid API for the grid and the column model */\n    gridApi: GridApi | null | undefined;\n    gridColumnApi: ColumnApi | null | undefined;\n\n    /** Datasource implementation for infinite scrolling row model */\n    datasource?: IDatasource;\n\n    // Flags to manage the state of filters and sorts\n    _filterInput = false;\n    \n    /** Custom components */\n    frameworkComponents = {\n        facet: FacetWrapperComponent\n    };\n    \n    /** List of action buttons displayed in the toolbar */\n    gridActions: Action[];\n    /** Action button allowing to toggle each column's visibility */\n    columnsAction: Action;\n\n    /** If rowModelType is 'clientSide', set rowData directly */\n    rowData: Record[] = [];\n\n    /** List of subscriptions to clean up on destroy */\n    subscriptions: Subscription[] = [];\n\n    constructor(\n        public appService: AppService,\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public intlService: IntlService,\n        public formatService: FormatService,\n        public selectionService: SelectionService,\n        public uiService: UIService,\n        public modalService: ModalService,\n        public prefs: UserPreferences\n    ) {\n        this.columnsAction = new Action({\n            icon: \"fas fa-columns fa-fw\",\n            text: \"msg#grid.columns\",\n            scrollable: true,\n            children: []\n        });\n    }\n\n    ngOnInit() {\n        // Subscribe to the selection service to reflect external row selection into the grid\n        this.subscriptions.push(this.selectionService.events.subscribe(event => {\n            if(event.source !== \"ag-grid\" && (event.type === SelectionEventType.SELECT || event.type === SelectionEventType.UNSELECT)) {\n                this.gridApi?.forEachNode(node => {\n                    if(event.records.find(r => r.id === node.data.id)) {\n                        node.setSelected(event.type === SelectionEventType.SELECT, undefined, true);\n                    }\n                });\n            }\n        }));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if(changes.columns) {\n            this.createColumns();\n        }\n        if(changes.results) {\n            this.createRows();\n        }\n        if(!this.gridActions || changes.toolbarActions) {\n            // Override the \"formatContent\" property if it exists in the user preferences\n            const formatContent = this.prefs.get(\"ag-grid-format-content\");\n            if(formatContent !== undefined) {\n                this.formatContent = formatContent;\n            }\n            this.createActions();\n        }\n    }\n\n    ngOnDestroy() {\n        // Unsubscribe from any subscription\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    /**\n     * Create the list of column definitions by deriving the input\n     * `columns` list. Since record objects do not necessarily contain\n     * clean string data, we add a custom cellRenderer and tooltipValueGetter.\n     * Sinequa provides header names and tells us if a column can be sorted on,\n     * or filtered.\n     */\n    createColumns() {\n        this.colDefs = this.columns?.map((col,i) => {\n\n            col = Utils.extend({}, col);\n            col.$column = this.appService.getColumn(col.field);\n\n            col.tooltipValueGetter = col.tooltipValueGetter || this.tooltipValueGetter;\n            col.headerName = col.headerName || (col.$column?.label? this.intlService.formatMessage(col.$column?.label) : col.field);\n            col.headerTooltip = col.headerTooltip || col.headerName;\n            col.cellRenderer = col.cellRendererFramework ? undefined : col.cellRenderer || this.renderCell;\n            col.sortable = col.sortable || this.appService.isSortable(col.field);\n            const hidePref = this.prefs.get(\"ag-grid-hide-\"+col.field);\n            col.hide = hidePref === undefined? col.hide : hidePref;\n            col.width = col.width || this.defaultColumnWidth;\n\n            // How to filter the column\n            if(col.filter === undefined) {\n                switch(col.$column?.eType) {\n                    case EngineType.double:\n                    case EngineType.float:\n                    case EngineType.integer:\n                        col.filter = 'agNumberColumnFilter'; break;\n                    case EngineType.date:\n                    case EngineType.dates:\n                    case EngineType.dateTime:\n                    case EngineType.dateTimes:\n                        col.filter = 'agDateColumnFilter'; break;\n                    case EngineType.string:\n                    case EngineType.csv:\n                        col.filter = true; break;\n                }\n            }\n\n            if(i === 0 && this.displayCheckbox) {\n                // Note that header selection checkbox doesn't work with the infinite row model\n                col.checkboxSelection = true;\n            }\n\n            return col;\n        }) || [];\n\n        // Populate the columnsAction: for each column we toggle the \"hide\" property and persist that preference\n        this.columnsAction.children = this.colDefs.map(col => new Action({\n            name: col.field,\n            text: col.headerName,\n            selected: !col.hide,\n            action: (action, event) => {\n                action.selected = !action.selected;\n                this.gridColumnApi?.setColumnVisible(col.field!, action.selected);\n                if(action.selected) {\n                    this.prefs.delete(\"ag-grid-hide-\"+col.field);\n                }\n                else {\n                    this.prefs.set(\"ag-grid-hide-\"+col.field, true);\n                }\n                event.stopPropagation();\n            }\n        }));\n    }\n\n    /**\n     * Create the rows' datasource\n     */\n    createRows() {\n        if(this.gridApi && this.gridColumnApi && this.rowModelType === 'infinite') {\n            // Create a new datasource\n            this.datasource = this.makeDatasource();\n            // Apply to the grid\n            this.gridApi.setDatasource(this.datasource);\n            // The query that yielded this data may have active filters & sort: we want the grid to reflect this\n            this.updateFilterState(this.query || this.searchService.query);\n            this.updateSortState(this.query || this.searchService.query);\n        } else if (this.rowModelType === 'clientSide') {\n            this.rowData = this.results?.records || [];\n        }\n    }\n\n    /**\n     * For each column of the grid, look for an active filter in the query\n     * and create a filter model that the grid can understand.\n     * Finally, set the filter model via the grid API.\n     * @param query \n     */\n    updateFilterState(query: Query) {\n        let model = {};\n        for(let col of this.colDefs) {\n            const select = query.findSelect(\"grid-filter-\"+col.field);\n            if(col.field && select) {\n                if(col.filter === \"facet\") { // Sinequa facets\n                    model[col.field] = {facetActive: true}; // Lets us tell ag-grid that a custom filter is active this column\n                }\n                else { // AG Grid filters\n                    const filterType = col.filter ===\"agNumberColumnFilter\"? \"number\" : col.filter ===\"agDateColumnFilter\"? \"date\" : \"text\";\n                    model[col.field] = SqDatasource.exprToModel(filterType, col.field, select.expression);\n                }\n            }\n        }\n        this.gridApi?.setFilterModel(model);\n    }\n\n    /**\n     * If the query has a custom orderby clause, create\n     * a sort model that the grid can understand and apply\n     * that model via the grid column API.\n     * @param query \n     */\n    updateSortState(query: Query) {\n        const model: ApplyColumnStateParams = {};\n        if(query.orderBy) {\n            let [colId, sort] = query.orderBy.split(\" \");\n            colId = this.appService.getColumnAlias(this.appService.getColumn(colId));\n            model.state = [{colId, sort}];\n        }\n        else {\n            model.defaultState = {sort: null};\n        }\n        this.gridColumnApi?.applyColumnState(model);\n    }\n\n    /**\n     * Create the actions displayed in the toolbar\n     */\n    createActions() {\n        // Initialization of button actions\n        this.gridActions = [];\n        for(let action of this.toolbarActions) {\n            if(!Utils.isString(action)) {\n                this.gridActions.push(action);\n            }\n            else if(action === \"columnVisibility\") {\n                this.gridActions.push(this.columnsAction);\n            }\n            else if(action === \"gridReset\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-sync-alt fa-fw\",\n                    text: \"msg#grid.reset\",\n                    title: \"msg#grid.resetTitle\",\n                    action: () => this.resetState()\n                }));\n            }\n            else if(action === \"autosize\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-arrows-alt-h fa-fw\",\n                    text: \"msg#grid.autosize\",\n                    title: \"msg#grid.autosizeTitle\",\n                    action: () => this.autoResize()\n                }));\n            }\n            else if(action === \"copySelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-copy fa-fw\",\n                    text: \"msg#grid.copy\",\n                    title: \"msg#grid.copyTitle\",\n                    action: () => this.copyToClipboard()\n                }));\n            }\n            else if(action === \"downloadSelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-download fa-fw\",\n                    text: \"msg#grid.download\",\n                    title: \"msg#grid.downloadTitle\",\n                    action: () => this.downloadCsv()\n                }));\n            }\n            else if(action === \"formatContent\") {\n                this.gridActions.push(new Action({\n                    icon: this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\",\n                    text: \"msg#grid.formatData\",\n                    title: \"msg#grid.formatDataTitle\",\n                    action: action => this.toggleFormatContent(action)\n                }));\n            }\n        }\n    }\n\n    // Custom rendering functions\n\n    /**\n     * A function that returns a HTML string for each cell.\n     * The value in the cell is params.value and the column definition\n     * is params.colDef.\n     */\n    @Input()\n    renderCell: ICellRendererFunc = (params: any): HTMLElement |string => {\n        if(this.formatContent) {\n            return this.formatService.formatValue(params.value, params.colDef.$column);\n        }\n        else {\n            return this.formatService.formatRaw(params.value);\n        }\n    }\n\n    /**\n     * A function that returns a tooltip string for each cell's value\n     */\n    @Input()\n    tooltipValueGetter = (params: ITooltipParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n    /**\n     * A function that returns a string formatted for export for each cell's value\n     */\n    @Input()\n    exportValueGetter = (params: ProcessCellForExportParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n\n    /**\n     * Create a datasource object from the given results and query\n     */\n    makeDatasource() : IDatasource {\n        if(this.results) {\n            return new SqDatasource(this.results, this.query, this.colDefs, this.searchService, this.appService, this.facetService, this.selectionService);\n        }\n        return {getRows: () => []};\n    }\n\n\n    // User actions\n\n    /**\n     * Reset filtering, sorting, column width and order\n     */\n    resetState() {\n        if(!this.query) {\n            // In global search mode, the new query & results will update the filter model\n            this.datasource?.destroy?.();\n            delete this.searchService.query.orderBy;\n            if(this.searchService.query.select?.length) {\n                for(let i=this.searchService.query.select.length; i--; i>=0) {\n                    if(this.searchService.query.select[i].facet.startsWith(\"grid-filter-\")) {\n                        this.searchService.query.removeSelect(i);\n                    }\n                }\n            }\n            this.searchService.search();\n        }\n        else {\n            // clear filters\n            this.gridApi?.setFilterModel({});\n            // clear sort\n            this.gridColumnApi?.applyColumnState({\n                defaultState:{\n                    sort: null\n                }\n            })\n        }\n        // clear width, visiblity, order\n        this.gridColumnApi?.applyColumnState({\n            defaultState:{\n                width: this.defaultColumnWidth\n            },\n            state: this.columns.map(c => {\n                // Delete the visibility preference\n                this.prefs.delete(\"ag-grid-hide-\"+c.field, true);\n                // Update the visibility action\n                const visibilityAction = this.columnsAction.children?.find(a => a.name === c.field);\n                if(visibilityAction) {\n                    visibilityAction.selected = !c.hide;\n                }\n                return {\n                    colId: c.field, // Resets the ordering\n                    hide: !!c.hide // Resets the visibility\n                };\n            }),\n            applyOrder: true\n        });\n        // Sync to apply the new visibility preference\n        this.prefs.sync();\n    }\n\n    /**\n     * Returns a configuration for exporting the data as CSV.\n     */\n    getExportParams(): CsvExportParams {\n        const params: CsvExportParams = {\n            allColumns: true,\n            processCellCallback: this.exportValueGetter\n        };\n        if(this.gridApi?.getSelectedRows().length) {\n            params.onlySelected = true;\n        }\n        return params;\n    }\n\n    /**\n     * Copy the data to the clipboard\n     */\n    copyToClipboard() {\n        const data = this.gridApi?.getDataAsCsv(this.getExportParams());\n        if(data) {\n            this.uiService.copyToClipboard(data);\n        }\n    }\n    \n    /** Download the data as a CSV file */\n    downloadCsv() {\n        this.gridApi?.exportDataAsCsv(this.getExportParams());\n    }\n\n    /**\n     * Auto-resize the columns\n     */\n    autoResize() {\n        this.gridColumnApi?.autoSizeAllColumns();\n    }\n    \n    /**\n     * Called when the user toggles the \"format content\" checkbox\n     */\n    toggleFormatContent(action: Action) {\n        this.formatContent = !this.formatContent;\n        action.icon = this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\";\n        this.prefs.set(\"ag-grid-format-content\", this.formatContent);\n        this.gridApi?.refreshCells({force: true})\n    }\n\n    // AG-GRID events\n\n    /**\n     * Callback function called when the grid is initialized\n     */\n    onGridReady(event: GridReadyEvent) {\n        this.gridApi = event.api;\n        this.gridColumnApi = event.columnApi;\n        // Create the rows in case there are already results available\n        this.createRows();\n    }\n\n    /**\n     * Callback function called when data in the grid changes\n     */\n    onRowDataChanged(event: RowDataChangedEvent) {\n        \n    }\n\n    /**\n     * Callback function called when users double click on a cell\n     */\n    onCellDoubleClicked(event: CellDoubleClickedEvent) {\n        this.modalService.open(DataModalComponent, {\n            model: {\n                row: event.data,\n                column: event.colDef.headerName || event.colDef.field,\n                cell: event.value,\n                cccolumn: (event.colDef as Column).$column,\n                formatContent: this.formatContent\n            }\n        })\n    }\n\n    /**\n     * Callback function called when users select data in the grid\n     */\n    onSelectionChanged(event: SelectionChangedEvent) {\n        const newRows = this.gridApi?.getSelectedRows() as Record[] | undefined;\n        const oldRows = this.selectionService.getSelectedIds();\n        oldRows.forEach(id => {\n            const foundRow = newRows?.find(row => row.id === id);\n            if(!foundRow) {\n                this.selectionService.toggleSelectedRecords({id} as Record, \"ag-grid\");\n            }\n        });\n        newRows?.forEach(row => {\n            const foundId = oldRows.find(id => row.id === id);\n            if(!foundId) {\n                this.selectionService.toggleSelectedRecords(row, \"ag-grid\");\n            }\n        });\n    }\n\n    /**\n     * Callback triggered on every user key input. It is useful to capture\n     * the fact that onFilterChanged is about to be called after some\n     * user input.\n     * @param event \n     */\n     onFilterModified(event: FilterModifiedEvent) {\n        if(!this._filterInput) {\n            // Check that the model has actually changed, as the method can be called event it hasn't changed!\n            const oldModel = event.filterInstance.getModel();\n            const newModel = (event.filterInstance as any).getModelFromUi?.();\n            this._filterInput = !Utils.equals(oldModel, newModel);\n        }\n    }\n\n    /**\n     * Notify the datasource that filter have changed\n     * @param event \n     */\n    onFilterChanged(event: FilterChangedEvent) {\n        // The _filterInput flag allows us to only respond to actual user input and ignore programmatic changes\n        if(this._filterInput) {\n            this._filterInput = false;\n            (this.datasource as SqDatasource)?.filterChanged?.();\n        }\n    }\n\n    /**\n     * Notify the datasource that sort has changed\n     * @param event\n     */\n    onSortChanged(event: SortChangedEvent) {\n        (this.datasource as SqDatasource)?.sortChanged?.();\n    }\n\n    /**\n     * Update selection when new rows are inserted in the table\n     * @param event \n     */\n    onModelUpdated(event: ModelUpdatedEvent) {\n        this.gridApi?.forEachNode(node => {\n            if(node.data?.$selected && !node.isSelected()) {\n                node.setSelected(true, undefined, true);\n            }\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomData.html":{"url":"interfaces/CustomData.html","title":"interface - CustomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Data structure returned by the optional parse() function of a structural edge\ntype. Contains the parsed values of a property that can be turned into one or\nmultiple nodes and edges.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DataModalComponent.html":{"url":"components/DataModalComponent.html","title":"component - DataModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DataModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/data-modal.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-data-modal\n            \n\n\n            \n                styles\n                \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n            \n\n\n            \n                templateUrl\n                ./data-modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                copyAction\n                            \n                            \n                                data\n                            \n                            \n                                formatContent\n                            \n                            \n                                    Public\n                                formatService\n                            \n                            \n                                    Public\n                                model\n                            \n                            \n                                    Public\n                                uiService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(model: DataModel, uiService: UIService, formatService: FormatService)\n                    \n                \n                        \n                            \n                                Defined in ag-grid/data-modal.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        DataModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formatService\n                                                  \n                                                        \n                                                                    FormatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateData\n                        \n                    \n                \n            \n            \n                \nupdateData()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        copyAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formatService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormatService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MODAL_MODEL)\n                        \n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uiService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UIService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { FieldValue } from \"@sinequa/core/base\";\nimport { MODAL_MODEL } from \"@sinequa/core/modal\";\nimport { CCColumn } from \"@sinequa/core/web-services\";\n\ndeclare type DataModel = {\n    cell: ValueItem | FieldValue,\n    row: any,\n    column: string,\n    cccolumn: CCColumn,\n    formatContent: boolean\n};\n\n@Component({\n    selector: 'sq-data-modal',\n    templateUrl: './data-modal.component.html',\n    styles: [`\npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    `]\n})\nexport class DataModalComponent {\n\n    copyAction: Action;\n    formatContent = true;\n    data: string;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: DataModel,\n        public uiService: UIService,\n        public formatService: FormatService\n    ){\n        this.formatContent = model.formatContent;\n    }\n\n    ngOnInit() {\n\n        this.copyAction = new Action({\n            icon: \"far fa-copy\",\n            title: \"Copy to Clipboard\",\n            action: () => this.uiService.copyToClipboard(this.data)\n        });\n\n        this.updateData();\n    }\n\n    updateData() {\n        if(this.formatContent) {\n            this.data = this.formatService.formatValue(this.model.cell, this.model.cccolumn);\n        }\n        else {\n            this.data = this.formatService.formatRaw(this.model.cell);\n        }\n    }\n}\n    \n\n    \n        \n    \n        \n        {{'msg#grid.formatData' | sqMessage}}\n    \n\n    {{data}}\n\n    \n    \n\n\n    \n\n    \n            \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{\\'msg#grid.formatData\\' | sqMessage}}        {{data}}        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DataModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdge.html":{"url":"interfaces/DynamicEdge.html","title":"interface - DynamicEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to include the record property\nfrom which this edge is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicEdgeProvider.html":{"url":"classes/DynamicEdgeProvider.html","title":"class - DynamicEdgeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicEdgeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A extension of the RecordsProvider, where records are not directly\nprovided, but are instead fetched from the server via a Query specific\nto a source node.\nConcretely, the dynamic edge provider will attach one (or more) record nodes\n(and their structural edges) to one (or more) source nodes, whose type is\nspecified in the DynamicEdgeType.\nDynamic edges can be attached right when the source nodes are inserted (oninsert),\nor when a user clicks on a source node (onclick) or when a user clicks on an\naction button displayed when a source node is clicked.\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNodeActions\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getData\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeType: DynamicEdgeType, secondaryEdgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-edge-provider.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeType\n                                                  \n                                                        \n                                                                        DynamicEdgeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        secondaryEdgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:202\n\n                \n            \n\n\n            \n                \n                    Returns an Action allowing to process a node, if the trigger of the edge type\nis \"manual\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:190\n\n                \n            \n\n\n            \n                \n                    Process a clicked source node, if the trigger of the edge type is \"onclick\"\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdgeType.html":{"url":"interfaces/DynamicEdgeType.html","title":"interface - DynamicEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, to include properties specific\nto dynamic edges, in particular a function that returns a Query object\nfor a given source node.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of records returned by the query service and allows for pagination\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain dynamic edges from a node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicNodeProvider.html":{"url":"classes/DynamicNodeProvider.html","title":"class - DynamicNodeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicNodeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider which manages dynamic node types.\nDynamic nodes are nodes that are transformed into record nodes via a\nquery. The records are fetched from the server dynamic to enrich the\noriginal node.\nFor example, a simple metadata node with the value \"Bill Gates\" can be\nenriched with the wikipedia page of Bill Gate, which can provide a lot\nof structured information about Bill Gates (which can be used, for\nexample, to attach structural edges to the original Bill Gates node).\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNodeActions\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getData\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: DynamicNodeType, edgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-node-provider.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        DynamicNodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    Creates an action to process a clicked node, for dynamic node types\nwith a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:199\n\n                \n            \n\n\n            \n                \n                    Process a clicked node, for dynamic node types with an \"onclick\" trigger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected nodeType: DynamicNodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicNodeType.html":{"url":"interfaces/DynamicNodeType.html","title":"interface - DynamicNodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicNodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the NodeType interface with additional properties specific\nto dynamic nodes, in particular the getQuery() function that returns a\nquery given a node\n\n            \n\n            \n                Extends\n            \n            \n                        NodeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain a record for this node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected nodeType: DynamicNodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edge.html":{"url":"interfaces/Edge.html","title":"interface - Edge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Edge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a property representing the strength of an edge, which scales the count of adjacent nodes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A field value may be provided to filter search based on the edge field type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         EdgeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EdgeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EdgeType.html":{"url":"interfaces/EdgeType.html","title":"interface - EdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edgeOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            nodeTypes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edgeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edgeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeTypes:     NodeType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NodeType[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetChartDataPoint.html":{"url":"interfaces/FacetChartDataPoint.html","title":"interface - FacetChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/facet-chart/facet-chart.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ChartDataPoint\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $item:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {                 \n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetNgxChart.html":{"url":"components/FacetNgxChart.html","title":"component - FacetNgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetNgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/facet-chart/facet-chart.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-ngx-chart\n            \n\n\n\n\n            \n                templateUrl\n                ./facet-chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dataPoints\n                            \n                            \n                                options\n                            \n                            \n                                tickFormatter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                getItem\n                            \n                            \n                                getName\n                            \n                            \n                                hasFiltered\n                            \n                            \n                                isFiltered\n                            \n                            \n                                isHidden\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                aggregations\n                            \n                            \n                                chartType\n                            \n                            \n                                colors\n                            \n                            \n                                colorScheme\n                            \n                            \n                                filteredColor\n                            \n                            \n                                results\n                            \n                            \n                                selectedColor\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, intlService: IntlService, selectionService: SelectionService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        aggregations\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colors\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\"#7aa3e5\"]\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filteredColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#C3E6CB\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#7acce5\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:28\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AggregationItem | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getName\n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:91\n                \n            \n\n\n            \n                \n                    Name of the facet, used to create and retrieve selections\nthrough the facet service.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasFiltered\n                        \n                    \n                \n            \n            \n                \nhasFiltered()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:112\n                \n            \n\n\n            \n                \n                    Returns true if there is an active selection (or exclusion) from this facet\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFiltered\n                        \n                    \n                \n            \n            \n                \nisFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:251\n                \n            \n\n\n            \n                \n                    Returns true if the given AggregationItem is filtered\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHidden\n                        \n                    \n                \n            \n            \n                \nisHidden()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:230\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:204\n                \n            \n\n\n            \n                \n                    Subscribe to language changes, in order to reformat the data points.\nSubscribe to selection changes, in order to highlight selected documents.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Aggregation | undefined\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetChartDataPoint[]\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tickFormatter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:189\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:98\n                                \n                            \n                    \n                        \n                                Returns all the actions that are relevant in the current context\n\n\n                                \n                                    Returns :     Action[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {                 \n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n    \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetNgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetWrapperComponent.html":{"url":"components/FacetWrapperComponent.html","title":"component - FacetWrapperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetWrapperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/facet-wrapper.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                facet-wrapper\n            \n\n\n            \n                styles\n                \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n            \n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aggregationName\n                            \n                            \n                                field\n                            \n                            \n                                isTree\n                            \n                            \n                                name\n                            \n                            \n                                params\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agInit\n                            \n                            \n                                doesFilterPass\n                            \n                            \n                                getModel\n                            \n                            \n                                isFilterActive\n                            \n                            \n                                setModel\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    datasource\n                                \n                                \n                                    results\n                                \n                                \n                                    aggregation\n                                \n                                \n                                    appService\n                                \n                                \n                                    facetService\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        agInit\n                        \n                    \n                \n            \n            \n                \nagInit(params: IFilterParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IFilterParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doesFilterPass\n                        \n                    \n                \n            \n            \n                \ndoesFilterPass(params: IDoesFilterPassParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IDoesFilterPassParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getModel\n                        \n                    \n                \n            \n            \n                \ngetModel()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { facetActive: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFilterActive\n                        \n                    \n                \n            \n            \n                \nisFilterActive()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setModel\n                        \n                    \n                \n            \n            \n                \nsetModel(model: any)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aggregationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IFilterParams\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        datasource\n                    \n                \n\n                \n                    \n                        getdatasource()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n\n                \n                    \n                        getresults()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:39\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n\n                \n                    \n                        getaggregation()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:43\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        appService\n                    \n                \n\n                \n                    \n                        getappService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:51\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        facetService\n                    \n                \n\n                \n                    \n                        getfacetService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:55\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { IDoesFilterPassParams, IFilterParams } from \"ag-grid-community\";\nimport { Component } from \"@angular/core\";\nimport { SqDatasource } from \"./datasource\";\nimport { Aggregation, Results } from \"@sinequa/core/web-services\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { FacetService } from \"@sinequa/components/facet\";\n\n@Component({\n   selector: 'facet-wrapper',\n   template: `\n\n\n   `,\n   styles: [`\nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   `]\n})\nexport class FacetWrapperComponent {\n    params: IFilterParams;\n\n    field: string;\n    isTree: boolean;\n    aggregationName: string;\n    name: string;\n\n    get datasource(): SqDatasource {\n        return this.params.rowModel['datasource'];\n    }\n\n    get results(): Results {\n        return this.datasource.latestResults;\n    }\n\n    get aggregation(): Aggregation | undefined {\n        return this.results.aggregations.find(a => {\n            const col = this.appService.getColumn(a.column);\n            const alias = this.appService.getColumnAlias(col);\n            return Utils.eqNC(alias, this.field);\n        });\n    }\n\n    get appService(): AppService {\n        return this.datasource.appService;\n    }\n\n    get facetService(): FacetService {\n        return this.datasource.facetService;\n    }\n    \n    agInit(params: IFilterParams): void {\n        this.params = params;\n        if(!this.params.colDef.field)\n            throw Error(\"Column definitions need at least a field\");\n        this.field = this.params.colDef.field; // Field is the alias\n        this.isTree = this.appService.isTree(this.field);\n        const agg = this.aggregation?.name;\n        if(!agg)\n            throw Error(`An aggregation needs to be defined for '${this.field}' to display a facet`);\n        this.aggregationName = agg;\n        this.name = \"grid-filter-\"+this.field;\n        console.log(\"agInit called \", this.name);\n    }\n\n    isFilterActive(): boolean {\n        return this.facetService.hasFiltered(this.name);\n    }\n\n    // Not called in infinite row model setup\n    doesFilterPass(params: IDoesFilterPassParams): boolean {\n        return true;\n    }\n\n    getModel() {\n        return this.isFilterActive()? {facetActive: true} : undefined;\n    }\n\n    setModel(model: any) {\n    }\n\n}\n\n    \n\n\n    \n            \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetWrapperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FinanceModule.html":{"url":"modules/FinanceModule.html","title":"module - FinanceModule","body":"\n                   \n\n\n\n\n    Modules\n    FinanceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FinanceModule_imports\n\n\n\ncluster_FinanceModule_declarations\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            finance/finance.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { MoneyTimelineComponent } from \"./money-timeline/money-timeline.component\";\nimport { BsHeatmapModule } from \"@sinequa/analytics/heatmap\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { MoneyCloudComponent } from \"./money-cloud/money-cloud.component\";\n\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsHeatmapModule,\n        BsActionModule\n    ],\n    declarations: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n    exports: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n})\nexport class FinanceModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FusionChartsModule.html":{"url":"modules/FusionChartsModule.html","title":"module - FusionChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    FusionChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            fusioncharts/fusioncharts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { FusionChartsModule as FCModule } from \"angular-fusioncharts\";\n\n// Import FusionCharts library and chart modules\nimport * as FusionCharts from \"fusioncharts\";\nimport * as charts from \"fusioncharts/fusioncharts.charts\";\nimport * as FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport * as CandyTheme from \"fusioncharts/themes/fusioncharts.theme.candy\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsSelectionModule } from '@sinequa/components/selection';\nimport { UtilsModule } from \"@sinequa/components/utils\";\n\nimport { FusionChart } from \"./chart/chart\";\n\nFusionCharts.options.creditLabel = false;\n// Fusion is a light theme, Candy is a dark theme\nFCModule.fcRoot(FusionCharts, charts, FusionTheme, CandyTheme);\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        FCModule\n    ],\n    declarations: [\n        FusionChart\n    ],\n    exports: [\n        FusionChart\n    ],\n})\nexport class FusionChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleMapsModule.html":{"url":"modules/GoogleMapsModule.html","title":"module - GoogleMapsModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleMapsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            googlemaps/googlemaps.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { BsSelectionModule } from '@sinequa/components/selection';\n\nimport { AgmCoreModule } from '@agm/core';\nimport { MapComponent } from './map.component';\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        BsActionModule,\n        BsFacetModule,\n        BsSelectionModule,\n        \n        AgmCoreModule,\n    ],\n    declarations: [\n        MapComponent\n    ],\n    exports: [\n        MapComponent\n    ],\n})\nexport class GoogleMapsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeatmapItem.html":{"url":"interfaces/HeatmapItem.html","title":"interface - HeatmapItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HeatmapItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    googlemaps/map.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-googlemaps\n            \n\n\n\n\n            \n                templateUrl\n                ./map.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                clearFilters\n                            \n                            \n                                    Public\n                                exprBuilder\n                            \n                            \n                                    Public\n                                facetService\n                            \n                            \n                                filterArea\n                            \n                            \n                                fitBounds\n                            \n                            \n                                geoRecords\n                            \n                            \n                                mapStyles\n                            \n                            \n                                    Optional\n                                openedWindow\n                            \n                            \n                                    Public\n                                searchService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeWindow\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onBoundsChange\n                            \n                            \n                                onMapClick\n                            \n                            \n                                onMarkerClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                latitudeField\n                            \n                            \n                                longitudeField\n                            \n                            \n                                name\n                            \n                            \n                                results\n                            \n                            \n                                style\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                recordClicked\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(searchService: SearchService, facetService: FacetService, exprBuilder: ExprBuilder)\n                    \n                \n                        \n                            \n                                Defined in googlemaps/map.component.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 300\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:23\n                            \n                        \n                \n                    \n                        Desired height of the map\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        latitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"latitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:25\n                            \n                        \n                \n                    \n                        Name of the field storing the latitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        longitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"longitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:27\n                            \n                        \n                \n                    \n                        Name of the field storing the longitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:19\n                            \n                        \n                \n                    \n                        Name of the map used as an identifier for the facet, to associate its selects\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:21\n                            \n                        \n                \n                    \n                        Results list displayed on the map when possible\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:29\n                            \n                        \n                \n                    \n                        Map style (light or dark are supported)\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        recordClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:31\n                            \n                        \n                \n                    \n                        Event emitter that emits a Record object when the marker of that record is clicked by the user\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeWindow\n                        \n                    \n                \n            \n            \n                \ncloseWindow()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBoundsChange\n                        \n                    \n                \n            \n            \n                \nonBoundsChange(bounds: google.maps.LatLngBounds)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                            google.maps.LatLngBounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMapClick\n                        \n                    \n                \n            \n            \n                \nonMapClick(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMarkerClick\n                        \n                    \n                \n            \n            \n                \nonMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    record\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    infoWindow\n                                    \n                                            AgmInfoWindow\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.LatLngBounds\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:43\n                        \n                    \n\n            \n                \n                    Bounds of the map updated on initialization and user interaction\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFilters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exprBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ExprBuilder\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        facetService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterArea\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fitBounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.LatLngBoundsLiteral | boolean\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:36\n                        \n                    \n\n            \n                \n                    Mode for fitting the map to its contained markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoRecords\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:34\n                        \n                    \n\n            \n                \n                    Filtered list of records, keeping only the geolocated records\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapStyles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:48\n                        \n                    \n\n            \n                \n                    Styles of the map if any\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        openedWindow\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AgmInfoWindow\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:45\n                        \n                    \n\n            \n                \n                    Currently opened info window, which can be closed when another window is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        searchService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SearchService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:51\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in googlemaps/map.component.ts:91\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { AgmInfoWindow } from '@agm/core'\n;\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { ExprBuilder } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\n\nimport { darkStyle } from \"./dark-style\";\n\n@Component({\n    selector: \"sq-googlemaps\",\n    templateUrl: \"./map.component.html\"\n})\nexport class MapComponent extends AbstractFacet implements OnChanges {\n    /** Name of the map used as an identifier for the facet, to associate its selects */\n    @Input() name = \"map\";\n    /** Results list displayed on the map when possible */\n    @Input() results: Results;\n    /** Desired height of the map */\n    @Input() height = 300;\n    /** Name of the field storing the latitude as a decimal number */\n    @Input() latitudeField = \"latitude\";\n    /** Name of the field storing the longitude as a decimal number */\n    @Input() longitudeField = \"longitude\";\n    /** Map style (light or dark are supported) */\n    @Input() style = \"light\";\n    /** Event emitter that emits a Record object when the marker of that record is clicked by the user */\n    @Output() recordClicked = new EventEmitter();\n\n    /** Filtered list of records, keeping only the geolocated records */\n    geoRecords: Record[] = [];\n    /** Mode for fitting the map to its contained markers */\n    fitBounds: google.maps.LatLngBoundsLiteral | boolean;\n\n    // Actions for selecting an area on the map, and clearing that selection\n    filterArea: Action;\n    clearFilters: Action;\n\n    /** Bounds of the map updated on initialization and user interaction */\n    bounds: google.maps.LatLngBounds;\n    /** Currently opened info window, which can be closed when another window is closed */\n    openedWindow?: AgmInfoWindow;\n\n    /** Styles of the map if any */\n    mapStyles: any;\n\n    constructor(\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public exprBuilder: ExprBuilder\n    ){\n        super();\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        // Filter the currently selected area\n        this.filterArea = new Action({\n            icon: \"fas fa-search\",\n            title: \"msg#googlemaps.filterArea\",\n            action: () => {\n                if(this.facetService.hasFiltered(this.name)) {\n                    this.searchService.query.removeSelect(this.name);\n                }\n                const minLat = this.bounds.getSouthWest().lat();\n                const maxLat = this.bounds.getNorthEast().lat();\n                const minLng = this.bounds.getSouthWest().lng();\n                const maxLng = this.bounds.getNorthEast().lng();\n                const expr = this.exprBuilder.concatAndExpr([\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '>=', minLat),\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '=', minLng),\n                    this.exprBuilder.makeNumericalExpr(this.longitudeField, ' !!r[this.latitudeField]);\n            }\n            this.closeWindow();\n        }\n\n        if(changes['style']) {\n            this.mapStyles = this.style === \"dark\"? darkStyle : undefined;\n        }\n\n        // If no document, the view shows a default latitude / longitude\n        if(this.geoRecords.length === 0) {\n            this.fitBounds = false;\n        }\n        // If multiple documents, the view is centered around them, at the right scale\n        else if(this.geoRecords.length > 1) {\n            this.fitBounds = true;\n        }\n        else {\n            // Custom bounds centered around the single geo record in the results\n            this.fitBounds = {\n                east: this.geoRecords[0][this.longitudeField] + 0.02,\n                north: this.geoRecords[0][this.latitudeField] + 0.02,\n                south: this.geoRecords[0][this.latitudeField] - 0.02,\n                west: this.geoRecords[0][this.longitudeField] - 0.02\n            };\n        }\n    }\n\n    closeWindow() {\n        if(this.openedWindow) {\n            this.openedWindow.close();\n            this.openedWindow = undefined;\n        }\n    }\n\n\n    // Manage map interactions (avoid multiple opened info windows)\n\n    onMapClick(event: Event) {\n        this.closeWindow();\n    }\n\n    onMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow) {\n        this.closeWindow();\n        this.openedWindow = infoWindow;\n        this.recordClicked.next(record);\n    }\n\n    onBoundsChange(bounds: google.maps.LatLngBounds) {\n        this.bounds = bounds;\n    }\n}\n    \n\n    \n        \n\n    \n\n        \n            {{record['title']}}\n        \n\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{record[\\'title\\']}}            '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyCloudDatum.html":{"url":"interfaces/MoneyCloudDatum.html","title":"interface - MoneyCloudDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyCloudDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-cloud/money-cloud.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { ExprBuilder, FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { AggregationItem, Results } from \"@sinequa/core/web-services\";\n\nimport * as d3 from 'd3';\n\n\nexport interface MoneyCloudDatum {\n    value: number;\n    currency: string;\n    count: number;\n    category: string;\n    i: number;\n    rawvalue: string;\n}\n\n@Component({\n    selector: 'sq-money-cloud',\n    templateUrl: './money-cloud.component.html',\n    styleUrls: ['./money-cloud.component.scss']\n})\nexport class MoneyCloudComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-cloud\"\n\n    @Input() results: Results;\n    /** The \"money-value\" column stores an entity in the form \"(KEYWORD)#( )\", for example \"(DEAL)#(USD 69420)\" */\n    @Input() moneyValueColumn = \"value_amount\";\n    /** The \"Money-Value\" aggregation must be computed over the money-value column */\n    @Input() moneyAggregation = \"ValueAmounts\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    data: MoneyCloudDatum[];\n    categories: string[];\n\n    selectedItems: Set;\n\n    // Scales\n    x: d3.ScaleBand; // Read/Write\n    x_inner: d3.ScaleLinear; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic; // Radius (function of counts)\n    c: d3.ScaleOrdinal; // Color\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipItem: MoneyCloudDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public selectionService: SelectionService,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n\n        this.selectionService.events.subscribe(e => this.updateSelectedItems());\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleBand()\n                .range([0, this.innerWidth]);\n                \n            this.x_inner = d3.scaleLinear();\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    updateData() {\n\n        this.updateSelectedItems();\n        \n        const counts = new Map();\n\n        this.data = [];\n        // Extract number of occurrences from the aggregation\n        this.results.aggregations\n            ?.find(a => a.name === this.moneyAggregation)\n            ?.items\n            ?.forEach(item => {\n                const datum = this.parseEntity(item, counts);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            });\n\n        this.data.forEach(d => d.i = (d.i-0.5) / counts.get(d.category)!); // Normalize i between 0 and 1\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money-value\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (item: AggregationItem, counts: Map): MoneyCloudDatum | undefined => {\n        const rawvalue = item.value as string;\n        const [category, amount] = item.display!.substr(1, item.display!.length-2).split(\")#(\");\n        const [currency, valuestr] = amount.split(\" \");\n        const value = parseFloat(valuestr);\n        // Check the data is valid\n        if(isNaN(value) || value (this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(this.data.map(d => d.category));\n            this.x_inner\n                .domain([0, 1])\n                .range([0, this.x.bandwidth()]);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.currency));\n\n            this.categories = this.x.domain();\n\n        }\n\n    }\n\n    public updateSelectedItems() {\n        this.selectedItems = new Set();\n        this.selectionService.getSelectedItems().forEach(r => {\n            r[this.moneyValueColumn]?.forEach((item: ValueItem) => {\n                this.selectedItems.add(item.value as string);\n            });\n        });\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickSizeInner(-this.innerWidth)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        this.tooltipItem = undefined;\n    }\n\n    filterDatum(datum: MoneyCloudDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyValueColumn, datum.rawvalue)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    onMouseEnterDatum(datum: MoneyCloudDatum) {\n\n        let x = this.x(datum.category);\n        const x_inner = this.x_inner(datum.i);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(Utils.isUndefined(x) || Utils.isUndefined(x_inner) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        this.tooltipItem = datum;\n\n        x += x_inner;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyDatum.html":{"url":"interfaces/MoneyDatum.html","title":"interface - MoneyDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-timeline/money-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            record\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ExprBuilder } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Results, Record } from \"@sinequa/core/web-services\";\nimport { FormatService } from \"@sinequa/core/app-utils\";\n\nimport * as d3 from 'd3';\n\nexport interface MoneyDatum {\n    value: number;\n    currency: string;\n    count: number;\n    date: Date;\n    rawvalue: string;\n    record: Record;\n}\n\n@Component({\n    selector: 'sq-money-timeline',\n    templateUrl: './money-timeline.component.html',\n    styleUrls: ['./money-timeline.component.scss']\n})\nexport class MoneyTimelineComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-timeline\"\n\n    @Input() results: Results;\n    /** The \"money\" column stores an entity in the form \" \", for example \"USD 69420\" */\n    @Input() moneyColumn = \"money\";\n    /** The \"Money\" aggregation must be computed over the money column */\n    @Input() moneyAggregation = \"Money\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    /** Displays a tooltip showing the current date */\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() recordClicked = new EventEmitter();\n\n    data: MoneyDatum[];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic;\n    c: d3.ScaleOrdinal;\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipX: number | undefined;\n    tooltipItem: MoneyDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Recomputes the data to display and update the chart's primitives\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    /**\n     * Computes the data displayed in the chart in function of the raw data provided as input\n     */\n    updateData() {\n        \n        // Extract number of occurrences from the aggregation\n        const counts = new Map();\n        this.results.aggregations\n            ?.find(a => Utils.eqNC(a.name, this.moneyAggregation))\n            ?.items\n            ?.forEach(item => counts.set(item.value.toString(), item.count));\n\n        this.data = [];\n        this.results.records?.forEach(record =>\n            record?.[this.moneyColumn]?.forEach(money => {\n                const datum = this.parseEntity(money.value, record, counts.get(money.value) || 1);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            })\n        );\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (rawvalue: string, record: Record, count): MoneyDatum | undefined => {\n        const val = rawvalue.split(\" \"); // Split \"USD 1000\"\n        // Check the data is valid\n        if(!record.modified || isNaN(val[1] as any) || parseFloat(val[1]) (this.data, d => d.date);\n            const yExtent = d3.extent(this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!xExtent[0] || !xExtent[1] || !yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(xExtent);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.record.id));\n        }\n\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x)\n            .ticks(5);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.overlay.nativeElement)[0];\n        }\n        this.tooltipItem = undefined;\n    }\n\n    /**\n     * Notify parent component that a record was clicked\n     * @param datum\n     */\n    onRecordClicked(datum: MoneyDatum) {\n        this.recordClicked.next(datum.record);\n    }\n\n    /**\n     * Filter the search results with the clicked amount of money\n     * @param datum \n     */\n    filterDatum(datum: MoneyDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyColumn, datum.rawvalue, `${datum.currency} ${this.formatService.moneyFormatter(datum.value)}`)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined;\n        }\n    }\n\n    /**\n     * Compute the tooltip position when an amount of money is hovered\n     * @param datum \n     */\n    onMouseEnterDatum(datum: MoneyDatum) {\n\n        const x = this.x(datum.date);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(!this.showTooltip || Utils.isUndefined(x) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        this.tooltipItem = datum;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkContext.html":{"url":"interfaces/NetworkContext.html","title":"interface - NetworkContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            appService\n                                        \n                                \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            exprBuilder\n                                        \n                                \n                                \n                                        \n                                            intlService\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            networkService\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            searchService\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        select\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(node?: Node, edge?: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:128\n                \n            \n\n\n            \n                \n                    Interactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appService:     AppService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AppService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exprBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exprBuilder:     ExprBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ExprBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intlService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intlService:     IntlService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IntlService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of this network, for use in selections\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        networkService:     VisNetworkService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     VisNetworkService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis.js data structures\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        searchService:     SearchService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SearchService\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Useful services\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NetworkDataset.html":{"url":"classes/NetworkDataset.html","title":"class - NetworkDataset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NetworkDataset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addEdges\n                            \n                            \n                                    Public\n                                addNodes\n                            \n                            \n                                    Public\n                                cleanRemoveNode\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getAdjacentEdges\n                            \n                            \n                                    Public\n                                getConnectedNodes\n                            \n                            \n                                    Public\n                                getEdge\n                            \n                            \n                                    Public\n                                getEdgeIds\n                            \n                            \n                                    Public\n                                getEdges\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                getNodeIds\n                            \n                            \n                                    Public\n                                getNodes\n                            \n                            \n                                    Public\n                                getVisibleEdges\n                            \n                            \n                                    Public\n                                getVisibleNodes\n                            \n                            \n                                    Public\n                                hasEdge\n                            \n                            \n                                    Public\n                                hasNode\n                            \n                            \n                                    Public\n                                merge\n                            \n                            \n                                    Public\n                                removeEdges\n                            \n                            \n                                updateDatasets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEdges(edges: Edge | Edge[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:203\n                \n            \n\n\n            \n                \n                    Add one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edge | Edge[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    addNodes(nodes: Node | Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:198\n                \n            \n\n\n            \n                \n                    Add one or multiple nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node | Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        cleanRemoveNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:218\n                \n            \n\n\n            \n                \n                    Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keepDanglingNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:192\n                \n            \n\n\n            \n                \n                    Clears this dataset\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAdjacentEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdjacentEdges(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:230\n                \n            \n\n\n            \n                \n                    Get the edges adjacent to a node (O(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getConnectedNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectedNodes(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:235\n                \n            \n\n\n            \n                \n                    Get the nodes connected to a node via a single node (0(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:157\n                \n            \n\n\n            \n                \n                    Returns the edge with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdgeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdgeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:187\n                \n            \n\n\n            \n                \n                    Get the list of edge ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:167\n                \n            \n\n\n            \n                \n                    Get the list of edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:152\n                \n            \n\n\n            \n                \n                    Returns the node with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:182\n                \n            \n\n\n            \n                \n                    Get the list of node ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:162\n                \n            \n\n\n            \n                \n                    Get the list of nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:177\n                \n            \n\n\n            \n                \n                    Get the list of visible edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:172\n                \n            \n\n\n            \n                \n                    Get the list of visible nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:147\n                \n            \n\n\n            \n                \n                    Returns whether this edge exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:142\n                \n            \n\n\n            \n                \n                    Returns whether this node exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        merge\n                        \n                    \n                \n            \n            \n                \n                    \n                    merge(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:251\n                \n            \n\n\n            \n                \n                    Merge this dataset with another one.\nWhen duplicates nodes or edges are found:\n\nThe existing item is kept and updated\nTheir 'count' properties are added\nTheir 'visible' properties are ORed\nTheir nodeOptions and edgeOptions are updated\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkDataset\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEdges(ids: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:213\n                \n            \n\n\n            \n                \n                    Remove one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDatasets\n                        \n                    \n                \n            \n            \n                \nupdateDatasets(nodes: DataSet, edges: DataSet)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:318\n                \n            \n\n\n            \n                \n                    Transfer nodes and edges to the Vis nodes and edges DataSets\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NetworkModule.html":{"url":"modules/NetworkModule.html","title":"module - NetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    NetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            network/network.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n\nimport { IntlModule } from \"@sinequa/core/intl\";\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\n\nimport { VisModule } from 'ngx-vis';\nimport { NetworkComponent } from \"./network.component\";\nimport { BsNodeInfoCard } from \"./node-info-card.component\";\nimport { BsEdgeInfoCard } from \"./edge-info-card.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n\n        IntlModule,\n        UtilsModule,\n        CollapseModule,\n        BsActionModule,\n        BsFacetModule,\n        \n        VisModule\n    ],\n    declarations: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n    exports: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n})\nexport class NetworkModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkProvider.html":{"url":"interfaces/NetworkProvider.html","title":"interface - NetworkProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            dataset\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getData\n                                    \n                                \n                                \n                                    \n                                        getEdgeActions\n                                    \n                                \n                                \n                                    \n                                        getNodeActions\n                                    \n                                \n                                \n                                    \n                                        getProvider\n                                    \n                                \n                                \n                                    \n                                        getProviderActions\n                                    \n                                \n                                \n                                    \n                                        onDatasetsMerged\n                                    \n                                \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                                \n                                    \n                                        onEdgeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodesInserted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:88\n                \n            \n\n\n            \n                \n                    Asynchronously provide data via it's provider Subject\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:109\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given edge, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:106\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given node, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:85\n                \n            \n\n\n            \n                \n                    Returns the Subject of this provider\n\n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:103\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for this provider.\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:91\n                \n            \n\n\n            \n                \n                    Called after the datasets provided by all providers have been merged into a single dataset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:112\n                \n            \n\n\n            \n                \n                    Called when the providers are discarded. Can be use to cancel subscriptions\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:100\n                \n            \n\n\n            \n                \n                    Called when ANY edge is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:97\n                \n            \n\n\n            \n                \n                    Called when ANY node is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:94\n                \n            \n\n\n            \n                \n                    Called after the dataset is filtered and passed to Vis for rendering\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Context (wrapper for general data about the network and services)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataset:         NetworkDataset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkDataset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dataset of this provider\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Readable name of this provider\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxChart.html":{"url":"components/NgxChart.html","title":"component - NgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/chart/chart.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n                    DoCheck\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-ngx-chart\n            \n\n            \n                styleUrls\n                ./chart.scss\n            \n\n\n\n            \n                templateUrl\n                ./chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attached\n                            \n                            \n                                chart\n                            \n                            \n                                localeChange\n                            \n                            \n                                select\n                            \n                            \n                                tooltipTemplate\n                            \n                            \n                                wrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                chartComponent\n                            \n                            \n                                ngDoCheck\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateChart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                item-click\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    chartType\n                                \n                                \n                                    colorScheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(intlService: IntlService, uiService: UIService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ChartDataPoint[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:28\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        item-click\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:30\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        chartComponent\n                        \n                    \n                \n            \n            \n                \nchartComponent(type: string)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngDoCheck\n                        \n                    \n                \n            \n            \n                \nngDoCheck()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateChart\n                        \n                    \n                \n            \n            \n                \nupdateChart()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BaseChartComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        localeChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('tooltipTemplate', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('wrapper', {static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n\n                \n                    \n                        getchartType()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n\n                \n                    \n                        getcolorScheme()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:75\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n    \n        \n    \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n    \n    \n        {{model.name}}\n        {{model.value | sqValue}}\n    \n\n    \n\n    \n                \n                    ./chart.scss\n                \n                .sq-chart-wrapper {\n    visibility: hidden;\n    width: 100%;\n    height: 16rem;\n    overflow: hidden;\n    &.sq-attached {\n        visibility: visible;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {{model.name}}        {{model.value | sqValue}}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxChartsModule.html":{"url":"modules/NgxChartsModule.html","title":"module - NgxChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ngx-charts/ngx-charts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n    AreaChartModule,\n    BarChartModule,\n    PieChartModule,\n    TreeMapModule,\n    NumberCardModule,\n    GaugeModule } from \"@swimlane/ngx-charts\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsSelectionModule } from \"@sinequa/components/selection\";\n\nimport { NgxChart } from \"./chart/chart\";\nimport { FacetNgxChart } from \"./facet-chart/facet-chart\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        \n        // ngx-charts modules\n        AreaChartModule,\n        BarChartModule,\n        PieChartModule,\n        TreeMapModule,\n        NumberCardModule,\n        GaugeModule\n    ],\n    declarations: [\n        NgxChart, FacetNgxChart\n    ],\n    exports: [\n        NgxChart, FacetNgxChart\n    ],\n})\nexport class NgxChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precedence\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a mutable property used to scale the node size in function of the size of adjacent edges\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precedence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precedence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         NodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeData.html":{"url":"interfaces/NodeData.html","title":"interface - NodeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/node-info-card.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeType.html":{"url":"interfaces/NodeType.html","title":"interface - NodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nodeOptions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RecordNode.html":{"url":"interfaces/RecordNode.html","title":"interface - RecordNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RecordNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Node interface, to include the Record object\nfrom which the node is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Node\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecordsProvider.html":{"url":"classes/RecordsProvider.html","title":"class - RecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A network provider generating nodes from records.\nAdditionally, the provider can generate the \"structural edges\" of that\nnode. Structural edges are edges between a record and the fields of\nthat record (eg. the wikipedia page of Microsoft is a record that probably\ncontains the fields \"Microsoft\" and \"Bill Gates\").\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], records: Record[], hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/records-provider.ts:74\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        records\n                                                  \n                                                        \n                                                                    Record[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:77\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultTimeline.html":{"url":"components/ResultTimeline.html","title":"component - ResultTimeline","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ResultTimeline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    vis-timeline/result-timeline/result-timeline.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-result-timeline\n            \n\n\n\n\n            \n                templateUrl\n                ./result-timeline.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                initDone\n                            \n                            \n                                items\n                            \n                            \n                                    Public\n                                visTimelineService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                timelineInitialized\n                            \n                            \n                                updateTimeline\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dates\n                            \n                            \n                                events\n                            \n                            \n                                max_dates\n                            \n                            \n                                max_year\n                            \n                            \n                                min_dates\n                            \n                            \n                                min_year\n                            \n                            \n                                name\n                            \n                            \n                                options\n                            \n                            \n                                record\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(visTimelineService: VisTimelineService)\n                    \n                \n                        \n                            \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        visTimelineService\n                                                  \n                                                        \n                                                                    VisTimelineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dates\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10000\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"vis-timeline\"\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : defaultOptions\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        record\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timelineInitialized\n                        \n                    \n                \n            \n            \n                \ntimelineInitialized()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTimeline\n                        \n                    \n                \n            \n            \n                \nupdateTimeline()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        initDone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        visTimelineService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VisTimelineService\n\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Record, EntityItem} from \"@sinequa/core/web-services\";\nimport {TimelineOptions, DataItem, VisTimelineService} from \"ngx-vis\";\n\nimport moment from \"moment\";\n\nexport const defaultOptions : TimelineOptions = {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n};\n\n@Component({\n    selector: \"sq-result-timeline\",\n    templateUrl: \"./result-timeline.html\"\n})\nexport class ResultTimeline implements OnChanges {\n    @Input() name = \"vis-timeline\";\n    @Input() record: Record;\n    @Input() dates: EntityItem[];\n    @Input() events: EntityItem[];\n    @Input() min_year: number = 0;\n    @Input() max_year: number = 10000;\n    @Input() min_dates: number = 1;\n    @Input() max_dates: number = 100;\n    @Input() options: TimelineOptions = defaultOptions;\n\n    initDone = false;\n    items : DataItem[] = [];\n\n    constructor(public visTimelineService: VisTimelineService){\n    }\n\n    ngOnChanges(changes:SimpleChanges) {\n        if(!!changes['record'] || !!changes['dates'] || !!changes['events']){\n            this.updateTimeline();\n        }\n    }\n\n    updateTimeline(){\n\n        this.items.splice(0);\n\n        const dates = this.dates || [];\n        const events = this.events || [];\n\n        const all_ids: string[] = [];\n        const all_dates: string[] = [];\n\n        events.forEach(event => {\n            const data_date = event.display;\n            const cooc = data_date.substring(1,data_date.length-1).split(\")#(\");\n            const date = new Date(cooc[1]);\n            //console.log(\"cooc1:\",data_date[i+2]);\n            //const pos = event.locations.split(\",\")[0];\n            //console.log(cooc);\n            const year = date.getFullYear();\n            //console.log(year);\n            //console.log(regdate.test(date) );\n            //console.log( year  1950);\n            const id = this.record.id + \"#\" + data_date;\n            if(year  this.min_year && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: cooc[0], start: date});\n                all_dates.push(cooc[1]);\n                all_ids.push(id);\n            }\n        });\n\n        dates.forEach(dateobj => {\n            const date: Date = moment(dateobj.display).toDate();\n            //console.log(\"date:\",data_date[i+1]);\n            //const pos = dateobj.locations.split(\",\")[0];\n            const year = date.getFullYear();\n            const id = this.record.id + \"#\" + dateobj.display;\n            if(year  this.min_year && all_dates.indexOf(dateobj.display)===-1 && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: moment(date).format('ll'), start: date});\n                all_ids.push(id);\n            }\n        });\n\n        if(this.items.length >= this.min_dates){\n\n            if(this.items.length> this.max_dates )\n                this.items.splice(0, this.max_dates);\n\n            //console.log(data);\n\n            //try{\n            //    this.timeline.removeCustomTime(\"date-modified\");\n            //}catch{\n                // No date-modified\n            //}\n\n            //if(Utils.isString(this.record.modified) && this.record.modified.length>=10){\n            //    this.timeline.addCustomTime(this.record.modified.substring(0,10), \"date-modified\");\n            //}\n\n            /*this.timeline.on('select', properties => {\n                //console.log('selected items: ' + properties.items);\n                //console.log('event: ', properties.event);\n                //console.log(properties);\n                if(properties.items.length>0){\n                    //var id = properties.items[0].split(\"#\");\n                    console.log(this.items.get(properties.items[0]));\n                    //var date = items._data[properties.items[0]].start;\n                    //var url = \"search?action=select&resultid=\"+RESULTID+\"&item=%22Tag%3B\"+settings.date_column+\"%3B\"+date+\"%3B\"+date+\"%22\"\n                    //popup_extract(id[0], parseInt(id[1]), properties.event.target,url);\n                }\n            });*/\n\n        }else{\n            console.log(\"no timeline for this doc...\");\n        }\n        if(this.initDone) {\n            this.visTimelineService.setItems(this.name, this.items);\n        }\n    }\n\n    timelineInitialized() {\n        this.initDone = true;\n    }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResultTimeline'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectedRecordsProvider.html":{"url":"classes/SelectedRecordsProvider.html","title":"class - SelectedRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectedRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/selected-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider, where records are not provided\ndirectly, but instead are taken from the SelectionService and refreshed\nevery time a node is selected or unselected.\n⚠️ Note that the SelectionService must be configured to store records instead\nof just records ids!\nSee http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                selectionSubscription\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                onDestroy\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], selectionService: SelectionService, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/selected-records-provider.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Selected documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/selected-records-provider.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:42\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subscription } from 'rxjs';\nimport { Record } from '@sinequa/core/web-services';\nimport { SelectionService, SelectionEventType } from '@sinequa/components/selection';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of the RecordsProvider, where records are not provided\n * directly, but instead are taken from the SelectionService and refreshed\n * every time a node is selected or unselected.\n * ⚠️ Note that the SelectionService must be configured to store records instead\n * of just records ids!\n * See http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n */\nexport class SelectedRecordsProvider extends RecordsProvider {\n\n    // Subscription to the SelectionService, allowing to refresh the list of records\n    selectionSubscription: Subscription;\n\n    constructor(\n        public name = \"Selected documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected selectionService: SelectionService,\n        protected hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, selectionService.getSelectedItems() as Record[], hideRecordNode);\n\n        this.selectionSubscription = selectionService.events.subscribe(event => {\n            if(event.type === SelectionEventType.SELECT || SelectionEventType.UNSELECT) {\n                const records = selectionService.getSelectedItems() as Record[];\n                this.updateDataset(records);\n                this.provider.next(this.dataset);\n            }\n        });\n    }\n\n\n    // NetworkProvider interface\n\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.updateDataset(this.selectionService.getSelectedItems() as Record[]);\n        this.provider.next(this.dataset);\n    }\n    \n    onDestroy() {\n        this.selectionSubscription?.unsubscribe();\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuralEdgeType.html":{"url":"interfaces/StructuralEdgeType.html","title":"interface - StructuralEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuralEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the EdgeType interface to include properties specific to\nstructural edges (edge between a record and its metadata).\nAbout trigger/display: At the moment, the Record provider always adds ALL nodes and edges\nto the dataset, but potentially with a visibility set to false. Some of the settings are\nnot compatible with each other, and some take precedence over the others:\n\ndisplay=existingnodes takes precedence over other settings, as it is implemented as\na post-processing of the dataset (in onDatasetsMerged)\ntrigger=onclick or manual take precedence over the other settings, as they set the\nvisibility to false by false, until the user performs an action\ntrigger=oninsert is compatible with the other display settings\n\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of values displayed and allows for pagination. Use 0 for unlimited values\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         StructuralDisplayType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralDisplayType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the field in the record\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function to parse metadata from a record node in a custom way\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         StructuralTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the edge should be displayed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineAggregation.html":{"url":"interfaces/TimelineAggregation.html","title":"interface - TimelineAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineCombinedAggregations.html":{"url":"interfaces/TimelineCombinedAggregations.html","title":"interface - TimelineCombinedAggregations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineCombinedAggregations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            current\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                        \n                                            maxNMonths\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregations:         TimelineAggregation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        current\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        current:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxNMonths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxNMonths:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineDate.html":{"url":"interfaces/TimelineDate.html","title":"interface - TimelineDate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEvent.html":{"url":"interfaces/TimelineEvent.html","title":"interface - TimelineEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            record\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeOpened\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeOpened\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeOpened:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventAggregation.html":{"url":"interfaces/TimelineEventAggregation.html","title":"interface - TimelineEventAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            getDate\n                                        \n                                \n                                \n                                        \n                                            getDisplay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDate:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDisplay:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventType.html":{"url":"interfaces/TimelineEventType.html","title":"interface - TimelineEventType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline-legend.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimelineLegendComponent.html":{"url":"components/TimelineLegendComponent.html","title":"component - TimelineLegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TimelineLegendComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/timeline-legend.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-timeline-legend\n            \n\n\n            \n                styles\n                \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n            \n\n            \n                template\n                \n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                events\n                            \n                            \n                                legendStyles\n                            \n                            \n                                orientation\n                            \n                            \n                                yOffset\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:54\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     TimelineEventType[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        legendStyles\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"row\" | \"column\"\n\n                    \n                \n                \n                    \n                        Default value : \"row\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        yOffset\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:57\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n    \n            \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ timeline.name }}                                            {{ event.name }}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimelineLegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineRecords.html":{"url":"interfaces/TimelineRecords.html","title":"interface - TimelineRecords","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineRecords\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineSeries.html":{"url":"interfaces/TimelineSeries.html","title":"interface - TimelineSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineSeries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                        \n                                            dates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dates:         TimelineDate[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineDate[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VisEvent.html":{"url":"interfaces/VisEvent.html","title":"interface - VisEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VisEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Structure of the events emitted by the Vis.js network\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            pointer\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pointer:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, ContentChild, TemplateRef } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nimport { Subscription, combineLatest } from 'rxjs';\n\nimport { Results } from '@sinequa/core/web-services';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { UserPreferences } from '@sinequa/components/user-settings';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { Options, VisNetworkService } from 'ngx-vis';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\n\nimport { Node, Edge, NetworkDataset, NetworkProvider, NetworkContext } from './network-models';\nimport { IntlService } from '@sinequa/core/intl';\n\n/**\n * Default options of the Vis.js network.\n * See: https://visjs.github.io/vis-network/docs/network/\n */\nexport const defaultOptions: Options = {\n    height: '500px'\n};\n\n/**\n * Structure of the events emitted by the Vis.js network\n */\nexport interface VisEvent {\n    nodes: string[];\n    edges: string[];\n    event: any;\n    items: any[];\n    pointer: any;\n}\n\n@Component({\n    selector: 'sq-network',\n    templateUrl: './network.component.html'\n})\nexport class NetworkComponent extends AbstractFacet implements OnChanges, OnDestroy {\n\n    /** Name of the network - should be unique within the app */\n    @Input() name = \"Network\";\n\n    /** Input results - used to produce a OnChange event when  */\n    @Input() results: Results;\n\n    @Input() providers: NetworkProvider[];\n\n    /** General Vis options passed to the network (https://visjs.github.io/vis-network/docs/network/) */\n    @Input() options: Options = defaultOptions;\n\n    optionsPrefs: Options;\n\n    @Output() nodeClicked = new EventEmitter();\n    @Output() edgeClicked = new EventEmitter();\n\n    // Settings form\n    form: FormGroup;\n\n    // State\n    _networkInitialized: boolean;\n    _selectedNode?: Node;\n    _selectedEdge?: Edge;\n\n    // Actions\n    _actions: Action[] = [];\n    refreshAction: Action;\n    clearFilters: Action;\n\n    // Info cards\n    @ContentChild(\"nodeTpl\", {static: false}) nodeTpl: TemplateRef;\n    @ContentChild(\"edgeTpl\", {static: false}) edgeTpl: TemplateRef;\n\n    readonly context: NetworkContext;\n\n    providersSubscription: Subscription;\n\n    constructor(\n        public networkService: VisNetworkService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public intlService: IntlService,\n        public formBuilder: FormBuilder,\n        public prefs: UserPreferences,\n        public exprBuilder: ExprBuilder\n    ) {\n        super();\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.nodeClicked.subscribe((node?: Node) => {\n            this.providers.forEach(p => p.onNodeClicked(node));\n        });\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.edgeClicked.subscribe((edge?: Edge) => {\n            this.providers.forEach(p => p.onEdgeClicked(edge));\n        });\n\n        // Refresh the network\n        this.refreshAction = new Action({\n            icon: \"fas fa-sync-alt\",\n            title: \"msg#network.actions.refresh\",\n            action: () => {\n                this.updateData();\n                this.updateActions();\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        this.context = {\n            name: this.name,\n            nodes: new DataSet(),\n            edges: new DataSet(),\n            searchService: searchService,\n            appService: appService,\n            networkService: networkService,\n            intlService: intlService,\n            exprBuilder: exprBuilder,\n            select: (node?: Node, edge?: Edge) => this.select(node, edge),\n        };\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(changes['results'] || changes['providers']) {\n            // Update the context\n            this.context.name = this.name;\n\n            // Update selections\n            this.selectEdge();\n            this.selectNode();\n\n            // Update options from the preferences\n            this.updateOptions();\n\n            // Update data from the providers (async)\n            this.updateData();\n\n            // Update the actions of the facet\n            this.updateActions();\n        }\n        else if(changes['options']) {\n            this.updateOptions();\n        }\n\n    }\n\n    /**\n     * Resets the nodes and edges, create a new listener for the providers and\n     * call getData() on these providers to refresh the data\n     */\n    protected updateData() {\n\n        this.context.nodes.clear();\n        this.context.edges.clear();\n\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n\n        this.providersSubscription = combineLatest(\n            this.providers.map(p => p.getProvider())\n        ).subscribe(datasets =>\n            this.mergeDatasets(datasets.filter(d => !!d) as NetworkDataset[])\n        );\n\n        this.providers.forEach(p => p.getData(this.context));\n    }\n\n    /**\n     * Take in the datasets produced by each provider and merges them into\n     * a single one\n     * @param datasets\n     */\n    protected mergeDatasets(datasets: NetworkDataset[]) {\n        const dataset = datasets.reduce((prev, cur) => prev.merge(cur), new NetworkDataset());\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onDatasetsMerged(dataset));\n\n        // TODO: Post process the dataset somehow to adjust visibility (or other properties)\n        dataset.updateDatasets(this.context.nodes, this.context.edges);\n\n        // Fit the nodes and edges\n        if(this._networkInitialized) {\n            this.fitNetwork();\n        }\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onNodesInserted(this.context.nodes.get()));\n\n        this.updateActions();\n    }\n\n    get actions(): Action[] {\n        return this._actions;\n    }\n\n    /**\n     * Updates the actions displayed in the facet frame (_action variable).\n     * Actions may come from this component or from its providers\n     */\n    protected updateActions() {\n        this._actions = [];\n\n        // Clear the active filters\n        if(this.searchService.breadcrumbs && !!this.searchService.breadcrumbs.findSelect(this.name)) {\n            this._actions.push(this.clearFilters);\n        }\n\n        // Selected node actions\n        if(this._selectedNode) {\n            this.providers.forEach(p => {\n                const actions = p.getNodeActions(this._selectedNode!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Selected edge actions\n        if(this._selectedEdge) {\n            this.providers.forEach(p => {\n                const actions = p.getEdgeActions(this._selectedEdge!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Actions specific to each provider\n        const providersActionList = new Action({\n            icon: \"fas fa-tasks\",\n            title: \"msg#network.actions.providers\",\n            children: this.providers.map(p => new Action({\n                text: this.intlService.formatMessage(p.name),\n                title: this.intlService.formatMessage(p.name),\n                children: p.getProviderActions()\n            }))\n        });\n        this._actions.push(providersActionList);\n\n        // Action to refresh the network\n        this._actions.push(this.refreshAction);\n\n    }\n\n    /**\n     * Fit the network view (zoom and position) to its content, with a delay\n     * to avoid some elusive bugs in the Vis library\n     */\n    fitNetwork() {\n        this.networkService.fit(this.name);\n    }\n\n\n    // Event handling\n\n    /**\n     * Called from the template by ngx-vis, when the network is initialized,\n     * and the NetworkService can be used.\n     */\n    networkInitialized() {\n        this._networkInitialized = true;\n\n        // now we can use the service to register on events\n        this.networkService.on(this.name, 'click');\n\n        this.networkService.click.subscribe((eventData: any[]) => this.onNetworkClick(eventData));\n\n        this.networkService.setOptions(this.name, this.optionsPrefs);\n\n    }\n\n    /**\n     * Method called when a node or edge in the network is clicked.\n     * The method generates appropriate nodeClicked and edgeClicked events,\n     * and updates the state of _selectedEdge and _selectedNode.\n     * @param eventData\n     */\n    protected onNetworkClick(eventData: any[]) {\n        if (eventData[0] === this.name) {\n            const event = eventData[1] as VisEvent;\n\n            if(event.event.type === \"tap\") {\n\n                if(event.edges.length === 1 && event.nodes.length === 0) {\n                    this.selectEdge(this.context.edges.get(event.edges[0]) as Edge);\n                    this.selectNode();\n                }\n                else {\n                    this.selectEdge();\n                    if(event.nodes.length === 1) {\n                        this.selectNode(this.context.nodes.get(event.nodes[0]) as Node);\n                    }\n                    else {\n                        this.selectNode();\n                    }\n                }\n\n            }\n            else {\n                this.selectNode();\n                this.selectEdge();\n            }\n\n            this.updateActions();\n        }\n    }\n\n    select(node?: Node, edge?: Edge) {\n        this.selectNode(node);\n        this.selectEdge(edge);\n        this.updateActions();\n    }\n\n    selectNode(node?: Node) {\n        this._selectedNode = node;\n        this.nodeClicked.next(node);\n    }\n\n    selectEdge(edge?: Edge) {\n        this._selectedEdge = edge;\n        this.edgeClicked.next();\n    }\n\n    ngOnDestroy() {\n        this.networkService.off(this.name, 'click');\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n    }\n\n\n    // Settings\n\n    /**\n     * Sets the options values either to the user preferences (stored in user settings)\n     * or the default values.\n     */\n    updateOptions() {\n        this.optionsPrefs = Utils.copy(this.options);\n        if(!this.optionsPrefs.physics){\n            this.optionsPrefs.physics = {};\n        }\n        if(!this.optionsPrefs.physics.barnesHut){\n            this.optionsPrefs.physics.barnesHut = {};\n        }\n        this.optionsPrefs.physics.barnesHut.springLength = this.springLengthPref;\n        this.optionsPrefs.physics.barnesHut.springConstant = this.springConstantPref / 100;\n        this.optionsPrefs.physics.barnesHut.damping = this.dampingPref / 100;\n        this.optionsPrefs.physics.barnesHut.gravitationalConstant = -this.repulsionPref;\n        this.optionsPrefs.physics.barnesHut.centralGravity = this.gravityPref / 10;\n\n        if(this._networkInitialized) {\n            this.networkService.setOptions(this.name, this.optionsPrefs);\n            this.fitNetwork();\n        }\n    }\n\n    /**\n     * Method from the AbstractFacet interface called when the settings\n     * panel is opened or closed\n     * @param opened whether settings are opened or closed\n     */\n    onOpenSettings(opened: boolean){\n        if(opened) {\n            const springLengthControl = new FormControl(this.springLengthPref);\n            const springConstantControl = new FormControl(this.springConstantPref);\n            const dampingControl = new FormControl(this.dampingPref);\n            const repulsionControl = new FormControl(this.repulsionPref);\n            const gravityControl = new FormControl(this.gravityPref);\n\n            this.form = this.formBuilder.group({\n                springLength: springLengthControl,\n                springConstant: springConstantControl,\n                damping: dampingControl,\n                repulsion: repulsionControl,\n                gravity: gravityControl\n            });\n\n            this.form.valueChanges.subscribe(_ => {\n                this.prefs.set(this.name+'-spring-length', springLengthControl.value, true);\n                this.prefs.set(this.name+'-spring-constant', springConstantControl.value, true);\n                this.prefs.set(this.name+'-damping', dampingControl.value, true);\n                this.prefs.set(this.name+'-repulsion', repulsionControl.value, true);\n                this.prefs.set(this.name+'-gravity', gravityControl.value, true);\n                this.debounceSync();\n            });\n        }\n        else {\n            this.updateOptions();\n            this.updateData();\n        }\n    }\n\n    // Debounce syncing to avoid many calls to the user settings web service\n    debounceSync = Utils.debounce(() => {\n        this.prefs.sync();\n    }, 1000);\n\n    /**\n     * This method resets all the user preferences and rebuilds the settings form,\n     * so that the values displayed are up-to-date\n     */\n    setDefaults() {\n        this.prefs.delete(this.name+'-spring-length', true);\n        this.prefs.delete(this.name+'-spring-constant',true);\n        this.prefs.delete(this.name+'-damping', true);\n        this.prefs.delete(this.name+'-repulsion', true);\n        this.prefs.delete(this.name+'-gravity', true);\n        this.prefs.sync();\n        this.onOpenSettings(true);\n    }\n\n    // Accessor method for each of the settings.\n    // Return either the saved user preference or the default value.\n\n    get springLengthPref(): number {\n        return this.prefs.get(this.name+'-spring-length') || 100;\n    }\n\n    get springConstantPref(): number {\n        return this.prefs.get(this.name+'-spring-constant') || 4;\n    }\n\n    get dampingPref(): number {\n        return this.prefs.get(this.name+'-damping') || 50;\n    }\n\n    get repulsionPref(): number {\n        return this.prefs.get(this.name+'-repulsion') || 2000;\n    }\n\n    get gravityPref(): number {\n        return this.prefs.get(this.name+'-gravity') || 3;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VisTimelineModule.html":{"url":"modules/VisTimelineModule.html","title":"module - VisTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    VisTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            vis-timeline/vis-timeline-module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {VisModule} from \"ngx-vis\";\n\nimport {ResultTimeline} from \"./result-timeline/result-timeline\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n\n        IntlModule,\n\n        VisModule\n    ],\n    declarations: [\n        ResultTimeline\n    ],\n    exports: [\n        ResultTimeline\n    ]\n})\nexport class VisTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            component\n            AgGridViewComponent\n            \n                73 %\n                (45/61)\n            \n        \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            interface\n            Column\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ag-grid/data-modal.component.ts\n            \n            component\n            DataModalComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                ag-grid/datasource.ts\n            \n            class\n            SqDatasource\n            \n                42 %\n                (11/26)\n            \n        \n        \n            \n                \n                ag-grid/facet-wrapper.component.ts\n            \n            component\n            FacetWrapperComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            deGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            enGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            frGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            deFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            enFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            frFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            component\n            MoneyCloudComponent\n            \n                10 %\n                (5/46)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            interface\n            MoneyCloudDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            component\n            MoneyTimelineComponent\n            \n                28 %\n                (13/45)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            interface\n            MoneyDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            component\n            FusionChart\n            \n                23 %\n                (9/38)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            variable\n            defaultChart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/dark-style.ts\n            \n            variable\n            darkStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/map.component.ts\n            \n            component\n            MapComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            deGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            enGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            frGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/facet-heatmap.component.ts\n            \n            component\n            BsFacetHeatmapComponent\n            \n                23 %\n                (13/56)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            component\n            BsHeatmapComponent\n            \n                20 %\n                (8/39)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            interface\n            HeatmapItem\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/results-heatmap-view.ts\n            \n            component\n            BsResultsHeatmapView\n            \n                18 %\n                (11/60)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/tooltip.component.ts\n            \n            component\n            BsTooltipComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            deHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            enHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            frHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                network/edge-info-card.component.ts\n            \n            component\n            BsEdgeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            class\n            NetworkDataset\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Edge\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            EdgeType\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkContext\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkProvider\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Node\n            \n                22 %\n                (2/9)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NodeType\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            asyncRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationExpandDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            oOTBConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            recordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            selectedRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiAsyncConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynEdgeConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiMultiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            component\n            NetworkComponent\n            \n                21 %\n                (8/38)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            interface\n            VisEvent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            variable\n            defaultOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            component\n            BsNodeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            interface\n            NodeData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            class\n            AggregationProvider\n            \n                47 %\n                (10/21)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdge\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdgeType\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            function\n            isAggregationEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/async-records-provider.ts\n            \n            class\n            AsyncRecordsProvider\n            \n                45 %\n                (9/20)\n            \n        \n        \n            \n                \n                network/providers/base-provider.ts\n            \n            class\n            BaseProvider\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            class\n            DynamicEdgeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdge\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdgeType\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            function\n            isDynamicEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            class\n            DynamicNodeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            interface\n            DynamicNodeType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                network/providers/provider-factory.ts\n            \n            injectable\n            ProviderFactory\n            \n                90 %\n                (30/33)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            class\n            RecordsProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            CustomData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            RecordNode\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            StructuralEdgeType\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            function\n            isStructuralEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/selected-records-provider.ts\n            \n            class\n            SelectedRecordsProvider\n            \n                35 %\n                (7/20)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            component\n            NgxChart\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartDataPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            component\n            FacetNgxChart\n            \n                17 %\n                (4/23)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            interface\n            FacetChartDataPoint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                public-api.ts\n            \n            variable\n            sinequaComponentsModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            component\n            BsFacetDate\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            component\n            BsFacetTimelineComponent\n            \n                25 %\n                (15/60)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineCombinedAggregations\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineEventAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineRecords\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            component\n            TimelineLegendComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            interface\n            TimelineEventType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            component\n            BsTimelineComponent\n            \n                11 %\n                (7/63)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineDate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineSeries\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            component\n            ResultTimeline\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @sinequa/components : ^0.0.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @agm/core : ^3.0.0-beta.0\n        \n            @swimlane/ngx-charts : ^14.0.0\n        \n            angular-fusioncharts : ^3.0.4\n        \n            fusioncharts : ^3.15.1-sr.1\n        \n            ngx-vis : ^3.1.0\n        \n            vis-data : ^6.5.1\n        \n            vis-network : ^7.3.4\n        \n            vis-timeline : ^7.3.4\n        \n            vis-util : ^4.0.0\n        \n            d3 : ^5.15.1\n        \n            ag-grid-angular : ^25.2.0\n        \n            ag-grid-community : ^25.2.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationExpandDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            isAggregationEdgeType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            isDynamicEdgeType   (network/.../dynamic-edge-provider.ts)\n                        \n                        \n                            isStructuralEdgeType   (network/.../records-provider.ts)\n                        \n                        \n                            oOTBConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            recordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            selectedRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiAsyncConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynEdgeConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiMultiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/network-sample-configs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        asyncRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nasyncRecordsProviderDemo(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network for a list of records fetched with a query. The query\nspecifically returns 5 wikipedia documents about \"human\" and containing the text \"google\".\nThe record nodes are rendered with the wikipedia thumbnail rather than a generic icon.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cooccurrence distribution between person and company\nentities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocRecordDemo\n                        \n                    \n                \n            \n            \n                \ncoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the cooccurrence entities\ncontained in these records. The record nodes themselves are actually hidden (hideRecordNode=true).\nThe cooccurrence entities are each displayed as two nodes linked by an edge.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationExpandDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationExpandDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\nAdditionally, the company and person nodes can be expanded to other company, person\nand geo entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oOTBConfig\n                        \n                    \n                \n            \n            \n                \noOTBConfig(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected record and three cross-distributions between geo, \nperson and company entities.\nAdditionally, the metadata nodes are expandable to other metadata nodes, via cross-distributions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nrecordsProviderDemo(providerFactory: ProviderFactory, records)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    records\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A given list of records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nselectedRecordsProviderDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the selected records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\nThe network is refreshed every time documents are selected or unselected.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a triple-cooccurrence between person, companies and in-between\na \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)').\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocRecordDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the triple-cooccurrence entities\nbetween person, companies and in-between a \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)') contained\nin these records.\nThe cooccurrence entities are each displayed as two nodes linked by a typed edge (with a label showing the \"job\").\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiAsyncConfig\n                        \n                    \n                \n            \n            \n                \nwikiAsyncConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records fetched via a query asynchronously, and cross-distributions\nbetween the geo, company and person nodes.\nThe query specifically asks for 3 wikipedia documents about \"Barack Obama\".\nThe network will contain relations between the records and the metadata displayed among the aggregation\nedges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from cross distribution between Company and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when clicked on,\nby default) with a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon),\nand \"structural edges\" are added to the nodes (in this case we display the \"company\" entities\ncontained in the wikipedia pages of the person).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynEdgeConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynEdgeConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records. Additionally, when these records\nare inserted, fetches additional records from the server, which gets attached to the record\nnodes (\"dynamic edges\"). Specifically these new records are 5 wikipedia articles about humans\nand talking about whatever the original node's label is. (if the original node is \"Microsoft\",\nthe dynamic edges will likely include Bill Gates, Steve Ballmer, Paul Allen, etc.)\nThe nodes of these new records (with the \"people\" type) are displayed with the wikipedia thumbnail.\nAdditionally we display the company entities contained in these people nodes (structural edges).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiMultiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiMultiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from 3 cross distribution between Company, Geo and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when inserted) \nwith a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon).\nAdditionally, the company nodes are manually expandable to display relations with other people nodes.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/aggregation-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAggregationEdgeType\n                        \n                    \n                \n            \n            \n                \nisAggregationEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether an EdgeType is an AggregationEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AggregationEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/dynamic-edge-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDynamicEdgeType\n                        \n                    \n                \n            \n            \n                \nisDynamicEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether a given edge type is a DynamicEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DynamicEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isStructuralEdgeType\n                        \n                    \n                \n            \n            \n                \nisStructuralEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether the given edge type is a structural edge type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StructuralEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_declarations\n\n\n\ncluster_AgGridModule_exports\n\n\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    21 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    32 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AgGridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsHeatmapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FinanceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FusionChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleMapsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VisTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AggregationTriggerType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            DataModel   (ag-grid/.../data-modal.component.ts)\n                        \n                        \n                            Filter   (ag-grid/.../datasource.ts)\n                        \n                        \n                            StructuralDisplayType   (network/.../records-provider.ts)\n                        \n                        \n                            StructuralTriggerType   (network/.../records-provider.ts)\n                        \n                        \n                            TimelineData   (timeline/.../facet-timeline.component.ts)\n                        \n                        \n                            TimelineEventData   (timeline/.../facet-timeline.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/providers/aggregation-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AggregationTriggerType\n                \n            \n            \n                \n                    Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node\n\n                \n            \n            \n                \n                        \"source\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    ag-grid/data-modal.component.ts\n    \n    \n        \n            \n                \n                    \n                    DataModel\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    ag-grid/datasource.ts\n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n    \n        \n            \n                \n                    \n                    StructuralDisplayType\n                \n            \n            \n                \n                        \"all\" | \"paginate\" | \"existingnodes\" | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuralTriggerType\n                \n            \n            \n                \n                        \"oninsert\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    timeline/bootstrap/facet-timeline.component.ts\n    \n    \n        \n            \n                \n                    \n                    TimelineData\n                \n            \n            \n                \n                        TimelineSeries | TimelineAggregation | TimelineCombinedAggregations\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TimelineEventData\n                \n            \n            \n                \n                        TimelineEvent[] | TimelineRecords | TimelineEventAggregation\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            darkStyle   (googlemaps/.../dark-style.ts)\n                        \n                        \n                            defaultChart   (fusioncharts/.../chart.ts)\n                        \n                        \n                            defaultOptions   (network/.../network.component.ts)\n                        \n                        \n                            defaultOptions   (vis-timeline/.../result-timeline.ts)\n                        \n                        \n                            deFinance   (finance/.../index.ts)\n                        \n                        \n                            deGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            deGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            deHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            enFinance   (finance/.../index.ts)\n                        \n                        \n                            enGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            enGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            enHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            frFinance   (finance/.../index.ts)\n                        \n                        \n                            frGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            frGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            frHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            sinequaComponentsModule   (public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    googlemaps/dark-style.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        darkStyle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8ec3b9\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1a3646\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#64779e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.province\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.man_made\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#334e87\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.natural\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#6f9ba5\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3C7680\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#304a7d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c6675\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#255763\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#b0d5ce\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.line\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.station\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3a4762\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#222222\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e6d70\"\n        }\n      ]\n    }\n  ]\n                    \n                \n\n\n        \n    \n\n    fusioncharts/chart/chart.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultChart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"theme\": \"fusion\",\n    \"labelDisplay\": \"rotate\",\n    \"slantLabel\": \"1\"\n}\n                    \n                \n\n\n        \n    \n\n    network/network.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Options\n\n                    \n                \n                \n                    \n                        Default value : {\n    height: '500px'\n}\n                    \n                \n\n            \n                \n                    Default options of the Vis.js network.\nSee: https://visjs.github.io/vis-network/docs/network/\n\n                \n            \n\n        \n    \n\n    vis-timeline/result-timeline/result-timeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n}\n                    \n                \n\n\n        \n    \n\n    finance/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deFinance, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enFinance, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frFinance, frFacet)\n                    \n                \n\n\n        \n    \n\n    googlemaps/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGooglemaps, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGooglemaps, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGooglemaps, frFacet)\n                    \n                \n\n\n        \n    \n\n    ag-grid/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGrid)\n                    \n                \n\n\n        \n    \n\n    heatmap/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deHeatmap, deResultsView, deSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enHeatmap, enResultsView, enSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frHeatmap, frResultsView, frSearch)\n                    \n                \n\n\n        \n    \n\n    public-api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sinequaComponentsModule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : undefined\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
